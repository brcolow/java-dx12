// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$12 extends Windows_h$constants$11 {
    Windows_h$constants$12() {}
    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$LAYOUT_; }

    static final VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$VH_ = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CpuRate"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$VH() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$VH_; }

    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$LAYOUT_; }

    static final VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$VH_ = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Weight"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$VH() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$VH_; }

    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$LAYOUT_; }

    static final VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$VH_ = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinRate"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$VH() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$VH_; }

    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$LAYOUT_; }

    static final VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$VH_ = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaxRate"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$VH() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$VH_; }

    public static int JOB_OBJECT_NET_RATE_CONTROL_ENABLE() { return (int)1L; }

    public static int JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH() { return (int)2L; }

    public static int JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG() { return (int)4L; }

    public static int JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS() { return (int)7L; }

    static final MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxBandwidth"),
        C_INT.withName("ControlFlags"),
        C_BOOL.withName("DscpTag"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("JOBOBJECT_NET_RATE_CONTROL_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$LAYOUT() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$VH_ = JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxBandwidth"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$VH() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$VH_ = JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$VH() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$VH_; }

    static final MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$LAYOUT() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$LAYOUT_; }

    static final VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$VH_ = JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DscpTag"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$VH() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$VH_; }

    public static int JOB_OBJECT_IO_RATE_CONTROL_ENABLE() { return (int)1L; }

    public static int JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME() { return (int)2L; }

    public static int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL() { return (int)4L; }

    public static int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP() { return (int)8L; }

    public static int JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS() { return (int)15L; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxIops"),
        C_LONGLONG.withName("MaxBandwidth"),
        C_LONGLONG.withName("ReservationIops"),
        C_POINTER.withName("VolumeName"),
        C_INT.withName("BaseIoSize"),
        C_INT.withName("ControlFlags"),
        C_SHORT.withName("VolumeNameLength"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE");
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxBandwidth"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$VH_ = MemoryHandles.asAddressVarHandle(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeName")));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseIoSize"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("VolumeNameLength"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxIops"),
        C_LONGLONG.withName("MaxBandwidth"),
        C_LONGLONG.withName("ReservationIops"),
        C_POINTER.withName("VolumeName"),
        C_INT.withName("BaseIoSize"),
        C_INT.withName("ControlFlags"),
        C_SHORT.withName("VolumeNameLength"),
        MemoryLayout.ofPaddingBits(48),
        C_LONGLONG.withName("CriticalReservationIops"),
        C_LONGLONG.withName("ReservationBandwidth"),
        C_LONGLONG.withName("CriticalReservationBandwidth"),
        C_LONGLONG.withName("MaxTimePercent"),
        C_LONGLONG.withName("ReservationTimePercent"),
        C_LONGLONG.withName("CriticalReservationTimePercent")
    ).withName("JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2");
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxBandwidth"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$VH_ = MemoryHandles.asAddressVarHandle(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeName")));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseIoSize"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("VolumeNameLength"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationBandwidth"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationBandwidth"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxTimePercent"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationTimePercent"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationTimePercent"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxIops"),
        C_LONGLONG.withName("MaxBandwidth"),
        C_LONGLONG.withName("ReservationIops"),
        C_POINTER.withName("VolumeName"),
        C_INT.withName("BaseIoSize"),
        C_INT.withName("ControlFlags"),
        C_SHORT.withName("VolumeNameLength"),
        MemoryLayout.ofPaddingBits(48),
        C_LONGLONG.withName("CriticalReservationIops"),
        C_LONGLONG.withName("ReservationBandwidth"),
        C_LONGLONG.withName("CriticalReservationBandwidth"),
        C_LONGLONG.withName("MaxTimePercent"),
        C_LONGLONG.withName("ReservationTimePercent"),
        C_LONGLONG.withName("CriticalReservationTimePercent"),
        C_LONGLONG.withName("SoftMaxIops"),
        C_LONGLONG.withName("SoftMaxBandwidth"),
        C_LONGLONG.withName("SoftMaxTimePercent"),
        C_LONGLONG.withName("LimitExcessNotifyIops"),
        C_LONGLONG.withName("LimitExcessNotifyBandwidth"),
        C_LONGLONG.withName("LimitExcessNotifyTimePercent")
    ).withName("JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3");
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxBandwidth"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$VH_ = MemoryHandles.asAddressVarHandle(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeName")));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseIoSize"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("VolumeNameLength"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationBandwidth"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationBandwidth"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxTimePercent"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationTimePercent"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationTimePercent"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SoftMaxIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SoftMaxBandwidth"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SoftMaxTimePercent"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LimitExcessNotifyIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LimitExcessNotifyBandwidth"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LimitExcessNotifyTimePercent"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$VH_; }

    public static int JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE() { return (int)1L; }

    public static int JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE() { return (int)2L; }

    public static int JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS() { return (int)3L; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("IoCount"),
        C_LONGLONG.withName("TotalNonOverlappedQueueTime"),
        C_LONGLONG.withName("TotalNonOverlappedServiceTime"),
        C_LONGLONG.withName("TotalSize")
    ).withName("_JOBOBJECT_IO_ATTRIBUTION_STATS");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$LAYOUT_; }

    static final VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$VH_ = _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoCount"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$VH() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$VH_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$LAYOUT_; }

    static final VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$VH_ = _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalNonOverlappedQueueTime"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$VH() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$VH_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$LAYOUT_; }

    static final VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$VH_ = _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalNonOverlappedServiceTime"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$VH() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$VH_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$LAYOUT_; }

    static final VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$VH_ = _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalSize"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$VH() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$VH_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ControlFlags"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("IoCount"),
            C_LONGLONG.withName("TotalNonOverlappedQueueTime"),
            C_LONGLONG.withName("TotalNonOverlappedServiceTime"),
            C_LONGLONG.withName("TotalSize")
        ).withName("ReadStats"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("IoCount"),
            C_LONGLONG.withName("TotalNonOverlappedQueueTime"),
            C_LONGLONG.withName("TotalNonOverlappedServiceTime"),
            C_LONGLONG.withName("TotalSize")
        ).withName("WriteStats")
    ).withName("_JOBOBJECT_IO_ATTRIBUTION_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$VH_ = _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$VH() { return _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$VH_; }

    public static int JobObjectBasicAccountingInformation() { return (int)1L; }

    public static int JobObjectBasicLimitInformation() { return (int)2L; }

    public static int JobObjectBasicProcessIdList() { return (int)3L; }

    public static int JobObjectBasicUIRestrictions() { return (int)4L; }

    public static int JobObjectSecurityLimitInformation() { return (int)5L; }

    public static int JobObjectEndOfJobTimeInformation() { return (int)6L; }

    public static int JobObjectAssociateCompletionPortInformation() { return (int)7L; }

    public static int JobObjectBasicAndIoAccountingInformation() { return (int)8L; }

    public static int JobObjectExtendedLimitInformation() { return (int)9L; }

    public static int JobObjectJobSetInformation() { return (int)10L; }

    public static int JobObjectGroupInformation() { return (int)11L; }

    public static int JobObjectNotificationLimitInformation() { return (int)12L; }

    public static int JobObjectLimitViolationInformation() { return (int)13L; }

    public static int JobObjectGroupInformationEx() { return (int)14L; }

    public static int JobObjectCpuRateControlInformation() { return (int)15L; }

    public static int JobObjectCompletionFilter() { return (int)16L; }

    public static int JobObjectCompletionCounter() { return (int)17L; }

    public static int JobObjectReserved1Information() { return (int)18L; }

    public static int JobObjectReserved2Information() { return (int)19L; }

    public static int JobObjectReserved3Information() { return (int)20L; }

    public static int JobObjectReserved4Information() { return (int)21L; }

    public static int JobObjectReserved5Information() { return (int)22L; }

    public static int JobObjectReserved6Information() { return (int)23L; }

    public static int JobObjectReserved7Information() { return (int)24L; }

    public static int JobObjectReserved8Information() { return (int)25L; }

    public static int JobObjectReserved9Information() { return (int)26L; }

    public static int JobObjectReserved10Information() { return (int)27L; }

    public static int JobObjectReserved11Information() { return (int)28L; }

    public static int JobObjectReserved12Information() { return (int)29L; }

    public static int JobObjectReserved13Information() { return (int)30L; }

    public static int JobObjectReserved14Information() { return (int)31L; }

    public static int JobObjectNetRateControlInformation() { return (int)32L; }

    public static int JobObjectNotificationLimitInformation2() { return (int)33L; }

    public static int JobObjectLimitViolationInformation2() { return (int)34L; }

    public static int JobObjectCreateSilo() { return (int)35L; }

    public static int JobObjectSiloBasicInformation() { return (int)36L; }

    public static int JobObjectReserved15Information() { return (int)37L; }

    public static int JobObjectReserved16Information() { return (int)38L; }

    public static int JobObjectReserved17Information() { return (int)39L; }

    public static int JobObjectReserved18Information() { return (int)40L; }

    public static int JobObjectReserved19Information() { return (int)41L; }

    public static int JobObjectReserved20Information() { return (int)42L; }

    public static int JobObjectReserved21Information() { return (int)43L; }

    public static int JobObjectReserved22Information() { return (int)44L; }

    public static int JobObjectReserved23Information() { return (int)45L; }

    public static int JobObjectReserved24Information() { return (int)46L; }

    public static int JobObjectReserved25Information() { return (int)47L; }

    public static int MaxJobObjectInfoClass() { return (int)48L; }

    static final MemoryLayout _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("SiloId"),
        C_INT.withName("SiloParentId"),
        C_INT.withName("NumberOfProcesses"),
        C_BOOL.withName("IsInServerSilo"),
        MemoryLayout.ofSequence(3, C_BOOL).withName("Reserved")
    ).withName("_SILOOBJECT_BASIC_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT() { return _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SILOOBJECT_BASIC_INFORMATION$SiloId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SILOOBJECT_BASIC_INFORMATION$SiloId$LAYOUT() { return _SILOOBJECT_BASIC_INFORMATION$SiloId$LAYOUT_; }

    static final VarHandle _SILOOBJECT_BASIC_INFORMATION$SiloId$VH_ = _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SiloId"));
    public static java.lang.invoke.VarHandle _SILOOBJECT_BASIC_INFORMATION$SiloId$VH() { return _SILOOBJECT_BASIC_INFORMATION$SiloId$VH_; }

    static final MemoryLayout _SILOOBJECT_BASIC_INFORMATION$SiloParentId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SILOOBJECT_BASIC_INFORMATION$SiloParentId$LAYOUT() { return _SILOOBJECT_BASIC_INFORMATION$SiloParentId$LAYOUT_; }

    static final VarHandle _SILOOBJECT_BASIC_INFORMATION$SiloParentId$VH_ = _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SiloParentId"));
    public static java.lang.invoke.VarHandle _SILOOBJECT_BASIC_INFORMATION$SiloParentId$VH() { return _SILOOBJECT_BASIC_INFORMATION$SiloParentId$VH_; }

    static final MemoryLayout _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$LAYOUT() { return _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$LAYOUT_; }

    static final VarHandle _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$VH_ = _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfProcesses"));
    public static java.lang.invoke.VarHandle _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$VH() { return _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$VH_; }

    static final MemoryLayout _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$LAYOUT() { return _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$LAYOUT_; }

    static final VarHandle _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH_ = _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsInServerSilo"));
    public static java.lang.invoke.VarHandle _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH() { return _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH_; }

    public static int SERVERSILO_INITING() { return (int)0L; }

    public static int SERVERSILO_STARTED() { return (int)1L; }

    public static int SERVERSILO_SHUTTING_DOWN() { return (int)2L; }

    public static int SERVERSILO_TERMINATING() { return (int)3L; }

    public static int SERVERSILO_TERMINATED() { return (int)4L; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ServiceSessionId"),
        C_INT.withName("State"),
        C_INT.withName("ExitStatus"),
        C_BOOL.withName("IsDownlevelContainer"),
        MemoryLayout.ofPaddingBits(24),
        C_POINTER.withName("ApiSetSchema"),
        C_POINTER.withName("HostApiSetSchema")
    ).withName("_SERVERSILO_BASIC_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ServiceSessionId"));
    public static java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH() { return _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$State$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$State$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$State$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$State$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    public static java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$State$VH() { return _SERVERSILO_BASIC_INFORMATION$State$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$ExitStatus$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$ExitStatus$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$ExitStatus$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$ExitStatus$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExitStatus"));
    public static java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$ExitStatus$VH() { return _SERVERSILO_BASIC_INFORMATION$ExitStatus$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsDownlevelContainer"));
    public static java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH() { return _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH_ = MemoryHandles.asAddressVarHandle(_SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ApiSetSchema")));
    public static java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH() { return _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH_ = MemoryHandles.asAddressVarHandle(_SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HostApiSetSchema")));
    public static java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH() { return _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH_; }

    public static int FirmwareTypeUnknown() { return (int)0L; }

    public static int FirmwareTypeBios() { return (int)1L; }

    public static int FirmwareTypeUefi() { return (int)2L; }

    public static int FirmwareTypeMax() { return (int)3L; }

    public static int RelationProcessorCore() { return (int)0L; }

    public static int RelationNumaNode() { return (int)1L; }

    public static int RelationCache() { return (int)2L; }

    public static int RelationProcessorPackage() { return (int)3L; }

    public static int RelationGroup() { return (int)4L; }

    public static int RelationAll() { return (int)65535L; }

    public static int CacheUnified() { return (int)0L; }

    public static int CacheInstruction() { return (int)1L; }

    public static int CacheData() { return (int)2L; }

    public static int CacheTrace() { return (int)3L; }

    static final MemoryLayout _CACHE_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("Level"),
        C_BOOL.withName("Associativity"),
        C_SHORT.withName("LineSize"),
        C_INT.withName("Size"),
        C_INT.withName("Type")
    ).withName("_CACHE_DESCRIPTOR");
    public static jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$struct$LAYOUT() { return _CACHE_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Level$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Level$LAYOUT() { return _CACHE_DESCRIPTOR$Level$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Level$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Level"));
    public static java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Level$VH() { return _CACHE_DESCRIPTOR$Level$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Associativity$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Associativity$LAYOUT() { return _CACHE_DESCRIPTOR$Associativity$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Associativity$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Associativity"));
    public static java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Associativity$VH() { return _CACHE_DESCRIPTOR$Associativity$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$LineSize$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$LineSize$LAYOUT() { return _CACHE_DESCRIPTOR$LineSize$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$LineSize$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LineSize"));
    public static java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$LineSize$VH() { return _CACHE_DESCRIPTOR$LineSize$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Size$LAYOUT() { return _CACHE_DESCRIPTOR$Size$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Size$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Size$VH() { return _CACHE_DESCRIPTOR$Size$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Type$LAYOUT() { return _CACHE_DESCRIPTOR$Type$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Type$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Type$VH() { return _CACHE_DESCRIPTOR$Type$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("ProcessorMask"),
        C_INT.withName("Relationship"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_BOOL.withName("Flags")
        ).withName("ProcessorCore"),
        MemoryLayout.ofStruct(
            C_INT.withName("NodeNumber")
        ).withName("NumaNode"),
        MemoryLayout.ofStruct(
            C_BOOL.withName("Level"),
            C_BOOL.withName("Associativity"),
            C_SHORT.withName("LineSize"),
            C_INT.withName("Size"),
            C_INT.withName("Type")
        ).withName("Cache"),
        MemoryLayout.ofSequence(2, C_LONGLONG).withName("Reserved")
    ).withName("_SYSTEM_LOGICAL_PROCESSOR_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessorMask"));
    public static java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Relationship"));
    public static java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH_; }

    static final MemoryLayout ProcessorCore$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("Flags")
    );
    public static jdk.incubator.foreign.MemoryLayout ProcessorCore$struct$LAYOUT() { return ProcessorCore$struct$LAYOUT_; }

    static final MemoryLayout ProcessorCore$Flags$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout ProcessorCore$Flags$LAYOUT() { return ProcessorCore$Flags$LAYOUT_; }

    static final VarHandle ProcessorCore$Flags$VH_ = ProcessorCore$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle ProcessorCore$Flags$VH() { return ProcessorCore$Flags$VH_; }

    static final MemoryLayout NumaNode$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NodeNumber")
    );
    public static jdk.incubator.foreign.MemoryLayout NumaNode$struct$LAYOUT() { return NumaNode$struct$LAYOUT_; }

    static final MemoryLayout NumaNode$NodeNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout NumaNode$NodeNumber$LAYOUT() { return NumaNode$NodeNumber$LAYOUT_; }

    static final VarHandle NumaNode$NodeNumber$VH_ = NumaNode$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NodeNumber"));
    public static java.lang.invoke.VarHandle NumaNode$NodeNumber$VH() { return NumaNode$NodeNumber$VH_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("Flags"),
        C_BOOL.withName("EfficiencyClass"),
        MemoryLayout.ofSequence(20, C_BOOL).withName("Reserved"),
        C_SHORT.withName("GroupCount"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Mask"),
            C_SHORT.withName("Group"),
            MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
        ).withName("_GROUP_AFFINITY")).withName("GroupMask")
    ).withName("_PROCESSOR_RELATIONSHIP");
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$struct$LAYOUT() { return _PROCESSOR_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$Flags$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$Flags$LAYOUT() { return _PROCESSOR_RELATIONSHIP$Flags$LAYOUT_; }

    static final VarHandle _PROCESSOR_RELATIONSHIP$Flags$VH_ = _PROCESSOR_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESSOR_RELATIONSHIP$Flags$VH() { return _PROCESSOR_RELATIONSHIP$Flags$VH_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$EfficiencyClass$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$EfficiencyClass$LAYOUT() { return _PROCESSOR_RELATIONSHIP$EfficiencyClass$LAYOUT_; }

    static final VarHandle _PROCESSOR_RELATIONSHIP$EfficiencyClass$VH_ = _PROCESSOR_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EfficiencyClass"));
    public static java.lang.invoke.VarHandle _PROCESSOR_RELATIONSHIP$EfficiencyClass$VH() { return _PROCESSOR_RELATIONSHIP$EfficiencyClass$VH_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$GroupCount$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$GroupCount$LAYOUT() { return _PROCESSOR_RELATIONSHIP$GroupCount$LAYOUT_; }

    static final VarHandle _PROCESSOR_RELATIONSHIP$GroupCount$VH_ = _PROCESSOR_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("GroupCount"));
    public static java.lang.invoke.VarHandle _PROCESSOR_RELATIONSHIP$GroupCount$VH() { return _PROCESSOR_RELATIONSHIP$GroupCount$VH_; }

    static final MemoryLayout _NUMA_NODE_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NodeNumber"),
        MemoryLayout.ofSequence(20, C_BOOL).withName("Reserved"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Mask"),
            C_SHORT.withName("Group"),
            MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
        ).withName("GroupMask")
    ).withName("_NUMA_NODE_RELATIONSHIP");
    public static jdk.incubator.foreign.MemoryLayout _NUMA_NODE_RELATIONSHIP$struct$LAYOUT() { return _NUMA_NODE_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _NUMA_NODE_RELATIONSHIP$NodeNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NUMA_NODE_RELATIONSHIP$NodeNumber$LAYOUT() { return _NUMA_NODE_RELATIONSHIP$NodeNumber$LAYOUT_; }

    static final VarHandle _NUMA_NODE_RELATIONSHIP$NodeNumber$VH_ = _NUMA_NODE_RELATIONSHIP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NodeNumber"));
    public static java.lang.invoke.VarHandle _NUMA_NODE_RELATIONSHIP$NodeNumber$VH() { return _NUMA_NODE_RELATIONSHIP$NodeNumber$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("Level"),
        C_BOOL.withName("Associativity"),
        C_SHORT.withName("LineSize"),
        C_INT.withName("CacheSize"),
        C_INT.withName("Type"),
        MemoryLayout.ofSequence(20, C_BOOL).withName("Reserved"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Mask"),
            C_SHORT.withName("Group"),
            MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
        ).withName("GroupMask")
    ).withName("_CACHE_RELATIONSHIP");
    public static jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$struct$LAYOUT() { return _CACHE_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$Level$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$Level$LAYOUT() { return _CACHE_RELATIONSHIP$Level$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$Level$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Level"));
    public static java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$Level$VH() { return _CACHE_RELATIONSHIP$Level$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$Associativity$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$Associativity$LAYOUT() { return _CACHE_RELATIONSHIP$Associativity$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$Associativity$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Associativity"));
    public static java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$Associativity$VH() { return _CACHE_RELATIONSHIP$Associativity$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$LineSize$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$LineSize$LAYOUT() { return _CACHE_RELATIONSHIP$LineSize$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$LineSize$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LineSize"));
    public static java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$LineSize$VH() { return _CACHE_RELATIONSHIP$LineSize$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$CacheSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$CacheSize$LAYOUT() { return _CACHE_RELATIONSHIP$CacheSize$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$CacheSize$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CacheSize"));
    public static java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$CacheSize$VH() { return _CACHE_RELATIONSHIP$CacheSize$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$Type$LAYOUT() { return _CACHE_RELATIONSHIP$Type$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$Type$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$Type$VH() { return _CACHE_RELATIONSHIP$Type$VH_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("MaximumProcessorCount"),
        C_BOOL.withName("ActiveProcessorCount"),
        MemoryLayout.ofSequence(38, C_BOOL).withName("Reserved"),
        C_LONGLONG.withName("ActiveProcessorMask")
    ).withName("_PROCESSOR_GROUP_INFO");
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$struct$LAYOUT() { return _PROCESSOR_GROUP_INFO$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$MaximumProcessorCount$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$MaximumProcessorCount$LAYOUT() { return _PROCESSOR_GROUP_INFO$MaximumProcessorCount$LAYOUT_; }

    static final VarHandle _PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH_ = _PROCESSOR_GROUP_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MaximumProcessorCount"));
    public static java.lang.invoke.VarHandle _PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH() { return _PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorCount$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorCount$LAYOUT() { return _PROCESSOR_GROUP_INFO$ActiveProcessorCount$LAYOUT_; }

    static final VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH_ = _PROCESSOR_GROUP_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ActiveProcessorCount"));
    public static java.lang.invoke.VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH() { return _PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorMask$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorMask$LAYOUT() { return _PROCESSOR_GROUP_INFO$ActiveProcessorMask$LAYOUT_; }

    static final VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH_ = _PROCESSOR_GROUP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ActiveProcessorMask"));
    public static java.lang.invoke.VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH() { return _PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH_; }

    static final MemoryLayout _GROUP_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("MaximumGroupCount"),
        C_SHORT.withName("ActiveGroupCount"),
        MemoryLayout.ofSequence(20, C_BOOL).withName("Reserved"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_BOOL.withName("MaximumProcessorCount"),
            C_BOOL.withName("ActiveProcessorCount"),
            MemoryLayout.ofSequence(38, C_BOOL).withName("Reserved"),
            C_LONGLONG.withName("ActiveProcessorMask")
        ).withName("_PROCESSOR_GROUP_INFO")).withName("GroupInfo")
    ).withName("_GROUP_RELATIONSHIP");
    public static jdk.incubator.foreign.MemoryLayout _GROUP_RELATIONSHIP$struct$LAYOUT() { return _GROUP_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _GROUP_RELATIONSHIP$MaximumGroupCount$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _GROUP_RELATIONSHIP$MaximumGroupCount$LAYOUT() { return _GROUP_RELATIONSHIP$MaximumGroupCount$LAYOUT_; }

    static final VarHandle _GROUP_RELATIONSHIP$MaximumGroupCount$VH_ = _GROUP_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaximumGroupCount"));
    public static java.lang.invoke.VarHandle _GROUP_RELATIONSHIP$MaximumGroupCount$VH() { return _GROUP_RELATIONSHIP$MaximumGroupCount$VH_; }

    static final MemoryLayout _GROUP_RELATIONSHIP$ActiveGroupCount$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _GROUP_RELATIONSHIP$ActiveGroupCount$LAYOUT() { return _GROUP_RELATIONSHIP$ActiveGroupCount$LAYOUT_; }

    static final VarHandle _GROUP_RELATIONSHIP$ActiveGroupCount$VH_ = _GROUP_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ActiveGroupCount"));
    public static java.lang.invoke.VarHandle _GROUP_RELATIONSHIP$ActiveGroupCount$VH() { return _GROUP_RELATIONSHIP$ActiveGroupCount$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Relationship"),
        C_INT.withName("Size"),
        MemoryLayout.ofStruct(
            C_BOOL.withName("Flags"),
            C_BOOL.withName("EfficiencyClass"),
            MemoryLayout.ofSequence(20, C_BOOL).withName("Reserved"),
            C_SHORT.withName("GroupCount"),
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                C_LONGLONG.withName("Mask"),
                C_SHORT.withName("Group"),
                MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
            ).withName("_GROUP_AFFINITY")).withName("GroupMask")
        ).withName("Processor"),
        MemoryLayout.ofStruct(
            C_INT.withName("NodeNumber"),
            MemoryLayout.ofSequence(20, C_BOOL).withName("Reserved"),
            MemoryLayout.ofStruct(
                C_LONGLONG.withName("Mask"),
                C_SHORT.withName("Group"),
                MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
            ).withName("GroupMask")
        ).withName("NumaNode"),
        MemoryLayout.ofStruct(
            C_BOOL.withName("Level"),
            C_BOOL.withName("Associativity"),
            C_SHORT.withName("LineSize"),
            C_INT.withName("CacheSize"),
            C_INT.withName("Type"),
            MemoryLayout.ofSequence(20, C_BOOL).withName("Reserved"),
            MemoryLayout.ofStruct(
                C_LONGLONG.withName("Mask"),
                C_SHORT.withName("Group"),
                MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
            ).withName("GroupMask")
        ).withName("Cache"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("MaximumGroupCount"),
            C_SHORT.withName("ActiveGroupCount"),
            MemoryLayout.ofSequence(20, C_BOOL).withName("Reserved"),
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                C_BOOL.withName("MaximumProcessorCount"),
                C_BOOL.withName("ActiveProcessorCount"),
                MemoryLayout.ofSequence(38, C_BOOL).withName("Reserved"),
                C_LONGLONG.withName("ActiveProcessorMask")
            ).withName("_PROCESSOR_GROUP_INFO")).withName("GroupInfo")
        ).withName("Group")
    ).withName("_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Relationship"));
    public static java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH_; }

    public static int CpuSetInformation() { return (int)0L; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        C_INT.withName("Type"),
        MemoryLayout.ofStruct(
            C_INT.withName("Id"),
            C_SHORT.withName("Group"),
            C_BOOL.withName("LogicalProcessorIndex"),
            C_BOOL.withName("CoreIndex"),
            C_BOOL.withName("LastLevelCacheIndex"),
            C_BOOL.withName("NumaNodeIndex"),
            C_BOOL.withName("EfficiencyClass"),
            C_BOOL.withName("AllFlags"),
            C_BOOL,
            C_INT.withName("Reserved"),
            C_BOOL.withName("SchedulingClass"),
            C_LONGLONG.withName("AllocationTag")
        ).withName("CpuSet")
    ).withName("_SYSTEM_CPU_SET_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Size$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$Size$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$Size$VH_ = _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$Size$VH() { return _SYSTEM_CPU_SET_INFORMATION$Size$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Type$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$Type$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$Type$VH_ = _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$Type$VH() { return _SYSTEM_CPU_SET_INFORMATION$Type$VH_; }

    static final MemoryLayout CpuSet$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Id"),
        C_SHORT.withName("Group"),
        C_BOOL.withName("LogicalProcessorIndex"),
        C_BOOL.withName("CoreIndex"),
        C_BOOL.withName("LastLevelCacheIndex"),
        C_BOOL.withName("NumaNodeIndex"),
        C_BOOL.withName("EfficiencyClass"),
        C_BOOL.withName("AllFlags"),
        C_BOOL,
        C_INT.withName("Reserved"),
        C_BOOL.withName("SchedulingClass"),
        C_LONGLONG.withName("AllocationTag")
    );
    public static jdk.incubator.foreign.MemoryLayout CpuSet$struct$LAYOUT() { return CpuSet$struct$LAYOUT_; }

    static final MemoryLayout CpuSet$Id$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout CpuSet$Id$LAYOUT() { return CpuSet$Id$LAYOUT_; }

    static final VarHandle CpuSet$Id$VH_ = CpuSet$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Id"));
    public static java.lang.invoke.VarHandle CpuSet$Id$VH() { return CpuSet$Id$VH_; }

    static final MemoryLayout CpuSet$Group$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout CpuSet$Group$LAYOUT() { return CpuSet$Group$LAYOUT_; }

    static final VarHandle CpuSet$Group$VH_ = CpuSet$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Group"));
    public static java.lang.invoke.VarHandle CpuSet$Group$VH() { return CpuSet$Group$VH_; }

    static final MemoryLayout CpuSet$LogicalProcessorIndex$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout CpuSet$LogicalProcessorIndex$LAYOUT() { return CpuSet$LogicalProcessorIndex$LAYOUT_; }

    static final VarHandle CpuSet$LogicalProcessorIndex$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LogicalProcessorIndex"));
    public static java.lang.invoke.VarHandle CpuSet$LogicalProcessorIndex$VH() { return CpuSet$LogicalProcessorIndex$VH_; }

    static final MemoryLayout CpuSet$CoreIndex$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout CpuSet$CoreIndex$LAYOUT() { return CpuSet$CoreIndex$LAYOUT_; }

    static final VarHandle CpuSet$CoreIndex$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("CoreIndex"));
    public static java.lang.invoke.VarHandle CpuSet$CoreIndex$VH() { return CpuSet$CoreIndex$VH_; }

    static final MemoryLayout CpuSet$LastLevelCacheIndex$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout CpuSet$LastLevelCacheIndex$LAYOUT() { return CpuSet$LastLevelCacheIndex$LAYOUT_; }

    static final VarHandle CpuSet$LastLevelCacheIndex$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LastLevelCacheIndex"));
    public static java.lang.invoke.VarHandle CpuSet$LastLevelCacheIndex$VH() { return CpuSet$LastLevelCacheIndex$VH_; }

    static final MemoryLayout CpuSet$NumaNodeIndex$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout CpuSet$NumaNodeIndex$LAYOUT() { return CpuSet$NumaNodeIndex$LAYOUT_; }

    static final VarHandle CpuSet$NumaNodeIndex$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("NumaNodeIndex"));
    public static java.lang.invoke.VarHandle CpuSet$NumaNodeIndex$VH() { return CpuSet$NumaNodeIndex$VH_; }

    static final MemoryLayout CpuSet$EfficiencyClass$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout CpuSet$EfficiencyClass$LAYOUT() { return CpuSet$EfficiencyClass$LAYOUT_; }

    static final VarHandle CpuSet$EfficiencyClass$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EfficiencyClass"));
    public static java.lang.invoke.VarHandle CpuSet$EfficiencyClass$VH() { return CpuSet$EfficiencyClass$VH_; }

    static final MemoryLayout CpuSet$AllFlags$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout CpuSet$AllFlags$LAYOUT() { return CpuSet$AllFlags$LAYOUT_; }

    static final VarHandle CpuSet$AllFlags$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AllFlags"));
    public static java.lang.invoke.VarHandle CpuSet$AllFlags$VH() { return CpuSet$AllFlags$VH_; }

    static final MemoryLayout CpuSet$Reserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout CpuSet$Reserved$LAYOUT() { return CpuSet$Reserved$LAYOUT_; }

    static final VarHandle CpuSet$Reserved$VH_ = CpuSet$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle CpuSet$Reserved$VH() { return CpuSet$Reserved$VH_; }

    static final MemoryLayout CpuSet$SchedulingClass$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout CpuSet$SchedulingClass$LAYOUT() { return CpuSet$SchedulingClass$LAYOUT_; }

    static final VarHandle CpuSet$SchedulingClass$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SchedulingClass"));
    public static java.lang.invoke.VarHandle CpuSet$SchedulingClass$VH() { return CpuSet$SchedulingClass$VH_; }

    static final MemoryLayout CpuSet$AllocationTag$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout CpuSet$AllocationTag$LAYOUT() { return CpuSet$AllocationTag$LAYOUT_; }

    static final VarHandle CpuSet$AllocationTag$VH_ = CpuSet$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationTag"));
    public static java.lang.invoke.VarHandle CpuSet$AllocationTag$VH() { return CpuSet$AllocationTag$VH_; }

    static final MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("CycleTime")
    ).withName("_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT() { return _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$LAYOUT() { return _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$LAYOUT_; }

    static final VarHandle _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH_ = _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CycleTime"));
    public static java.lang.invoke.VarHandle _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH() { return _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH_; }

    static final MemoryLayout _XSTATE_FEATURE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Offset"),
        C_INT.withName("Size")
    ).withName("_XSTATE_FEATURE");
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_FEATURE$struct$LAYOUT() { return _XSTATE_FEATURE$struct$LAYOUT_; }

    static final MemoryLayout _XSTATE_FEATURE$Offset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_FEATURE$Offset$LAYOUT() { return _XSTATE_FEATURE$Offset$LAYOUT_; }

    static final VarHandle _XSTATE_FEATURE$Offset$VH_ = _XSTATE_FEATURE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Offset"));
    public static java.lang.invoke.VarHandle _XSTATE_FEATURE$Offset$VH() { return _XSTATE_FEATURE$Offset$VH_; }

    static final MemoryLayout _XSTATE_FEATURE$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_FEATURE$Size$LAYOUT() { return _XSTATE_FEATURE$Size$LAYOUT_; }

    static final VarHandle _XSTATE_FEATURE$Size$VH_ = _XSTATE_FEATURE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _XSTATE_FEATURE$Size$VH() { return _XSTATE_FEATURE$Size$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("EnabledFeatures"),
        C_LONGLONG.withName("EnabledVolatileFeatures"),
        C_INT.withName("Size"),
        C_INT.withName("ControlFlags"),
        C_INT,
        MemoryLayout.ofSequence(64, MemoryLayout.ofStruct(
            C_INT.withName("Offset"),
            C_INT.withName("Size")
        ).withName("_XSTATE_FEATURE")).withName("Features"),
        C_LONGLONG.withName("EnabledSupervisorFeatures"),
        C_LONGLONG.withName("AlignedFeatures"),
        C_INT.withName("AllFeatureSize"),
        MemoryLayout.ofSequence(64, C_INT).withName("AllFeatures"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("EnabledUserVisibleSupervisorFeatures")
    ).withName("_XSTATE_CONFIGURATION");
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$struct$LAYOUT() { return _XSTATE_CONFIGURATION$struct$LAYOUT_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledFeatures$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledFeatures"));
    public static java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledVolatileFeatures$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledVolatileFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledVolatileFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledVolatileFeatures"));
    public static java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$Size$LAYOUT() { return _XSTATE_CONFIGURATION$Size$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$Size$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$Size$VH() { return _XSTATE_CONFIGURATION$Size$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$ControlFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$ControlFlags$LAYOUT() { return _XSTATE_CONFIGURATION$ControlFlags$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$ControlFlags$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    public static java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$ControlFlags$VH() { return _XSTATE_CONFIGURATION$ControlFlags$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledSupervisorFeatures"));
    public static java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$AlignedFeatures$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$AlignedFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$AlignedFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$AlignedFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AlignedFeatures"));
    public static java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$AlignedFeatures$VH() { return _XSTATE_CONFIGURATION$AlignedFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$AllFeatureSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$AllFeatureSize$LAYOUT() { return _XSTATE_CONFIGURATION$AllFeatureSize$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$AllFeatureSize$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllFeatureSize"));
    public static java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$AllFeatureSize$VH() { return _XSTATE_CONFIGURATION$AllFeatureSize$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledUserVisibleSupervisorFeatures"));
    public static java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("BaseAddress"),
        C_POINTER.withName("AllocationBase"),
        C_INT.withName("AllocationProtect"),
        C_SHORT.withName("PartitionId"),
        MemoryLayout.ofPaddingBits(16),
        C_LONGLONG.withName("RegionSize"),
        C_INT.withName("State"),
        C_INT.withName("Protect"),
        C_INT.withName("Type"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_MEMORY_BASIC_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$struct$LAYOUT() { return _MEMORY_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$BaseAddress$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$BaseAddress$LAYOUT() { return _MEMORY_BASIC_INFORMATION$BaseAddress$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$BaseAddress$VH_ = MemoryHandles.asAddressVarHandle(_MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BaseAddress")));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$BaseAddress$VH() { return _MEMORY_BASIC_INFORMATION$BaseAddress$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationBase$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationBase$LAYOUT() { return _MEMORY_BASIC_INFORMATION$AllocationBase$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$AllocationBase$VH_ = MemoryHandles.asAddressVarHandle(_MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationBase")));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$AllocationBase$VH() { return _MEMORY_BASIC_INFORMATION$AllocationBase$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationProtect$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationProtect$LAYOUT() { return _MEMORY_BASIC_INFORMATION$AllocationProtect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$AllocationProtect$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationProtect"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$AllocationProtect$VH() { return _MEMORY_BASIC_INFORMATION$AllocationProtect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$PartitionId$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$PartitionId$LAYOUT() { return _MEMORY_BASIC_INFORMATION$PartitionId$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$PartitionId$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("PartitionId"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$PartitionId$VH() { return _MEMORY_BASIC_INFORMATION$PartitionId$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$RegionSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$RegionSize$LAYOUT() { return _MEMORY_BASIC_INFORMATION$RegionSize$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$RegionSize$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegionSize"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$RegionSize$VH() { return _MEMORY_BASIC_INFORMATION$RegionSize$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$State$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$State$LAYOUT() { return _MEMORY_BASIC_INFORMATION$State$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$State$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$State$VH() { return _MEMORY_BASIC_INFORMATION$State$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$Protect$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$Protect$LAYOUT() { return _MEMORY_BASIC_INFORMATION$Protect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$Protect$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Protect"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$Protect$VH() { return _MEMORY_BASIC_INFORMATION$Protect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$Type$LAYOUT() { return _MEMORY_BASIC_INFORMATION$Type$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$Type$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$Type$VH() { return _MEMORY_BASIC_INFORMATION$Type$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("BaseAddress"),
        C_INT.withName("AllocationBase"),
        C_INT.withName("AllocationProtect"),
        C_INT.withName("RegionSize"),
        C_INT.withName("State"),
        C_INT.withName("Protect"),
        C_INT.withName("Type")
    ).withName("_MEMORY_BASIC_INFORMATION32");
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$struct$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$BaseAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$BaseAddress$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$BaseAddress$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$BaseAddress$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseAddress"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$BaseAddress$VH() { return _MEMORY_BASIC_INFORMATION32$BaseAddress$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationBase$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationBase$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$AllocationBase$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$AllocationBase$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationBase"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$AllocationBase$VH() { return _MEMORY_BASIC_INFORMATION32$AllocationBase$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationProtect$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationProtect$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$AllocationProtect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$AllocationProtect$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationProtect"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$AllocationProtect$VH() { return _MEMORY_BASIC_INFORMATION32$AllocationProtect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$RegionSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$RegionSize$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$RegionSize$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$RegionSize$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RegionSize"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$RegionSize$VH() { return _MEMORY_BASIC_INFORMATION32$RegionSize$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$State$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$State$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$State$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$State$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$State$VH() { return _MEMORY_BASIC_INFORMATION32$State$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$Protect$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$Protect$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$Protect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$Protect$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Protect"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$Protect$VH() { return _MEMORY_BASIC_INFORMATION32$Protect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$Type$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$Type$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$Type$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$Type$VH() { return _MEMORY_BASIC_INFORMATION32$Type$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("BaseAddress"),
        C_LONGLONG.withName("AllocationBase"),
        C_INT.withName("AllocationProtect"),
        C_INT.withName("__alignment1"),
        C_LONGLONG.withName("RegionSize"),
        C_INT.withName("State"),
        C_INT.withName("Protect"),
        C_INT.withName("Type"),
        C_INT.withName("__alignment2")
    ).withName("_MEMORY_BASIC_INFORMATION64");
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$struct$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$BaseAddress$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$BaseAddress$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$BaseAddress$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$BaseAddress$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BaseAddress"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$BaseAddress$VH() { return _MEMORY_BASIC_INFORMATION64$BaseAddress$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationBase$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationBase$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$AllocationBase$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$AllocationBase$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationBase"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$AllocationBase$VH() { return _MEMORY_BASIC_INFORMATION64$AllocationBase$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationProtect$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationProtect$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$AllocationProtect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$AllocationProtect$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationProtect"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$AllocationProtect$VH() { return _MEMORY_BASIC_INFORMATION64$AllocationProtect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment1$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment1$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$__alignment1$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$__alignment1$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("__alignment1"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$__alignment1$VH() { return _MEMORY_BASIC_INFORMATION64$__alignment1$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$RegionSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$RegionSize$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$RegionSize$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$RegionSize$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegionSize"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$RegionSize$VH() { return _MEMORY_BASIC_INFORMATION64$RegionSize$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$State$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$State$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$State$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$State$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$State$VH() { return _MEMORY_BASIC_INFORMATION64$State$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$Protect$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$Protect$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$Protect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$Protect$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Protect"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$Protect$VH() { return _MEMORY_BASIC_INFORMATION64$Protect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$Type$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$Type$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$Type$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$Type$VH() { return _MEMORY_BASIC_INFORMATION64$Type$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment2$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment2$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$__alignment2$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$__alignment2$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("__alignment2"));
    public static java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$__alignment2$VH() { return _MEMORY_BASIC_INFORMATION64$__alignment2$VH_; }

    static final MemoryLayout _CFG_CALL_TARGET_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Offset"),
        C_LONGLONG.withName("Flags")
    ).withName("_CFG_CALL_TARGET_INFO");
    public static jdk.incubator.foreign.MemoryLayout _CFG_CALL_TARGET_INFO$struct$LAYOUT() { return _CFG_CALL_TARGET_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CFG_CALL_TARGET_INFO$Offset$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _CFG_CALL_TARGET_INFO$Offset$LAYOUT() { return _CFG_CALL_TARGET_INFO$Offset$LAYOUT_; }

    static final VarHandle _CFG_CALL_TARGET_INFO$Offset$VH_ = _CFG_CALL_TARGET_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    public static java.lang.invoke.VarHandle _CFG_CALL_TARGET_INFO$Offset$VH() { return _CFG_CALL_TARGET_INFO$Offset$VH_; }

    static final MemoryLayout _CFG_CALL_TARGET_INFO$Flags$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _CFG_CALL_TARGET_INFO$Flags$LAYOUT() { return _CFG_CALL_TARGET_INFO$Flags$LAYOUT_; }

    static final VarHandle _CFG_CALL_TARGET_INFO$Flags$VH_ = _CFG_CALL_TARGET_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _CFG_CALL_TARGET_INFO$Flags$VH() { return _CFG_CALL_TARGET_INFO$Flags$VH_; }

    static final MemoryLayout _MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("LowestStartingAddress"),
        C_POINTER.withName("HighestEndingAddress"),
        C_LONGLONG.withName("Alignment")
    ).withName("_MEM_ADDRESS_REQUIREMENTS");
    public static jdk.incubator.foreign.MemoryLayout _MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT() { return _MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_; }

    static final MemoryLayout _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$LAYOUT() { return _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$LAYOUT_; }

    static final VarHandle _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH_ = MemoryHandles.asAddressVarHandle(_MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowestStartingAddress")));
    public static java.lang.invoke.VarHandle _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH() { return _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH_; }

    static final MemoryLayout _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$LAYOUT() { return _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$LAYOUT_; }

    static final VarHandle _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$VH_ = MemoryHandles.asAddressVarHandle(_MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HighestEndingAddress")));
    public static java.lang.invoke.VarHandle _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$VH() { return _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$VH_; }

    static final MemoryLayout _MEM_ADDRESS_REQUIREMENTS$Alignment$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEM_ADDRESS_REQUIREMENTS$Alignment$LAYOUT() { return _MEM_ADDRESS_REQUIREMENTS$Alignment$LAYOUT_; }

    static final VarHandle _MEM_ADDRESS_REQUIREMENTS$Alignment$VH_ = _MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Alignment"));
    public static java.lang.invoke.VarHandle _MEM_ADDRESS_REQUIREMENTS$Alignment$VH() { return _MEM_ADDRESS_REQUIREMENTS$Alignment$VH_; }

    public static int MemExtendedParameterInvalidType() { return (int)0L; }

    public static int MemExtendedParameterAddressRequirements() { return (int)1L; }

    public static int MemExtendedParameterNumaNode() { return (int)2L; }

    public static int MemExtendedParameterPartitionHandle() { return (int)3L; }

    public static int MemExtendedParameterUserPhysicalHandle() { return (int)4L; }

    public static int MemExtendedParameterAttributeFlags() { return (int)5L; }

    public static int MemExtendedParameterMax() { return (int)6L; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG,
        C_LONGLONG.withName("ULong64"),
        C_POINTER.withName("Pointer"),
        C_LONGLONG.withName("Size"),
        C_POINTER.withName("Handle"),
        C_INT.withName("ULong")
    ).withName("MEM_EXTENDED_PARAMETER");
    public static jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$struct$LAYOUT() { return MEM_EXTENDED_PARAMETER$struct$LAYOUT_; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$ULong64$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$ULong64$LAYOUT() { return MEM_EXTENDED_PARAMETER$ULong64$LAYOUT_; }

    static final VarHandle MEM_EXTENDED_PARAMETER$ULong64$VH_ = MEM_EXTENDED_PARAMETER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ULong64"));
    public static java.lang.invoke.VarHandle MEM_EXTENDED_PARAMETER$ULong64$VH() { return MEM_EXTENDED_PARAMETER$ULong64$VH_; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$Pointer$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$Pointer$LAYOUT() { return MEM_EXTENDED_PARAMETER$Pointer$LAYOUT_; }

    static final VarHandle MEM_EXTENDED_PARAMETER$Pointer$VH_ = MemoryHandles.asAddressVarHandle(MEM_EXTENDED_PARAMETER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Pointer")));
    public static java.lang.invoke.VarHandle MEM_EXTENDED_PARAMETER$Pointer$VH() { return MEM_EXTENDED_PARAMETER$Pointer$VH_; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$Size$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$Size$LAYOUT() { return MEM_EXTENDED_PARAMETER$Size$LAYOUT_; }

    static final VarHandle MEM_EXTENDED_PARAMETER$Size$VH_ = MEM_EXTENDED_PARAMETER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle MEM_EXTENDED_PARAMETER$Size$VH() { return MEM_EXTENDED_PARAMETER$Size$VH_; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$Handle$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$Handle$LAYOUT() { return MEM_EXTENDED_PARAMETER$Handle$LAYOUT_; }

    static final VarHandle MEM_EXTENDED_PARAMETER$Handle$VH_ = MemoryHandles.asAddressVarHandle(MEM_EXTENDED_PARAMETER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Handle")));
    public static java.lang.invoke.VarHandle MEM_EXTENDED_PARAMETER$Handle$VH() { return MEM_EXTENDED_PARAMETER$Handle$VH_; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$ULong$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$ULong$LAYOUT() { return MEM_EXTENDED_PARAMETER$ULong$LAYOUT_; }

    static final VarHandle MEM_EXTENDED_PARAMETER$ULong$VH_ = MEM_EXTENDED_PARAMETER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ULong"));
    public static java.lang.invoke.VarHandle MEM_EXTENDED_PARAMETER$ULong$VH() { return MEM_EXTENDED_PARAMETER$ULong$VH_; }

    public static int MemSectionExtendedParameterInvalidType() { return (int)0L; }

    public static int MemSectionExtendedParameterUserPhysicalFlags() { return (int)1L; }

    public static int MemSectionExtendedParameterNumaNode() { return (int)2L; }

    public static int MemSectionExtendedParameterMax() { return (int)3L; }

    static final MemoryLayout _ENCLAVE_CREATE_INFO_SGX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(4096, C_BOOL).withName("Secs")
    ).withName("_ENCLAVE_CREATE_INFO_SGX");
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_CREATE_INFO_SGX$struct$LAYOUT() { return _ENCLAVE_CREATE_INFO_SGX$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_SGX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(1808, C_BOOL).withName("SigStruct"),
        MemoryLayout.ofSequence(240, C_BOOL).withName("Reserved1"),
        MemoryLayout.ofSequence(304, C_BOOL).withName("EInitToken"),
        MemoryLayout.ofSequence(1744, C_BOOL).withName("Reserved2")
    ).withName("_ENCLAVE_INIT_INFO_SGX");
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_SGX$struct$LAYOUT() { return _ENCLAVE_INIT_INFO_SGX$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_CREATE_INFO_VBS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        MemoryLayout.ofSequence(32, C_BOOL).withName("OwnerID")
    ).withName("_ENCLAVE_CREATE_INFO_VBS");
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_CREATE_INFO_VBS$struct$LAYOUT() { return _ENCLAVE_CREATE_INFO_VBS$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_CREATE_INFO_VBS$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_CREATE_INFO_VBS$Flags$LAYOUT() { return _ENCLAVE_CREATE_INFO_VBS$Flags$LAYOUT_; }

    static final VarHandle _ENCLAVE_CREATE_INFO_VBS$Flags$VH_ = _ENCLAVE_CREATE_INFO_VBS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _ENCLAVE_CREATE_INFO_VBS$Flags$VH() { return _ENCLAVE_CREATE_INFO_VBS$Flags$VH_; }

    static final MemoryLayout _ENCLAVE_CREATE_INFO_VBS_BASIC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        MemoryLayout.ofSequence(32, C_BOOL).withName("OwnerID")
    ).withName("_ENCLAVE_CREATE_INFO_VBS_BASIC");
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_CREATE_INFO_VBS_BASIC$struct$LAYOUT() { return _ENCLAVE_CREATE_INFO_VBS_BASIC$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$LAYOUT() { return _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$LAYOUT_; }

    static final VarHandle _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$VH_ = _ENCLAVE_CREATE_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$VH() { return _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$VH_; }

    static final MemoryLayout _ENCLAVE_LOAD_DATA_VBS_BASIC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("PageType")
    ).withName("_ENCLAVE_LOAD_DATA_VBS_BASIC");
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_LOAD_DATA_VBS_BASIC$struct$LAYOUT() { return _ENCLAVE_LOAD_DATA_VBS_BASIC$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$LAYOUT() { return _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$LAYOUT_; }

    static final VarHandle _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$VH_ = _ENCLAVE_LOAD_DATA_VBS_BASIC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PageType"));
    public static java.lang.invoke.VarHandle _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$VH() { return _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(16, C_BOOL).withName("FamilyId"),
        MemoryLayout.ofSequence(16, C_BOOL).withName("ImageId"),
        C_LONGLONG.withName("EnclaveSize"),
        C_INT.withName("EnclaveSvn"),
        C_INT.withName("Reserved"),
        C_POINTER.withName("SignatureInfoHandle"),
        C_LONGLONG.withName("Unused")
    ).withName("_ENCLAVE_INIT_INFO_VBS_BASIC");
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$VH_ = _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnclaveSize"));
    public static java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$VH() { return _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$VH_ = _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EnclaveSvn"));
    public static java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$VH() { return _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$VH_ = _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$VH() { return _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$VH_ = MemoryHandles.asAddressVarHandle(_ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SignatureInfoHandle")));
    public static java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$VH() { return _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$VH_ = _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Unused"));
    public static java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$VH() { return _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Length"),
        C_INT.withName("ThreadCount")
    ).withName("_ENCLAVE_INIT_INFO_VBS");
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS$struct$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS$Length$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS$Length$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS$Length$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS$Length$VH_ = _ENCLAVE_INIT_INFO_VBS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    public static java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS$Length$VH() { return _ENCLAVE_INIT_INFO_VBS$Length$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS$ThreadCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS$ThreadCount$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS$ThreadCount$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS$ThreadCount$VH_ = _ENCLAVE_INIT_INFO_VBS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ThreadCount"));
    public static java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS$ThreadCount$VH() { return _ENCLAVE_INIT_INFO_VBS$ThreadCount$VH_; }

    static final MemoryLayout _FILE_ID_128$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(16, C_BOOL).withName("Identifier")
    ).withName("_FILE_ID_128");
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_128$struct$LAYOUT() { return _FILE_ID_128$struct$LAYOUT_; }

    static final MemoryLayout _FILE_NOTIFY_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NextEntryOffset"),
        C_INT.withName("Action"),
        C_INT.withName("FileNameLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_FILE_NOTIFY_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_INFORMATION$struct$LAYOUT() { return _FILE_NOTIFY_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _FILE_NOTIFY_INFORMATION$NextEntryOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_INFORMATION$NextEntryOffset$LAYOUT() { return _FILE_NOTIFY_INFORMATION$NextEntryOffset$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_INFORMATION$NextEntryOffset$VH_ = _FILE_NOTIFY_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextEntryOffset"));
    public static java.lang.invoke.VarHandle _FILE_NOTIFY_INFORMATION$NextEntryOffset$VH() { return _FILE_NOTIFY_INFORMATION$NextEntryOffset$VH_; }

    static final MemoryLayout _FILE_NOTIFY_INFORMATION$Action$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_INFORMATION$Action$LAYOUT() { return _FILE_NOTIFY_INFORMATION$Action$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_INFORMATION$Action$VH_ = _FILE_NOTIFY_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Action"));
    public static java.lang.invoke.VarHandle _FILE_NOTIFY_INFORMATION$Action$VH() { return _FILE_NOTIFY_INFORMATION$Action$VH_; }

    static final MemoryLayout _FILE_NOTIFY_INFORMATION$FileNameLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_INFORMATION$FileNameLength$LAYOUT() { return _FILE_NOTIFY_INFORMATION$FileNameLength$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_INFORMATION$FileNameLength$VH_ = _FILE_NOTIFY_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    public static java.lang.invoke.VarHandle _FILE_NOTIFY_INFORMATION$FileNameLength$VH() { return _FILE_NOTIFY_INFORMATION$FileNameLength$VH_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NextEntryOffset"),
        C_INT.withName("Action"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("CreationTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastModificationTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastChangeTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastAccessTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("AllocatedLength"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileSize"),
        C_INT.withName("FileAttributes"),
        C_INT.withName("ReparsePointTag"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileId"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ParentFileId"),
        C_INT.withName("FileNameLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_FILE_NOTIFY_EXTENDED_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$VH_ = _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextEntryOffset"));
    public static java.lang.invoke.VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$VH() { return _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$VH_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$Action$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$Action$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$Action$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$Action$VH_ = _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Action"));
    public static java.lang.invoke.VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$Action$VH() { return _FILE_NOTIFY_EXTENDED_INFORMATION$Action$VH_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$VH_ = _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    public static java.lang.invoke.VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$VH() { return _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$VH_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$VH_ = _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReparsePointTag"));
    public static java.lang.invoke.VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$VH() { return _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$VH_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$VH_ = _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    public static java.lang.invoke.VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$VH() { return _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$VH_; }

    static final MemoryLayout _FILE_SEGMENT_ELEMENT$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("Buffer"),
        C_LONGLONG.withName("Alignment")
    ).withName("_FILE_SEGMENT_ELEMENT");
    public static jdk.incubator.foreign.MemoryLayout _FILE_SEGMENT_ELEMENT$struct$LAYOUT() { return _FILE_SEGMENT_ELEMENT$struct$LAYOUT_; }

    static final MemoryLayout _FILE_SEGMENT_ELEMENT$Buffer$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _FILE_SEGMENT_ELEMENT$Buffer$LAYOUT() { return _FILE_SEGMENT_ELEMENT$Buffer$LAYOUT_; }

    static final VarHandle _FILE_SEGMENT_ELEMENT$Buffer$VH_ = MemoryHandles.asAddressVarHandle(_FILE_SEGMENT_ELEMENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Buffer")));
    public static java.lang.invoke.VarHandle _FILE_SEGMENT_ELEMENT$Buffer$VH() { return _FILE_SEGMENT_ELEMENT$Buffer$VH_; }

    static final MemoryLayout _FILE_SEGMENT_ELEMENT$Alignment$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _FILE_SEGMENT_ELEMENT$Alignment$LAYOUT() { return _FILE_SEGMENT_ELEMENT$Alignment$LAYOUT_; }

    static final VarHandle _FILE_SEGMENT_ELEMENT$Alignment$VH_ = _FILE_SEGMENT_ELEMENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Alignment"));
    public static java.lang.invoke.VarHandle _FILE_SEGMENT_ELEMENT$Alignment$VH() { return _FILE_SEGMENT_ELEMENT$Alignment$VH_; }

    static final MemoryLayout _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ReparseTag"),
        C_SHORT.withName("ReparseDataLength"),
        C_SHORT.withName("Reserved"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ReparseGuid"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(1, C_BOOL).withName("DataBuffer")
        ).withName("GenericReparseBuffer"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_REPARSE_GUID_DATA_BUFFER");
    public static jdk.incubator.foreign.MemoryLayout _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT() { return _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _REPARSE_GUID_DATA_BUFFER$ReparseTag$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _REPARSE_GUID_DATA_BUFFER$ReparseTag$LAYOUT() { return _REPARSE_GUID_DATA_BUFFER$ReparseTag$LAYOUT_; }

    static final VarHandle _REPARSE_GUID_DATA_BUFFER$ReparseTag$VH_ = _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReparseTag"));
    public static java.lang.invoke.VarHandle _REPARSE_GUID_DATA_BUFFER$ReparseTag$VH() { return _REPARSE_GUID_DATA_BUFFER$ReparseTag$VH_; }

    static final MemoryLayout _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$LAYOUT() { return _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$LAYOUT_; }

    static final VarHandle _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$VH_ = _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ReparseDataLength"));
    public static java.lang.invoke.VarHandle _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$VH() { return _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$VH_; }

    static final MemoryLayout _REPARSE_GUID_DATA_BUFFER$Reserved$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _REPARSE_GUID_DATA_BUFFER$Reserved$LAYOUT() { return _REPARSE_GUID_DATA_BUFFER$Reserved$LAYOUT_; }

    static final VarHandle _REPARSE_GUID_DATA_BUFFER$Reserved$VH_ = _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _REPARSE_GUID_DATA_BUFFER$Reserved$VH() { return _REPARSE_GUID_DATA_BUFFER$Reserved$VH_; }

    static final MemoryLayout GenericReparseBuffer$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(1, C_BOOL).withName("DataBuffer")
    );
    public static jdk.incubator.foreign.MemoryLayout GenericReparseBuffer$struct$LAYOUT() { return GenericReparseBuffer$struct$LAYOUT_; }

    static final MemoryLayout _SCRUB_DATA_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        C_INT.withName("Flags"),
        C_INT.withName("MaximumIos"),
        MemoryLayout.ofSequence(4, C_INT).withName("ObjectId"),
        MemoryLayout.ofSequence(25, C_INT).withName("Reserved"),
        MemoryLayout.ofSequence(816, C_BOOL).withName("ResumeContext")
    ).withName("_SCRUB_DATA_INPUT");
    public static jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_INPUT$struct$LAYOUT() { return _SCRUB_DATA_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _SCRUB_DATA_INPUT$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_INPUT$Size$LAYOUT() { return _SCRUB_DATA_INPUT$Size$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_INPUT$Size$VH_ = _SCRUB_DATA_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _SCRUB_DATA_INPUT$Size$VH() { return _SCRUB_DATA_INPUT$Size$VH_; }

    static final MemoryLayout _SCRUB_DATA_INPUT$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_INPUT$Flags$LAYOUT() { return _SCRUB_DATA_INPUT$Flags$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_INPUT$Flags$VH_ = _SCRUB_DATA_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _SCRUB_DATA_INPUT$Flags$VH() { return _SCRUB_DATA_INPUT$Flags$VH_; }

    static final MemoryLayout _SCRUB_DATA_INPUT$MaximumIos$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_INPUT$MaximumIos$LAYOUT() { return _SCRUB_DATA_INPUT$MaximumIos$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_INPUT$MaximumIos$VH_ = _SCRUB_DATA_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaximumIos"));
    public static java.lang.invoke.VarHandle _SCRUB_DATA_INPUT$MaximumIos$VH() { return _SCRUB_DATA_INPUT$MaximumIos$VH_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Offset"),
        C_LONGLONG.withName("Length")
    ).withName("_SCRUB_PARITY_EXTENT");
    public static jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT$struct$LAYOUT() { return _SCRUB_PARITY_EXTENT$struct$LAYOUT_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT$Offset$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT$Offset$LAYOUT() { return _SCRUB_PARITY_EXTENT$Offset$LAYOUT_; }

    static final VarHandle _SCRUB_PARITY_EXTENT$Offset$VH_ = _SCRUB_PARITY_EXTENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    public static java.lang.invoke.VarHandle _SCRUB_PARITY_EXTENT$Offset$VH() { return _SCRUB_PARITY_EXTENT$Offset$VH_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT$Length$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT$Length$LAYOUT() { return _SCRUB_PARITY_EXTENT$Length$LAYOUT_; }

    static final VarHandle _SCRUB_PARITY_EXTENT$Length$VH_ = _SCRUB_PARITY_EXTENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    public static java.lang.invoke.VarHandle _SCRUB_PARITY_EXTENT$Length$VH() { return _SCRUB_PARITY_EXTENT$Length$VH_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Size"),
        C_SHORT.withName("Flags"),
        C_SHORT.withName("NumberOfParityExtents"),
        C_SHORT.withName("MaximumNumberOfParityExtents"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Offset"),
            C_LONGLONG.withName("Length")
        ).withName("_SCRUB_PARITY_EXTENT")).withName("ParityExtents")
    ).withName("_SCRUB_PARITY_EXTENT_DATA");
    public static jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT() { return _SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT_DATA$Size$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT_DATA$Size$LAYOUT() { return _SCRUB_PARITY_EXTENT_DATA$Size$LAYOUT_; }

    static final VarHandle _SCRUB_PARITY_EXTENT_DATA$Size$VH_ = _SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _SCRUB_PARITY_EXTENT_DATA$Size$VH() { return _SCRUB_PARITY_EXTENT_DATA$Size$VH_; }

}

