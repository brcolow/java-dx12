// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$31 extends Windows_h$constants$30 {
    Windows_h$constants$31() {}
    static final MemoryLayout tagMEASUREITEMSTRUCT$itemID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMEASUREITEMSTRUCT$itemID$LAYOUT() { return tagMEASUREITEMSTRUCT$itemID$LAYOUT_; }

    static final VarHandle tagMEASUREITEMSTRUCT$itemID$VH_ = tagMEASUREITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("itemID"));
    public static java.lang.invoke.VarHandle tagMEASUREITEMSTRUCT$itemID$VH() { return tagMEASUREITEMSTRUCT$itemID$VH_; }

    static final MemoryLayout tagMEASUREITEMSTRUCT$itemWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMEASUREITEMSTRUCT$itemWidth$LAYOUT() { return tagMEASUREITEMSTRUCT$itemWidth$LAYOUT_; }

    static final VarHandle tagMEASUREITEMSTRUCT$itemWidth$VH_ = tagMEASUREITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("itemWidth"));
    public static java.lang.invoke.VarHandle tagMEASUREITEMSTRUCT$itemWidth$VH() { return tagMEASUREITEMSTRUCT$itemWidth$VH_; }

    static final MemoryLayout tagMEASUREITEMSTRUCT$itemHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMEASUREITEMSTRUCT$itemHeight$LAYOUT() { return tagMEASUREITEMSTRUCT$itemHeight$LAYOUT_; }

    static final VarHandle tagMEASUREITEMSTRUCT$itemHeight$VH_ = tagMEASUREITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("itemHeight"));
    public static java.lang.invoke.VarHandle tagMEASUREITEMSTRUCT$itemHeight$VH() { return tagMEASUREITEMSTRUCT$itemHeight$VH_; }

    static final MemoryLayout tagMEASUREITEMSTRUCT$itemData$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagMEASUREITEMSTRUCT$itemData$LAYOUT() { return tagMEASUREITEMSTRUCT$itemData$LAYOUT_; }

    static final VarHandle tagMEASUREITEMSTRUCT$itemData$VH_ = tagMEASUREITEMSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("itemData"));
    public static java.lang.invoke.VarHandle tagMEASUREITEMSTRUCT$itemData$VH() { return tagMEASUREITEMSTRUCT$itemData$VH_; }

    static final MemoryLayout tagDRAWITEMSTRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("CtlType"),
        C_INT.withName("CtlID"),
        C_INT.withName("itemID"),
        C_INT.withName("itemAction"),
        C_INT.withName("itemState"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndItem"),
        C_POINTER.withName("hDC"),
        MemoryLayout.ofStruct(
            C_INT.withName("left"),
            C_INT.withName("top"),
            C_INT.withName("right"),
            C_INT.withName("bottom")
        ).withName("rcItem"),
        C_LONGLONG.withName("itemData")
    ).withName("tagDRAWITEMSTRUCT");
    public static jdk.incubator.foreign.MemoryLayout tagDRAWITEMSTRUCT$struct$LAYOUT() { return tagDRAWITEMSTRUCT$struct$LAYOUT_; }

    static final MemoryLayout tagDRAWITEMSTRUCT$CtlType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagDRAWITEMSTRUCT$CtlType$LAYOUT() { return tagDRAWITEMSTRUCT$CtlType$LAYOUT_; }

    static final VarHandle tagDRAWITEMSTRUCT$CtlType$VH_ = tagDRAWITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CtlType"));
    public static java.lang.invoke.VarHandle tagDRAWITEMSTRUCT$CtlType$VH() { return tagDRAWITEMSTRUCT$CtlType$VH_; }

    static final MemoryLayout tagDRAWITEMSTRUCT$CtlID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagDRAWITEMSTRUCT$CtlID$LAYOUT() { return tagDRAWITEMSTRUCT$CtlID$LAYOUT_; }

    static final VarHandle tagDRAWITEMSTRUCT$CtlID$VH_ = tagDRAWITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CtlID"));
    public static java.lang.invoke.VarHandle tagDRAWITEMSTRUCT$CtlID$VH() { return tagDRAWITEMSTRUCT$CtlID$VH_; }

    static final MemoryLayout tagDRAWITEMSTRUCT$itemID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagDRAWITEMSTRUCT$itemID$LAYOUT() { return tagDRAWITEMSTRUCT$itemID$LAYOUT_; }

    static final VarHandle tagDRAWITEMSTRUCT$itemID$VH_ = tagDRAWITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("itemID"));
    public static java.lang.invoke.VarHandle tagDRAWITEMSTRUCT$itemID$VH() { return tagDRAWITEMSTRUCT$itemID$VH_; }

    static final MemoryLayout tagDRAWITEMSTRUCT$itemAction$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagDRAWITEMSTRUCT$itemAction$LAYOUT() { return tagDRAWITEMSTRUCT$itemAction$LAYOUT_; }

    static final VarHandle tagDRAWITEMSTRUCT$itemAction$VH_ = tagDRAWITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("itemAction"));
    public static java.lang.invoke.VarHandle tagDRAWITEMSTRUCT$itemAction$VH() { return tagDRAWITEMSTRUCT$itemAction$VH_; }

    static final MemoryLayout tagDRAWITEMSTRUCT$itemState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagDRAWITEMSTRUCT$itemState$LAYOUT() { return tagDRAWITEMSTRUCT$itemState$LAYOUT_; }

    static final VarHandle tagDRAWITEMSTRUCT$itemState$VH_ = tagDRAWITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("itemState"));
    public static java.lang.invoke.VarHandle tagDRAWITEMSTRUCT$itemState$VH() { return tagDRAWITEMSTRUCT$itemState$VH_; }

    static final MemoryLayout tagDRAWITEMSTRUCT$hwndItem$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagDRAWITEMSTRUCT$hwndItem$LAYOUT() { return tagDRAWITEMSTRUCT$hwndItem$LAYOUT_; }

    static final VarHandle tagDRAWITEMSTRUCT$hwndItem$VH_ = MemoryHandles.asAddressVarHandle(tagDRAWITEMSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndItem")));
    public static java.lang.invoke.VarHandle tagDRAWITEMSTRUCT$hwndItem$VH() { return tagDRAWITEMSTRUCT$hwndItem$VH_; }

    static final MemoryLayout tagDRAWITEMSTRUCT$hDC$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagDRAWITEMSTRUCT$hDC$LAYOUT() { return tagDRAWITEMSTRUCT$hDC$LAYOUT_; }

    static final VarHandle tagDRAWITEMSTRUCT$hDC$VH_ = MemoryHandles.asAddressVarHandle(tagDRAWITEMSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hDC")));
    public static java.lang.invoke.VarHandle tagDRAWITEMSTRUCT$hDC$VH() { return tagDRAWITEMSTRUCT$hDC$VH_; }

    static final MemoryLayout tagDRAWITEMSTRUCT$itemData$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagDRAWITEMSTRUCT$itemData$LAYOUT() { return tagDRAWITEMSTRUCT$itemData$LAYOUT_; }

    static final VarHandle tagDRAWITEMSTRUCT$itemData$VH_ = tagDRAWITEMSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("itemData"));
    public static java.lang.invoke.VarHandle tagDRAWITEMSTRUCT$itemData$VH() { return tagDRAWITEMSTRUCT$itemData$VH_; }

    static final MemoryLayout tagDELETEITEMSTRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("CtlType"),
        C_INT.withName("CtlID"),
        C_INT.withName("itemID"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndItem"),
        C_LONGLONG.withName("itemData")
    ).withName("tagDELETEITEMSTRUCT");
    public static jdk.incubator.foreign.MemoryLayout tagDELETEITEMSTRUCT$struct$LAYOUT() { return tagDELETEITEMSTRUCT$struct$LAYOUT_; }

    static final MemoryLayout tagDELETEITEMSTRUCT$CtlType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagDELETEITEMSTRUCT$CtlType$LAYOUT() { return tagDELETEITEMSTRUCT$CtlType$LAYOUT_; }

    static final VarHandle tagDELETEITEMSTRUCT$CtlType$VH_ = tagDELETEITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CtlType"));
    public static java.lang.invoke.VarHandle tagDELETEITEMSTRUCT$CtlType$VH() { return tagDELETEITEMSTRUCT$CtlType$VH_; }

    static final MemoryLayout tagDELETEITEMSTRUCT$CtlID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagDELETEITEMSTRUCT$CtlID$LAYOUT() { return tagDELETEITEMSTRUCT$CtlID$LAYOUT_; }

    static final VarHandle tagDELETEITEMSTRUCT$CtlID$VH_ = tagDELETEITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CtlID"));
    public static java.lang.invoke.VarHandle tagDELETEITEMSTRUCT$CtlID$VH() { return tagDELETEITEMSTRUCT$CtlID$VH_; }

    static final MemoryLayout tagDELETEITEMSTRUCT$itemID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagDELETEITEMSTRUCT$itemID$LAYOUT() { return tagDELETEITEMSTRUCT$itemID$LAYOUT_; }

    static final VarHandle tagDELETEITEMSTRUCT$itemID$VH_ = tagDELETEITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("itemID"));
    public static java.lang.invoke.VarHandle tagDELETEITEMSTRUCT$itemID$VH() { return tagDELETEITEMSTRUCT$itemID$VH_; }

    static final MemoryLayout tagDELETEITEMSTRUCT$hwndItem$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagDELETEITEMSTRUCT$hwndItem$LAYOUT() { return tagDELETEITEMSTRUCT$hwndItem$LAYOUT_; }

    static final VarHandle tagDELETEITEMSTRUCT$hwndItem$VH_ = MemoryHandles.asAddressVarHandle(tagDELETEITEMSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndItem")));
    public static java.lang.invoke.VarHandle tagDELETEITEMSTRUCT$hwndItem$VH() { return tagDELETEITEMSTRUCT$hwndItem$VH_; }

    static final MemoryLayout tagDELETEITEMSTRUCT$itemData$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagDELETEITEMSTRUCT$itemData$LAYOUT() { return tagDELETEITEMSTRUCT$itemData$LAYOUT_; }

    static final VarHandle tagDELETEITEMSTRUCT$itemData$VH_ = tagDELETEITEMSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("itemData"));
    public static java.lang.invoke.VarHandle tagDELETEITEMSTRUCT$itemData$VH() { return tagDELETEITEMSTRUCT$itemData$VH_; }

    static final MemoryLayout tagCOMPAREITEMSTRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("CtlType"),
        C_INT.withName("CtlID"),
        C_POINTER.withName("hwndItem"),
        C_INT.withName("itemID1"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("itemData1"),
        C_INT.withName("itemID2"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("itemData2"),
        C_INT.withName("dwLocaleId"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagCOMPAREITEMSTRUCT");
    public static jdk.incubator.foreign.MemoryLayout tagCOMPAREITEMSTRUCT$struct$LAYOUT() { return tagCOMPAREITEMSTRUCT$struct$LAYOUT_; }

    static final MemoryLayout tagCOMPAREITEMSTRUCT$CtlType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCOMPAREITEMSTRUCT$CtlType$LAYOUT() { return tagCOMPAREITEMSTRUCT$CtlType$LAYOUT_; }

    static final VarHandle tagCOMPAREITEMSTRUCT$CtlType$VH_ = tagCOMPAREITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CtlType"));
    public static java.lang.invoke.VarHandle tagCOMPAREITEMSTRUCT$CtlType$VH() { return tagCOMPAREITEMSTRUCT$CtlType$VH_; }

    static final MemoryLayout tagCOMPAREITEMSTRUCT$CtlID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCOMPAREITEMSTRUCT$CtlID$LAYOUT() { return tagCOMPAREITEMSTRUCT$CtlID$LAYOUT_; }

    static final VarHandle tagCOMPAREITEMSTRUCT$CtlID$VH_ = tagCOMPAREITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CtlID"));
    public static java.lang.invoke.VarHandle tagCOMPAREITEMSTRUCT$CtlID$VH() { return tagCOMPAREITEMSTRUCT$CtlID$VH_; }

    static final MemoryLayout tagCOMPAREITEMSTRUCT$hwndItem$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagCOMPAREITEMSTRUCT$hwndItem$LAYOUT() { return tagCOMPAREITEMSTRUCT$hwndItem$LAYOUT_; }

    static final VarHandle tagCOMPAREITEMSTRUCT$hwndItem$VH_ = MemoryHandles.asAddressVarHandle(tagCOMPAREITEMSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndItem")));
    public static java.lang.invoke.VarHandle tagCOMPAREITEMSTRUCT$hwndItem$VH() { return tagCOMPAREITEMSTRUCT$hwndItem$VH_; }

    static final MemoryLayout tagCOMPAREITEMSTRUCT$itemID1$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCOMPAREITEMSTRUCT$itemID1$LAYOUT() { return tagCOMPAREITEMSTRUCT$itemID1$LAYOUT_; }

    static final VarHandle tagCOMPAREITEMSTRUCT$itemID1$VH_ = tagCOMPAREITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("itemID1"));
    public static java.lang.invoke.VarHandle tagCOMPAREITEMSTRUCT$itemID1$VH() { return tagCOMPAREITEMSTRUCT$itemID1$VH_; }

    static final MemoryLayout tagCOMPAREITEMSTRUCT$itemData1$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagCOMPAREITEMSTRUCT$itemData1$LAYOUT() { return tagCOMPAREITEMSTRUCT$itemData1$LAYOUT_; }

    static final VarHandle tagCOMPAREITEMSTRUCT$itemData1$VH_ = tagCOMPAREITEMSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("itemData1"));
    public static java.lang.invoke.VarHandle tagCOMPAREITEMSTRUCT$itemData1$VH() { return tagCOMPAREITEMSTRUCT$itemData1$VH_; }

    static final MemoryLayout tagCOMPAREITEMSTRUCT$itemID2$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCOMPAREITEMSTRUCT$itemID2$LAYOUT() { return tagCOMPAREITEMSTRUCT$itemID2$LAYOUT_; }

    static final VarHandle tagCOMPAREITEMSTRUCT$itemID2$VH_ = tagCOMPAREITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("itemID2"));
    public static java.lang.invoke.VarHandle tagCOMPAREITEMSTRUCT$itemID2$VH() { return tagCOMPAREITEMSTRUCT$itemID2$VH_; }

    static final MemoryLayout tagCOMPAREITEMSTRUCT$itemData2$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagCOMPAREITEMSTRUCT$itemData2$LAYOUT() { return tagCOMPAREITEMSTRUCT$itemData2$LAYOUT_; }

    static final VarHandle tagCOMPAREITEMSTRUCT$itemData2$VH_ = tagCOMPAREITEMSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("itemData2"));
    public static java.lang.invoke.VarHandle tagCOMPAREITEMSTRUCT$itemData2$VH() { return tagCOMPAREITEMSTRUCT$itemData2$VH_; }

    static final MemoryLayout tagCOMPAREITEMSTRUCT$dwLocaleId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCOMPAREITEMSTRUCT$dwLocaleId$LAYOUT() { return tagCOMPAREITEMSTRUCT$dwLocaleId$LAYOUT_; }

    static final VarHandle tagCOMPAREITEMSTRUCT$dwLocaleId$VH_ = tagCOMPAREITEMSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwLocaleId"));
    public static java.lang.invoke.VarHandle tagCOMPAREITEMSTRUCT$dwLocaleId$VH() { return tagCOMPAREITEMSTRUCT$dwLocaleId$VH_; }

    static final FunctionDescriptor GetMessageA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetMessageA$FUNC() { return GetMessageA$FUNC_; }

    static final MethodHandle GetMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMessageA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        GetMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMessageA$MH() { return GetMessageA$MH_; }

    static final FunctionDescriptor GetMessageW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetMessageW$FUNC() { return GetMessageW$FUNC_; }

    static final MethodHandle GetMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMessageW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        GetMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMessageW$MH() { return GetMessageW$MH_; }

    static final FunctionDescriptor TranslateMessage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TranslateMessage$FUNC() { return TranslateMessage$FUNC_; }

    static final MethodHandle TranslateMessage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TranslateMessage",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        TranslateMessage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TranslateMessage$MH() { return TranslateMessage$MH_; }

    static final FunctionDescriptor DispatchMessageA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DispatchMessageA$FUNC() { return DispatchMessageA$FUNC_; }

    static final MethodHandle DispatchMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DispatchMessageA",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        DispatchMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DispatchMessageA$MH() { return DispatchMessageA$MH_; }

    static final FunctionDescriptor DispatchMessageW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DispatchMessageW$FUNC() { return DispatchMessageW$FUNC_; }

    static final MethodHandle DispatchMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DispatchMessageW",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        DispatchMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DispatchMessageW$MH() { return DispatchMessageW$MH_; }

    static final FunctionDescriptor SetMessageQueue$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetMessageQueue$FUNC() { return SetMessageQueue$FUNC_; }

    static final MethodHandle SetMessageQueue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMessageQueue",
        "(I)I",
        SetMessageQueue$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetMessageQueue$MH() { return SetMessageQueue$MH_; }

    static final FunctionDescriptor PeekMessageA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PeekMessageA$FUNC() { return PeekMessageA$FUNC_; }

    static final MethodHandle PeekMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PeekMessageA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        PeekMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PeekMessageA$MH() { return PeekMessageA$MH_; }

    static final FunctionDescriptor PeekMessageW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PeekMessageW$FUNC() { return PeekMessageW$FUNC_; }

    static final MethodHandle PeekMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PeekMessageW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        PeekMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PeekMessageW$MH() { return PeekMessageW$MH_; }

    static final FunctionDescriptor RegisterHotKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterHotKey$FUNC() { return RegisterHotKey$FUNC_; }

    static final MethodHandle RegisterHotKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterHotKey",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        RegisterHotKey$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterHotKey$MH() { return RegisterHotKey$MH_; }

    static final FunctionDescriptor UnregisterHotKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterHotKey$FUNC() { return UnregisterHotKey$FUNC_; }

    static final MethodHandle UnregisterHotKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterHotKey",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        UnregisterHotKey$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterHotKey$MH() { return UnregisterHotKey$MH_; }

    static final FunctionDescriptor ExitWindowsEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ExitWindowsEx$FUNC() { return ExitWindowsEx$FUNC_; }

    static final MethodHandle ExitWindowsEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExitWindowsEx",
        "(II)I",
        ExitWindowsEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ExitWindowsEx$MH() { return ExitWindowsEx$MH_; }

    static final FunctionDescriptor SwapMouseButton$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SwapMouseButton$FUNC() { return SwapMouseButton$FUNC_; }

    static final MethodHandle SwapMouseButton$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SwapMouseButton",
        "(I)I",
        SwapMouseButton$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SwapMouseButton$MH() { return SwapMouseButton$MH_; }

    static final FunctionDescriptor GetMessagePos$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetMessagePos$FUNC() { return GetMessagePos$FUNC_; }

    static final MethodHandle GetMessagePos$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMessagePos",
        "()I",
        GetMessagePos$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMessagePos$MH() { return GetMessagePos$MH_; }

    static final FunctionDescriptor GetMessageTime$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetMessageTime$FUNC() { return GetMessageTime$FUNC_; }

    static final MethodHandle GetMessageTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMessageTime",
        "()I",
        GetMessageTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMessageTime$MH() { return GetMessageTime$MH_; }

    static final FunctionDescriptor GetMessageExtraInfo$FUNC_ = FunctionDescriptor.of(C_LONGLONG);
    public static jdk.incubator.foreign.FunctionDescriptor GetMessageExtraInfo$FUNC() { return GetMessageExtraInfo$FUNC_; }

    static final MethodHandle GetMessageExtraInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMessageExtraInfo",
        "()J",
        GetMessageExtraInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMessageExtraInfo$MH() { return GetMessageExtraInfo$MH_; }

    static final FunctionDescriptor GetUnpredictedMessagePos$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetUnpredictedMessagePos$FUNC() { return GetUnpredictedMessagePos$FUNC_; }

    static final MethodHandle GetUnpredictedMessagePos$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUnpredictedMessagePos",
        "()I",
        GetUnpredictedMessagePos$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUnpredictedMessagePos$MH() { return GetUnpredictedMessagePos$MH_; }

    static final FunctionDescriptor IsWow64Message$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor IsWow64Message$FUNC() { return IsWow64Message$FUNC_; }

    static final MethodHandle IsWow64Message$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsWow64Message",
        "()I",
        IsWow64Message$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsWow64Message$MH() { return IsWow64Message$MH_; }

    static final FunctionDescriptor SetMessageExtraInfo$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetMessageExtraInfo$FUNC() { return SetMessageExtraInfo$FUNC_; }

    static final MethodHandle SetMessageExtraInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMessageExtraInfo",
        "(J)J",
        SetMessageExtraInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetMessageExtraInfo$MH() { return SetMessageExtraInfo$MH_; }

    static final FunctionDescriptor SendMessageA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendMessageA$FUNC() { return SendMessageA$FUNC_; }

    static final MethodHandle SendMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendMessageA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        SendMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SendMessageA$MH() { return SendMessageA$MH_; }

    static final FunctionDescriptor SendMessageW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendMessageW$FUNC() { return SendMessageW$FUNC_; }

    static final MethodHandle SendMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendMessageW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        SendMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SendMessageW$MH() { return SendMessageW$MH_; }

    static final FunctionDescriptor SendMessageTimeoutA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendMessageTimeoutA$FUNC() { return SendMessageTimeoutA$FUNC_; }

    static final MethodHandle SendMessageTimeoutA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendMessageTimeoutA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJIILjdk/incubator/foreign/MemoryAddress;)J",
        SendMessageTimeoutA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SendMessageTimeoutA$MH() { return SendMessageTimeoutA$MH_; }

    static final FunctionDescriptor SendMessageTimeoutW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendMessageTimeoutW$FUNC() { return SendMessageTimeoutW$FUNC_; }

    static final MethodHandle SendMessageTimeoutW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendMessageTimeoutW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJIILjdk/incubator/foreign/MemoryAddress;)J",
        SendMessageTimeoutW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SendMessageTimeoutW$MH() { return SendMessageTimeoutW$MH_; }

    static final FunctionDescriptor SendNotifyMessageA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendNotifyMessageA$FUNC() { return SendNotifyMessageA$FUNC_; }

    static final MethodHandle SendNotifyMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendNotifyMessageA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)I",
        SendNotifyMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SendNotifyMessageA$MH() { return SendNotifyMessageA$MH_; }

    static final FunctionDescriptor SendNotifyMessageW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendNotifyMessageW$FUNC() { return SendNotifyMessageW$FUNC_; }

    static final MethodHandle SendNotifyMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendNotifyMessageW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)I",
        SendNotifyMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SendNotifyMessageW$MH() { return SendNotifyMessageW$MH_; }

    static final FunctionDescriptor SendMessageCallbackA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendMessageCallbackA$FUNC() { return SendMessageCallbackA$FUNC_; }

    static final MethodHandle SendMessageCallbackA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendMessageCallbackA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJLjdk/incubator/foreign/MemoryAddress;J)I",
        SendMessageCallbackA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SendMessageCallbackA$MH() { return SendMessageCallbackA$MH_; }

    static final FunctionDescriptor SendMessageCallbackA$lpResultCallBack$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendMessageCallbackA$lpResultCallBack$FUNC() { return SendMessageCallbackA$lpResultCallBack$FUNC_; }

    static final FunctionDescriptor SendMessageCallbackW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendMessageCallbackW$FUNC() { return SendMessageCallbackW$FUNC_; }

    static final MethodHandle SendMessageCallbackW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendMessageCallbackW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJLjdk/incubator/foreign/MemoryAddress;J)I",
        SendMessageCallbackW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SendMessageCallbackW$MH() { return SendMessageCallbackW$MH_; }

    static final FunctionDescriptor SendMessageCallbackW$lpResultCallBack$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendMessageCallbackW$lpResultCallBack$FUNC() { return SendMessageCallbackW$lpResultCallBack$FUNC_; }

    static final MemoryLayout BSMINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hdesk"),
        C_POINTER.withName("hwnd"),
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("luid")
    );
    public static jdk.incubator.foreign.MemoryLayout BSMINFO$struct$LAYOUT() { return BSMINFO$struct$LAYOUT_; }

    static final MemoryLayout BSMINFO$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout BSMINFO$cbSize$LAYOUT() { return BSMINFO$cbSize$LAYOUT_; }

    static final VarHandle BSMINFO$cbSize$VH_ = BSMINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle BSMINFO$cbSize$VH() { return BSMINFO$cbSize$VH_; }

    static final MemoryLayout BSMINFO$hdesk$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout BSMINFO$hdesk$LAYOUT() { return BSMINFO$hdesk$LAYOUT_; }

    static final VarHandle BSMINFO$hdesk$VH_ = MemoryHandles.asAddressVarHandle(BSMINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hdesk")));
    public static java.lang.invoke.VarHandle BSMINFO$hdesk$VH() { return BSMINFO$hdesk$VH_; }

    static final MemoryLayout BSMINFO$hwnd$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout BSMINFO$hwnd$LAYOUT() { return BSMINFO$hwnd$LAYOUT_; }

    static final VarHandle BSMINFO$hwnd$VH_ = MemoryHandles.asAddressVarHandle(BSMINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwnd")));
    public static java.lang.invoke.VarHandle BSMINFO$hwnd$VH() { return BSMINFO$hwnd$VH_; }

    static final FunctionDescriptor BroadcastSystemMessageExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BroadcastSystemMessageExA$FUNC() { return BroadcastSystemMessageExA$FUNC_; }

    static final MethodHandle BroadcastSystemMessageExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BroadcastSystemMessageExA",
        "(ILjdk/incubator/foreign/MemoryAddress;IJJLjdk/incubator/foreign/MemoryAddress;)I",
        BroadcastSystemMessageExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BroadcastSystemMessageExA$MH() { return BroadcastSystemMessageExA$MH_; }

    static final FunctionDescriptor BroadcastSystemMessageExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BroadcastSystemMessageExW$FUNC() { return BroadcastSystemMessageExW$FUNC_; }

    static final MethodHandle BroadcastSystemMessageExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BroadcastSystemMessageExW",
        "(ILjdk/incubator/foreign/MemoryAddress;IJJLjdk/incubator/foreign/MemoryAddress;)I",
        BroadcastSystemMessageExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BroadcastSystemMessageExW$MH() { return BroadcastSystemMessageExW$MH_; }

    static final FunctionDescriptor BroadcastSystemMessageA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor BroadcastSystemMessageA$FUNC() { return BroadcastSystemMessageA$FUNC_; }

    static final MethodHandle BroadcastSystemMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BroadcastSystemMessageA",
        "(ILjdk/incubator/foreign/MemoryAddress;IJJ)I",
        BroadcastSystemMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BroadcastSystemMessageA$MH() { return BroadcastSystemMessageA$MH_; }

    static final FunctionDescriptor BroadcastSystemMessageW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor BroadcastSystemMessageW$FUNC() { return BroadcastSystemMessageW$FUNC_; }

    static final MethodHandle BroadcastSystemMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BroadcastSystemMessageW",
        "(ILjdk/incubator/foreign/MemoryAddress;IJJ)I",
        BroadcastSystemMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BroadcastSystemMessageW$MH() { return BroadcastSystemMessageW$MH_; }

    static final FunctionDescriptor RegisterDeviceNotificationA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterDeviceNotificationA$FUNC() { return RegisterDeviceNotificationA$FUNC_; }

    static final MethodHandle RegisterDeviceNotificationA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterDeviceNotificationA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        RegisterDeviceNotificationA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterDeviceNotificationA$MH() { return RegisterDeviceNotificationA$MH_; }

    static final FunctionDescriptor RegisterDeviceNotificationW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterDeviceNotificationW$FUNC() { return RegisterDeviceNotificationW$FUNC_; }

    static final MethodHandle RegisterDeviceNotificationW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterDeviceNotificationW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        RegisterDeviceNotificationW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterDeviceNotificationW$MH() { return RegisterDeviceNotificationW$MH_; }

    static final FunctionDescriptor UnregisterDeviceNotification$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterDeviceNotification$FUNC() { return UnregisterDeviceNotification$FUNC_; }

    static final MethodHandle UnregisterDeviceNotification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterDeviceNotification",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnregisterDeviceNotification$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterDeviceNotification$MH() { return UnregisterDeviceNotification$MH_; }

    static final FunctionDescriptor RegisterPowerSettingNotification$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterPowerSettingNotification$FUNC() { return RegisterPowerSettingNotification$FUNC_; }

    static final MethodHandle RegisterPowerSettingNotification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterPowerSettingNotification",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        RegisterPowerSettingNotification$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterPowerSettingNotification$MH() { return RegisterPowerSettingNotification$MH_; }

    static final FunctionDescriptor UnregisterPowerSettingNotification$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterPowerSettingNotification$FUNC() { return UnregisterPowerSettingNotification$FUNC_; }

    static final MethodHandle UnregisterPowerSettingNotification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterPowerSettingNotification",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnregisterPowerSettingNotification$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterPowerSettingNotification$MH() { return UnregisterPowerSettingNotification$MH_; }

    static final FunctionDescriptor RegisterSuspendResumeNotification$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterSuspendResumeNotification$FUNC() { return RegisterSuspendResumeNotification$FUNC_; }

    static final MethodHandle RegisterSuspendResumeNotification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterSuspendResumeNotification",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        RegisterSuspendResumeNotification$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterSuspendResumeNotification$MH() { return RegisterSuspendResumeNotification$MH_; }

    static final FunctionDescriptor UnregisterSuspendResumeNotification$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterSuspendResumeNotification$FUNC() { return UnregisterSuspendResumeNotification$FUNC_; }

    static final MethodHandle UnregisterSuspendResumeNotification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterSuspendResumeNotification",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnregisterSuspendResumeNotification$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterSuspendResumeNotification$MH() { return UnregisterSuspendResumeNotification$MH_; }

    static final FunctionDescriptor PostMessageA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor PostMessageA$FUNC() { return PostMessageA$FUNC_; }

    static final MethodHandle PostMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PostMessageA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)I",
        PostMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PostMessageA$MH() { return PostMessageA$MH_; }

    static final FunctionDescriptor PostMessageW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor PostMessageW$FUNC() { return PostMessageW$FUNC_; }

    static final MethodHandle PostMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PostMessageW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)I",
        PostMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PostMessageW$MH() { return PostMessageW$MH_; }

    static final FunctionDescriptor PostThreadMessageA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor PostThreadMessageA$FUNC() { return PostThreadMessageA$FUNC_; }

    static final MethodHandle PostThreadMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PostThreadMessageA",
        "(IIJJ)I",
        PostThreadMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PostThreadMessageA$MH() { return PostThreadMessageA$MH_; }

    static final FunctionDescriptor PostThreadMessageW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor PostThreadMessageW$FUNC() { return PostThreadMessageW$FUNC_; }

    static final MethodHandle PostThreadMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PostThreadMessageW",
        "(IIJJ)I",
        PostThreadMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PostThreadMessageW$MH() { return PostThreadMessageW$MH_; }

    static final FunctionDescriptor AttachThreadInput$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor AttachThreadInput$FUNC() { return AttachThreadInput$FUNC_; }

    static final MethodHandle AttachThreadInput$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AttachThreadInput",
        "(III)I",
        AttachThreadInput$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AttachThreadInput$MH() { return AttachThreadInput$MH_; }

    static final FunctionDescriptor ReplyMessage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReplyMessage$FUNC() { return ReplyMessage$FUNC_; }

    static final MethodHandle ReplyMessage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReplyMessage",
        "(J)I",
        ReplyMessage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReplyMessage$MH() { return ReplyMessage$MH_; }

    static final FunctionDescriptor WaitMessage$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor WaitMessage$FUNC() { return WaitMessage$FUNC_; }

    static final MethodHandle WaitMessage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitMessage",
        "()I",
        WaitMessage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitMessage$MH() { return WaitMessage$MH_; }

    static final FunctionDescriptor WaitForInputIdle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitForInputIdle$FUNC() { return WaitForInputIdle$FUNC_; }

    static final MethodHandle WaitForInputIdle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitForInputIdle",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WaitForInputIdle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitForInputIdle$MH() { return WaitForInputIdle$MH_; }

    static final FunctionDescriptor DefWindowProcA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DefWindowProcA$FUNC() { return DefWindowProcA$FUNC_; }

    static final MethodHandle DefWindowProcA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DefWindowProcA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        DefWindowProcA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DefWindowProcA$MH() { return DefWindowProcA$MH_; }

    static final FunctionDescriptor DefWindowProcW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DefWindowProcW$FUNC() { return DefWindowProcW$FUNC_; }

    static final MethodHandle DefWindowProcW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DefWindowProcW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        DefWindowProcW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DefWindowProcW$MH() { return DefWindowProcW$MH_; }

    static final FunctionDescriptor PostQuitMessage$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PostQuitMessage$FUNC() { return PostQuitMessage$FUNC_; }

    static final MethodHandle PostQuitMessage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PostQuitMessage",
        "(I)V",
        PostQuitMessage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PostQuitMessage$MH() { return PostQuitMessage$MH_; }

    static final FunctionDescriptor CallWindowProcA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallWindowProcA$FUNC() { return CallWindowProcA$FUNC_; }

    static final MethodHandle CallWindowProcA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CallWindowProcA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        CallWindowProcA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CallWindowProcA$MH() { return CallWindowProcA$MH_; }

    static final FunctionDescriptor CallWindowProcA$lpPrevWndFunc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallWindowProcA$lpPrevWndFunc$FUNC() { return CallWindowProcA$lpPrevWndFunc$FUNC_; }

    static final FunctionDescriptor CallWindowProcW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallWindowProcW$FUNC() { return CallWindowProcW$FUNC_; }

    static final MethodHandle CallWindowProcW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CallWindowProcW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        CallWindowProcW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CallWindowProcW$MH() { return CallWindowProcW$MH_; }

    static final FunctionDescriptor CallWindowProcW$lpPrevWndFunc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallWindowProcW$lpPrevWndFunc$FUNC() { return CallWindowProcW$lpPrevWndFunc$FUNC_; }

    static final FunctionDescriptor InSendMessage$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor InSendMessage$FUNC() { return InSendMessage$FUNC_; }

    static final MethodHandle InSendMessage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InSendMessage",
        "()I",
        InSendMessage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InSendMessage$MH() { return InSendMessage$MH_; }

    static final FunctionDescriptor InSendMessageEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InSendMessageEx$FUNC() { return InSendMessageEx$FUNC_; }

    static final MethodHandle InSendMessageEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InSendMessageEx",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        InSendMessageEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InSendMessageEx$MH() { return InSendMessageEx$MH_; }

    static final FunctionDescriptor GetDoubleClickTime$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetDoubleClickTime$FUNC() { return GetDoubleClickTime$FUNC_; }

    static final MethodHandle GetDoubleClickTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDoubleClickTime",
        "()I",
        GetDoubleClickTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDoubleClickTime$MH() { return GetDoubleClickTime$MH_; }

    static final FunctionDescriptor SetDoubleClickTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDoubleClickTime$FUNC() { return SetDoubleClickTime$FUNC_; }

    static final MethodHandle SetDoubleClickTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDoubleClickTime",
        "(I)I",
        SetDoubleClickTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDoubleClickTime$MH() { return SetDoubleClickTime$MH_; }

    static final FunctionDescriptor RegisterClassA$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterClassA$FUNC() { return RegisterClassA$FUNC_; }

    static final MethodHandle RegisterClassA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterClassA",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        RegisterClassA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterClassA$MH() { return RegisterClassA$MH_; }

    static final FunctionDescriptor RegisterClassW$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterClassW$FUNC() { return RegisterClassW$FUNC_; }

    static final MethodHandle RegisterClassW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterClassW",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        RegisterClassW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterClassW$MH() { return RegisterClassW$MH_; }

    static final FunctionDescriptor UnregisterClassA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterClassA$FUNC() { return UnregisterClassA$FUNC_; }

    static final MethodHandle UnregisterClassA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterClassA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        UnregisterClassA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterClassA$MH() { return UnregisterClassA$MH_; }

    static final FunctionDescriptor UnregisterClassW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterClassW$FUNC() { return UnregisterClassW$FUNC_; }

    static final MethodHandle UnregisterClassW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterClassW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        UnregisterClassW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterClassW$MH() { return UnregisterClassW$MH_; }

    static final FunctionDescriptor GetClassInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClassInfoA$FUNC() { return GetClassInfoA$FUNC_; }

    static final MethodHandle GetClassInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassInfoA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetClassInfoA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClassInfoA$MH() { return GetClassInfoA$MH_; }

    static final FunctionDescriptor GetClassInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClassInfoW$FUNC() { return GetClassInfoW$FUNC_; }

    static final MethodHandle GetClassInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassInfoW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetClassInfoW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClassInfoW$MH() { return GetClassInfoW$MH_; }

    static final FunctionDescriptor RegisterClassExA$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterClassExA$FUNC() { return RegisterClassExA$FUNC_; }

    static final MethodHandle RegisterClassExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterClassExA",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        RegisterClassExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterClassExA$MH() { return RegisterClassExA$MH_; }

    static final FunctionDescriptor RegisterClassExW$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterClassExW$FUNC() { return RegisterClassExW$FUNC_; }

    static final MethodHandle RegisterClassExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterClassExW",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        RegisterClassExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterClassExW$MH() { return RegisterClassExW$MH_; }

    static final FunctionDescriptor GetClassInfoExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClassInfoExA$FUNC() { return GetClassInfoExA$FUNC_; }

    static final MethodHandle GetClassInfoExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassInfoExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetClassInfoExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClassInfoExA$MH() { return GetClassInfoExA$MH_; }

    static final FunctionDescriptor GetClassInfoExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClassInfoExW$FUNC() { return GetClassInfoExW$FUNC_; }

    static final MethodHandle GetClassInfoExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassInfoExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetClassInfoExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClassInfoExW$MH() { return GetClassInfoExW$MH_; }

    static final FunctionDescriptor CreateWindowExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateWindowExA$FUNC() { return CreateWindowExA$FUNC_; }

    static final MethodHandle CreateWindowExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateWindowExA",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateWindowExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateWindowExA$MH() { return CreateWindowExA$MH_; }

    static final FunctionDescriptor CreateWindowExW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateWindowExW$FUNC() { return CreateWindowExW$FUNC_; }

    static final MethodHandle CreateWindowExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateWindowExW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateWindowExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateWindowExW$MH() { return CreateWindowExW$MH_; }

    static final FunctionDescriptor IsWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsWindow$FUNC() { return IsWindow$FUNC_; }

    static final MethodHandle IsWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsWindow$MH() { return IsWindow$MH_; }

    static final FunctionDescriptor IsMenu$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsMenu$FUNC() { return IsMenu$FUNC_; }

    static final MethodHandle IsMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsMenu",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsMenu$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsMenu$MH() { return IsMenu$MH_; }

    static final FunctionDescriptor IsChild$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsChild$FUNC() { return IsChild$FUNC_; }

    static final MethodHandle IsChild$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsChild",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IsChild$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsChild$MH() { return IsChild$MH_; }

    static final FunctionDescriptor DestroyWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DestroyWindow$FUNC() { return DestroyWindow$FUNC_; }

    static final MethodHandle DestroyWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DestroyWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DestroyWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DestroyWindow$MH() { return DestroyWindow$MH_; }

    static final FunctionDescriptor ShowWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ShowWindow$FUNC() { return ShowWindow$FUNC_; }

    static final MethodHandle ShowWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ShowWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ShowWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ShowWindow$MH() { return ShowWindow$MH_; }

    static final FunctionDescriptor AnimateWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor AnimateWindow$FUNC() { return AnimateWindow$FUNC_; }

    static final MethodHandle AnimateWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AnimateWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        AnimateWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AnimateWindow$MH() { return AnimateWindow$MH_; }

    static final FunctionDescriptor UpdateLayeredWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor UpdateLayeredWindow$FUNC() { return UpdateLayeredWindow$FUNC_; }

    static final MethodHandle UpdateLayeredWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UpdateLayeredWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        UpdateLayeredWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UpdateLayeredWindow$MH() { return UpdateLayeredWindow$MH_; }

    static final MemoryLayout tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hdcDst"),
        C_POINTER.withName("pptDst"),
        C_POINTER.withName("psize"),
        C_POINTER.withName("hdcSrc"),
        C_POINTER.withName("pptSrc"),
        C_INT.withName("crKey"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pblend"),
        C_INT.withName("dwFlags"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("prcDirty")
    ).withName("tagUPDATELAYEREDWINDOWINFO");
    public static jdk.incubator.foreign.MemoryLayout tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT() { return tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_; }

    static final MemoryLayout tagUPDATELAYEREDWINDOWINFO$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagUPDATELAYEREDWINDOWINFO$cbSize$LAYOUT() { return tagUPDATELAYEREDWINDOWINFO$cbSize$LAYOUT_; }

    static final VarHandle tagUPDATELAYEREDWINDOWINFO$cbSize$VH_ = tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagUPDATELAYEREDWINDOWINFO$cbSize$VH() { return tagUPDATELAYEREDWINDOWINFO$cbSize$VH_; }

    static final MemoryLayout tagUPDATELAYEREDWINDOWINFO$hdcDst$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagUPDATELAYEREDWINDOWINFO$hdcDst$LAYOUT() { return tagUPDATELAYEREDWINDOWINFO$hdcDst$LAYOUT_; }

    static final VarHandle tagUPDATELAYEREDWINDOWINFO$hdcDst$VH_ = MemoryHandles.asAddressVarHandle(tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hdcDst")));
    public static java.lang.invoke.VarHandle tagUPDATELAYEREDWINDOWINFO$hdcDst$VH() { return tagUPDATELAYEREDWINDOWINFO$hdcDst$VH_; }

    static final MemoryLayout tagUPDATELAYEREDWINDOWINFO$pptDst$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagUPDATELAYEREDWINDOWINFO$pptDst$LAYOUT() { return tagUPDATELAYEREDWINDOWINFO$pptDst$LAYOUT_; }

    static final VarHandle tagUPDATELAYEREDWINDOWINFO$pptDst$VH_ = MemoryHandles.asAddressVarHandle(tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pptDst")));
    public static java.lang.invoke.VarHandle tagUPDATELAYEREDWINDOWINFO$pptDst$VH() { return tagUPDATELAYEREDWINDOWINFO$pptDst$VH_; }

    static final MemoryLayout tagUPDATELAYEREDWINDOWINFO$psize$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagUPDATELAYEREDWINDOWINFO$psize$LAYOUT() { return tagUPDATELAYEREDWINDOWINFO$psize$LAYOUT_; }

    static final VarHandle tagUPDATELAYEREDWINDOWINFO$psize$VH_ = MemoryHandles.asAddressVarHandle(tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("psize")));
    public static java.lang.invoke.VarHandle tagUPDATELAYEREDWINDOWINFO$psize$VH() { return tagUPDATELAYEREDWINDOWINFO$psize$VH_; }

    static final MemoryLayout tagUPDATELAYEREDWINDOWINFO$hdcSrc$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagUPDATELAYEREDWINDOWINFO$hdcSrc$LAYOUT() { return tagUPDATELAYEREDWINDOWINFO$hdcSrc$LAYOUT_; }

    static final VarHandle tagUPDATELAYEREDWINDOWINFO$hdcSrc$VH_ = MemoryHandles.asAddressVarHandle(tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hdcSrc")));
    public static java.lang.invoke.VarHandle tagUPDATELAYEREDWINDOWINFO$hdcSrc$VH() { return tagUPDATELAYEREDWINDOWINFO$hdcSrc$VH_; }

    static final MemoryLayout tagUPDATELAYEREDWINDOWINFO$pptSrc$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagUPDATELAYEREDWINDOWINFO$pptSrc$LAYOUT() { return tagUPDATELAYEREDWINDOWINFO$pptSrc$LAYOUT_; }

    static final VarHandle tagUPDATELAYEREDWINDOWINFO$pptSrc$VH_ = MemoryHandles.asAddressVarHandle(tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pptSrc")));
    public static java.lang.invoke.VarHandle tagUPDATELAYEREDWINDOWINFO$pptSrc$VH() { return tagUPDATELAYEREDWINDOWINFO$pptSrc$VH_; }

    static final MemoryLayout tagUPDATELAYEREDWINDOWINFO$crKey$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagUPDATELAYEREDWINDOWINFO$crKey$LAYOUT() { return tagUPDATELAYEREDWINDOWINFO$crKey$LAYOUT_; }

    static final VarHandle tagUPDATELAYEREDWINDOWINFO$crKey$VH_ = tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("crKey"));
    public static java.lang.invoke.VarHandle tagUPDATELAYEREDWINDOWINFO$crKey$VH() { return tagUPDATELAYEREDWINDOWINFO$crKey$VH_; }

    static final MemoryLayout tagUPDATELAYEREDWINDOWINFO$pblend$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagUPDATELAYEREDWINDOWINFO$pblend$LAYOUT() { return tagUPDATELAYEREDWINDOWINFO$pblend$LAYOUT_; }

    static final VarHandle tagUPDATELAYEREDWINDOWINFO$pblend$VH_ = MemoryHandles.asAddressVarHandle(tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pblend")));
    public static java.lang.invoke.VarHandle tagUPDATELAYEREDWINDOWINFO$pblend$VH() { return tagUPDATELAYEREDWINDOWINFO$pblend$VH_; }

    static final MemoryLayout tagUPDATELAYEREDWINDOWINFO$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagUPDATELAYEREDWINDOWINFO$dwFlags$LAYOUT() { return tagUPDATELAYEREDWINDOWINFO$dwFlags$LAYOUT_; }

    static final VarHandle tagUPDATELAYEREDWINDOWINFO$dwFlags$VH_ = tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagUPDATELAYEREDWINDOWINFO$dwFlags$VH() { return tagUPDATELAYEREDWINDOWINFO$dwFlags$VH_; }

    static final MemoryLayout tagUPDATELAYEREDWINDOWINFO$prcDirty$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagUPDATELAYEREDWINDOWINFO$prcDirty$LAYOUT() { return tagUPDATELAYEREDWINDOWINFO$prcDirty$LAYOUT_; }

    static final VarHandle tagUPDATELAYEREDWINDOWINFO$prcDirty$VH_ = MemoryHandles.asAddressVarHandle(tagUPDATELAYEREDWINDOWINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("prcDirty")));
    public static java.lang.invoke.VarHandle tagUPDATELAYEREDWINDOWINFO$prcDirty$VH() { return tagUPDATELAYEREDWINDOWINFO$prcDirty$VH_; }

    static final FunctionDescriptor UpdateLayeredWindowIndirect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UpdateLayeredWindowIndirect$FUNC() { return UpdateLayeredWindowIndirect$FUNC_; }

    static final MethodHandle UpdateLayeredWindowIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UpdateLayeredWindowIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        UpdateLayeredWindowIndirect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UpdateLayeredWindowIndirect$MH() { return UpdateLayeredWindowIndirect$MH_; }

    static final FunctionDescriptor GetLayeredWindowAttributes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLayeredWindowAttributes$FUNC() { return GetLayeredWindowAttributes$FUNC_; }

    static final MethodHandle GetLayeredWindowAttributes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLayeredWindowAttributes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetLayeredWindowAttributes$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLayeredWindowAttributes$MH() { return GetLayeredWindowAttributes$MH_; }

    static final FunctionDescriptor PrintWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PrintWindow$FUNC() { return PrintWindow$FUNC_; }

    static final MethodHandle PrintWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PrintWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PrintWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PrintWindow$MH() { return PrintWindow$MH_; }

    static final FunctionDescriptor SetLayeredWindowAttributes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_BOOL,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetLayeredWindowAttributes$FUNC() { return SetLayeredWindowAttributes$FUNC_; }

    static final MethodHandle SetLayeredWindowAttributes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetLayeredWindowAttributes",
        "(Ljdk/incubator/foreign/MemoryAddress;IBI)I",
        SetLayeredWindowAttributes$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetLayeredWindowAttributes$MH() { return SetLayeredWindowAttributes$MH_; }

    static final FunctionDescriptor ShowWindowAsync$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ShowWindowAsync$FUNC() { return ShowWindowAsync$FUNC_; }

    static final MethodHandle ShowWindowAsync$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ShowWindowAsync",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ShowWindowAsync$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ShowWindowAsync$MH() { return ShowWindowAsync$MH_; }

    static final FunctionDescriptor FlashWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FlashWindow$FUNC() { return FlashWindow$FUNC_; }

    static final MethodHandle FlashWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlashWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        FlashWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FlashWindow$MH() { return FlashWindow$MH_; }

    static final MemoryLayout FLASHWINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwnd"),
        C_INT.withName("dwFlags"),
        C_INT.withName("uCount"),
        C_INT.withName("dwTimeout"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static jdk.incubator.foreign.MemoryLayout FLASHWINFO$struct$LAYOUT() { return FLASHWINFO$struct$LAYOUT_; }

    static final MemoryLayout FLASHWINFO$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout FLASHWINFO$cbSize$LAYOUT() { return FLASHWINFO$cbSize$LAYOUT_; }

    static final VarHandle FLASHWINFO$cbSize$VH_ = FLASHWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle FLASHWINFO$cbSize$VH() { return FLASHWINFO$cbSize$VH_; }

    static final MemoryLayout FLASHWINFO$hwnd$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout FLASHWINFO$hwnd$LAYOUT() { return FLASHWINFO$hwnd$LAYOUT_; }

    static final VarHandle FLASHWINFO$hwnd$VH_ = MemoryHandles.asAddressVarHandle(FLASHWINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwnd")));
    public static java.lang.invoke.VarHandle FLASHWINFO$hwnd$VH() { return FLASHWINFO$hwnd$VH_; }

    static final MemoryLayout FLASHWINFO$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout FLASHWINFO$dwFlags$LAYOUT() { return FLASHWINFO$dwFlags$LAYOUT_; }

    static final VarHandle FLASHWINFO$dwFlags$VH_ = FLASHWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle FLASHWINFO$dwFlags$VH() { return FLASHWINFO$dwFlags$VH_; }

    static final MemoryLayout FLASHWINFO$uCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout FLASHWINFO$uCount$LAYOUT() { return FLASHWINFO$uCount$LAYOUT_; }

    static final VarHandle FLASHWINFO$uCount$VH_ = FLASHWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("uCount"));
    public static java.lang.invoke.VarHandle FLASHWINFO$uCount$VH() { return FLASHWINFO$uCount$VH_; }

    static final MemoryLayout FLASHWINFO$dwTimeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout FLASHWINFO$dwTimeout$LAYOUT() { return FLASHWINFO$dwTimeout$LAYOUT_; }

    static final VarHandle FLASHWINFO$dwTimeout$VH_ = FLASHWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTimeout"));
    public static java.lang.invoke.VarHandle FLASHWINFO$dwTimeout$VH() { return FLASHWINFO$dwTimeout$VH_; }

    static final FunctionDescriptor FlashWindowEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FlashWindowEx$FUNC() { return FlashWindowEx$FUNC_; }

    static final MethodHandle FlashWindowEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlashWindowEx",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FlashWindowEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FlashWindowEx$MH() { return FlashWindowEx$MH_; }

    static final FunctionDescriptor ShowOwnedPopups$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ShowOwnedPopups$FUNC() { return ShowOwnedPopups$FUNC_; }

    static final MethodHandle ShowOwnedPopups$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ShowOwnedPopups",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ShowOwnedPopups$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ShowOwnedPopups$MH() { return ShowOwnedPopups$MH_; }

    static final FunctionDescriptor OpenIcon$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenIcon$FUNC() { return OpenIcon$FUNC_; }

    static final MethodHandle OpenIcon$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenIcon",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OpenIcon$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenIcon$MH() { return OpenIcon$MH_; }

    static final FunctionDescriptor CloseWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseWindow$FUNC() { return CloseWindow$FUNC_; }

    static final MethodHandle CloseWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CloseWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseWindow$MH() { return CloseWindow$MH_; }

    static final FunctionDescriptor MoveWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveWindow$FUNC() { return MoveWindow$FUNC_; }

    static final MethodHandle MoveWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MoveWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIII)I",
        MoveWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MoveWindow$MH() { return MoveWindow$MH_; }

    static final FunctionDescriptor SetWindowPos$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowPos$FUNC() { return SetWindowPos$FUNC_; }

    static final MethodHandle SetWindowPos$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowPos",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIII)I",
        SetWindowPos$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowPos$MH() { return SetWindowPos$MH_; }

    static final FunctionDescriptor GetWindowPlacement$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindowPlacement$FUNC() { return GetWindowPlacement$FUNC_; }

    static final MethodHandle GetWindowPlacement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowPlacement",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWindowPlacement$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindowPlacement$MH() { return GetWindowPlacement$MH_; }

    static final FunctionDescriptor SetWindowPlacement$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowPlacement$FUNC() { return SetWindowPlacement$FUNC_; }

    static final MethodHandle SetWindowPlacement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowPlacement",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetWindowPlacement$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowPlacement$MH() { return SetWindowPlacement$MH_; }

    static final FunctionDescriptor GetWindowDisplayAffinity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindowDisplayAffinity$FUNC() { return GetWindowDisplayAffinity$FUNC_; }

    static final MethodHandle GetWindowDisplayAffinity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowDisplayAffinity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWindowDisplayAffinity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindowDisplayAffinity$MH() { return GetWindowDisplayAffinity$MH_; }

    static final FunctionDescriptor SetWindowDisplayAffinity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowDisplayAffinity$FUNC() { return SetWindowDisplayAffinity$FUNC_; }

    static final MethodHandle SetWindowDisplayAffinity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowDisplayAffinity",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetWindowDisplayAffinity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowDisplayAffinity$MH() { return SetWindowDisplayAffinity$MH_; }

    static final FunctionDescriptor BeginDeferWindowPos$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor BeginDeferWindowPos$FUNC() { return BeginDeferWindowPos$FUNC_; }

    static final MethodHandle BeginDeferWindowPos$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BeginDeferWindowPos",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        BeginDeferWindowPos$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BeginDeferWindowPos$MH() { return BeginDeferWindowPos$MH_; }

    static final FunctionDescriptor DeferWindowPos$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeferWindowPos$FUNC() { return DeferWindowPos$FUNC_; }

    static final MethodHandle DeferWindowPos$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeferWindowPos",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIII)Ljdk/incubator/foreign/MemoryAddress;",
        DeferWindowPos$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeferWindowPos$MH() { return DeferWindowPos$MH_; }

    static final FunctionDescriptor EndDeferWindowPos$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EndDeferWindowPos$FUNC() { return EndDeferWindowPos$FUNC_; }

    static final MethodHandle EndDeferWindowPos$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EndDeferWindowPos",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        EndDeferWindowPos$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EndDeferWindowPos$MH() { return EndDeferWindowPos$MH_; }

    static final FunctionDescriptor IsWindowVisible$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsWindowVisible$FUNC() { return IsWindowVisible$FUNC_; }

    static final MethodHandle IsWindowVisible$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsWindowVisible",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsWindowVisible$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsWindowVisible$MH() { return IsWindowVisible$MH_; }

    static final FunctionDescriptor IsIconic$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsIconic$FUNC() { return IsIconic$FUNC_; }

    static final MethodHandle IsIconic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsIconic",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsIconic$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsIconic$MH() { return IsIconic$MH_; }

    static final FunctionDescriptor AnyPopup$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor AnyPopup$FUNC() { return AnyPopup$FUNC_; }

    static final MethodHandle AnyPopup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AnyPopup",
        "()I",
        AnyPopup$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AnyPopup$MH() { return AnyPopup$MH_; }

    static final FunctionDescriptor BringWindowToTop$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BringWindowToTop$FUNC() { return BringWindowToTop$FUNC_; }

    static final MethodHandle BringWindowToTop$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BringWindowToTop",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        BringWindowToTop$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BringWindowToTop$MH() { return BringWindowToTop$MH_; }

    static final FunctionDescriptor IsZoomed$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsZoomed$FUNC() { return IsZoomed$FUNC_; }

    static final MethodHandle IsZoomed$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsZoomed",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsZoomed$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsZoomed$MH() { return IsZoomed$MH_; }

    static final MemoryLayout DLGTEMPLATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("style"),
        C_INT.withName("dwExtendedStyle"),
        C_SHORT.withName("cdit"),
        C_SHORT.withName("x"),
        C_SHORT.withName("y"),
        C_SHORT.withName("cx"),
        C_SHORT.withName("cy")
    );
    public static jdk.incubator.foreign.MemoryLayout DLGTEMPLATE$struct$LAYOUT() { return DLGTEMPLATE$struct$LAYOUT_; }

    static final MemoryLayout DLGTEMPLATE$style$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DLGTEMPLATE$style$LAYOUT() { return DLGTEMPLATE$style$LAYOUT_; }

    static final VarHandle DLGTEMPLATE$style$VH_ = DLGTEMPLATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("style"));
    public static java.lang.invoke.VarHandle DLGTEMPLATE$style$VH() { return DLGTEMPLATE$style$VH_; }

    static final MemoryLayout DLGTEMPLATE$dwExtendedStyle$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DLGTEMPLATE$dwExtendedStyle$LAYOUT() { return DLGTEMPLATE$dwExtendedStyle$LAYOUT_; }

    static final VarHandle DLGTEMPLATE$dwExtendedStyle$VH_ = DLGTEMPLATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwExtendedStyle"));
    public static java.lang.invoke.VarHandle DLGTEMPLATE$dwExtendedStyle$VH() { return DLGTEMPLATE$dwExtendedStyle$VH_; }

    static final MemoryLayout DLGTEMPLATE$cdit$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DLGTEMPLATE$cdit$LAYOUT() { return DLGTEMPLATE$cdit$LAYOUT_; }

    static final VarHandle DLGTEMPLATE$cdit$VH_ = DLGTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cdit"));
    public static java.lang.invoke.VarHandle DLGTEMPLATE$cdit$VH() { return DLGTEMPLATE$cdit$VH_; }

    static final MemoryLayout DLGTEMPLATE$x$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DLGTEMPLATE$x$LAYOUT() { return DLGTEMPLATE$x$LAYOUT_; }

    static final VarHandle DLGTEMPLATE$x$VH_ = DLGTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("x"));
    public static java.lang.invoke.VarHandle DLGTEMPLATE$x$VH() { return DLGTEMPLATE$x$VH_; }

    static final MemoryLayout DLGTEMPLATE$y$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DLGTEMPLATE$y$LAYOUT() { return DLGTEMPLATE$y$LAYOUT_; }

    static final VarHandle DLGTEMPLATE$y$VH_ = DLGTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("y"));
    public static java.lang.invoke.VarHandle DLGTEMPLATE$y$VH() { return DLGTEMPLATE$y$VH_; }

    static final MemoryLayout DLGTEMPLATE$cx$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DLGTEMPLATE$cx$LAYOUT() { return DLGTEMPLATE$cx$LAYOUT_; }

    static final VarHandle DLGTEMPLATE$cx$VH_ = DLGTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cx"));
    public static java.lang.invoke.VarHandle DLGTEMPLATE$cx$VH() { return DLGTEMPLATE$cx$VH_; }

    static final MemoryLayout DLGTEMPLATE$cy$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DLGTEMPLATE$cy$LAYOUT() { return DLGTEMPLATE$cy$LAYOUT_; }

    static final VarHandle DLGTEMPLATE$cy$VH_ = DLGTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cy"));
    public static java.lang.invoke.VarHandle DLGTEMPLATE$cy$VH() { return DLGTEMPLATE$cy$VH_; }

    static final MemoryLayout DLGITEMTEMPLATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("style"),
        C_INT.withName("dwExtendedStyle"),
        C_SHORT.withName("x"),
        C_SHORT.withName("y"),
        C_SHORT.withName("cx"),
        C_SHORT.withName("cy"),
        C_SHORT.withName("id")
    );
    public static jdk.incubator.foreign.MemoryLayout DLGITEMTEMPLATE$struct$LAYOUT() { return DLGITEMTEMPLATE$struct$LAYOUT_; }

    static final MemoryLayout DLGITEMTEMPLATE$style$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DLGITEMTEMPLATE$style$LAYOUT() { return DLGITEMTEMPLATE$style$LAYOUT_; }

    static final VarHandle DLGITEMTEMPLATE$style$VH_ = DLGITEMTEMPLATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("style"));
    public static java.lang.invoke.VarHandle DLGITEMTEMPLATE$style$VH() { return DLGITEMTEMPLATE$style$VH_; }

    static final MemoryLayout DLGITEMTEMPLATE$dwExtendedStyle$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DLGITEMTEMPLATE$dwExtendedStyle$LAYOUT() { return DLGITEMTEMPLATE$dwExtendedStyle$LAYOUT_; }

    static final VarHandle DLGITEMTEMPLATE$dwExtendedStyle$VH_ = DLGITEMTEMPLATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwExtendedStyle"));
    public static java.lang.invoke.VarHandle DLGITEMTEMPLATE$dwExtendedStyle$VH() { return DLGITEMTEMPLATE$dwExtendedStyle$VH_; }

    static final MemoryLayout DLGITEMTEMPLATE$x$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DLGITEMTEMPLATE$x$LAYOUT() { return DLGITEMTEMPLATE$x$LAYOUT_; }

    static final VarHandle DLGITEMTEMPLATE$x$VH_ = DLGITEMTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("x"));
    public static java.lang.invoke.VarHandle DLGITEMTEMPLATE$x$VH() { return DLGITEMTEMPLATE$x$VH_; }

    static final MemoryLayout DLGITEMTEMPLATE$y$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DLGITEMTEMPLATE$y$LAYOUT() { return DLGITEMTEMPLATE$y$LAYOUT_; }

    static final VarHandle DLGITEMTEMPLATE$y$VH_ = DLGITEMTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("y"));
    public static java.lang.invoke.VarHandle DLGITEMTEMPLATE$y$VH() { return DLGITEMTEMPLATE$y$VH_; }

    static final MemoryLayout DLGITEMTEMPLATE$cx$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DLGITEMTEMPLATE$cx$LAYOUT() { return DLGITEMTEMPLATE$cx$LAYOUT_; }

    static final VarHandle DLGITEMTEMPLATE$cx$VH_ = DLGITEMTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cx"));
    public static java.lang.invoke.VarHandle DLGITEMTEMPLATE$cx$VH() { return DLGITEMTEMPLATE$cx$VH_; }

    static final MemoryLayout DLGITEMTEMPLATE$cy$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DLGITEMTEMPLATE$cy$LAYOUT() { return DLGITEMTEMPLATE$cy$LAYOUT_; }

    static final VarHandle DLGITEMTEMPLATE$cy$VH_ = DLGITEMTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cy"));
    public static java.lang.invoke.VarHandle DLGITEMTEMPLATE$cy$VH() { return DLGITEMTEMPLATE$cy$VH_; }

    static final MemoryLayout DLGITEMTEMPLATE$id$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DLGITEMTEMPLATE$id$LAYOUT() { return DLGITEMTEMPLATE$id$LAYOUT_; }

    static final VarHandle DLGITEMTEMPLATE$id$VH_ = DLGITEMTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("id"));
    public static java.lang.invoke.VarHandle DLGITEMTEMPLATE$id$VH() { return DLGITEMTEMPLATE$id$VH_; }

    static final FunctionDescriptor CreateDialogParamA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDialogParamA$FUNC() { return CreateDialogParamA$FUNC_; }

    static final MethodHandle CreateDialogParamA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDialogParamA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        CreateDialogParamA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDialogParamA$MH() { return CreateDialogParamA$MH_; }

    static final FunctionDescriptor CreateDialogParamA$lpDialogFunc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDialogParamA$lpDialogFunc$FUNC() { return CreateDialogParamA$lpDialogFunc$FUNC_; }

    static final FunctionDescriptor CreateDialogParamW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDialogParamW$FUNC() { return CreateDialogParamW$FUNC_; }

    static final MethodHandle CreateDialogParamW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDialogParamW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        CreateDialogParamW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDialogParamW$MH() { return CreateDialogParamW$MH_; }

    static final FunctionDescriptor CreateDialogParamW$lpDialogFunc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDialogParamW$lpDialogFunc$FUNC() { return CreateDialogParamW$lpDialogFunc$FUNC_; }

    static final FunctionDescriptor CreateDialogIndirectParamA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDialogIndirectParamA$FUNC() { return CreateDialogIndirectParamA$FUNC_; }

    static final MethodHandle CreateDialogIndirectParamA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDialogIndirectParamA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        CreateDialogIndirectParamA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDialogIndirectParamA$MH() { return CreateDialogIndirectParamA$MH_; }

    static final FunctionDescriptor CreateDialogIndirectParamA$lpDialogFunc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDialogIndirectParamA$lpDialogFunc$FUNC() { return CreateDialogIndirectParamA$lpDialogFunc$FUNC_; }

    static final FunctionDescriptor CreateDialogIndirectParamW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDialogIndirectParamW$FUNC() { return CreateDialogIndirectParamW$FUNC_; }

    static final MethodHandle CreateDialogIndirectParamW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDialogIndirectParamW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        CreateDialogIndirectParamW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDialogIndirectParamW$MH() { return CreateDialogIndirectParamW$MH_; }

    static final FunctionDescriptor CreateDialogIndirectParamW$lpDialogFunc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDialogIndirectParamW$lpDialogFunc$FUNC() { return CreateDialogIndirectParamW$lpDialogFunc$FUNC_; }

    static final FunctionDescriptor DialogBoxParamA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DialogBoxParamA$FUNC() { return DialogBoxParamA$FUNC_; }

    static final MethodHandle DialogBoxParamA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DialogBoxParamA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        DialogBoxParamA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DialogBoxParamA$MH() { return DialogBoxParamA$MH_; }

    static final FunctionDescriptor DialogBoxParamA$lpDialogFunc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DialogBoxParamA$lpDialogFunc$FUNC() { return DialogBoxParamA$lpDialogFunc$FUNC_; }

    static final FunctionDescriptor DialogBoxParamW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DialogBoxParamW$FUNC() { return DialogBoxParamW$FUNC_; }

    static final MethodHandle DialogBoxParamW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DialogBoxParamW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        DialogBoxParamW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DialogBoxParamW$MH() { return DialogBoxParamW$MH_; }

    static final FunctionDescriptor DialogBoxParamW$lpDialogFunc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DialogBoxParamW$lpDialogFunc$FUNC() { return DialogBoxParamW$lpDialogFunc$FUNC_; }

    static final FunctionDescriptor DialogBoxIndirectParamA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DialogBoxIndirectParamA$FUNC() { return DialogBoxIndirectParamA$FUNC_; }

    static final MethodHandle DialogBoxIndirectParamA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DialogBoxIndirectParamA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        DialogBoxIndirectParamA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DialogBoxIndirectParamA$MH() { return DialogBoxIndirectParamA$MH_; }

    static final FunctionDescriptor DialogBoxIndirectParamA$lpDialogFunc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DialogBoxIndirectParamA$lpDialogFunc$FUNC() { return DialogBoxIndirectParamA$lpDialogFunc$FUNC_; }

    static final FunctionDescriptor DialogBoxIndirectParamW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DialogBoxIndirectParamW$FUNC() { return DialogBoxIndirectParamW$FUNC_; }

    static final MethodHandle DialogBoxIndirectParamW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DialogBoxIndirectParamW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        DialogBoxIndirectParamW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DialogBoxIndirectParamW$MH() { return DialogBoxIndirectParamW$MH_; }

    static final FunctionDescriptor DialogBoxIndirectParamW$lpDialogFunc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DialogBoxIndirectParamW$lpDialogFunc$FUNC() { return DialogBoxIndirectParamW$lpDialogFunc$FUNC_; }

    static final FunctionDescriptor EndDialog$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EndDialog$FUNC() { return EndDialog$FUNC_; }

    static final MethodHandle EndDialog$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EndDialog",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        EndDialog$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EndDialog$MH() { return EndDialog$MH_; }

    static final FunctionDescriptor GetDlgItem$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDlgItem$FUNC() { return GetDlgItem$FUNC_; }

    static final MethodHandle GetDlgItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDlgItem",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        GetDlgItem$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDlgItem$MH() { return GetDlgItem$MH_; }

    static final FunctionDescriptor SetDlgItemInt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDlgItemInt$FUNC() { return SetDlgItemInt$FUNC_; }

    static final MethodHandle SetDlgItemInt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDlgItemInt",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        SetDlgItemInt$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDlgItemInt$MH() { return SetDlgItemInt$MH_; }

    static final FunctionDescriptor GetDlgItemInt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDlgItemInt$FUNC() { return GetDlgItemInt$FUNC_; }

    static final MethodHandle GetDlgItemInt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDlgItemInt",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetDlgItemInt$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDlgItemInt$MH() { return GetDlgItemInt$MH_; }

    static final FunctionDescriptor SetDlgItemTextA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDlgItemTextA$FUNC() { return SetDlgItemTextA$FUNC_; }

    static final MethodHandle SetDlgItemTextA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDlgItemTextA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetDlgItemTextA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDlgItemTextA$MH() { return SetDlgItemTextA$MH_; }

    static final FunctionDescriptor SetDlgItemTextW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDlgItemTextW$FUNC() { return SetDlgItemTextW$FUNC_; }

    static final MethodHandle SetDlgItemTextW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDlgItemTextW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetDlgItemTextW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDlgItemTextW$MH() { return SetDlgItemTextW$MH_; }

    static final FunctionDescriptor GetDlgItemTextA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDlgItemTextA$FUNC() { return GetDlgItemTextA$FUNC_; }

    static final MethodHandle GetDlgItemTextA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDlgItemTextA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetDlgItemTextA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDlgItemTextA$MH() { return GetDlgItemTextA$MH_; }

    static final FunctionDescriptor GetDlgItemTextW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDlgItemTextW$FUNC() { return GetDlgItemTextW$FUNC_; }

    static final MethodHandle GetDlgItemTextW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDlgItemTextW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetDlgItemTextW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDlgItemTextW$MH() { return GetDlgItemTextW$MH_; }

    static final FunctionDescriptor CheckDlgButton$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CheckDlgButton$FUNC() { return CheckDlgButton$FUNC_; }

    static final MethodHandle CheckDlgButton$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckDlgButton",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        CheckDlgButton$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CheckDlgButton$MH() { return CheckDlgButton$MH_; }

    static final FunctionDescriptor CheckRadioButton$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CheckRadioButton$FUNC() { return CheckRadioButton$FUNC_; }

    static final MethodHandle CheckRadioButton$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckRadioButton",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        CheckRadioButton$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CheckRadioButton$MH() { return CheckRadioButton$MH_; }

    static final FunctionDescriptor IsDlgButtonChecked$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsDlgButtonChecked$FUNC() { return IsDlgButtonChecked$FUNC_; }

    static final MethodHandle IsDlgButtonChecked$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsDlgButtonChecked",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IsDlgButtonChecked$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsDlgButtonChecked$MH() { return IsDlgButtonChecked$MH_; }

    static final FunctionDescriptor SendDlgItemMessageA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendDlgItemMessageA$FUNC() { return SendDlgItemMessageA$FUNC_; }

    static final MethodHandle SendDlgItemMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendDlgItemMessageA",
        "(Ljdk/incubator/foreign/MemoryAddress;IIJJ)J",
        SendDlgItemMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SendDlgItemMessageA$MH() { return SendDlgItemMessageA$MH_; }

    static final FunctionDescriptor SendDlgItemMessageW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendDlgItemMessageW$FUNC() { return SendDlgItemMessageW$FUNC_; }

    static final MethodHandle SendDlgItemMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendDlgItemMessageW",
        "(Ljdk/incubator/foreign/MemoryAddress;IIJJ)J",
        SendDlgItemMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SendDlgItemMessageW$MH() { return SendDlgItemMessageW$MH_; }

    static final FunctionDescriptor GetNextDlgGroupItem$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNextDlgGroupItem$FUNC() { return GetNextDlgGroupItem$FUNC_; }

    static final MethodHandle GetNextDlgGroupItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNextDlgGroupItem",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        GetNextDlgGroupItem$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNextDlgGroupItem$MH() { return GetNextDlgGroupItem$MH_; }

    static final FunctionDescriptor GetNextDlgTabItem$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNextDlgTabItem$FUNC() { return GetNextDlgTabItem$FUNC_; }

    static final MethodHandle GetNextDlgTabItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNextDlgTabItem",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        GetNextDlgTabItem$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNextDlgTabItem$MH() { return GetNextDlgTabItem$MH_; }

    static final FunctionDescriptor GetDlgCtrlID$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDlgCtrlID$FUNC() { return GetDlgCtrlID$FUNC_; }

    static final MethodHandle GetDlgCtrlID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDlgCtrlID",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDlgCtrlID$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDlgCtrlID$MH() { return GetDlgCtrlID$MH_; }

    static final FunctionDescriptor GetDialogBaseUnits$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetDialogBaseUnits$FUNC() { return GetDialogBaseUnits$FUNC_; }

    static final MethodHandle GetDialogBaseUnits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDialogBaseUnits",
        "()I",
        GetDialogBaseUnits$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDialogBaseUnits$MH() { return GetDialogBaseUnits$MH_; }

    static final FunctionDescriptor DefDlgProcA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DefDlgProcA$FUNC() { return DefDlgProcA$FUNC_; }

    static final MethodHandle DefDlgProcA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DefDlgProcA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        DefDlgProcA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DefDlgProcA$MH() { return DefDlgProcA$MH_; }

    static final FunctionDescriptor DefDlgProcW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DefDlgProcW$FUNC() { return DefDlgProcW$FUNC_; }

    static final MethodHandle DefDlgProcW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DefDlgProcW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        DefDlgProcW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DefDlgProcW$MH() { return DefDlgProcW$MH_; }

    public static int DCDC_DEFAULT() { return (int)0L; }

    public static int DCDC_DISABLE_FONT_UPDATE() { return (int)1L; }

    public static int DCDC_DISABLE_RELAYOUT() { return (int)2L; }

    static final FunctionDescriptor SetDialogControlDpiChangeBehavior$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDialogControlDpiChangeBehavior$FUNC() { return SetDialogControlDpiChangeBehavior$FUNC_; }

    static final MethodHandle SetDialogControlDpiChangeBehavior$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDialogControlDpiChangeBehavior",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetDialogControlDpiChangeBehavior$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDialogControlDpiChangeBehavior$MH() { return SetDialogControlDpiChangeBehavior$MH_; }

    static final FunctionDescriptor GetDialogControlDpiChangeBehavior$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDialogControlDpiChangeBehavior$FUNC() { return GetDialogControlDpiChangeBehavior$FUNC_; }

    static final MethodHandle GetDialogControlDpiChangeBehavior$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDialogControlDpiChangeBehavior",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDialogControlDpiChangeBehavior$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDialogControlDpiChangeBehavior$MH() { return GetDialogControlDpiChangeBehavior$MH_; }

    public static int DDC_DEFAULT() { return (int)0L; }

    public static int DDC_DISABLE_ALL() { return (int)1L; }

    public static int DDC_DISABLE_RESIZE() { return (int)2L; }

    public static int DDC_DISABLE_CONTROL_RELAYOUT() { return (int)4L; }

    static final FunctionDescriptor SetDialogDpiChangeBehavior$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDialogDpiChangeBehavior$FUNC() { return SetDialogDpiChangeBehavior$FUNC_; }

    static final MethodHandle SetDialogDpiChangeBehavior$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDialogDpiChangeBehavior",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetDialogDpiChangeBehavior$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDialogDpiChangeBehavior$MH() { return SetDialogDpiChangeBehavior$MH_; }

    static final FunctionDescriptor GetDialogDpiChangeBehavior$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDialogDpiChangeBehavior$FUNC() { return GetDialogDpiChangeBehavior$FUNC_; }

    static final MethodHandle GetDialogDpiChangeBehavior$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDialogDpiChangeBehavior",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDialogDpiChangeBehavior$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDialogDpiChangeBehavior$MH() { return GetDialogDpiChangeBehavior$MH_; }

    static final FunctionDescriptor CallMsgFilterA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallMsgFilterA$FUNC() { return CallMsgFilterA$FUNC_; }

    static final MethodHandle CallMsgFilterA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CallMsgFilterA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CallMsgFilterA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CallMsgFilterA$MH() { return CallMsgFilterA$MH_; }

    static final FunctionDescriptor CallMsgFilterW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallMsgFilterW$FUNC() { return CallMsgFilterW$FUNC_; }

    static final MethodHandle CallMsgFilterW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CallMsgFilterW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CallMsgFilterW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CallMsgFilterW$MH() { return CallMsgFilterW$MH_; }

    static final FunctionDescriptor OpenClipboard$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenClipboard$FUNC() { return OpenClipboard$FUNC_; }

    static final MethodHandle OpenClipboard$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenClipboard",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OpenClipboard$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenClipboard$MH() { return OpenClipboard$MH_; }

    static final FunctionDescriptor CloseClipboard$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor CloseClipboard$FUNC() { return CloseClipboard$FUNC_; }

    static final MethodHandle CloseClipboard$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseClipboard",
        "()I",
        CloseClipboard$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseClipboard$MH() { return CloseClipboard$MH_; }

    static final FunctionDescriptor GetClipboardSequenceNumber$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetClipboardSequenceNumber$FUNC() { return GetClipboardSequenceNumber$FUNC_; }

    static final MethodHandle GetClipboardSequenceNumber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClipboardSequenceNumber",
        "()I",
        GetClipboardSequenceNumber$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClipboardSequenceNumber$MH() { return GetClipboardSequenceNumber$MH_; }

    static final FunctionDescriptor GetClipboardOwner$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetClipboardOwner$FUNC() { return GetClipboardOwner$FUNC_; }

    static final MethodHandle GetClipboardOwner$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClipboardOwner",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetClipboardOwner$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClipboardOwner$MH() { return GetClipboardOwner$MH_; }

    static final FunctionDescriptor SetClipboardViewer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetClipboardViewer$FUNC() { return SetClipboardViewer$FUNC_; }

    static final MethodHandle SetClipboardViewer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetClipboardViewer",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetClipboardViewer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetClipboardViewer$MH() { return SetClipboardViewer$MH_; }

    static final FunctionDescriptor GetClipboardViewer$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetClipboardViewer$FUNC() { return GetClipboardViewer$FUNC_; }

    static final MethodHandle GetClipboardViewer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClipboardViewer",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetClipboardViewer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClipboardViewer$MH() { return GetClipboardViewer$MH_; }

    static final FunctionDescriptor ChangeClipboardChain$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ChangeClipboardChain$FUNC() { return ChangeClipboardChain$FUNC_; }

    static final MethodHandle ChangeClipboardChain$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChangeClipboardChain",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ChangeClipboardChain$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ChangeClipboardChain$MH() { return ChangeClipboardChain$MH_; }

    static final FunctionDescriptor SetClipboardData$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetClipboardData$FUNC() { return SetClipboardData$FUNC_; }

    static final MethodHandle SetClipboardData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetClipboardData",
        "(ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetClipboardData$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetClipboardData$MH() { return SetClipboardData$MH_; }

    static final FunctionDescriptor GetClipboardData$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClipboardData$FUNC() { return GetClipboardData$FUNC_; }

    static final MethodHandle GetClipboardData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClipboardData",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        GetClipboardData$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClipboardData$MH() { return GetClipboardData$MH_; }

    static final FunctionDescriptor RegisterClipboardFormatA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterClipboardFormatA$FUNC() { return RegisterClipboardFormatA$FUNC_; }

    static final MethodHandle RegisterClipboardFormatA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterClipboardFormatA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RegisterClipboardFormatA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterClipboardFormatA$MH() { return RegisterClipboardFormatA$MH_; }

    static final FunctionDescriptor RegisterClipboardFormatW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterClipboardFormatW$FUNC() { return RegisterClipboardFormatW$FUNC_; }

    static final MethodHandle RegisterClipboardFormatW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterClipboardFormatW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RegisterClipboardFormatW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterClipboardFormatW$MH() { return RegisterClipboardFormatW$MH_; }

    static final FunctionDescriptor CountClipboardFormats$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor CountClipboardFormats$FUNC() { return CountClipboardFormats$FUNC_; }

    static final MethodHandle CountClipboardFormats$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CountClipboardFormats",
        "()I",
        CountClipboardFormats$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CountClipboardFormats$MH() { return CountClipboardFormats$MH_; }

    static final FunctionDescriptor EnumClipboardFormats$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumClipboardFormats$FUNC() { return EnumClipboardFormats$FUNC_; }

    static final MethodHandle EnumClipboardFormats$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumClipboardFormats",
        "(I)I",
        EnumClipboardFormats$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumClipboardFormats$MH() { return EnumClipboardFormats$MH_; }

    static final FunctionDescriptor GetClipboardFormatNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClipboardFormatNameA$FUNC() { return GetClipboardFormatNameA$FUNC_; }

    static final MethodHandle GetClipboardFormatNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClipboardFormatNameA",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetClipboardFormatNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClipboardFormatNameA$MH() { return GetClipboardFormatNameA$MH_; }

    static final FunctionDescriptor GetClipboardFormatNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClipboardFormatNameW$FUNC() { return GetClipboardFormatNameW$FUNC_; }

    static final MethodHandle GetClipboardFormatNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClipboardFormatNameW",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetClipboardFormatNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClipboardFormatNameW$MH() { return GetClipboardFormatNameW$MH_; }

    static final FunctionDescriptor EmptyClipboard$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor EmptyClipboard$FUNC() { return EmptyClipboard$FUNC_; }

    static final MethodHandle EmptyClipboard$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EmptyClipboard",
        "()I",
        EmptyClipboard$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EmptyClipboard$MH() { return EmptyClipboard$MH_; }

    static final FunctionDescriptor IsClipboardFormatAvailable$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsClipboardFormatAvailable$FUNC() { return IsClipboardFormatAvailable$FUNC_; }

    static final MethodHandle IsClipboardFormatAvailable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsClipboardFormatAvailable",
        "(I)I",
        IsClipboardFormatAvailable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsClipboardFormatAvailable$MH() { return IsClipboardFormatAvailable$MH_; }

    static final FunctionDescriptor GetPriorityClipboardFormat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPriorityClipboardFormat$FUNC() { return GetPriorityClipboardFormat$FUNC_; }

    static final MethodHandle GetPriorityClipboardFormat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPriorityClipboardFormat",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetPriorityClipboardFormat$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPriorityClipboardFormat$MH() { return GetPriorityClipboardFormat$MH_; }

    static final FunctionDescriptor GetOpenClipboardWindow$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetOpenClipboardWindow$FUNC() { return GetOpenClipboardWindow$FUNC_; }

    static final MethodHandle GetOpenClipboardWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOpenClipboardWindow",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetOpenClipboardWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetOpenClipboardWindow$MH() { return GetOpenClipboardWindow$MH_; }

    static final FunctionDescriptor AddClipboardFormatListener$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddClipboardFormatListener$FUNC() { return AddClipboardFormatListener$FUNC_; }

    static final MethodHandle AddClipboardFormatListener$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddClipboardFormatListener",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        AddClipboardFormatListener$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddClipboardFormatListener$MH() { return AddClipboardFormatListener$MH_; }

    static final FunctionDescriptor RemoveClipboardFormatListener$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveClipboardFormatListener$FUNC() { return RemoveClipboardFormatListener$FUNC_; }

    static final MethodHandle RemoveClipboardFormatListener$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveClipboardFormatListener",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveClipboardFormatListener$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveClipboardFormatListener$MH() { return RemoveClipboardFormatListener$MH_; }

    static final FunctionDescriptor GetUpdatedClipboardFormats$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetUpdatedClipboardFormats$FUNC() { return GetUpdatedClipboardFormats$FUNC_; }

    static final MethodHandle GetUpdatedClipboardFormats$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUpdatedClipboardFormats",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetUpdatedClipboardFormats$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUpdatedClipboardFormats$MH() { return GetUpdatedClipboardFormats$MH_; }

    static final FunctionDescriptor CharToOemA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharToOemA$FUNC() { return CharToOemA$FUNC_; }

    static final MethodHandle CharToOemA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharToOemA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CharToOemA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharToOemA$MH() { return CharToOemA$MH_; }

    static final FunctionDescriptor CharToOemW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharToOemW$FUNC() { return CharToOemW$FUNC_; }

    static final MethodHandle CharToOemW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharToOemW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CharToOemW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharToOemW$MH() { return CharToOemW$MH_; }

    static final FunctionDescriptor OemToCharA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OemToCharA$FUNC() { return OemToCharA$FUNC_; }

    static final MethodHandle OemToCharA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OemToCharA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OemToCharA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OemToCharA$MH() { return OemToCharA$MH_; }

    static final FunctionDescriptor OemToCharW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OemToCharW$FUNC() { return OemToCharW$FUNC_; }

    static final MethodHandle OemToCharW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OemToCharW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OemToCharW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OemToCharW$MH() { return OemToCharW$MH_; }

    static final FunctionDescriptor CharToOemBuffA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharToOemBuffA$FUNC() { return CharToOemBuffA$FUNC_; }

    static final MethodHandle CharToOemBuffA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharToOemBuffA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CharToOemBuffA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharToOemBuffA$MH() { return CharToOemBuffA$MH_; }

    static final FunctionDescriptor CharToOemBuffW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharToOemBuffW$FUNC() { return CharToOemBuffW$FUNC_; }

    static final MethodHandle CharToOemBuffW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharToOemBuffW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CharToOemBuffW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharToOemBuffW$MH() { return CharToOemBuffW$MH_; }

    static final FunctionDescriptor OemToCharBuffA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor OemToCharBuffA$FUNC() { return OemToCharBuffA$FUNC_; }

    static final MethodHandle OemToCharBuffA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OemToCharBuffA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        OemToCharBuffA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OemToCharBuffA$MH() { return OemToCharBuffA$MH_; }

    static final FunctionDescriptor OemToCharBuffW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor OemToCharBuffW$FUNC() { return OemToCharBuffW$FUNC_; }

    static final MethodHandle OemToCharBuffW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OemToCharBuffW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        OemToCharBuffW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OemToCharBuffW$MH() { return OemToCharBuffW$MH_; }

    static final FunctionDescriptor CharUpperA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharUpperA$FUNC() { return CharUpperA$FUNC_; }

    static final MethodHandle CharUpperA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharUpperA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CharUpperA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharUpperA$MH() { return CharUpperA$MH_; }

    static final FunctionDescriptor CharUpperW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharUpperW$FUNC() { return CharUpperW$FUNC_; }

    static final MethodHandle CharUpperW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharUpperW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CharUpperW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharUpperW$MH() { return CharUpperW$MH_; }

    static final FunctionDescriptor CharUpperBuffA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharUpperBuffA$FUNC() { return CharUpperBuffA$FUNC_; }

    static final MethodHandle CharUpperBuffA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharUpperBuffA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CharUpperBuffA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharUpperBuffA$MH() { return CharUpperBuffA$MH_; }

    static final FunctionDescriptor CharUpperBuffW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharUpperBuffW$FUNC() { return CharUpperBuffW$FUNC_; }

    static final MethodHandle CharUpperBuffW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharUpperBuffW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CharUpperBuffW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharUpperBuffW$MH() { return CharUpperBuffW$MH_; }

    static final FunctionDescriptor CharLowerA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharLowerA$FUNC() { return CharLowerA$FUNC_; }

    static final MethodHandle CharLowerA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharLowerA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CharLowerA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharLowerA$MH() { return CharLowerA$MH_; }

    static final FunctionDescriptor CharLowerW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharLowerW$FUNC() { return CharLowerW$FUNC_; }

    static final MethodHandle CharLowerW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharLowerW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CharLowerW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharLowerW$MH() { return CharLowerW$MH_; }

    static final FunctionDescriptor CharLowerBuffA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharLowerBuffA$FUNC() { return CharLowerBuffA$FUNC_; }

    static final MethodHandle CharLowerBuffA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharLowerBuffA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CharLowerBuffA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharLowerBuffA$MH() { return CharLowerBuffA$MH_; }

    static final FunctionDescriptor CharLowerBuffW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharLowerBuffW$FUNC() { return CharLowerBuffW$FUNC_; }

    static final MethodHandle CharLowerBuffW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharLowerBuffW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CharLowerBuffW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharLowerBuffW$MH() { return CharLowerBuffW$MH_; }

    static final FunctionDescriptor CharNextA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharNextA$FUNC() { return CharNextA$FUNC_; }

    static final MethodHandle CharNextA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharNextA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CharNextA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharNextA$MH() { return CharNextA$MH_; }

    static final FunctionDescriptor CharNextW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharNextW$FUNC() { return CharNextW$FUNC_; }

    static final MethodHandle CharNextW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharNextW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CharNextW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharNextW$MH() { return CharNextW$MH_; }

    static final FunctionDescriptor CharPrevA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharPrevA$FUNC() { return CharPrevA$FUNC_; }

    static final MethodHandle CharPrevA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharPrevA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CharPrevA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharPrevA$MH() { return CharPrevA$MH_; }

    static final FunctionDescriptor CharPrevW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharPrevW$FUNC() { return CharPrevW$FUNC_; }

    static final MethodHandle CharPrevW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharPrevW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CharPrevW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharPrevW$MH() { return CharPrevW$MH_; }

    static final FunctionDescriptor CharNextExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_SHORT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharNextExA$FUNC() { return CharNextExA$FUNC_; }

    static final MethodHandle CharNextExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharNextExA",
        "(SLjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CharNextExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharNextExA$MH() { return CharNextExA$MH_; }

    static final FunctionDescriptor CharPrevExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_SHORT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CharPrevExA$FUNC() { return CharPrevExA$FUNC_; }

    static final MethodHandle CharPrevExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CharPrevExA",
        "(SLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CharPrevExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CharPrevExA$MH() { return CharPrevExA$MH_; }

    static final FunctionDescriptor IsCharAlphaA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsCharAlphaA$FUNC() { return IsCharAlphaA$FUNC_; }

    static final MethodHandle IsCharAlphaA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsCharAlphaA",
        "(B)I",
        IsCharAlphaA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsCharAlphaA$MH() { return IsCharAlphaA$MH_; }

    static final FunctionDescriptor IsCharAlphaW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsCharAlphaW$FUNC() { return IsCharAlphaW$FUNC_; }

    static final MethodHandle IsCharAlphaW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsCharAlphaW",
        "(S)I",
        IsCharAlphaW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsCharAlphaW$MH() { return IsCharAlphaW$MH_; }

    static final FunctionDescriptor IsCharAlphaNumericA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsCharAlphaNumericA$FUNC() { return IsCharAlphaNumericA$FUNC_; }

    static final MethodHandle IsCharAlphaNumericA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsCharAlphaNumericA",
        "(B)I",
        IsCharAlphaNumericA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsCharAlphaNumericA$MH() { return IsCharAlphaNumericA$MH_; }

    static final FunctionDescriptor IsCharAlphaNumericW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsCharAlphaNumericW$FUNC() { return IsCharAlphaNumericW$FUNC_; }

    static final MethodHandle IsCharAlphaNumericW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsCharAlphaNumericW",
        "(S)I",
        IsCharAlphaNumericW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsCharAlphaNumericW$MH() { return IsCharAlphaNumericW$MH_; }

    static final FunctionDescriptor IsCharUpperA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsCharUpperA$FUNC() { return IsCharUpperA$FUNC_; }

    static final MethodHandle IsCharUpperA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsCharUpperA",
        "(B)I",
        IsCharUpperA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsCharUpperA$MH() { return IsCharUpperA$MH_; }

    static final FunctionDescriptor IsCharUpperW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsCharUpperW$FUNC() { return IsCharUpperW$FUNC_; }

    static final MethodHandle IsCharUpperW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsCharUpperW",
        "(S)I",
        IsCharUpperW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsCharUpperW$MH() { return IsCharUpperW$MH_; }

    static final FunctionDescriptor IsCharLowerA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsCharLowerA$FUNC() { return IsCharLowerA$FUNC_; }

    static final MethodHandle IsCharLowerA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsCharLowerA",
        "(B)I",
        IsCharLowerA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsCharLowerA$MH() { return IsCharLowerA$MH_; }

    static final FunctionDescriptor IsCharLowerW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsCharLowerW$FUNC() { return IsCharLowerW$FUNC_; }

    static final MethodHandle IsCharLowerW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsCharLowerW",
        "(S)I",
        IsCharLowerW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsCharLowerW$MH() { return IsCharLowerW$MH_; }

    static final FunctionDescriptor SetFocus$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFocus$FUNC() { return SetFocus$FUNC_; }

    static final MethodHandle SetFocus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFocus",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetFocus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFocus$MH() { return SetFocus$MH_; }

    static final FunctionDescriptor GetActiveWindow$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetActiveWindow$FUNC() { return GetActiveWindow$FUNC_; }

    static final MethodHandle GetActiveWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetActiveWindow",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetActiveWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetActiveWindow$MH() { return GetActiveWindow$MH_; }

    static final FunctionDescriptor GetFocus$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetFocus$FUNC() { return GetFocus$FUNC_; }

    static final MethodHandle GetFocus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFocus",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetFocus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFocus$MH() { return GetFocus$MH_; }

    static final FunctionDescriptor GetKBCodePage$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetKBCodePage$FUNC() { return GetKBCodePage$FUNC_; }

    static final MethodHandle GetKBCodePage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetKBCodePage",
        "()I",
        GetKBCodePage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetKBCodePage$MH() { return GetKBCodePage$MH_; }

    static final FunctionDescriptor GetKeyState$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetKeyState$FUNC() { return GetKeyState$FUNC_; }

    static final MethodHandle GetKeyState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetKeyState",
        "(I)S",
        GetKeyState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetKeyState$MH() { return GetKeyState$MH_; }

    static final FunctionDescriptor GetAsyncKeyState$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetAsyncKeyState$FUNC() { return GetAsyncKeyState$FUNC_; }

    static final MethodHandle GetAsyncKeyState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAsyncKeyState",
        "(I)S",
        GetAsyncKeyState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetAsyncKeyState$MH() { return GetAsyncKeyState$MH_; }

    static final FunctionDescriptor GetKeyboardState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetKeyboardState$FUNC() { return GetKeyboardState$FUNC_; }

    static final MethodHandle GetKeyboardState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetKeyboardState",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetKeyboardState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetKeyboardState$MH() { return GetKeyboardState$MH_; }

    static final FunctionDescriptor SetKeyboardState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetKeyboardState$FUNC() { return SetKeyboardState$FUNC_; }

    static final MethodHandle SetKeyboardState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetKeyboardState",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetKeyboardState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetKeyboardState$MH() { return SetKeyboardState$MH_; }

    static final FunctionDescriptor GetKeyNameTextA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetKeyNameTextA$FUNC() { return GetKeyNameTextA$FUNC_; }

    static final MethodHandle GetKeyNameTextA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetKeyNameTextA",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetKeyNameTextA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetKeyNameTextA$MH() { return GetKeyNameTextA$MH_; }

    static final FunctionDescriptor GetKeyNameTextW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetKeyNameTextW$FUNC() { return GetKeyNameTextW$FUNC_; }

    static final MethodHandle GetKeyNameTextW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetKeyNameTextW",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetKeyNameTextW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetKeyNameTextW$MH() { return GetKeyNameTextW$MH_; }

    static final FunctionDescriptor GetKeyboardType$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetKeyboardType$FUNC() { return GetKeyboardType$FUNC_; }

    static final MethodHandle GetKeyboardType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetKeyboardType",
        "(I)I",
        GetKeyboardType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetKeyboardType$MH() { return GetKeyboardType$MH_; }

    static final FunctionDescriptor ToAscii$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ToAscii$FUNC() { return ToAscii$FUNC_; }

    static final MethodHandle ToAscii$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ToAscii",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ToAscii$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ToAscii$MH() { return ToAscii$MH_; }

    static final FunctionDescriptor ToAsciiEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ToAsciiEx$FUNC() { return ToAsciiEx$FUNC_; }

    static final MethodHandle ToAsciiEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ToAsciiEx",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ToAsciiEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ToAsciiEx$MH() { return ToAsciiEx$MH_; }

    static final FunctionDescriptor ToUnicode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ToUnicode$FUNC() { return ToUnicode$FUNC_; }

    static final MethodHandle ToUnicode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ToUnicode",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        ToUnicode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ToUnicode$MH() { return ToUnicode$MH_; }

    static final FunctionDescriptor OemKeyScan$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor OemKeyScan$FUNC() { return OemKeyScan$FUNC_; }

    static final MethodHandle OemKeyScan$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OemKeyScan",
        "(S)I",
        OemKeyScan$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OemKeyScan$MH() { return OemKeyScan$MH_; }

    static final FunctionDescriptor VkKeyScanA$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor VkKeyScanA$FUNC() { return VkKeyScanA$FUNC_; }

    static final MethodHandle VkKeyScanA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VkKeyScanA",
        "(B)S",
        VkKeyScanA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VkKeyScanA$MH() { return VkKeyScanA$MH_; }

    static final FunctionDescriptor VkKeyScanW$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor VkKeyScanW$FUNC() { return VkKeyScanW$FUNC_; }

    static final MethodHandle VkKeyScanW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VkKeyScanW",
        "(S)S",
        VkKeyScanW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VkKeyScanW$MH() { return VkKeyScanW$MH_; }

    static final FunctionDescriptor VkKeyScanExA$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_BOOL,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor VkKeyScanExA$FUNC() { return VkKeyScanExA$FUNC_; }

    static final MethodHandle VkKeyScanExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VkKeyScanExA",
        "(BLjdk/incubator/foreign/MemoryAddress;)S",
        VkKeyScanExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VkKeyScanExA$MH() { return VkKeyScanExA$MH_; }

    static final FunctionDescriptor VkKeyScanExW$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor VkKeyScanExW$FUNC() { return VkKeyScanExW$FUNC_; }

    static final MethodHandle VkKeyScanExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VkKeyScanExW",
        "(SLjdk/incubator/foreign/MemoryAddress;)S",
        VkKeyScanExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VkKeyScanExW$MH() { return VkKeyScanExW$MH_; }

    static final FunctionDescriptor keybd_event$FUNC_ = FunctionDescriptor.ofVoid(
        C_BOOL,
        C_BOOL,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor keybd_event$FUNC() { return keybd_event$FUNC_; }

    static final MethodHandle keybd_event$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "keybd_event",
        "(BBIJ)V",
        keybd_event$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle keybd_event$MH() { return keybd_event$MH_; }

    static final FunctionDescriptor mouse_event$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor mouse_event$FUNC() { return mouse_event$FUNC_; }

    static final MethodHandle mouse_event$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "mouse_event",
        "(IIIIJ)V",
        mouse_event$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle mouse_event$MH() { return mouse_event$MH_; }

    static final MemoryLayout tagMOUSEINPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dx"),
        C_INT.withName("dy"),
        C_INT.withName("mouseData"),
        C_INT.withName("dwFlags"),
        C_INT.withName("time"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("dwExtraInfo")
    ).withName("tagMOUSEINPUT");
    public static jdk.incubator.foreign.MemoryLayout tagMOUSEINPUT$struct$LAYOUT() { return tagMOUSEINPUT$struct$LAYOUT_; }

    static final MemoryLayout tagMOUSEINPUT$dx$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMOUSEINPUT$dx$LAYOUT() { return tagMOUSEINPUT$dx$LAYOUT_; }

    static final VarHandle tagMOUSEINPUT$dx$VH_ = tagMOUSEINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dx"));
    public static java.lang.invoke.VarHandle tagMOUSEINPUT$dx$VH() { return tagMOUSEINPUT$dx$VH_; }

    static final MemoryLayout tagMOUSEINPUT$dy$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMOUSEINPUT$dy$LAYOUT() { return tagMOUSEINPUT$dy$LAYOUT_; }

    static final VarHandle tagMOUSEINPUT$dy$VH_ = tagMOUSEINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dy"));
    public static java.lang.invoke.VarHandle tagMOUSEINPUT$dy$VH() { return tagMOUSEINPUT$dy$VH_; }

    static final MemoryLayout tagMOUSEINPUT$mouseData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMOUSEINPUT$mouseData$LAYOUT() { return tagMOUSEINPUT$mouseData$LAYOUT_; }

    static final VarHandle tagMOUSEINPUT$mouseData$VH_ = tagMOUSEINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mouseData"));
    public static java.lang.invoke.VarHandle tagMOUSEINPUT$mouseData$VH() { return tagMOUSEINPUT$mouseData$VH_; }

    static final MemoryLayout tagMOUSEINPUT$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMOUSEINPUT$dwFlags$LAYOUT() { return tagMOUSEINPUT$dwFlags$LAYOUT_; }

    static final VarHandle tagMOUSEINPUT$dwFlags$VH_ = tagMOUSEINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagMOUSEINPUT$dwFlags$VH() { return tagMOUSEINPUT$dwFlags$VH_; }

    static final MemoryLayout tagMOUSEINPUT$time$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMOUSEINPUT$time$LAYOUT() { return tagMOUSEINPUT$time$LAYOUT_; }

    static final VarHandle tagMOUSEINPUT$time$VH_ = tagMOUSEINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("time"));
    public static java.lang.invoke.VarHandle tagMOUSEINPUT$time$VH() { return tagMOUSEINPUT$time$VH_; }

    static final MemoryLayout tagMOUSEINPUT$dwExtraInfo$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagMOUSEINPUT$dwExtraInfo$LAYOUT() { return tagMOUSEINPUT$dwExtraInfo$LAYOUT_; }

    static final VarHandle tagMOUSEINPUT$dwExtraInfo$VH_ = tagMOUSEINPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwExtraInfo"));
    public static java.lang.invoke.VarHandle tagMOUSEINPUT$dwExtraInfo$VH() { return tagMOUSEINPUT$dwExtraInfo$VH_; }

    static final MemoryLayout tagKEYBDINPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("wVk"),
        C_SHORT.withName("wScan"),
        C_INT.withName("dwFlags"),
        C_INT.withName("time"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("dwExtraInfo")
    ).withName("tagKEYBDINPUT");
    public static jdk.incubator.foreign.MemoryLayout tagKEYBDINPUT$struct$LAYOUT() { return tagKEYBDINPUT$struct$LAYOUT_; }

    static final MemoryLayout tagKEYBDINPUT$wVk$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagKEYBDINPUT$wVk$LAYOUT() { return tagKEYBDINPUT$wVk$LAYOUT_; }

    static final VarHandle tagKEYBDINPUT$wVk$VH_ = tagKEYBDINPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wVk"));
    public static java.lang.invoke.VarHandle tagKEYBDINPUT$wVk$VH() { return tagKEYBDINPUT$wVk$VH_; }

    static final MemoryLayout tagKEYBDINPUT$wScan$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagKEYBDINPUT$wScan$LAYOUT() { return tagKEYBDINPUT$wScan$LAYOUT_; }

    static final VarHandle tagKEYBDINPUT$wScan$VH_ = tagKEYBDINPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wScan"));
    public static java.lang.invoke.VarHandle tagKEYBDINPUT$wScan$VH() { return tagKEYBDINPUT$wScan$VH_; }

    static final MemoryLayout tagKEYBDINPUT$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagKEYBDINPUT$dwFlags$LAYOUT() { return tagKEYBDINPUT$dwFlags$LAYOUT_; }

    static final VarHandle tagKEYBDINPUT$dwFlags$VH_ = tagKEYBDINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagKEYBDINPUT$dwFlags$VH() { return tagKEYBDINPUT$dwFlags$VH_; }

    static final MemoryLayout tagKEYBDINPUT$time$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagKEYBDINPUT$time$LAYOUT() { return tagKEYBDINPUT$time$LAYOUT_; }

    static final VarHandle tagKEYBDINPUT$time$VH_ = tagKEYBDINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("time"));
    public static java.lang.invoke.VarHandle tagKEYBDINPUT$time$VH() { return tagKEYBDINPUT$time$VH_; }

    static final MemoryLayout tagKEYBDINPUT$dwExtraInfo$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagKEYBDINPUT$dwExtraInfo$LAYOUT() { return tagKEYBDINPUT$dwExtraInfo$LAYOUT_; }

    static final VarHandle tagKEYBDINPUT$dwExtraInfo$VH_ = tagKEYBDINPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwExtraInfo"));
    public static java.lang.invoke.VarHandle tagKEYBDINPUT$dwExtraInfo$VH() { return tagKEYBDINPUT$dwExtraInfo$VH_; }

    static final MemoryLayout tagHARDWAREINPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("uMsg"),
        C_SHORT.withName("wParamL"),
        C_SHORT.withName("wParamH")
    ).withName("tagHARDWAREINPUT");
    public static jdk.incubator.foreign.MemoryLayout tagHARDWAREINPUT$struct$LAYOUT() { return tagHARDWAREINPUT$struct$LAYOUT_; }

    static final MemoryLayout tagHARDWAREINPUT$uMsg$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHARDWAREINPUT$uMsg$LAYOUT() { return tagHARDWAREINPUT$uMsg$LAYOUT_; }

    static final VarHandle tagHARDWAREINPUT$uMsg$VH_ = tagHARDWAREINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("uMsg"));
    public static java.lang.invoke.VarHandle tagHARDWAREINPUT$uMsg$VH() { return tagHARDWAREINPUT$uMsg$VH_; }

    static final MemoryLayout tagHARDWAREINPUT$wParamL$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagHARDWAREINPUT$wParamL$LAYOUT() { return tagHARDWAREINPUT$wParamL$LAYOUT_; }

    static final VarHandle tagHARDWAREINPUT$wParamL$VH_ = tagHARDWAREINPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wParamL"));
    public static java.lang.invoke.VarHandle tagHARDWAREINPUT$wParamL$VH() { return tagHARDWAREINPUT$wParamL$VH_; }

    static final MemoryLayout tagHARDWAREINPUT$wParamH$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagHARDWAREINPUT$wParamH$LAYOUT() { return tagHARDWAREINPUT$wParamH$LAYOUT_; }

    static final VarHandle tagHARDWAREINPUT$wParamH$VH_ = tagHARDWAREINPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wParamH"));
    public static java.lang.invoke.VarHandle tagHARDWAREINPUT$wParamH$VH() { return tagHARDWAREINPUT$wParamH$VH_; }

    static final MemoryLayout tagINPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("type"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_INT.withName("dx"),
            C_INT.withName("dy"),
            C_INT.withName("mouseData"),
            C_INT.withName("dwFlags"),
            C_INT.withName("time"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("dwExtraInfo")
        ).withName("mi"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("wVk"),
            C_SHORT.withName("wScan"),
            C_INT.withName("dwFlags"),
            C_INT.withName("time"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("dwExtraInfo")
        ).withName("ki"),
        MemoryLayout.ofStruct(
            C_INT.withName("uMsg"),
            C_SHORT.withName("wParamL"),
            C_SHORT.withName("wParamH")
        ).withName("hi")
    ).withName("tagINPUT");
    public static jdk.incubator.foreign.MemoryLayout tagINPUT$struct$LAYOUT() { return tagINPUT$struct$LAYOUT_; }

    static final MemoryLayout tagINPUT$type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagINPUT$type$LAYOUT() { return tagINPUT$type$LAYOUT_; }

    static final VarHandle tagINPUT$type$VH_ = tagINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("type"));
    public static java.lang.invoke.VarHandle tagINPUT$type$VH() { return tagINPUT$type$VH_; }

    static final FunctionDescriptor SendInput$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SendInput$FUNC() { return SendInput$FUNC_; }

    static final MethodHandle SendInput$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendInput",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        SendInput$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SendInput$MH() { return SendInput$MH_; }

    static final MemoryLayout HTOUCHINPUT__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HTOUCHINPUT__");
    public static jdk.incubator.foreign.MemoryLayout HTOUCHINPUT__$struct$LAYOUT() { return HTOUCHINPUT__$struct$LAYOUT_; }

    static final MemoryLayout HTOUCHINPUT__$unused$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout HTOUCHINPUT__$unused$LAYOUT() { return HTOUCHINPUT__$unused$LAYOUT_; }

    static final VarHandle HTOUCHINPUT__$unused$VH_ = HTOUCHINPUT__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    public static java.lang.invoke.VarHandle HTOUCHINPUT__$unused$VH() { return HTOUCHINPUT__$unused$VH_; }

    static final MemoryLayout tagTOUCHINPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("x"),
        C_INT.withName("y"),
        C_POINTER.withName("hSource"),
        C_INT.withName("dwID"),
        C_INT.withName("dwFlags"),
        C_INT.withName("dwMask"),
        C_INT.withName("dwTime"),
        C_LONGLONG.withName("dwExtraInfo"),
        C_INT.withName("cxContact"),
        C_INT.withName("cyContact")
    ).withName("tagTOUCHINPUT");
    public static jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$struct$LAYOUT() { return tagTOUCHINPUT$struct$LAYOUT_; }

    static final MemoryLayout tagTOUCHINPUT$x$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$x$LAYOUT() { return tagTOUCHINPUT$x$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$x$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    public static java.lang.invoke.VarHandle tagTOUCHINPUT$x$VH() { return tagTOUCHINPUT$x$VH_; }

    static final MemoryLayout tagTOUCHINPUT$y$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$y$LAYOUT() { return tagTOUCHINPUT$y$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$y$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    public static java.lang.invoke.VarHandle tagTOUCHINPUT$y$VH() { return tagTOUCHINPUT$y$VH_; }

    static final MemoryLayout tagTOUCHINPUT$hSource$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$hSource$LAYOUT() { return tagTOUCHINPUT$hSource$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$hSource$VH_ = MemoryHandles.asAddressVarHandle(tagTOUCHINPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hSource")));
    public static java.lang.invoke.VarHandle tagTOUCHINPUT$hSource$VH() { return tagTOUCHINPUT$hSource$VH_; }

    static final MemoryLayout tagTOUCHINPUT$dwID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$dwID$LAYOUT() { return tagTOUCHINPUT$dwID$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$dwID$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwID"));
    public static java.lang.invoke.VarHandle tagTOUCHINPUT$dwID$VH() { return tagTOUCHINPUT$dwID$VH_; }

    static final MemoryLayout tagTOUCHINPUT$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$dwFlags$LAYOUT() { return tagTOUCHINPUT$dwFlags$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$dwFlags$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagTOUCHINPUT$dwFlags$VH() { return tagTOUCHINPUT$dwFlags$VH_; }

    static final MemoryLayout tagTOUCHINPUT$dwMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$dwMask$LAYOUT() { return tagTOUCHINPUT$dwMask$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$dwMask$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMask"));
    public static java.lang.invoke.VarHandle tagTOUCHINPUT$dwMask$VH() { return tagTOUCHINPUT$dwMask$VH_; }

    static final MemoryLayout tagTOUCHINPUT$dwTime$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$dwTime$LAYOUT() { return tagTOUCHINPUT$dwTime$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$dwTime$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTime"));
    public static java.lang.invoke.VarHandle tagTOUCHINPUT$dwTime$VH() { return tagTOUCHINPUT$dwTime$VH_; }

    static final MemoryLayout tagTOUCHINPUT$dwExtraInfo$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$dwExtraInfo$LAYOUT() { return tagTOUCHINPUT$dwExtraInfo$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$dwExtraInfo$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwExtraInfo"));
    public static java.lang.invoke.VarHandle tagTOUCHINPUT$dwExtraInfo$VH() { return tagTOUCHINPUT$dwExtraInfo$VH_; }

    static final MemoryLayout tagTOUCHINPUT$cxContact$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$cxContact$LAYOUT() { return tagTOUCHINPUT$cxContact$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$cxContact$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cxContact"));
    public static java.lang.invoke.VarHandle tagTOUCHINPUT$cxContact$VH() { return tagTOUCHINPUT$cxContact$VH_; }

    static final MemoryLayout tagTOUCHINPUT$cyContact$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$cyContact$LAYOUT() { return tagTOUCHINPUT$cyContact$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$cyContact$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cyContact"));
    public static java.lang.invoke.VarHandle tagTOUCHINPUT$cyContact$VH() { return tagTOUCHINPUT$cyContact$VH_; }

    static final FunctionDescriptor GetTouchInputInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTouchInputInfo$FUNC() { return GetTouchInputInfo$FUNC_; }

    static final MethodHandle GetTouchInputInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTouchInputInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetTouchInputInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTouchInputInfo$MH() { return GetTouchInputInfo$MH_; }

    static final FunctionDescriptor CloseTouchInputHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseTouchInputHandle$FUNC() { return CloseTouchInputHandle$FUNC_; }

    static final MethodHandle CloseTouchInputHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseTouchInputHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CloseTouchInputHandle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseTouchInputHandle$MH() { return CloseTouchInputHandle$MH_; }

    static final FunctionDescriptor RegisterTouchWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterTouchWindow$FUNC() { return RegisterTouchWindow$FUNC_; }

    static final MethodHandle RegisterTouchWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterTouchWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        RegisterTouchWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterTouchWindow$MH() { return RegisterTouchWindow$MH_; }

    static final FunctionDescriptor UnregisterTouchWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterTouchWindow$FUNC() { return UnregisterTouchWindow$FUNC_; }

    static final MethodHandle UnregisterTouchWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterTouchWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnregisterTouchWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterTouchWindow$MH() { return UnregisterTouchWindow$MH_; }

    static final FunctionDescriptor IsTouchWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsTouchWindow$FUNC() { return IsTouchWindow$FUNC_; }

    static final MethodHandle IsTouchWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsTouchWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IsTouchWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsTouchWindow$MH() { return IsTouchWindow$MH_; }

    public static int PT_POINTER() { return (int)1L; }

    public static int PT_TOUCH() { return (int)2L; }

    public static int PT_PEN() { return (int)3L; }

    public static int PT_MOUSE() { return (int)4L; }

    public static int PT_TOUCHPAD() { return (int)5L; }

    public static int POINTER_CHANGE_NONE() { return (int)0L; }

    public static int POINTER_CHANGE_FIRSTBUTTON_DOWN() { return (int)1L; }

    public static int POINTER_CHANGE_FIRSTBUTTON_UP() { return (int)2L; }

    public static int POINTER_CHANGE_SECONDBUTTON_DOWN() { return (int)3L; }

    public static int POINTER_CHANGE_SECONDBUTTON_UP() { return (int)4L; }

    public static int POINTER_CHANGE_THIRDBUTTON_DOWN() { return (int)5L; }

    public static int POINTER_CHANGE_THIRDBUTTON_UP() { return (int)6L; }

    public static int POINTER_CHANGE_FOURTHBUTTON_DOWN() { return (int)7L; }

    public static int POINTER_CHANGE_FOURTHBUTTON_UP() { return (int)8L; }

    public static int POINTER_CHANGE_FIFTHBUTTON_DOWN() { return (int)9L; }

    public static int POINTER_CHANGE_FIFTHBUTTON_UP() { return (int)10L; }

    static final MemoryLayout tagPOINTER_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("pointerType"),
        C_INT.withName("pointerId"),
        C_INT.withName("frameId"),
        C_INT.withName("pointerFlags"),
        C_POINTER.withName("sourceDevice"),
        C_POINTER.withName("hwndTarget"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("ptPixelLocation"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("ptHimetricLocation"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("ptPixelLocationRaw"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("ptHimetricLocationRaw"),
        C_INT.withName("dwTime"),
        C_INT.withName("historyCount"),
        C_INT.withName("InputData"),
        C_INT.withName("dwKeyStates"),
        C_LONGLONG.withName("PerformanceCount"),
        C_INT.withName("ButtonChangeType"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagPOINTER_INFO");
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$struct$LAYOUT() { return tagPOINTER_INFO$struct$LAYOUT_; }

    static final MemoryLayout tagPOINTER_INFO$pointerType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$pointerType$LAYOUT() { return tagPOINTER_INFO$pointerType$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$pointerType$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pointerType"));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$pointerType$VH() { return tagPOINTER_INFO$pointerType$VH_; }

    static final MemoryLayout tagPOINTER_INFO$pointerId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$pointerId$LAYOUT() { return tagPOINTER_INFO$pointerId$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$pointerId$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pointerId"));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$pointerId$VH() { return tagPOINTER_INFO$pointerId$VH_; }

    static final MemoryLayout tagPOINTER_INFO$frameId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$frameId$LAYOUT() { return tagPOINTER_INFO$frameId$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$frameId$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("frameId"));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$frameId$VH() { return tagPOINTER_INFO$frameId$VH_; }

    static final MemoryLayout tagPOINTER_INFO$pointerFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$pointerFlags$LAYOUT() { return tagPOINTER_INFO$pointerFlags$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$pointerFlags$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pointerFlags"));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$pointerFlags$VH() { return tagPOINTER_INFO$pointerFlags$VH_; }

    static final MemoryLayout tagPOINTER_INFO$sourceDevice$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$sourceDevice$LAYOUT() { return tagPOINTER_INFO$sourceDevice$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$sourceDevice$VH_ = MemoryHandles.asAddressVarHandle(tagPOINTER_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("sourceDevice")));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$sourceDevice$VH() { return tagPOINTER_INFO$sourceDevice$VH_; }

    static final MemoryLayout tagPOINTER_INFO$hwndTarget$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$hwndTarget$LAYOUT() { return tagPOINTER_INFO$hwndTarget$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$hwndTarget$VH_ = MemoryHandles.asAddressVarHandle(tagPOINTER_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndTarget")));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$hwndTarget$VH() { return tagPOINTER_INFO$hwndTarget$VH_; }

    static final MemoryLayout tagPOINTER_INFO$dwTime$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$dwTime$LAYOUT() { return tagPOINTER_INFO$dwTime$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$dwTime$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTime"));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$dwTime$VH() { return tagPOINTER_INFO$dwTime$VH_; }

    static final MemoryLayout tagPOINTER_INFO$historyCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$historyCount$LAYOUT() { return tagPOINTER_INFO$historyCount$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$historyCount$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("historyCount"));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$historyCount$VH() { return tagPOINTER_INFO$historyCount$VH_; }

    static final MemoryLayout tagPOINTER_INFO$InputData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$InputData$LAYOUT() { return tagPOINTER_INFO$InputData$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$InputData$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InputData"));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$InputData$VH() { return tagPOINTER_INFO$InputData$VH_; }

    static final MemoryLayout tagPOINTER_INFO$dwKeyStates$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$dwKeyStates$LAYOUT() { return tagPOINTER_INFO$dwKeyStates$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$dwKeyStates$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwKeyStates"));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$dwKeyStates$VH() { return tagPOINTER_INFO$dwKeyStates$VH_; }

    static final MemoryLayout tagPOINTER_INFO$PerformanceCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$PerformanceCount$LAYOUT() { return tagPOINTER_INFO$PerformanceCount$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$PerformanceCount$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PerformanceCount"));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$PerformanceCount$VH() { return tagPOINTER_INFO$PerformanceCount$VH_; }

    static final MemoryLayout tagPOINTER_INFO$ButtonChangeType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$ButtonChangeType$LAYOUT() { return tagPOINTER_INFO$ButtonChangeType$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$ButtonChangeType$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ButtonChangeType"));
    public static java.lang.invoke.VarHandle tagPOINTER_INFO$ButtonChangeType$VH() { return tagPOINTER_INFO$ButtonChangeType$VH_; }

    static final MemoryLayout tagPOINTER_TOUCH_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("pointerType"),
            C_INT.withName("pointerId"),
            C_INT.withName("frameId"),
            C_INT.withName("pointerFlags"),
            C_POINTER.withName("sourceDevice"),
            C_POINTER.withName("hwndTarget"),
            MemoryLayout.ofStruct(
                C_INT.withName("x"),
                C_INT.withName("y")
            ).withName("ptPixelLocation"),
            MemoryLayout.ofStruct(
                C_INT.withName("x"),
                C_INT.withName("y")
            ).withName("ptHimetricLocation"),
            MemoryLayout.ofStruct(
                C_INT.withName("x"),
                C_INT.withName("y")
            ).withName("ptPixelLocationRaw"),
            MemoryLayout.ofStruct(
                C_INT.withName("x"),
                C_INT.withName("y")
            ).withName("ptHimetricLocationRaw"),
            C_INT.withName("dwTime"),
            C_INT.withName("historyCount"),
            C_INT.withName("InputData"),
            C_INT.withName("dwKeyStates"),
            C_LONGLONG.withName("PerformanceCount"),
            C_INT.withName("ButtonChangeType"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("pointerInfo"),
        C_INT.withName("touchFlags"),
        C_INT.withName("touchMask"),
        MemoryLayout.ofStruct(
            C_INT.withName("left"),
            C_INT.withName("top"),
            C_INT.withName("right"),
            C_INT.withName("bottom")
        ).withName("rcContact"),
        MemoryLayout.ofStruct(
            C_INT.withName("left"),
            C_INT.withName("top"),
            C_INT.withName("right"),
            C_INT.withName("bottom")
        ).withName("rcContactRaw"),
        C_INT.withName("orientation"),
        C_INT.withName("pressure")
    ).withName("tagPOINTER_TOUCH_INFO");
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_TOUCH_INFO$struct$LAYOUT() { return tagPOINTER_TOUCH_INFO$struct$LAYOUT_; }

    static final MemoryLayout tagPOINTER_TOUCH_INFO$touchFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_TOUCH_INFO$touchFlags$LAYOUT() { return tagPOINTER_TOUCH_INFO$touchFlags$LAYOUT_; }

    static final VarHandle tagPOINTER_TOUCH_INFO$touchFlags$VH_ = tagPOINTER_TOUCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("touchFlags"));
    public static java.lang.invoke.VarHandle tagPOINTER_TOUCH_INFO$touchFlags$VH() { return tagPOINTER_TOUCH_INFO$touchFlags$VH_; }

    static final MemoryLayout tagPOINTER_TOUCH_INFO$touchMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_TOUCH_INFO$touchMask$LAYOUT() { return tagPOINTER_TOUCH_INFO$touchMask$LAYOUT_; }

    static final VarHandle tagPOINTER_TOUCH_INFO$touchMask$VH_ = tagPOINTER_TOUCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("touchMask"));
    public static java.lang.invoke.VarHandle tagPOINTER_TOUCH_INFO$touchMask$VH() { return tagPOINTER_TOUCH_INFO$touchMask$VH_; }

    static final MemoryLayout tagPOINTER_TOUCH_INFO$orientation$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_TOUCH_INFO$orientation$LAYOUT() { return tagPOINTER_TOUCH_INFO$orientation$LAYOUT_; }

    static final VarHandle tagPOINTER_TOUCH_INFO$orientation$VH_ = tagPOINTER_TOUCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("orientation"));
    public static java.lang.invoke.VarHandle tagPOINTER_TOUCH_INFO$orientation$VH() { return tagPOINTER_TOUCH_INFO$orientation$VH_; }

    static final MemoryLayout tagPOINTER_TOUCH_INFO$pressure$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_TOUCH_INFO$pressure$LAYOUT() { return tagPOINTER_TOUCH_INFO$pressure$LAYOUT_; }

    static final VarHandle tagPOINTER_TOUCH_INFO$pressure$VH_ = tagPOINTER_TOUCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pressure"));
    public static java.lang.invoke.VarHandle tagPOINTER_TOUCH_INFO$pressure$VH() { return tagPOINTER_TOUCH_INFO$pressure$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("pointerType"),
            C_INT.withName("pointerId"),
            C_INT.withName("frameId"),
            C_INT.withName("pointerFlags"),
            C_POINTER.withName("sourceDevice"),
            C_POINTER.withName("hwndTarget"),
            MemoryLayout.ofStruct(
                C_INT.withName("x"),
                C_INT.withName("y")
            ).withName("ptPixelLocation"),
            MemoryLayout.ofStruct(
                C_INT.withName("x"),
                C_INT.withName("y")
            ).withName("ptHimetricLocation"),
            MemoryLayout.ofStruct(
                C_INT.withName("x"),
                C_INT.withName("y")
            ).withName("ptPixelLocationRaw"),
            MemoryLayout.ofStruct(
                C_INT.withName("x"),
                C_INT.withName("y")
            ).withName("ptHimetricLocationRaw"),
            C_INT.withName("dwTime"),
            C_INT.withName("historyCount"),
            C_INT.withName("InputData"),
            C_INT.withName("dwKeyStates"),
            C_LONGLONG.withName("PerformanceCount"),
            C_INT.withName("ButtonChangeType"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("pointerInfo"),
        C_INT.withName("penFlags"),
        C_INT.withName("penMask"),
        C_INT.withName("pressure"),
        C_INT.withName("rotation"),
        C_INT.withName("tiltX"),
        C_INT.withName("tiltY")
    ).withName("tagPOINTER_PEN_INFO");
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$struct$LAYOUT() { return tagPOINTER_PEN_INFO$struct$LAYOUT_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$penFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$penFlags$LAYOUT() { return tagPOINTER_PEN_INFO$penFlags$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$penFlags$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("penFlags"));
    public static java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$penFlags$VH() { return tagPOINTER_PEN_INFO$penFlags$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$penMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$penMask$LAYOUT() { return tagPOINTER_PEN_INFO$penMask$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$penMask$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("penMask"));
    public static java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$penMask$VH() { return tagPOINTER_PEN_INFO$penMask$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$pressure$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$pressure$LAYOUT() { return tagPOINTER_PEN_INFO$pressure$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$pressure$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pressure"));
    public static java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$pressure$VH() { return tagPOINTER_PEN_INFO$pressure$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$rotation$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$rotation$LAYOUT() { return tagPOINTER_PEN_INFO$rotation$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$rotation$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("rotation"));
    public static java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$rotation$VH() { return tagPOINTER_PEN_INFO$rotation$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$tiltX$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$tiltX$LAYOUT() { return tagPOINTER_PEN_INFO$tiltX$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$tiltX$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tiltX"));
    public static java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$tiltX$VH() { return tagPOINTER_PEN_INFO$tiltX$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$tiltY$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$tiltY$LAYOUT() { return tagPOINTER_PEN_INFO$tiltY$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$tiltY$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tiltY"));
    public static java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$tiltY$VH() { return tagPOINTER_PEN_INFO$tiltY$VH_; }

    public static int POINTER_FEEDBACK_DEFAULT() { return (int)1L; }

    public static int POINTER_FEEDBACK_INDIRECT() { return (int)2L; }

    public static int POINTER_FEEDBACK_NONE() { return (int)3L; }

    static final FunctionDescriptor InitializeTouchInjection$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeTouchInjection$FUNC() { return InitializeTouchInjection$FUNC_; }

    static final MethodHandle InitializeTouchInjection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeTouchInjection",
        "(II)I",
        InitializeTouchInjection$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeTouchInjection$MH() { return InitializeTouchInjection$MH_; }

    static final FunctionDescriptor InjectTouchInput$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InjectTouchInput$FUNC() { return InjectTouchInput$FUNC_; }

    static final MethodHandle InjectTouchInput$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InjectTouchInput",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        InjectTouchInput$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InjectTouchInput$MH() { return InjectTouchInput$MH_; }

}

