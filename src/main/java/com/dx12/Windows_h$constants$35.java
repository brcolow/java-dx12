// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$35 extends Windows_h$constants$34 {
    Windows_h$constants$35() {}
    static final MemoryLayout tagPOINTER_DEVICE_PROPERTY$physicalMax$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_DEVICE_PROPERTY$physicalMax$LAYOUT() { return tagPOINTER_DEVICE_PROPERTY$physicalMax$LAYOUT_; }

    static final VarHandle tagPOINTER_DEVICE_PROPERTY$physicalMax$VH_ = tagPOINTER_DEVICE_PROPERTY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("physicalMax"));
    public static java.lang.invoke.VarHandle tagPOINTER_DEVICE_PROPERTY$physicalMax$VH() { return tagPOINTER_DEVICE_PROPERTY$physicalMax$VH_; }

    static final MemoryLayout tagPOINTER_DEVICE_PROPERTY$unit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_DEVICE_PROPERTY$unit$LAYOUT() { return tagPOINTER_DEVICE_PROPERTY$unit$LAYOUT_; }

    static final VarHandle tagPOINTER_DEVICE_PROPERTY$unit$VH_ = tagPOINTER_DEVICE_PROPERTY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unit"));
    public static java.lang.invoke.VarHandle tagPOINTER_DEVICE_PROPERTY$unit$VH() { return tagPOINTER_DEVICE_PROPERTY$unit$VH_; }

    static final MemoryLayout tagPOINTER_DEVICE_PROPERTY$unitExponent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_DEVICE_PROPERTY$unitExponent$LAYOUT() { return tagPOINTER_DEVICE_PROPERTY$unitExponent$LAYOUT_; }

    static final VarHandle tagPOINTER_DEVICE_PROPERTY$unitExponent$VH_ = tagPOINTER_DEVICE_PROPERTY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unitExponent"));
    public static java.lang.invoke.VarHandle tagPOINTER_DEVICE_PROPERTY$unitExponent$VH() { return tagPOINTER_DEVICE_PROPERTY$unitExponent$VH_; }

    static final MemoryLayout tagPOINTER_DEVICE_PROPERTY$usagePageId$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_DEVICE_PROPERTY$usagePageId$LAYOUT() { return tagPOINTER_DEVICE_PROPERTY$usagePageId$LAYOUT_; }

    static final VarHandle tagPOINTER_DEVICE_PROPERTY$usagePageId$VH_ = tagPOINTER_DEVICE_PROPERTY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("usagePageId"));
    public static java.lang.invoke.VarHandle tagPOINTER_DEVICE_PROPERTY$usagePageId$VH() { return tagPOINTER_DEVICE_PROPERTY$usagePageId$VH_; }

    static final MemoryLayout tagPOINTER_DEVICE_PROPERTY$usageId$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_DEVICE_PROPERTY$usageId$LAYOUT() { return tagPOINTER_DEVICE_PROPERTY$usageId$LAYOUT_; }

    static final VarHandle tagPOINTER_DEVICE_PROPERTY$usageId$VH_ = tagPOINTER_DEVICE_PROPERTY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("usageId"));
    public static java.lang.invoke.VarHandle tagPOINTER_DEVICE_PROPERTY$usageId$VH() { return tagPOINTER_DEVICE_PROPERTY$usageId$VH_; }

    public static int POINTER_DEVICE_CURSOR_TYPE_UNKNOWN() { return (int)0L; }

    public static int POINTER_DEVICE_CURSOR_TYPE_TIP() { return (int)1L; }

    public static int POINTER_DEVICE_CURSOR_TYPE_ERASER() { return (int)2L; }

    public static int POINTER_DEVICE_CURSOR_TYPE_MAX() { return (int)-1L; }

    static final MemoryLayout tagPOINTER_DEVICE_CURSOR_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cursorId"),
        C_INT.withName("cursor")
    ).withName("tagPOINTER_DEVICE_CURSOR_INFO");
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_DEVICE_CURSOR_INFO$struct$LAYOUT() { return tagPOINTER_DEVICE_CURSOR_INFO$struct$LAYOUT_; }

    static final MemoryLayout tagPOINTER_DEVICE_CURSOR_INFO$cursorId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_DEVICE_CURSOR_INFO$cursorId$LAYOUT() { return tagPOINTER_DEVICE_CURSOR_INFO$cursorId$LAYOUT_; }

    static final VarHandle tagPOINTER_DEVICE_CURSOR_INFO$cursorId$VH_ = tagPOINTER_DEVICE_CURSOR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cursorId"));
    public static java.lang.invoke.VarHandle tagPOINTER_DEVICE_CURSOR_INFO$cursorId$VH() { return tagPOINTER_DEVICE_CURSOR_INFO$cursorId$VH_; }

    static final MemoryLayout tagPOINTER_DEVICE_CURSOR_INFO$cursor$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOINTER_DEVICE_CURSOR_INFO$cursor$LAYOUT() { return tagPOINTER_DEVICE_CURSOR_INFO$cursor$LAYOUT_; }

    static final VarHandle tagPOINTER_DEVICE_CURSOR_INFO$cursor$VH_ = tagPOINTER_DEVICE_CURSOR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cursor"));
    public static java.lang.invoke.VarHandle tagPOINTER_DEVICE_CURSOR_INFO$cursor$VH() { return tagPOINTER_DEVICE_CURSOR_INFO$cursor$VH_; }

    static final FunctionDescriptor GetPointerDevices$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPointerDevices$FUNC() { return GetPointerDevices$FUNC_; }

    static final MethodHandle GetPointerDevices$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerDevices",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerDevices$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPointerDevices$MH() { return GetPointerDevices$MH_; }

    static final FunctionDescriptor GetPointerDevice$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPointerDevice$FUNC() { return GetPointerDevice$FUNC_; }

    static final MethodHandle GetPointerDevice$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerDevice",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerDevice$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPointerDevice$MH() { return GetPointerDevice$MH_; }

    static final FunctionDescriptor GetPointerDeviceProperties$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPointerDeviceProperties$FUNC() { return GetPointerDeviceProperties$FUNC_; }

    static final MethodHandle GetPointerDeviceProperties$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerDeviceProperties",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerDeviceProperties$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPointerDeviceProperties$MH() { return GetPointerDeviceProperties$MH_; }

    static final FunctionDescriptor RegisterPointerDeviceNotifications$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterPointerDeviceNotifications$FUNC() { return RegisterPointerDeviceNotifications$FUNC_; }

    static final MethodHandle RegisterPointerDeviceNotifications$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterPointerDeviceNotifications",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        RegisterPointerDeviceNotifications$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterPointerDeviceNotifications$MH() { return RegisterPointerDeviceNotifications$MH_; }

    static final FunctionDescriptor GetPointerDeviceRects$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPointerDeviceRects$FUNC() { return GetPointerDeviceRects$FUNC_; }

    static final MethodHandle GetPointerDeviceRects$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerDeviceRects",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerDeviceRects$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPointerDeviceRects$MH() { return GetPointerDeviceRects$MH_; }

    static final FunctionDescriptor GetPointerDeviceCursors$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPointerDeviceCursors$FUNC() { return GetPointerDeviceCursors$FUNC_; }

    static final MethodHandle GetPointerDeviceCursors$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerDeviceCursors",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerDeviceCursors$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPointerDeviceCursors$MH() { return GetPointerDeviceCursors$MH_; }

    static final FunctionDescriptor GetRawPointerDeviceData$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetRawPointerDeviceData$FUNC() { return GetRawPointerDeviceData$FUNC_; }

    static final MethodHandle GetRawPointerDeviceData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRawPointerDeviceData",
        "(IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetRawPointerDeviceData$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetRawPointerDeviceData$MH() { return GetRawPointerDeviceData$MH_; }

    static final FunctionDescriptor ChangeWindowMessageFilter$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ChangeWindowMessageFilter$FUNC() { return ChangeWindowMessageFilter$FUNC_; }

    static final MethodHandle ChangeWindowMessageFilter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChangeWindowMessageFilter",
        "(II)I",
        ChangeWindowMessageFilter$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ChangeWindowMessageFilter$MH() { return ChangeWindowMessageFilter$MH_; }

    static final MemoryLayout tagCHANGEFILTERSTRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("ExtStatus")
    ).withName("tagCHANGEFILTERSTRUCT");
    public static jdk.incubator.foreign.MemoryLayout tagCHANGEFILTERSTRUCT$struct$LAYOUT() { return tagCHANGEFILTERSTRUCT$struct$LAYOUT_; }

    static final MemoryLayout tagCHANGEFILTERSTRUCT$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCHANGEFILTERSTRUCT$cbSize$LAYOUT() { return tagCHANGEFILTERSTRUCT$cbSize$LAYOUT_; }

    static final VarHandle tagCHANGEFILTERSTRUCT$cbSize$VH_ = tagCHANGEFILTERSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagCHANGEFILTERSTRUCT$cbSize$VH() { return tagCHANGEFILTERSTRUCT$cbSize$VH_; }

    static final MemoryLayout tagCHANGEFILTERSTRUCT$ExtStatus$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCHANGEFILTERSTRUCT$ExtStatus$LAYOUT() { return tagCHANGEFILTERSTRUCT$ExtStatus$LAYOUT_; }

    static final VarHandle tagCHANGEFILTERSTRUCT$ExtStatus$VH_ = tagCHANGEFILTERSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExtStatus"));
    public static java.lang.invoke.VarHandle tagCHANGEFILTERSTRUCT$ExtStatus$VH() { return tagCHANGEFILTERSTRUCT$ExtStatus$VH_; }

    static final FunctionDescriptor ChangeWindowMessageFilterEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ChangeWindowMessageFilterEx$FUNC() { return ChangeWindowMessageFilterEx$FUNC_; }

    static final MethodHandle ChangeWindowMessageFilterEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChangeWindowMessageFilterEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        ChangeWindowMessageFilterEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ChangeWindowMessageFilterEx$MH() { return ChangeWindowMessageFilterEx$MH_; }

    static final MemoryLayout HGESTUREINFO__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HGESTUREINFO__");
    public static jdk.incubator.foreign.MemoryLayout HGESTUREINFO__$struct$LAYOUT() { return HGESTUREINFO__$struct$LAYOUT_; }

    static final MemoryLayout HGESTUREINFO__$unused$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout HGESTUREINFO__$unused$LAYOUT() { return HGESTUREINFO__$unused$LAYOUT_; }

    static final VarHandle HGESTUREINFO__$unused$VH_ = HGESTUREINFO__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    public static java.lang.invoke.VarHandle HGESTUREINFO__$unused$VH() { return HGESTUREINFO__$unused$VH_; }

    static final MemoryLayout tagGESTUREINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("dwFlags"),
        C_INT.withName("dwID"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndTarget"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("x"),
            C_SHORT.withName("y")
        ).withName("ptsLocation"),
        C_INT.withName("dwInstanceID"),
        C_INT.withName("dwSequenceID"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("ullArguments"),
        C_INT.withName("cbExtraArgs"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagGESTUREINFO");
    public static jdk.incubator.foreign.MemoryLayout tagGESTUREINFO$struct$LAYOUT() { return tagGESTUREINFO$struct$LAYOUT_; }

    static final MemoryLayout tagGESTUREINFO$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTUREINFO$cbSize$LAYOUT() { return tagGESTUREINFO$cbSize$LAYOUT_; }

    static final VarHandle tagGESTUREINFO$cbSize$VH_ = tagGESTUREINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagGESTUREINFO$cbSize$VH() { return tagGESTUREINFO$cbSize$VH_; }

    static final MemoryLayout tagGESTUREINFO$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTUREINFO$dwFlags$LAYOUT() { return tagGESTUREINFO$dwFlags$LAYOUT_; }

    static final VarHandle tagGESTUREINFO$dwFlags$VH_ = tagGESTUREINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagGESTUREINFO$dwFlags$VH() { return tagGESTUREINFO$dwFlags$VH_; }

    static final MemoryLayout tagGESTUREINFO$dwID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTUREINFO$dwID$LAYOUT() { return tagGESTUREINFO$dwID$LAYOUT_; }

    static final VarHandle tagGESTUREINFO$dwID$VH_ = tagGESTUREINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwID"));
    public static java.lang.invoke.VarHandle tagGESTUREINFO$dwID$VH() { return tagGESTUREINFO$dwID$VH_; }

    static final MemoryLayout tagGESTUREINFO$hwndTarget$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGESTUREINFO$hwndTarget$LAYOUT() { return tagGESTUREINFO$hwndTarget$LAYOUT_; }

    static final VarHandle tagGESTUREINFO$hwndTarget$VH_ = MemoryHandles.asAddressVarHandle(tagGESTUREINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndTarget")));
    public static java.lang.invoke.VarHandle tagGESTUREINFO$hwndTarget$VH() { return tagGESTUREINFO$hwndTarget$VH_; }

    static final MemoryLayout tagGESTUREINFO$dwInstanceID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTUREINFO$dwInstanceID$LAYOUT() { return tagGESTUREINFO$dwInstanceID$LAYOUT_; }

    static final VarHandle tagGESTUREINFO$dwInstanceID$VH_ = tagGESTUREINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwInstanceID"));
    public static java.lang.invoke.VarHandle tagGESTUREINFO$dwInstanceID$VH() { return tagGESTUREINFO$dwInstanceID$VH_; }

    static final MemoryLayout tagGESTUREINFO$dwSequenceID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTUREINFO$dwSequenceID$LAYOUT() { return tagGESTUREINFO$dwSequenceID$LAYOUT_; }

    static final VarHandle tagGESTUREINFO$dwSequenceID$VH_ = tagGESTUREINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSequenceID"));
    public static java.lang.invoke.VarHandle tagGESTUREINFO$dwSequenceID$VH() { return tagGESTUREINFO$dwSequenceID$VH_; }

    static final MemoryLayout tagGESTUREINFO$ullArguments$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagGESTUREINFO$ullArguments$LAYOUT() { return tagGESTUREINFO$ullArguments$LAYOUT_; }

    static final VarHandle tagGESTUREINFO$ullArguments$VH_ = tagGESTUREINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ullArguments"));
    public static java.lang.invoke.VarHandle tagGESTUREINFO$ullArguments$VH() { return tagGESTUREINFO$ullArguments$VH_; }

    static final MemoryLayout tagGESTUREINFO$cbExtraArgs$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTUREINFO$cbExtraArgs$LAYOUT() { return tagGESTUREINFO$cbExtraArgs$LAYOUT_; }

    static final VarHandle tagGESTUREINFO$cbExtraArgs$VH_ = tagGESTUREINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbExtraArgs"));
    public static java.lang.invoke.VarHandle tagGESTUREINFO$cbExtraArgs$VH() { return tagGESTUREINFO$cbExtraArgs$VH_; }

    static final MemoryLayout tagGESTURENOTIFYSTRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("dwFlags"),
        C_POINTER.withName("hwndTarget"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("x"),
            C_SHORT.withName("y")
        ).withName("ptsLocation"),
        C_INT.withName("dwInstanceID")
    ).withName("tagGESTURENOTIFYSTRUCT");
    public static jdk.incubator.foreign.MemoryLayout tagGESTURENOTIFYSTRUCT$struct$LAYOUT() { return tagGESTURENOTIFYSTRUCT$struct$LAYOUT_; }

    static final MemoryLayout tagGESTURENOTIFYSTRUCT$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTURENOTIFYSTRUCT$cbSize$LAYOUT() { return tagGESTURENOTIFYSTRUCT$cbSize$LAYOUT_; }

    static final VarHandle tagGESTURENOTIFYSTRUCT$cbSize$VH_ = tagGESTURENOTIFYSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagGESTURENOTIFYSTRUCT$cbSize$VH() { return tagGESTURENOTIFYSTRUCT$cbSize$VH_; }

    static final MemoryLayout tagGESTURENOTIFYSTRUCT$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTURENOTIFYSTRUCT$dwFlags$LAYOUT() { return tagGESTURENOTIFYSTRUCT$dwFlags$LAYOUT_; }

    static final VarHandle tagGESTURENOTIFYSTRUCT$dwFlags$VH_ = tagGESTURENOTIFYSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagGESTURENOTIFYSTRUCT$dwFlags$VH() { return tagGESTURENOTIFYSTRUCT$dwFlags$VH_; }

    static final MemoryLayout tagGESTURENOTIFYSTRUCT$hwndTarget$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGESTURENOTIFYSTRUCT$hwndTarget$LAYOUT() { return tagGESTURENOTIFYSTRUCT$hwndTarget$LAYOUT_; }

    static final VarHandle tagGESTURENOTIFYSTRUCT$hwndTarget$VH_ = MemoryHandles.asAddressVarHandle(tagGESTURENOTIFYSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndTarget")));
    public static java.lang.invoke.VarHandle tagGESTURENOTIFYSTRUCT$hwndTarget$VH() { return tagGESTURENOTIFYSTRUCT$hwndTarget$VH_; }

    static final MemoryLayout tagGESTURENOTIFYSTRUCT$dwInstanceID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTURENOTIFYSTRUCT$dwInstanceID$LAYOUT() { return tagGESTURENOTIFYSTRUCT$dwInstanceID$LAYOUT_; }

    static final VarHandle tagGESTURENOTIFYSTRUCT$dwInstanceID$VH_ = tagGESTURENOTIFYSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwInstanceID"));
    public static java.lang.invoke.VarHandle tagGESTURENOTIFYSTRUCT$dwInstanceID$VH() { return tagGESTURENOTIFYSTRUCT$dwInstanceID$VH_; }

    static final FunctionDescriptor GetGestureInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGestureInfo$FUNC() { return GetGestureInfo$FUNC_; }

    static final MethodHandle GetGestureInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGestureInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetGestureInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGestureInfo$MH() { return GetGestureInfo$MH_; }

    static final FunctionDescriptor GetGestureExtraArgs$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGestureExtraArgs$FUNC() { return GetGestureExtraArgs$FUNC_; }

    static final MethodHandle GetGestureExtraArgs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGestureExtraArgs",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetGestureExtraArgs$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGestureExtraArgs$MH() { return GetGestureExtraArgs$MH_; }

    static final FunctionDescriptor CloseGestureInfoHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseGestureInfoHandle$FUNC() { return CloseGestureInfoHandle$FUNC_; }

    static final MethodHandle CloseGestureInfoHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseGestureInfoHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CloseGestureInfoHandle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseGestureInfoHandle$MH() { return CloseGestureInfoHandle$MH_; }

    static final MemoryLayout tagGESTURECONFIG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwID"),
        C_INT.withName("dwWant"),
        C_INT.withName("dwBlock")
    ).withName("tagGESTURECONFIG");
    public static jdk.incubator.foreign.MemoryLayout tagGESTURECONFIG$struct$LAYOUT() { return tagGESTURECONFIG$struct$LAYOUT_; }

    static final MemoryLayout tagGESTURECONFIG$dwID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTURECONFIG$dwID$LAYOUT() { return tagGESTURECONFIG$dwID$LAYOUT_; }

    static final VarHandle tagGESTURECONFIG$dwID$VH_ = tagGESTURECONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwID"));
    public static java.lang.invoke.VarHandle tagGESTURECONFIG$dwID$VH() { return tagGESTURECONFIG$dwID$VH_; }

    static final MemoryLayout tagGESTURECONFIG$dwWant$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTURECONFIG$dwWant$LAYOUT() { return tagGESTURECONFIG$dwWant$LAYOUT_; }

    static final VarHandle tagGESTURECONFIG$dwWant$VH_ = tagGESTURECONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwWant"));
    public static java.lang.invoke.VarHandle tagGESTURECONFIG$dwWant$VH() { return tagGESTURECONFIG$dwWant$VH_; }

    static final MemoryLayout tagGESTURECONFIG$dwBlock$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGESTURECONFIG$dwBlock$LAYOUT() { return tagGESTURECONFIG$dwBlock$LAYOUT_; }

    static final VarHandle tagGESTURECONFIG$dwBlock$VH_ = tagGESTURECONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBlock"));
    public static java.lang.invoke.VarHandle tagGESTURECONFIG$dwBlock$VH() { return tagGESTURECONFIG$dwBlock$VH_; }

    static final FunctionDescriptor SetGestureConfig$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetGestureConfig$FUNC() { return SetGestureConfig$FUNC_; }

    static final MethodHandle SetGestureConfig$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetGestureConfig",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        SetGestureConfig$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetGestureConfig$MH() { return SetGestureConfig$MH_; }

    static final FunctionDescriptor GetGestureConfig$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGestureConfig$FUNC() { return GetGestureConfig$FUNC_; }

    static final MethodHandle GetGestureConfig$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGestureConfig",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetGestureConfig$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGestureConfig$MH() { return GetGestureConfig$MH_; }

    static final FunctionDescriptor ShutdownBlockReasonCreate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ShutdownBlockReasonCreate$FUNC() { return ShutdownBlockReasonCreate$FUNC_; }

    static final MethodHandle ShutdownBlockReasonCreate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ShutdownBlockReasonCreate",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ShutdownBlockReasonCreate$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ShutdownBlockReasonCreate$MH() { return ShutdownBlockReasonCreate$MH_; }

    static final FunctionDescriptor ShutdownBlockReasonQuery$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ShutdownBlockReasonQuery$FUNC() { return ShutdownBlockReasonQuery$FUNC_; }

    static final MethodHandle ShutdownBlockReasonQuery$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ShutdownBlockReasonQuery",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ShutdownBlockReasonQuery$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ShutdownBlockReasonQuery$MH() { return ShutdownBlockReasonQuery$MH_; }

    static final FunctionDescriptor ShutdownBlockReasonDestroy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ShutdownBlockReasonDestroy$FUNC() { return ShutdownBlockReasonDestroy$FUNC_; }

    static final MethodHandle ShutdownBlockReasonDestroy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ShutdownBlockReasonDestroy",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ShutdownBlockReasonDestroy$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ShutdownBlockReasonDestroy$MH() { return ShutdownBlockReasonDestroy$MH_; }

    public static int IMDT_UNAVAILABLE() { return (int)0L; }

    public static int IMDT_KEYBOARD() { return (int)1L; }

    public static int IMDT_MOUSE() { return (int)2L; }

    public static int IMDT_TOUCH() { return (int)4L; }

    public static int IMDT_PEN() { return (int)8L; }

    public static int IMDT_TOUCHPAD() { return (int)16L; }

    public static int IMO_UNAVAILABLE() { return (int)0L; }

    public static int IMO_HARDWARE() { return (int)1L; }

    public static int IMO_INJECTED() { return (int)2L; }

    public static int IMO_SYSTEM() { return (int)4L; }

    static final MemoryLayout tagINPUT_MESSAGE_SOURCE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("deviceType"),
        C_INT.withName("originId")
    ).withName("tagINPUT_MESSAGE_SOURCE");
    public static jdk.incubator.foreign.MemoryLayout tagINPUT_MESSAGE_SOURCE$struct$LAYOUT() { return tagINPUT_MESSAGE_SOURCE$struct$LAYOUT_; }

    static final MemoryLayout tagINPUT_MESSAGE_SOURCE$deviceType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagINPUT_MESSAGE_SOURCE$deviceType$LAYOUT() { return tagINPUT_MESSAGE_SOURCE$deviceType$LAYOUT_; }

    static final VarHandle tagINPUT_MESSAGE_SOURCE$deviceType$VH_ = tagINPUT_MESSAGE_SOURCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("deviceType"));
    public static java.lang.invoke.VarHandle tagINPUT_MESSAGE_SOURCE$deviceType$VH() { return tagINPUT_MESSAGE_SOURCE$deviceType$VH_; }

    static final MemoryLayout tagINPUT_MESSAGE_SOURCE$originId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagINPUT_MESSAGE_SOURCE$originId$LAYOUT() { return tagINPUT_MESSAGE_SOURCE$originId$LAYOUT_; }

    static final VarHandle tagINPUT_MESSAGE_SOURCE$originId$VH_ = tagINPUT_MESSAGE_SOURCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("originId"));
    public static java.lang.invoke.VarHandle tagINPUT_MESSAGE_SOURCE$originId$VH() { return tagINPUT_MESSAGE_SOURCE$originId$VH_; }

    static final FunctionDescriptor GetCurrentInputMessageSource$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentInputMessageSource$FUNC() { return GetCurrentInputMessageSource$FUNC_; }

    static final MethodHandle GetCurrentInputMessageSource$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentInputMessageSource",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCurrentInputMessageSource$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentInputMessageSource$MH() { return GetCurrentInputMessageSource$MH_; }

    static final FunctionDescriptor GetCIMSSM$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCIMSSM$FUNC() { return GetCIMSSM$FUNC_; }

    static final MethodHandle GetCIMSSM$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCIMSSM",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCIMSSM$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCIMSSM$MH() { return GetCIMSSM$MH_; }

    public static int AR_ENABLED() { return (int)0L; }

    public static int AR_DISABLED() { return (int)1L; }

    public static int AR_SUPPRESSED() { return (int)2L; }

    public static int AR_REMOTESESSION() { return (int)4L; }

    public static int AR_MULTIMON() { return (int)8L; }

    public static int AR_NOSENSOR() { return (int)16L; }

    public static int AR_NOT_SUPPORTED() { return (int)32L; }

    public static int AR_DOCKED() { return (int)64L; }

    public static int AR_LAPTOP() { return (int)128L; }

    public static int ORIENTATION_PREFERENCE_NONE() { return (int)0L; }

    public static int ORIENTATION_PREFERENCE_LANDSCAPE() { return (int)1L; }

    public static int ORIENTATION_PREFERENCE_PORTRAIT() { return (int)2L; }

    public static int ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED() { return (int)4L; }

    public static int ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED() { return (int)8L; }

    static final FunctionDescriptor GetAutoRotationState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetAutoRotationState$FUNC() { return GetAutoRotationState$FUNC_; }

    static final MethodHandle GetAutoRotationState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAutoRotationState",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetAutoRotationState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetAutoRotationState$MH() { return GetAutoRotationState$MH_; }

    static final FunctionDescriptor GetDisplayAutoRotationPreferences$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDisplayAutoRotationPreferences$FUNC() { return GetDisplayAutoRotationPreferences$FUNC_; }

    static final MethodHandle GetDisplayAutoRotationPreferences$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDisplayAutoRotationPreferences",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDisplayAutoRotationPreferences$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDisplayAutoRotationPreferences$MH() { return GetDisplayAutoRotationPreferences$MH_; }

    static final FunctionDescriptor GetDisplayAutoRotationPreferencesByProcessId$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDisplayAutoRotationPreferencesByProcessId$FUNC() { return GetDisplayAutoRotationPreferencesByProcessId$FUNC_; }

    static final MethodHandle GetDisplayAutoRotationPreferencesByProcessId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDisplayAutoRotationPreferencesByProcessId",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDisplayAutoRotationPreferencesByProcessId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDisplayAutoRotationPreferencesByProcessId$MH() { return GetDisplayAutoRotationPreferencesByProcessId$MH_; }

    static final FunctionDescriptor SetDisplayAutoRotationPreferences$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDisplayAutoRotationPreferences$FUNC() { return SetDisplayAutoRotationPreferences$FUNC_; }

    static final MethodHandle SetDisplayAutoRotationPreferences$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDisplayAutoRotationPreferences",
        "(I)I",
        SetDisplayAutoRotationPreferences$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDisplayAutoRotationPreferences$MH() { return SetDisplayAutoRotationPreferences$MH_; }

    static final FunctionDescriptor IsImmersiveProcess$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsImmersiveProcess$FUNC() { return IsImmersiveProcess$FUNC_; }

    static final MethodHandle IsImmersiveProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsImmersiveProcess",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsImmersiveProcess$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsImmersiveProcess$MH() { return IsImmersiveProcess$MH_; }

    static final FunctionDescriptor SetProcessRestrictionExemption$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessRestrictionExemption$FUNC() { return SetProcessRestrictionExemption$FUNC_; }

    static final MethodHandle SetProcessRestrictionExemption$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessRestrictionExemption",
        "(I)I",
        SetProcessRestrictionExemption$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessRestrictionExemption$MH() { return SetProcessRestrictionExemption$MH_; }

    static final FunctionDescriptor GetDateFormatA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDateFormatA$FUNC() { return GetDateFormatA$FUNC_; }

    static final MethodHandle GetDateFormatA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDateFormatA",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetDateFormatA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDateFormatA$MH() { return GetDateFormatA$MH_; }

    static final FunctionDescriptor GetDateFormatW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDateFormatW$FUNC() { return GetDateFormatW$FUNC_; }

    static final MethodHandle GetDateFormatW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDateFormatW",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetDateFormatW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDateFormatW$MH() { return GetDateFormatW$MH_; }

    static final FunctionDescriptor GetTimeFormatA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTimeFormatA$FUNC() { return GetTimeFormatA$FUNC_; }

    static final MethodHandle GetTimeFormatA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTimeFormatA",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetTimeFormatA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTimeFormatA$MH() { return GetTimeFormatA$MH_; }

    static final FunctionDescriptor GetTimeFormatW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTimeFormatW$FUNC() { return GetTimeFormatW$FUNC_; }

    static final MethodHandle GetTimeFormatW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTimeFormatW",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetTimeFormatW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTimeFormatW$MH() { return GetTimeFormatW$MH_; }

    static final FunctionDescriptor GetTimeFormatEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTimeFormatEx$FUNC() { return GetTimeFormatEx$FUNC_; }

    static final MethodHandle GetTimeFormatEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTimeFormatEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetTimeFormatEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTimeFormatEx$MH() { return GetTimeFormatEx$MH_; }

    static final FunctionDescriptor GetDateFormatEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDateFormatEx$FUNC() { return GetDateFormatEx$FUNC_; }

    static final MethodHandle GetDateFormatEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDateFormatEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetDateFormatEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDateFormatEx$MH() { return GetDateFormatEx$MH_; }

    static final FunctionDescriptor GetDurationFormatEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDurationFormatEx$FUNC() { return GetDurationFormatEx$FUNC_; }

    static final MethodHandle GetDurationFormatEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDurationFormatEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetDurationFormatEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDurationFormatEx$MH() { return GetDurationFormatEx$MH_; }

    static final MemoryLayout _cpinfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MaxCharSize"),
        MemoryLayout.ofSequence(2, C_BOOL).withName("DefaultChar"),
        MemoryLayout.ofSequence(12, C_BOOL).withName("LeadByte"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_cpinfo");
    public static jdk.incubator.foreign.MemoryLayout _cpinfo$struct$LAYOUT() { return _cpinfo$struct$LAYOUT_; }

    static final MemoryLayout _cpinfo$MaxCharSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _cpinfo$MaxCharSize$LAYOUT() { return _cpinfo$MaxCharSize$LAYOUT_; }

    static final VarHandle _cpinfo$MaxCharSize$VH_ = _cpinfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxCharSize"));
    public static java.lang.invoke.VarHandle _cpinfo$MaxCharSize$VH() { return _cpinfo$MaxCharSize$VH_; }

    static final MemoryLayout _cpinfoexA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MaxCharSize"),
        MemoryLayout.ofSequence(2, C_BOOL).withName("DefaultChar"),
        MemoryLayout.ofSequence(12, C_BOOL).withName("LeadByte"),
        C_SHORT.withName("UnicodeDefaultChar"),
        C_INT.withName("CodePage"),
        MemoryLayout.ofSequence(260, C_BOOL).withName("CodePageName")
    ).withName("_cpinfoexA");
    public static jdk.incubator.foreign.MemoryLayout _cpinfoexA$struct$LAYOUT() { return _cpinfoexA$struct$LAYOUT_; }

    static final MemoryLayout _cpinfoexA$MaxCharSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _cpinfoexA$MaxCharSize$LAYOUT() { return _cpinfoexA$MaxCharSize$LAYOUT_; }

    static final VarHandle _cpinfoexA$MaxCharSize$VH_ = _cpinfoexA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxCharSize"));
    public static java.lang.invoke.VarHandle _cpinfoexA$MaxCharSize$VH() { return _cpinfoexA$MaxCharSize$VH_; }

    static final MemoryLayout _cpinfoexA$UnicodeDefaultChar$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _cpinfoexA$UnicodeDefaultChar$LAYOUT() { return _cpinfoexA$UnicodeDefaultChar$LAYOUT_; }

    static final VarHandle _cpinfoexA$UnicodeDefaultChar$VH_ = _cpinfoexA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("UnicodeDefaultChar"));
    public static java.lang.invoke.VarHandle _cpinfoexA$UnicodeDefaultChar$VH() { return _cpinfoexA$UnicodeDefaultChar$VH_; }

    static final MemoryLayout _cpinfoexA$CodePage$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _cpinfoexA$CodePage$LAYOUT() { return _cpinfoexA$CodePage$LAYOUT_; }

    static final VarHandle _cpinfoexA$CodePage$VH_ = _cpinfoexA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CodePage"));
    public static java.lang.invoke.VarHandle _cpinfoexA$CodePage$VH() { return _cpinfoexA$CodePage$VH_; }

    static final MemoryLayout _cpinfoexW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MaxCharSize"),
        MemoryLayout.ofSequence(2, C_BOOL).withName("DefaultChar"),
        MemoryLayout.ofSequence(12, C_BOOL).withName("LeadByte"),
        C_SHORT.withName("UnicodeDefaultChar"),
        C_INT.withName("CodePage"),
        MemoryLayout.ofSequence(260, C_SHORT).withName("CodePageName")
    ).withName("_cpinfoexW");
    public static jdk.incubator.foreign.MemoryLayout _cpinfoexW$struct$LAYOUT() { return _cpinfoexW$struct$LAYOUT_; }

    static final MemoryLayout _cpinfoexW$MaxCharSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _cpinfoexW$MaxCharSize$LAYOUT() { return _cpinfoexW$MaxCharSize$LAYOUT_; }

    static final VarHandle _cpinfoexW$MaxCharSize$VH_ = _cpinfoexW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxCharSize"));
    public static java.lang.invoke.VarHandle _cpinfoexW$MaxCharSize$VH() { return _cpinfoexW$MaxCharSize$VH_; }

    static final MemoryLayout _cpinfoexW$UnicodeDefaultChar$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _cpinfoexW$UnicodeDefaultChar$LAYOUT() { return _cpinfoexW$UnicodeDefaultChar$LAYOUT_; }

    static final VarHandle _cpinfoexW$UnicodeDefaultChar$VH_ = _cpinfoexW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("UnicodeDefaultChar"));
    public static java.lang.invoke.VarHandle _cpinfoexW$UnicodeDefaultChar$VH() { return _cpinfoexW$UnicodeDefaultChar$VH_; }

    static final MemoryLayout _cpinfoexW$CodePage$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _cpinfoexW$CodePage$LAYOUT() { return _cpinfoexW$CodePage$LAYOUT_; }

    static final VarHandle _cpinfoexW$CodePage$VH_ = _cpinfoexW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CodePage"));
    public static java.lang.invoke.VarHandle _cpinfoexW$CodePage$VH() { return _cpinfoexW$CodePage$VH_; }

    static final MemoryLayout _numberfmtA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NumDigits"),
        C_INT.withName("LeadingZero"),
        C_INT.withName("Grouping"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpDecimalSep"),
        C_POINTER.withName("lpThousandSep"),
        C_INT.withName("NegativeOrder"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_numberfmtA");
    public static jdk.incubator.foreign.MemoryLayout _numberfmtA$struct$LAYOUT() { return _numberfmtA$struct$LAYOUT_; }

    static final MemoryLayout _numberfmtA$NumDigits$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtA$NumDigits$LAYOUT() { return _numberfmtA$NumDigits$LAYOUT_; }

    static final VarHandle _numberfmtA$NumDigits$VH_ = _numberfmtA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumDigits"));
    public static java.lang.invoke.VarHandle _numberfmtA$NumDigits$VH() { return _numberfmtA$NumDigits$VH_; }

    static final MemoryLayout _numberfmtA$LeadingZero$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtA$LeadingZero$LAYOUT() { return _numberfmtA$LeadingZero$LAYOUT_; }

    static final VarHandle _numberfmtA$LeadingZero$VH_ = _numberfmtA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LeadingZero"));
    public static java.lang.invoke.VarHandle _numberfmtA$LeadingZero$VH() { return _numberfmtA$LeadingZero$VH_; }

    static final MemoryLayout _numberfmtA$Grouping$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtA$Grouping$LAYOUT() { return _numberfmtA$Grouping$LAYOUT_; }

    static final VarHandle _numberfmtA$Grouping$VH_ = _numberfmtA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Grouping"));
    public static java.lang.invoke.VarHandle _numberfmtA$Grouping$VH() { return _numberfmtA$Grouping$VH_; }

    static final MemoryLayout _numberfmtA$lpDecimalSep$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtA$lpDecimalSep$LAYOUT() { return _numberfmtA$lpDecimalSep$LAYOUT_; }

    static final VarHandle _numberfmtA$lpDecimalSep$VH_ = MemoryHandles.asAddressVarHandle(_numberfmtA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDecimalSep")));
    public static java.lang.invoke.VarHandle _numberfmtA$lpDecimalSep$VH() { return _numberfmtA$lpDecimalSep$VH_; }

    static final MemoryLayout _numberfmtA$lpThousandSep$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtA$lpThousandSep$LAYOUT() { return _numberfmtA$lpThousandSep$LAYOUT_; }

    static final VarHandle _numberfmtA$lpThousandSep$VH_ = MemoryHandles.asAddressVarHandle(_numberfmtA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpThousandSep")));
    public static java.lang.invoke.VarHandle _numberfmtA$lpThousandSep$VH() { return _numberfmtA$lpThousandSep$VH_; }

    static final MemoryLayout _numberfmtA$NegativeOrder$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtA$NegativeOrder$LAYOUT() { return _numberfmtA$NegativeOrder$LAYOUT_; }

    static final VarHandle _numberfmtA$NegativeOrder$VH_ = _numberfmtA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NegativeOrder"));
    public static java.lang.invoke.VarHandle _numberfmtA$NegativeOrder$VH() { return _numberfmtA$NegativeOrder$VH_; }

    static final MemoryLayout _numberfmtW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NumDigits"),
        C_INT.withName("LeadingZero"),
        C_INT.withName("Grouping"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpDecimalSep"),
        C_POINTER.withName("lpThousandSep"),
        C_INT.withName("NegativeOrder"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_numberfmtW");
    public static jdk.incubator.foreign.MemoryLayout _numberfmtW$struct$LAYOUT() { return _numberfmtW$struct$LAYOUT_; }

    static final MemoryLayout _numberfmtW$NumDigits$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtW$NumDigits$LAYOUT() { return _numberfmtW$NumDigits$LAYOUT_; }

    static final VarHandle _numberfmtW$NumDigits$VH_ = _numberfmtW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumDigits"));
    public static java.lang.invoke.VarHandle _numberfmtW$NumDigits$VH() { return _numberfmtW$NumDigits$VH_; }

    static final MemoryLayout _numberfmtW$LeadingZero$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtW$LeadingZero$LAYOUT() { return _numberfmtW$LeadingZero$LAYOUT_; }

    static final VarHandle _numberfmtW$LeadingZero$VH_ = _numberfmtW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LeadingZero"));
    public static java.lang.invoke.VarHandle _numberfmtW$LeadingZero$VH() { return _numberfmtW$LeadingZero$VH_; }

    static final MemoryLayout _numberfmtW$Grouping$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtW$Grouping$LAYOUT() { return _numberfmtW$Grouping$LAYOUT_; }

    static final VarHandle _numberfmtW$Grouping$VH_ = _numberfmtW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Grouping"));
    public static java.lang.invoke.VarHandle _numberfmtW$Grouping$VH() { return _numberfmtW$Grouping$VH_; }

    static final MemoryLayout _numberfmtW$lpDecimalSep$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtW$lpDecimalSep$LAYOUT() { return _numberfmtW$lpDecimalSep$LAYOUT_; }

    static final VarHandle _numberfmtW$lpDecimalSep$VH_ = MemoryHandles.asAddressVarHandle(_numberfmtW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDecimalSep")));
    public static java.lang.invoke.VarHandle _numberfmtW$lpDecimalSep$VH() { return _numberfmtW$lpDecimalSep$VH_; }

    static final MemoryLayout _numberfmtW$lpThousandSep$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtW$lpThousandSep$LAYOUT() { return _numberfmtW$lpThousandSep$LAYOUT_; }

    static final VarHandle _numberfmtW$lpThousandSep$VH_ = MemoryHandles.asAddressVarHandle(_numberfmtW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpThousandSep")));
    public static java.lang.invoke.VarHandle _numberfmtW$lpThousandSep$VH() { return _numberfmtW$lpThousandSep$VH_; }

    static final MemoryLayout _numberfmtW$NegativeOrder$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _numberfmtW$NegativeOrder$LAYOUT() { return _numberfmtW$NegativeOrder$LAYOUT_; }

    static final VarHandle _numberfmtW$NegativeOrder$VH_ = _numberfmtW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NegativeOrder"));
    public static java.lang.invoke.VarHandle _numberfmtW$NegativeOrder$VH() { return _numberfmtW$NegativeOrder$VH_; }

    static final MemoryLayout _currencyfmtA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NumDigits"),
        C_INT.withName("LeadingZero"),
        C_INT.withName("Grouping"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpDecimalSep"),
        C_POINTER.withName("lpThousandSep"),
        C_INT.withName("NegativeOrder"),
        C_INT.withName("PositiveOrder"),
        C_POINTER.withName("lpCurrencySymbol")
    ).withName("_currencyfmtA");
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtA$struct$LAYOUT() { return _currencyfmtA$struct$LAYOUT_; }

    static final MemoryLayout _currencyfmtA$NumDigits$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtA$NumDigits$LAYOUT() { return _currencyfmtA$NumDigits$LAYOUT_; }

    static final VarHandle _currencyfmtA$NumDigits$VH_ = _currencyfmtA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumDigits"));
    public static java.lang.invoke.VarHandle _currencyfmtA$NumDigits$VH() { return _currencyfmtA$NumDigits$VH_; }

    static final MemoryLayout _currencyfmtA$LeadingZero$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtA$LeadingZero$LAYOUT() { return _currencyfmtA$LeadingZero$LAYOUT_; }

    static final VarHandle _currencyfmtA$LeadingZero$VH_ = _currencyfmtA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LeadingZero"));
    public static java.lang.invoke.VarHandle _currencyfmtA$LeadingZero$VH() { return _currencyfmtA$LeadingZero$VH_; }

    static final MemoryLayout _currencyfmtA$Grouping$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtA$Grouping$LAYOUT() { return _currencyfmtA$Grouping$LAYOUT_; }

    static final VarHandle _currencyfmtA$Grouping$VH_ = _currencyfmtA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Grouping"));
    public static java.lang.invoke.VarHandle _currencyfmtA$Grouping$VH() { return _currencyfmtA$Grouping$VH_; }

    static final MemoryLayout _currencyfmtA$lpDecimalSep$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtA$lpDecimalSep$LAYOUT() { return _currencyfmtA$lpDecimalSep$LAYOUT_; }

    static final VarHandle _currencyfmtA$lpDecimalSep$VH_ = MemoryHandles.asAddressVarHandle(_currencyfmtA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDecimalSep")));
    public static java.lang.invoke.VarHandle _currencyfmtA$lpDecimalSep$VH() { return _currencyfmtA$lpDecimalSep$VH_; }

    static final MemoryLayout _currencyfmtA$lpThousandSep$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtA$lpThousandSep$LAYOUT() { return _currencyfmtA$lpThousandSep$LAYOUT_; }

    static final VarHandle _currencyfmtA$lpThousandSep$VH_ = MemoryHandles.asAddressVarHandle(_currencyfmtA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpThousandSep")));
    public static java.lang.invoke.VarHandle _currencyfmtA$lpThousandSep$VH() { return _currencyfmtA$lpThousandSep$VH_; }

    static final MemoryLayout _currencyfmtA$NegativeOrder$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtA$NegativeOrder$LAYOUT() { return _currencyfmtA$NegativeOrder$LAYOUT_; }

    static final VarHandle _currencyfmtA$NegativeOrder$VH_ = _currencyfmtA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NegativeOrder"));
    public static java.lang.invoke.VarHandle _currencyfmtA$NegativeOrder$VH() { return _currencyfmtA$NegativeOrder$VH_; }

    static final MemoryLayout _currencyfmtA$PositiveOrder$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtA$PositiveOrder$LAYOUT() { return _currencyfmtA$PositiveOrder$LAYOUT_; }

    static final VarHandle _currencyfmtA$PositiveOrder$VH_ = _currencyfmtA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PositiveOrder"));
    public static java.lang.invoke.VarHandle _currencyfmtA$PositiveOrder$VH() { return _currencyfmtA$PositiveOrder$VH_; }

    static final MemoryLayout _currencyfmtA$lpCurrencySymbol$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtA$lpCurrencySymbol$LAYOUT() { return _currencyfmtA$lpCurrencySymbol$LAYOUT_; }

    static final VarHandle _currencyfmtA$lpCurrencySymbol$VH_ = MemoryHandles.asAddressVarHandle(_currencyfmtA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpCurrencySymbol")));
    public static java.lang.invoke.VarHandle _currencyfmtA$lpCurrencySymbol$VH() { return _currencyfmtA$lpCurrencySymbol$VH_; }

    static final MemoryLayout _currencyfmtW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NumDigits"),
        C_INT.withName("LeadingZero"),
        C_INT.withName("Grouping"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpDecimalSep"),
        C_POINTER.withName("lpThousandSep"),
        C_INT.withName("NegativeOrder"),
        C_INT.withName("PositiveOrder"),
        C_POINTER.withName("lpCurrencySymbol")
    ).withName("_currencyfmtW");
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtW$struct$LAYOUT() { return _currencyfmtW$struct$LAYOUT_; }

    static final MemoryLayout _currencyfmtW$NumDigits$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtW$NumDigits$LAYOUT() { return _currencyfmtW$NumDigits$LAYOUT_; }

    static final VarHandle _currencyfmtW$NumDigits$VH_ = _currencyfmtW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumDigits"));
    public static java.lang.invoke.VarHandle _currencyfmtW$NumDigits$VH() { return _currencyfmtW$NumDigits$VH_; }

    static final MemoryLayout _currencyfmtW$LeadingZero$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtW$LeadingZero$LAYOUT() { return _currencyfmtW$LeadingZero$LAYOUT_; }

    static final VarHandle _currencyfmtW$LeadingZero$VH_ = _currencyfmtW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LeadingZero"));
    public static java.lang.invoke.VarHandle _currencyfmtW$LeadingZero$VH() { return _currencyfmtW$LeadingZero$VH_; }

    static final MemoryLayout _currencyfmtW$Grouping$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtW$Grouping$LAYOUT() { return _currencyfmtW$Grouping$LAYOUT_; }

    static final VarHandle _currencyfmtW$Grouping$VH_ = _currencyfmtW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Grouping"));
    public static java.lang.invoke.VarHandle _currencyfmtW$Grouping$VH() { return _currencyfmtW$Grouping$VH_; }

    static final MemoryLayout _currencyfmtW$lpDecimalSep$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtW$lpDecimalSep$LAYOUT() { return _currencyfmtW$lpDecimalSep$LAYOUT_; }

    static final VarHandle _currencyfmtW$lpDecimalSep$VH_ = MemoryHandles.asAddressVarHandle(_currencyfmtW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDecimalSep")));
    public static java.lang.invoke.VarHandle _currencyfmtW$lpDecimalSep$VH() { return _currencyfmtW$lpDecimalSep$VH_; }

    static final MemoryLayout _currencyfmtW$lpThousandSep$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtW$lpThousandSep$LAYOUT() { return _currencyfmtW$lpThousandSep$LAYOUT_; }

    static final VarHandle _currencyfmtW$lpThousandSep$VH_ = MemoryHandles.asAddressVarHandle(_currencyfmtW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpThousandSep")));
    public static java.lang.invoke.VarHandle _currencyfmtW$lpThousandSep$VH() { return _currencyfmtW$lpThousandSep$VH_; }

    static final MemoryLayout _currencyfmtW$NegativeOrder$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtW$NegativeOrder$LAYOUT() { return _currencyfmtW$NegativeOrder$LAYOUT_; }

    static final VarHandle _currencyfmtW$NegativeOrder$VH_ = _currencyfmtW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NegativeOrder"));
    public static java.lang.invoke.VarHandle _currencyfmtW$NegativeOrder$VH() { return _currencyfmtW$NegativeOrder$VH_; }

    static final MemoryLayout _currencyfmtW$PositiveOrder$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtW$PositiveOrder$LAYOUT() { return _currencyfmtW$PositiveOrder$LAYOUT_; }

    static final VarHandle _currencyfmtW$PositiveOrder$VH_ = _currencyfmtW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PositiveOrder"));
    public static java.lang.invoke.VarHandle _currencyfmtW$PositiveOrder$VH() { return _currencyfmtW$PositiveOrder$VH_; }

    static final MemoryLayout _currencyfmtW$lpCurrencySymbol$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _currencyfmtW$lpCurrencySymbol$LAYOUT() { return _currencyfmtW$lpCurrencySymbol$LAYOUT_; }

    static final VarHandle _currencyfmtW$lpCurrencySymbol$VH_ = MemoryHandles.asAddressVarHandle(_currencyfmtW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpCurrencySymbol")));
    public static java.lang.invoke.VarHandle _currencyfmtW$lpCurrencySymbol$VH() { return _currencyfmtW$lpCurrencySymbol$VH_; }

    public static int COMPARE_STRING() { return (int)1L; }

    static final MemoryLayout _nlsversioninfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwNLSVersionInfoSize"),
        C_INT.withName("dwNLSVersion"),
        C_INT.withName("dwDefinedVersion"),
        C_INT.withName("dwEffectiveId"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("guidCustomVersion")
    ).withName("_nlsversioninfo");
    public static jdk.incubator.foreign.MemoryLayout _nlsversioninfo$struct$LAYOUT() { return _nlsversioninfo$struct$LAYOUT_; }

    static final MemoryLayout _nlsversioninfo$dwNLSVersionInfoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _nlsversioninfo$dwNLSVersionInfoSize$LAYOUT() { return _nlsversioninfo$dwNLSVersionInfoSize$LAYOUT_; }

    static final VarHandle _nlsversioninfo$dwNLSVersionInfoSize$VH_ = _nlsversioninfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwNLSVersionInfoSize"));
    public static java.lang.invoke.VarHandle _nlsversioninfo$dwNLSVersionInfoSize$VH() { return _nlsversioninfo$dwNLSVersionInfoSize$VH_; }

    static final MemoryLayout _nlsversioninfo$dwNLSVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _nlsversioninfo$dwNLSVersion$LAYOUT() { return _nlsversioninfo$dwNLSVersion$LAYOUT_; }

    static final VarHandle _nlsversioninfo$dwNLSVersion$VH_ = _nlsversioninfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwNLSVersion"));
    public static java.lang.invoke.VarHandle _nlsversioninfo$dwNLSVersion$VH() { return _nlsversioninfo$dwNLSVersion$VH_; }

    static final MemoryLayout _nlsversioninfo$dwDefinedVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _nlsversioninfo$dwDefinedVersion$LAYOUT() { return _nlsversioninfo$dwDefinedVersion$LAYOUT_; }

    static final VarHandle _nlsversioninfo$dwDefinedVersion$VH_ = _nlsversioninfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDefinedVersion"));
    public static java.lang.invoke.VarHandle _nlsversioninfo$dwDefinedVersion$VH() { return _nlsversioninfo$dwDefinedVersion$VH_; }

    static final MemoryLayout _nlsversioninfo$dwEffectiveId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _nlsversioninfo$dwEffectiveId$LAYOUT() { return _nlsversioninfo$dwEffectiveId$LAYOUT_; }

    static final VarHandle _nlsversioninfo$dwEffectiveId$VH_ = _nlsversioninfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwEffectiveId"));
    public static java.lang.invoke.VarHandle _nlsversioninfo$dwEffectiveId$VH() { return _nlsversioninfo$dwEffectiveId$VH_; }

    static final MemoryLayout _nlsversioninfoex$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwNLSVersionInfoSize"),
        C_INT.withName("dwNLSVersion"),
        C_INT.withName("dwDefinedVersion"),
        C_INT.withName("dwEffectiveId"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("guidCustomVersion")
    ).withName("_nlsversioninfoex");
    public static jdk.incubator.foreign.MemoryLayout _nlsversioninfoex$struct$LAYOUT() { return _nlsversioninfoex$struct$LAYOUT_; }

    static final MemoryLayout _nlsversioninfoex$dwNLSVersionInfoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _nlsversioninfoex$dwNLSVersionInfoSize$LAYOUT() { return _nlsversioninfoex$dwNLSVersionInfoSize$LAYOUT_; }

    static final VarHandle _nlsversioninfoex$dwNLSVersionInfoSize$VH_ = _nlsversioninfoex$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwNLSVersionInfoSize"));
    public static java.lang.invoke.VarHandle _nlsversioninfoex$dwNLSVersionInfoSize$VH() { return _nlsversioninfoex$dwNLSVersionInfoSize$VH_; }

    static final MemoryLayout _nlsversioninfoex$dwNLSVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _nlsversioninfoex$dwNLSVersion$LAYOUT() { return _nlsversioninfoex$dwNLSVersion$LAYOUT_; }

    static final VarHandle _nlsversioninfoex$dwNLSVersion$VH_ = _nlsversioninfoex$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwNLSVersion"));
    public static java.lang.invoke.VarHandle _nlsversioninfoex$dwNLSVersion$VH() { return _nlsversioninfoex$dwNLSVersion$VH_; }

    static final MemoryLayout _nlsversioninfoex$dwDefinedVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _nlsversioninfoex$dwDefinedVersion$LAYOUT() { return _nlsversioninfoex$dwDefinedVersion$LAYOUT_; }

    static final VarHandle _nlsversioninfoex$dwDefinedVersion$VH_ = _nlsversioninfoex$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDefinedVersion"));
    public static java.lang.invoke.VarHandle _nlsversioninfoex$dwDefinedVersion$VH() { return _nlsversioninfoex$dwDefinedVersion$VH_; }

    static final MemoryLayout _nlsversioninfoex$dwEffectiveId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _nlsversioninfoex$dwEffectiveId$LAYOUT() { return _nlsversioninfoex$dwEffectiveId$LAYOUT_; }

    static final VarHandle _nlsversioninfoex$dwEffectiveId$VH_ = _nlsversioninfoex$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwEffectiveId"));
    public static java.lang.invoke.VarHandle _nlsversioninfoex$dwEffectiveId$VH() { return _nlsversioninfoex$dwEffectiveId$VH_; }

    public static int GEO_NATION() { return (int)1L; }

    public static int GEO_LATITUDE() { return (int)2L; }

    public static int GEO_LONGITUDE() { return (int)3L; }

    public static int GEO_ISO2() { return (int)4L; }

    public static int GEO_ISO3() { return (int)5L; }

    public static int GEO_RFC1766() { return (int)6L; }

    public static int GEO_LCID() { return (int)7L; }

    public static int GEO_FRIENDLYNAME() { return (int)8L; }

    public static int GEO_OFFICIALNAME() { return (int)9L; }

    public static int GEO_TIMEZONES() { return (int)10L; }

    public static int GEO_OFFICIALLANGUAGES() { return (int)11L; }

    public static int GEO_ISO_UN_NUMBER() { return (int)12L; }

    public static int GEO_PARENT() { return (int)13L; }

    public static int GEO_DIALINGCODE() { return (int)14L; }

    public static int GEO_CURRENCYCODE() { return (int)15L; }

    public static int GEO_CURRENCYSYMBOL() { return (int)16L; }

    public static int GEO_NAME() { return (int)17L; }

    public static int GEO_ID() { return (int)18L; }

    public static int GEOCLASS_NATION() { return (int)16L; }

    public static int GEOCLASS_REGION() { return (int)14L; }

    public static int GEOCLASS_ALL() { return (int)0L; }

    public static int NormalizationOther() { return (int)0L; }

    public static int NormalizationC() { return (int)1L; }

    public static int NormalizationD() { return (int)2L; }

    public static int NormalizationKC() { return (int)5L; }

    public static int NormalizationKD() { return (int)6L; }

    static final MemoryLayout _FILEMUIINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwSize"),
        C_INT.withName("dwVersion"),
        C_INT.withName("dwFileType"),
        MemoryLayout.ofSequence(16, C_BOOL).withName("pChecksum"),
        MemoryLayout.ofSequence(16, C_BOOL).withName("pServiceChecksum"),
        C_INT.withName("dwLanguageNameOffset"),
        C_INT.withName("dwTypeIDMainSize"),
        C_INT.withName("dwTypeIDMainOffset"),
        C_INT.withName("dwTypeNameMainOffset"),
        C_INT.withName("dwTypeIDMUISize"),
        C_INT.withName("dwTypeIDMUIOffset"),
        C_INT.withName("dwTypeNameMUIOffset"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("abBuffer")
    ).withName("_FILEMUIINFO");
    public static jdk.incubator.foreign.MemoryLayout _FILEMUIINFO$struct$LAYOUT() { return _FILEMUIINFO$struct$LAYOUT_; }

    static final MemoryLayout _FILEMUIINFO$dwSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILEMUIINFO$dwSize$LAYOUT() { return _FILEMUIINFO$dwSize$LAYOUT_; }

    static final VarHandle _FILEMUIINFO$dwSize$VH_ = _FILEMUIINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    public static java.lang.invoke.VarHandle _FILEMUIINFO$dwSize$VH() { return _FILEMUIINFO$dwSize$VH_; }

    static final MemoryLayout _FILEMUIINFO$dwVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILEMUIINFO$dwVersion$LAYOUT() { return _FILEMUIINFO$dwVersion$LAYOUT_; }

    static final VarHandle _FILEMUIINFO$dwVersion$VH_ = _FILEMUIINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    public static java.lang.invoke.VarHandle _FILEMUIINFO$dwVersion$VH() { return _FILEMUIINFO$dwVersion$VH_; }

    static final MemoryLayout _FILEMUIINFO$dwFileType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILEMUIINFO$dwFileType$LAYOUT() { return _FILEMUIINFO$dwFileType$LAYOUT_; }

    static final VarHandle _FILEMUIINFO$dwFileType$VH_ = _FILEMUIINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileType"));
    public static java.lang.invoke.VarHandle _FILEMUIINFO$dwFileType$VH() { return _FILEMUIINFO$dwFileType$VH_; }

    static final MemoryLayout _FILEMUIINFO$dwLanguageNameOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILEMUIINFO$dwLanguageNameOffset$LAYOUT() { return _FILEMUIINFO$dwLanguageNameOffset$LAYOUT_; }

    static final VarHandle _FILEMUIINFO$dwLanguageNameOffset$VH_ = _FILEMUIINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwLanguageNameOffset"));
    public static java.lang.invoke.VarHandle _FILEMUIINFO$dwLanguageNameOffset$VH() { return _FILEMUIINFO$dwLanguageNameOffset$VH_; }

    static final MemoryLayout _FILEMUIINFO$dwTypeIDMainSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILEMUIINFO$dwTypeIDMainSize$LAYOUT() { return _FILEMUIINFO$dwTypeIDMainSize$LAYOUT_; }

    static final VarHandle _FILEMUIINFO$dwTypeIDMainSize$VH_ = _FILEMUIINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTypeIDMainSize"));
    public static java.lang.invoke.VarHandle _FILEMUIINFO$dwTypeIDMainSize$VH() { return _FILEMUIINFO$dwTypeIDMainSize$VH_; }

    static final MemoryLayout _FILEMUIINFO$dwTypeIDMainOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILEMUIINFO$dwTypeIDMainOffset$LAYOUT() { return _FILEMUIINFO$dwTypeIDMainOffset$LAYOUT_; }

    static final VarHandle _FILEMUIINFO$dwTypeIDMainOffset$VH_ = _FILEMUIINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTypeIDMainOffset"));
    public static java.lang.invoke.VarHandle _FILEMUIINFO$dwTypeIDMainOffset$VH() { return _FILEMUIINFO$dwTypeIDMainOffset$VH_; }

    static final MemoryLayout _FILEMUIINFO$dwTypeNameMainOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILEMUIINFO$dwTypeNameMainOffset$LAYOUT() { return _FILEMUIINFO$dwTypeNameMainOffset$LAYOUT_; }

    static final VarHandle _FILEMUIINFO$dwTypeNameMainOffset$VH_ = _FILEMUIINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTypeNameMainOffset"));
    public static java.lang.invoke.VarHandle _FILEMUIINFO$dwTypeNameMainOffset$VH() { return _FILEMUIINFO$dwTypeNameMainOffset$VH_; }

    static final MemoryLayout _FILEMUIINFO$dwTypeIDMUISize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILEMUIINFO$dwTypeIDMUISize$LAYOUT() { return _FILEMUIINFO$dwTypeIDMUISize$LAYOUT_; }

    static final VarHandle _FILEMUIINFO$dwTypeIDMUISize$VH_ = _FILEMUIINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTypeIDMUISize"));
    public static java.lang.invoke.VarHandle _FILEMUIINFO$dwTypeIDMUISize$VH() { return _FILEMUIINFO$dwTypeIDMUISize$VH_; }

    static final MemoryLayout _FILEMUIINFO$dwTypeIDMUIOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILEMUIINFO$dwTypeIDMUIOffset$LAYOUT() { return _FILEMUIINFO$dwTypeIDMUIOffset$LAYOUT_; }

    static final VarHandle _FILEMUIINFO$dwTypeIDMUIOffset$VH_ = _FILEMUIINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTypeIDMUIOffset"));
    public static java.lang.invoke.VarHandle _FILEMUIINFO$dwTypeIDMUIOffset$VH() { return _FILEMUIINFO$dwTypeIDMUIOffset$VH_; }

    static final MemoryLayout _FILEMUIINFO$dwTypeNameMUIOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILEMUIINFO$dwTypeNameMUIOffset$LAYOUT() { return _FILEMUIINFO$dwTypeNameMUIOffset$LAYOUT_; }

    static final VarHandle _FILEMUIINFO$dwTypeNameMUIOffset$VH_ = _FILEMUIINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTypeNameMUIOffset"));
    public static java.lang.invoke.VarHandle _FILEMUIINFO$dwTypeNameMUIOffset$VH() { return _FILEMUIINFO$dwTypeNameMUIOffset$VH_; }

    static final FunctionDescriptor CompareStringEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CompareStringEx$FUNC() { return CompareStringEx$FUNC_; }

    static final MethodHandle CompareStringEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CompareStringEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        CompareStringEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CompareStringEx$MH() { return CompareStringEx$MH_; }

    static final FunctionDescriptor CompareStringOrdinal$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CompareStringOrdinal$FUNC() { return CompareStringOrdinal$FUNC_; }

    static final MethodHandle CompareStringOrdinal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CompareStringOrdinal",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        CompareStringOrdinal$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CompareStringOrdinal$MH() { return CompareStringOrdinal$MH_; }

    static final FunctionDescriptor CompareStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CompareStringW$FUNC() { return CompareStringW$FUNC_; }

    static final MethodHandle CompareStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CompareStringW",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CompareStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CompareStringW$MH() { return CompareStringW$MH_; }

    static final FunctionDescriptor FoldStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FoldStringW$FUNC() { return FoldStringW$FUNC_; }

    static final MethodHandle FoldStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FoldStringW",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        FoldStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FoldStringW$MH() { return FoldStringW$MH_; }

    static final FunctionDescriptor GetStringTypeExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetStringTypeExW$FUNC() { return GetStringTypeExW$FUNC_; }

    static final MethodHandle GetStringTypeExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStringTypeExW",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetStringTypeExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetStringTypeExW$MH() { return GetStringTypeExW$MH_; }

    static final FunctionDescriptor GetStringTypeW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetStringTypeW$FUNC() { return GetStringTypeW$FUNC_; }

    static final MethodHandle GetStringTypeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStringTypeW",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetStringTypeW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetStringTypeW$MH() { return GetStringTypeW$MH_; }

    static final FunctionDescriptor MultiByteToWideChar$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MultiByteToWideChar$FUNC() { return MultiByteToWideChar$FUNC_; }

    static final MethodHandle MultiByteToWideChar$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MultiByteToWideChar",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        MultiByteToWideChar$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MultiByteToWideChar$MH() { return MultiByteToWideChar$MH_; }

    static final FunctionDescriptor WideCharToMultiByte$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WideCharToMultiByte$FUNC() { return WideCharToMultiByte$FUNC_; }

    static final MethodHandle WideCharToMultiByte$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WideCharToMultiByte",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WideCharToMultiByte$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WideCharToMultiByte$MH() { return WideCharToMultiByte$MH_; }

    static final FunctionDescriptor IsValidCodePage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsValidCodePage$FUNC() { return IsValidCodePage$FUNC_; }

    static final MethodHandle IsValidCodePage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsValidCodePage",
        "(I)I",
        IsValidCodePage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsValidCodePage$MH() { return IsValidCodePage$MH_; }

    static final FunctionDescriptor GetACP$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetACP$FUNC() { return GetACP$FUNC_; }

    static final MethodHandle GetACP$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetACP",
        "()I",
        GetACP$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetACP$MH() { return GetACP$MH_; }

    static final FunctionDescriptor GetOEMCP$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetOEMCP$FUNC() { return GetOEMCP$FUNC_; }

    static final MethodHandle GetOEMCP$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOEMCP",
        "()I",
        GetOEMCP$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetOEMCP$MH() { return GetOEMCP$MH_; }

    static final FunctionDescriptor GetCPInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCPInfo$FUNC() { return GetCPInfo$FUNC_; }

    static final MethodHandle GetCPInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCPInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetCPInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCPInfo$MH() { return GetCPInfo$MH_; }

    static final FunctionDescriptor GetCPInfoExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCPInfoExA$FUNC() { return GetCPInfoExA$FUNC_; }

    static final MethodHandle GetCPInfoExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCPInfoExA",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCPInfoExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCPInfoExA$MH() { return GetCPInfoExA$MH_; }

    static final FunctionDescriptor GetCPInfoExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCPInfoExW$FUNC() { return GetCPInfoExW$FUNC_; }

    static final MethodHandle GetCPInfoExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCPInfoExW",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCPInfoExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCPInfoExW$MH() { return GetCPInfoExW$MH_; }

    static final FunctionDescriptor CompareStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CompareStringA$FUNC() { return CompareStringA$FUNC_; }

    static final MethodHandle CompareStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CompareStringA",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CompareStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CompareStringA$MH() { return CompareStringA$MH_; }

    static final FunctionDescriptor FindNLSString$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindNLSString$FUNC() { return FindNLSString$FUNC_; }

    static final MethodHandle FindNLSString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindNLSString",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        FindNLSString$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindNLSString$MH() { return FindNLSString$MH_; }

    static final FunctionDescriptor LCMapStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LCMapStringW$FUNC() { return LCMapStringW$FUNC_; }

    static final MethodHandle LCMapStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LCMapStringW",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        LCMapStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LCMapStringW$MH() { return LCMapStringW$MH_; }

    static final FunctionDescriptor LCMapStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LCMapStringA$FUNC() { return LCMapStringA$FUNC_; }

    static final MethodHandle LCMapStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LCMapStringA",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        LCMapStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LCMapStringA$MH() { return LCMapStringA$MH_; }

    static final FunctionDescriptor GetLocaleInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLocaleInfoW$FUNC() { return GetLocaleInfoW$FUNC_; }

    static final MethodHandle GetLocaleInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLocaleInfoW",
        "(IILjdk/incubator/foreign/MemoryAddress;I)I",
        GetLocaleInfoW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLocaleInfoW$MH() { return GetLocaleInfoW$MH_; }

    static final FunctionDescriptor GetLocaleInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLocaleInfoA$FUNC() { return GetLocaleInfoA$FUNC_; }

    static final MethodHandle GetLocaleInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLocaleInfoA",
        "(IILjdk/incubator/foreign/MemoryAddress;I)I",
        GetLocaleInfoA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLocaleInfoA$MH() { return GetLocaleInfoA$MH_; }

    static final FunctionDescriptor SetLocaleInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetLocaleInfoA$FUNC() { return SetLocaleInfoA$FUNC_; }

    static final MethodHandle SetLocaleInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetLocaleInfoA",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        SetLocaleInfoA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetLocaleInfoA$MH() { return SetLocaleInfoA$MH_; }

    static final FunctionDescriptor SetLocaleInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetLocaleInfoW$FUNC() { return SetLocaleInfoW$FUNC_; }

    static final MethodHandle SetLocaleInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetLocaleInfoW",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        SetLocaleInfoW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetLocaleInfoW$MH() { return SetLocaleInfoW$MH_; }

    static final FunctionDescriptor GetCalendarInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCalendarInfoA$FUNC() { return GetCalendarInfoA$FUNC_; }

    static final MethodHandle GetCalendarInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCalendarInfoA",
        "(IIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetCalendarInfoA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCalendarInfoA$MH() { return GetCalendarInfoA$MH_; }

    static final FunctionDescriptor GetCalendarInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCalendarInfoW$FUNC() { return GetCalendarInfoW$FUNC_; }

    static final MethodHandle GetCalendarInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCalendarInfoW",
        "(IIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetCalendarInfoW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCalendarInfoW$MH() { return GetCalendarInfoW$MH_; }

    static final FunctionDescriptor SetCalendarInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetCalendarInfoA$FUNC() { return SetCalendarInfoA$FUNC_; }

    static final MethodHandle SetCalendarInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCalendarInfoA",
        "(IIILjdk/incubator/foreign/MemoryAddress;)I",
        SetCalendarInfoA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetCalendarInfoA$MH() { return SetCalendarInfoA$MH_; }

    static final FunctionDescriptor SetCalendarInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetCalendarInfoW$FUNC() { return SetCalendarInfoW$FUNC_; }

    static final MethodHandle SetCalendarInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCalendarInfoW",
        "(IIILjdk/incubator/foreign/MemoryAddress;)I",
        SetCalendarInfoW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetCalendarInfoW$MH() { return SetCalendarInfoW$MH_; }

    static final FunctionDescriptor LoadStringByReference$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadStringByReference$FUNC() { return LoadStringByReference$FUNC_; }

    static final MethodHandle LoadStringByReference$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadStringByReference",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LoadStringByReference$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadStringByReference$MH() { return LoadStringByReference$MH_; }

    static final FunctionDescriptor IsDBCSLeadByte$FUNC_ = FunctionDescriptor.of(C_INT,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsDBCSLeadByte$FUNC() { return IsDBCSLeadByte$FUNC_; }

    static final MethodHandle IsDBCSLeadByte$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsDBCSLeadByte",
        "(B)I",
        IsDBCSLeadByte$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsDBCSLeadByte$MH() { return IsDBCSLeadByte$MH_; }

    static final FunctionDescriptor IsDBCSLeadByteEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsDBCSLeadByteEx$FUNC() { return IsDBCSLeadByteEx$FUNC_; }

    static final MethodHandle IsDBCSLeadByteEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsDBCSLeadByteEx",
        "(IB)I",
        IsDBCSLeadByteEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsDBCSLeadByteEx$MH() { return IsDBCSLeadByteEx$MH_; }

    static final FunctionDescriptor LocaleNameToLCID$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocaleNameToLCID$FUNC() { return LocaleNameToLCID$FUNC_; }

    static final MethodHandle LocaleNameToLCID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocaleNameToLCID",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        LocaleNameToLCID$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocaleNameToLCID$MH() { return LocaleNameToLCID$MH_; }

    static final FunctionDescriptor LCIDToLocaleName$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LCIDToLocaleName$FUNC() { return LCIDToLocaleName$FUNC_; }

    static final MethodHandle LCIDToLocaleName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LCIDToLocaleName",
        "(ILjdk/incubator/foreign/MemoryAddress;II)I",
        LCIDToLocaleName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LCIDToLocaleName$MH() { return LCIDToLocaleName$MH_; }

    static final FunctionDescriptor GetDurationFormat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDurationFormat$FUNC() { return GetDurationFormat$FUNC_; }

    static final MethodHandle GetDurationFormat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDurationFormat",
        "(IILjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetDurationFormat$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDurationFormat$MH() { return GetDurationFormat$MH_; }

    static final FunctionDescriptor GetNumberFormatA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumberFormatA$FUNC() { return GetNumberFormatA$FUNC_; }

    static final MethodHandle GetNumberFormatA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumberFormatA",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetNumberFormatA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumberFormatA$MH() { return GetNumberFormatA$MH_; }

    static final FunctionDescriptor GetNumberFormatW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumberFormatW$FUNC() { return GetNumberFormatW$FUNC_; }

    static final MethodHandle GetNumberFormatW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumberFormatW",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetNumberFormatW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumberFormatW$MH() { return GetNumberFormatW$MH_; }

    static final FunctionDescriptor GetCurrencyFormatA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrencyFormatA$FUNC() { return GetCurrencyFormatA$FUNC_; }

    static final MethodHandle GetCurrencyFormatA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrencyFormatA",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetCurrencyFormatA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrencyFormatA$MH() { return GetCurrencyFormatA$MH_; }

    static final FunctionDescriptor GetCurrencyFormatW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrencyFormatW$FUNC() { return GetCurrencyFormatW$FUNC_; }

    static final MethodHandle GetCurrencyFormatW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrencyFormatW",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetCurrencyFormatW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrencyFormatW$MH() { return GetCurrencyFormatW$MH_; }

    static final FunctionDescriptor EnumCalendarInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumCalendarInfoA$FUNC() { return EnumCalendarInfoA$FUNC_; }

    static final MethodHandle EnumCalendarInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumCalendarInfoA",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        EnumCalendarInfoA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumCalendarInfoA$MH() { return EnumCalendarInfoA$MH_; }

    static final FunctionDescriptor EnumCalendarInfoA$lpCalInfoEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumCalendarInfoA$lpCalInfoEnumProc$FUNC() { return EnumCalendarInfoA$lpCalInfoEnumProc$FUNC_; }

    static final FunctionDescriptor EnumCalendarInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumCalendarInfoW$FUNC() { return EnumCalendarInfoW$FUNC_; }

    static final MethodHandle EnumCalendarInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumCalendarInfoW",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        EnumCalendarInfoW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumCalendarInfoW$MH() { return EnumCalendarInfoW$MH_; }

    static final FunctionDescriptor EnumCalendarInfoW$lpCalInfoEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumCalendarInfoW$lpCalInfoEnumProc$FUNC() { return EnumCalendarInfoW$lpCalInfoEnumProc$FUNC_; }

    static final FunctionDescriptor EnumCalendarInfoExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumCalendarInfoExA$FUNC() { return EnumCalendarInfoExA$FUNC_; }

    static final MethodHandle EnumCalendarInfoExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumCalendarInfoExA",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        EnumCalendarInfoExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumCalendarInfoExA$MH() { return EnumCalendarInfoExA$MH_; }

    static final FunctionDescriptor EnumCalendarInfoExA$lpCalInfoEnumProcEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumCalendarInfoExA$lpCalInfoEnumProcEx$FUNC() { return EnumCalendarInfoExA$lpCalInfoEnumProcEx$FUNC_; }

    static final FunctionDescriptor EnumCalendarInfoExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumCalendarInfoExW$FUNC() { return EnumCalendarInfoExW$FUNC_; }

    static final MethodHandle EnumCalendarInfoExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumCalendarInfoExW",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        EnumCalendarInfoExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumCalendarInfoExW$MH() { return EnumCalendarInfoExW$MH_; }

    static final FunctionDescriptor EnumCalendarInfoExW$lpCalInfoEnumProcEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumCalendarInfoExW$lpCalInfoEnumProcEx$FUNC() { return EnumCalendarInfoExW$lpCalInfoEnumProcEx$FUNC_; }

    static final FunctionDescriptor EnumTimeFormatsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumTimeFormatsA$FUNC() { return EnumTimeFormatsA$FUNC_; }

    static final MethodHandle EnumTimeFormatsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumTimeFormatsA",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        EnumTimeFormatsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumTimeFormatsA$MH() { return EnumTimeFormatsA$MH_; }

    static final FunctionDescriptor EnumTimeFormatsA$lpTimeFmtEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumTimeFormatsA$lpTimeFmtEnumProc$FUNC() { return EnumTimeFormatsA$lpTimeFmtEnumProc$FUNC_; }

    static final FunctionDescriptor EnumTimeFormatsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumTimeFormatsW$FUNC() { return EnumTimeFormatsW$FUNC_; }

    static final MethodHandle EnumTimeFormatsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumTimeFormatsW",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        EnumTimeFormatsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumTimeFormatsW$MH() { return EnumTimeFormatsW$MH_; }

    static final FunctionDescriptor EnumTimeFormatsW$lpTimeFmtEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumTimeFormatsW$lpTimeFmtEnumProc$FUNC() { return EnumTimeFormatsW$lpTimeFmtEnumProc$FUNC_; }

    static final FunctionDescriptor EnumDateFormatsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumDateFormatsA$FUNC() { return EnumDateFormatsA$FUNC_; }

    static final MethodHandle EnumDateFormatsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDateFormatsA",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        EnumDateFormatsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumDateFormatsA$MH() { return EnumDateFormatsA$MH_; }

    static final FunctionDescriptor EnumDateFormatsA$lpDateFmtEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumDateFormatsA$lpDateFmtEnumProc$FUNC() { return EnumDateFormatsA$lpDateFmtEnumProc$FUNC_; }

    static final FunctionDescriptor EnumDateFormatsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumDateFormatsW$FUNC() { return EnumDateFormatsW$FUNC_; }

    static final MethodHandle EnumDateFormatsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDateFormatsW",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        EnumDateFormatsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumDateFormatsW$MH() { return EnumDateFormatsW$MH_; }

    static final FunctionDescriptor EnumDateFormatsW$lpDateFmtEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumDateFormatsW$lpDateFmtEnumProc$FUNC() { return EnumDateFormatsW$lpDateFmtEnumProc$FUNC_; }

    static final FunctionDescriptor EnumDateFormatsExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumDateFormatsExA$FUNC() { return EnumDateFormatsExA$FUNC_; }

    static final MethodHandle EnumDateFormatsExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDateFormatsExA",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        EnumDateFormatsExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumDateFormatsExA$MH() { return EnumDateFormatsExA$MH_; }

    static final FunctionDescriptor EnumDateFormatsExA$lpDateFmtEnumProcEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumDateFormatsExA$lpDateFmtEnumProcEx$FUNC() { return EnumDateFormatsExA$lpDateFmtEnumProcEx$FUNC_; }

    static final FunctionDescriptor EnumDateFormatsExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumDateFormatsExW$FUNC() { return EnumDateFormatsExW$FUNC_; }

    static final MethodHandle EnumDateFormatsExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDateFormatsExW",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        EnumDateFormatsExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumDateFormatsExW$MH() { return EnumDateFormatsExW$MH_; }

    static final FunctionDescriptor EnumDateFormatsExW$lpDateFmtEnumProcEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumDateFormatsExW$lpDateFmtEnumProcEx$FUNC() { return EnumDateFormatsExW$lpDateFmtEnumProcEx$FUNC_; }

    static final FunctionDescriptor IsValidLanguageGroup$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsValidLanguageGroup$FUNC() { return IsValidLanguageGroup$FUNC_; }

    static final MethodHandle IsValidLanguageGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsValidLanguageGroup",
        "(II)I",
        IsValidLanguageGroup$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsValidLanguageGroup$MH() { return IsValidLanguageGroup$MH_; }

    static final FunctionDescriptor GetNLSVersion$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNLSVersion$FUNC() { return GetNLSVersion$FUNC_; }

    static final MethodHandle GetNLSVersion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNLSVersion",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        GetNLSVersion$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNLSVersion$MH() { return GetNLSVersion$MH_; }

    static final FunctionDescriptor IsValidLocale$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsValidLocale$FUNC() { return IsValidLocale$FUNC_; }

    static final MethodHandle IsValidLocale$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsValidLocale",
        "(II)I",
        IsValidLocale$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsValidLocale$MH() { return IsValidLocale$MH_; }

    static final FunctionDescriptor GetGeoInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGeoInfoA$FUNC() { return GetGeoInfoA$FUNC_; }

    static final MethodHandle GetGeoInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGeoInfoA",
        "(IILjdk/incubator/foreign/MemoryAddress;IS)I",
        GetGeoInfoA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGeoInfoA$MH() { return GetGeoInfoA$MH_; }

    static final FunctionDescriptor GetGeoInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGeoInfoW$FUNC() { return GetGeoInfoW$FUNC_; }

    static final MethodHandle GetGeoInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGeoInfoW",
        "(IILjdk/incubator/foreign/MemoryAddress;IS)I",
        GetGeoInfoW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGeoInfoW$MH() { return GetGeoInfoW$MH_; }

    static final FunctionDescriptor GetGeoInfoEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGeoInfoEx$FUNC() { return GetGeoInfoEx$FUNC_; }

    static final MethodHandle GetGeoInfoEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGeoInfoEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetGeoInfoEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGeoInfoEx$MH() { return GetGeoInfoEx$MH_; }

    static final FunctionDescriptor EnumSystemGeoID$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemGeoID$FUNC() { return EnumSystemGeoID$FUNC_; }

    static final MethodHandle EnumSystemGeoID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumSystemGeoID",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        EnumSystemGeoID$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumSystemGeoID$MH() { return EnumSystemGeoID$MH_; }

    static final FunctionDescriptor EnumSystemGeoID$lpGeoEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemGeoID$lpGeoEnumProc$FUNC() { return EnumSystemGeoID$lpGeoEnumProc$FUNC_; }

    static final FunctionDescriptor EnumSystemGeoNames$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemGeoNames$FUNC() { return EnumSystemGeoNames$FUNC_; }

    static final MethodHandle EnumSystemGeoNames$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumSystemGeoNames",
        "(ILjdk/incubator/foreign/MemoryAddress;J)I",
        EnumSystemGeoNames$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumSystemGeoNames$MH() { return EnumSystemGeoNames$MH_; }

    static final FunctionDescriptor EnumSystemGeoNames$geoEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemGeoNames$geoEnumProc$FUNC() { return EnumSystemGeoNames$geoEnumProc$FUNC_; }

    static final FunctionDescriptor GetUserGeoID$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetUserGeoID$FUNC() { return GetUserGeoID$FUNC_; }

    static final MethodHandle GetUserGeoID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUserGeoID",
        "(I)I",
        GetUserGeoID$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUserGeoID$MH() { return GetUserGeoID$MH_; }

    static final FunctionDescriptor GetUserDefaultGeoName$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetUserDefaultGeoName$FUNC() { return GetUserDefaultGeoName$FUNC_; }

    static final MethodHandle GetUserDefaultGeoName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUserDefaultGeoName",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetUserDefaultGeoName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUserDefaultGeoName$MH() { return GetUserDefaultGeoName$MH_; }

    static final FunctionDescriptor SetUserGeoID$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetUserGeoID$FUNC() { return SetUserGeoID$FUNC_; }

    static final MethodHandle SetUserGeoID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetUserGeoID",
        "(I)I",
        SetUserGeoID$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetUserGeoID$MH() { return SetUserGeoID$MH_; }

    static final FunctionDescriptor SetUserGeoName$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetUserGeoName$FUNC() { return SetUserGeoName$FUNC_; }

    static final MethodHandle SetUserGeoName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetUserGeoName",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetUserGeoName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetUserGeoName$MH() { return SetUserGeoName$MH_; }

    static final FunctionDescriptor ConvertDefaultLocale$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ConvertDefaultLocale$FUNC() { return ConvertDefaultLocale$FUNC_; }

    static final MethodHandle ConvertDefaultLocale$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ConvertDefaultLocale",
        "(I)I",
        ConvertDefaultLocale$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ConvertDefaultLocale$MH() { return ConvertDefaultLocale$MH_; }

    static final FunctionDescriptor GetSystemDefaultUILanguage$FUNC_ = FunctionDescriptor.of(C_SHORT);
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemDefaultUILanguage$FUNC() { return GetSystemDefaultUILanguage$FUNC_; }

    static final MethodHandle GetSystemDefaultUILanguage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemDefaultUILanguage",
        "()S",
        GetSystemDefaultUILanguage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemDefaultUILanguage$MH() { return GetSystemDefaultUILanguage$MH_; }

    static final FunctionDescriptor GetThreadLocale$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadLocale$FUNC() { return GetThreadLocale$FUNC_; }

    static final MethodHandle GetThreadLocale$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadLocale",
        "()I",
        GetThreadLocale$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadLocale$MH() { return GetThreadLocale$MH_; }

    static final FunctionDescriptor SetThreadLocale$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadLocale$FUNC() { return SetThreadLocale$FUNC_; }

    static final MethodHandle SetThreadLocale$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadLocale",
        "(I)I",
        SetThreadLocale$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadLocale$MH() { return SetThreadLocale$MH_; }

    static final FunctionDescriptor GetUserDefaultUILanguage$FUNC_ = FunctionDescriptor.of(C_SHORT);
    public static jdk.incubator.foreign.FunctionDescriptor GetUserDefaultUILanguage$FUNC() { return GetUserDefaultUILanguage$FUNC_; }

    static final MethodHandle GetUserDefaultUILanguage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUserDefaultUILanguage",
        "()S",
        GetUserDefaultUILanguage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUserDefaultUILanguage$MH() { return GetUserDefaultUILanguage$MH_; }

    static final FunctionDescriptor GetUserDefaultLangID$FUNC_ = FunctionDescriptor.of(C_SHORT);
    public static jdk.incubator.foreign.FunctionDescriptor GetUserDefaultLangID$FUNC() { return GetUserDefaultLangID$FUNC_; }

    static final MethodHandle GetUserDefaultLangID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUserDefaultLangID",
        "()S",
        GetUserDefaultLangID$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUserDefaultLangID$MH() { return GetUserDefaultLangID$MH_; }

    static final FunctionDescriptor GetSystemDefaultLangID$FUNC_ = FunctionDescriptor.of(C_SHORT);
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemDefaultLangID$FUNC() { return GetSystemDefaultLangID$FUNC_; }

    static final MethodHandle GetSystemDefaultLangID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemDefaultLangID",
        "()S",
        GetSystemDefaultLangID$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemDefaultLangID$MH() { return GetSystemDefaultLangID$MH_; }

    static final FunctionDescriptor GetSystemDefaultLCID$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemDefaultLCID$FUNC() { return GetSystemDefaultLCID$FUNC_; }

    static final MethodHandle GetSystemDefaultLCID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemDefaultLCID",
        "()I",
        GetSystemDefaultLCID$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemDefaultLCID$MH() { return GetSystemDefaultLCID$MH_; }

    static final FunctionDescriptor GetUserDefaultLCID$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetUserDefaultLCID$FUNC() { return GetUserDefaultLCID$FUNC_; }

    static final MethodHandle GetUserDefaultLCID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUserDefaultLCID",
        "()I",
        GetUserDefaultLCID$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUserDefaultLCID$MH() { return GetUserDefaultLCID$MH_; }

    static final FunctionDescriptor SetThreadUILanguage$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadUILanguage$FUNC() { return SetThreadUILanguage$FUNC_; }

    static final MethodHandle SetThreadUILanguage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadUILanguage",
        "(S)S",
        SetThreadUILanguage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadUILanguage$MH() { return SetThreadUILanguage$MH_; }

    static final FunctionDescriptor GetThreadUILanguage$FUNC_ = FunctionDescriptor.of(C_SHORT);
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadUILanguage$FUNC() { return GetThreadUILanguage$FUNC_; }

    static final MethodHandle GetThreadUILanguage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadUILanguage",
        "()S",
        GetThreadUILanguage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadUILanguage$MH() { return GetThreadUILanguage$MH_; }

    static final FunctionDescriptor GetProcessPreferredUILanguages$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessPreferredUILanguages$FUNC() { return GetProcessPreferredUILanguages$FUNC_; }

    static final MethodHandle GetProcessPreferredUILanguages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessPreferredUILanguages",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessPreferredUILanguages$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessPreferredUILanguages$MH() { return GetProcessPreferredUILanguages$MH_; }

    static final FunctionDescriptor SetProcessPreferredUILanguages$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessPreferredUILanguages$FUNC() { return SetProcessPreferredUILanguages$FUNC_; }

    static final MethodHandle SetProcessPreferredUILanguages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessPreferredUILanguages",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetProcessPreferredUILanguages$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessPreferredUILanguages$MH() { return SetProcessPreferredUILanguages$MH_; }

    static final FunctionDescriptor GetUserPreferredUILanguages$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetUserPreferredUILanguages$FUNC() { return GetUserPreferredUILanguages$FUNC_; }

    static final MethodHandle GetUserPreferredUILanguages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUserPreferredUILanguages",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetUserPreferredUILanguages$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUserPreferredUILanguages$MH() { return GetUserPreferredUILanguages$MH_; }

    static final FunctionDescriptor GetSystemPreferredUILanguages$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemPreferredUILanguages$FUNC() { return GetSystemPreferredUILanguages$FUNC_; }

    static final MethodHandle GetSystemPreferredUILanguages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemPreferredUILanguages",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSystemPreferredUILanguages$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemPreferredUILanguages$MH() { return GetSystemPreferredUILanguages$MH_; }

    static final FunctionDescriptor GetThreadPreferredUILanguages$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadPreferredUILanguages$FUNC() { return GetThreadPreferredUILanguages$FUNC_; }

    static final MethodHandle GetThreadPreferredUILanguages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadPreferredUILanguages",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetThreadPreferredUILanguages$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadPreferredUILanguages$MH() { return GetThreadPreferredUILanguages$MH_; }

    static final FunctionDescriptor SetThreadPreferredUILanguages$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadPreferredUILanguages$FUNC() { return SetThreadPreferredUILanguages$FUNC_; }

    static final MethodHandle SetThreadPreferredUILanguages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadPreferredUILanguages",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetThreadPreferredUILanguages$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadPreferredUILanguages$MH() { return SetThreadPreferredUILanguages$MH_; }

    static final FunctionDescriptor GetFileMUIInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileMUIInfo$FUNC() { return GetFileMUIInfo$FUNC_; }

    static final MethodHandle GetFileMUIInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileMUIInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileMUIInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileMUIInfo$MH() { return GetFileMUIInfo$MH_; }

    static final FunctionDescriptor GetFileMUIPath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileMUIPath$FUNC() { return GetFileMUIPath$FUNC_; }

    static final MethodHandle GetFileMUIPath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileMUIPath",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileMUIPath$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileMUIPath$MH() { return GetFileMUIPath$MH_; }

    static final FunctionDescriptor GetUILanguageInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetUILanguageInfo$FUNC() { return GetUILanguageInfo$FUNC_; }

    static final MethodHandle GetUILanguageInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUILanguageInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetUILanguageInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUILanguageInfo$MH() { return GetUILanguageInfo$MH_; }

    static final MemoryLayout HSAVEDUILANGUAGES__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HSAVEDUILANGUAGES__");
    public static jdk.incubator.foreign.MemoryLayout HSAVEDUILANGUAGES__$struct$LAYOUT() { return HSAVEDUILANGUAGES__$struct$LAYOUT_; }

    static final MemoryLayout HSAVEDUILANGUAGES__$unused$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout HSAVEDUILANGUAGES__$unused$LAYOUT() { return HSAVEDUILANGUAGES__$unused$LAYOUT_; }

    static final VarHandle HSAVEDUILANGUAGES__$unused$VH_ = HSAVEDUILANGUAGES__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    public static java.lang.invoke.VarHandle HSAVEDUILANGUAGES__$unused$VH() { return HSAVEDUILANGUAGES__$unused$VH_; }

    static final FunctionDescriptor SetThreadPreferredUILanguages2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadPreferredUILanguages2$FUNC() { return SetThreadPreferredUILanguages2$FUNC_; }

    static final MethodHandle SetThreadPreferredUILanguages2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadPreferredUILanguages2",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetThreadPreferredUILanguages2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadPreferredUILanguages2$MH() { return SetThreadPreferredUILanguages2$MH_; }

    static final FunctionDescriptor RestoreThreadPreferredUILanguages$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RestoreThreadPreferredUILanguages$FUNC() { return RestoreThreadPreferredUILanguages$FUNC_; }

    static final MethodHandle RestoreThreadPreferredUILanguages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RestoreThreadPreferredUILanguages",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RestoreThreadPreferredUILanguages$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RestoreThreadPreferredUILanguages$MH() { return RestoreThreadPreferredUILanguages$MH_; }

    static final FunctionDescriptor NotifyUILanguageChange$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor NotifyUILanguageChange$FUNC() { return NotifyUILanguageChange$FUNC_; }

    static final MethodHandle NotifyUILanguageChange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NotifyUILanguageChange",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        NotifyUILanguageChange$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle NotifyUILanguageChange$MH() { return NotifyUILanguageChange$MH_; }

    static final FunctionDescriptor GetStringTypeExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetStringTypeExA$FUNC() { return GetStringTypeExA$FUNC_; }

    static final MethodHandle GetStringTypeExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStringTypeExA",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetStringTypeExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetStringTypeExA$MH() { return GetStringTypeExA$MH_; }

    static final FunctionDescriptor GetStringTypeA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetStringTypeA$FUNC() { return GetStringTypeA$FUNC_; }

    static final MethodHandle GetStringTypeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStringTypeA",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetStringTypeA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetStringTypeA$MH() { return GetStringTypeA$MH_; }

    static final FunctionDescriptor FoldStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FoldStringA$FUNC() { return FoldStringA$FUNC_; }

    static final MethodHandle FoldStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FoldStringA",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        FoldStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FoldStringA$MH() { return FoldStringA$MH_; }

    static final FunctionDescriptor EnumSystemLocalesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemLocalesA$FUNC() { return EnumSystemLocalesA$FUNC_; }

    static final MethodHandle EnumSystemLocalesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumSystemLocalesA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        EnumSystemLocalesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumSystemLocalesA$MH() { return EnumSystemLocalesA$MH_; }

    static final FunctionDescriptor EnumSystemLocalesA$lpLocaleEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemLocalesA$lpLocaleEnumProc$FUNC() { return EnumSystemLocalesA$lpLocaleEnumProc$FUNC_; }

    static final FunctionDescriptor EnumSystemLocalesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemLocalesW$FUNC() { return EnumSystemLocalesW$FUNC_; }

    static final MethodHandle EnumSystemLocalesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumSystemLocalesW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        EnumSystemLocalesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumSystemLocalesW$MH() { return EnumSystemLocalesW$MH_; }

    static final FunctionDescriptor EnumSystemLocalesW$lpLocaleEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemLocalesW$lpLocaleEnumProc$FUNC() { return EnumSystemLocalesW$lpLocaleEnumProc$FUNC_; }

    static final FunctionDescriptor EnumSystemLanguageGroupsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemLanguageGroupsA$FUNC() { return EnumSystemLanguageGroupsA$FUNC_; }

    static final MethodHandle EnumSystemLanguageGroupsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumSystemLanguageGroupsA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        EnumSystemLanguageGroupsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumSystemLanguageGroupsA$MH() { return EnumSystemLanguageGroupsA$MH_; }

    static final FunctionDescriptor EnumSystemLanguageGroupsA$lpLanguageGroupEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemLanguageGroupsA$lpLanguageGroupEnumProc$FUNC() { return EnumSystemLanguageGroupsA$lpLanguageGroupEnumProc$FUNC_; }

    static final FunctionDescriptor EnumSystemLanguageGroupsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemLanguageGroupsW$FUNC() { return EnumSystemLanguageGroupsW$FUNC_; }

    static final MethodHandle EnumSystemLanguageGroupsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumSystemLanguageGroupsW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        EnumSystemLanguageGroupsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumSystemLanguageGroupsW$MH() { return EnumSystemLanguageGroupsW$MH_; }

    static final FunctionDescriptor EnumSystemLanguageGroupsW$lpLanguageGroupEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemLanguageGroupsW$lpLanguageGroupEnumProc$FUNC() { return EnumSystemLanguageGroupsW$lpLanguageGroupEnumProc$FUNC_; }

    static final FunctionDescriptor EnumLanguageGroupLocalesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumLanguageGroupLocalesA$FUNC() { return EnumLanguageGroupLocalesA$FUNC_; }

    static final MethodHandle EnumLanguageGroupLocalesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumLanguageGroupLocalesA",
        "(Ljdk/incubator/foreign/MemoryAddress;IIJ)I",
        EnumLanguageGroupLocalesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumLanguageGroupLocalesA$MH() { return EnumLanguageGroupLocalesA$MH_; }

    static final FunctionDescriptor EnumLanguageGroupLocalesA$lpLangGroupLocaleEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumLanguageGroupLocalesA$lpLangGroupLocaleEnumProc$FUNC() { return EnumLanguageGroupLocalesA$lpLangGroupLocaleEnumProc$FUNC_; }

    static final FunctionDescriptor EnumLanguageGroupLocalesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumLanguageGroupLocalesW$FUNC() { return EnumLanguageGroupLocalesW$FUNC_; }

    static final MethodHandle EnumLanguageGroupLocalesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumLanguageGroupLocalesW",
        "(Ljdk/incubator/foreign/MemoryAddress;IIJ)I",
        EnumLanguageGroupLocalesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumLanguageGroupLocalesW$MH() { return EnumLanguageGroupLocalesW$MH_; }

    static final FunctionDescriptor EnumLanguageGroupLocalesW$lpLangGroupLocaleEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumLanguageGroupLocalesW$lpLangGroupLocaleEnumProc$FUNC() { return EnumLanguageGroupLocalesW$lpLangGroupLocaleEnumProc$FUNC_; }

    static final FunctionDescriptor EnumUILanguagesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumUILanguagesA$FUNC() { return EnumUILanguagesA$FUNC_; }

    static final MethodHandle EnumUILanguagesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumUILanguagesA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        EnumUILanguagesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumUILanguagesA$MH() { return EnumUILanguagesA$MH_; }

    static final FunctionDescriptor EnumUILanguagesA$lpUILanguageEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumUILanguagesA$lpUILanguageEnumProc$FUNC() { return EnumUILanguagesA$lpUILanguageEnumProc$FUNC_; }

    static final FunctionDescriptor EnumUILanguagesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumUILanguagesW$FUNC() { return EnumUILanguagesW$FUNC_; }

    static final MethodHandle EnumUILanguagesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumUILanguagesW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        EnumUILanguagesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumUILanguagesW$MH() { return EnumUILanguagesW$MH_; }

    static final FunctionDescriptor EnumUILanguagesW$lpUILanguageEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumUILanguagesW$lpUILanguageEnumProc$FUNC() { return EnumUILanguagesW$lpUILanguageEnumProc$FUNC_; }

    static final FunctionDescriptor EnumSystemCodePagesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemCodePagesA$FUNC() { return EnumSystemCodePagesA$FUNC_; }

    static final MethodHandle EnumSystemCodePagesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumSystemCodePagesA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        EnumSystemCodePagesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumSystemCodePagesA$MH() { return EnumSystemCodePagesA$MH_; }

    static final FunctionDescriptor EnumSystemCodePagesA$lpCodePageEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemCodePagesA$lpCodePageEnumProc$FUNC() { return EnumSystemCodePagesA$lpCodePageEnumProc$FUNC_; }

    static final FunctionDescriptor EnumSystemCodePagesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemCodePagesW$FUNC() { return EnumSystemCodePagesW$FUNC_; }

    static final MethodHandle EnumSystemCodePagesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumSystemCodePagesW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        EnumSystemCodePagesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumSystemCodePagesW$MH() { return EnumSystemCodePagesW$MH_; }

    static final FunctionDescriptor EnumSystemCodePagesW$lpCodePageEnumProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemCodePagesW$lpCodePageEnumProc$FUNC() { return EnumSystemCodePagesW$lpCodePageEnumProc$FUNC_; }

    static final FunctionDescriptor IdnToAscii$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IdnToAscii$FUNC() { return IdnToAscii$FUNC_; }

    static final MethodHandle IdnToAscii$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IdnToAscii",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IdnToAscii$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IdnToAscii$MH() { return IdnToAscii$MH_; }

    static final FunctionDescriptor IdnToUnicode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IdnToUnicode$FUNC() { return IdnToUnicode$FUNC_; }

    static final MethodHandle IdnToUnicode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IdnToUnicode",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IdnToUnicode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IdnToUnicode$MH() { return IdnToUnicode$MH_; }

    static final FunctionDescriptor IdnToNameprepUnicode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IdnToNameprepUnicode$FUNC() { return IdnToNameprepUnicode$FUNC_; }

    static final MethodHandle IdnToNameprepUnicode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IdnToNameprepUnicode",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IdnToNameprepUnicode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IdnToNameprepUnicode$MH() { return IdnToNameprepUnicode$MH_; }

    static final FunctionDescriptor NormalizeString$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor NormalizeString$FUNC() { return NormalizeString$FUNC_; }

    static final MethodHandle NormalizeString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NormalizeString",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        NormalizeString$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle NormalizeString$MH() { return NormalizeString$MH_; }

    static final FunctionDescriptor IsNormalizedString$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsNormalizedString$FUNC() { return IsNormalizedString$FUNC_; }

    static final MethodHandle IsNormalizedString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsNormalizedString",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        IsNormalizedString$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsNormalizedString$MH() { return IsNormalizedString$MH_; }

    static final FunctionDescriptor VerifyScripts$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor VerifyScripts$FUNC() { return VerifyScripts$FUNC_; }

    static final MethodHandle VerifyScripts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerifyScripts",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        VerifyScripts$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VerifyScripts$MH() { return VerifyScripts$MH_; }

    static final FunctionDescriptor GetStringScripts$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetStringScripts$FUNC() { return GetStringScripts$FUNC_; }

    static final MethodHandle GetStringScripts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStringScripts",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetStringScripts$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetStringScripts$MH() { return GetStringScripts$MH_; }

    static final FunctionDescriptor GetLocaleInfoEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLocaleInfoEx$FUNC() { return GetLocaleInfoEx$FUNC_; }

    static final MethodHandle GetLocaleInfoEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLocaleInfoEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetLocaleInfoEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLocaleInfoEx$MH() { return GetLocaleInfoEx$MH_; }

    static final FunctionDescriptor GetCalendarInfoEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCalendarInfoEx$FUNC() { return GetCalendarInfoEx$FUNC_; }

    static final MethodHandle GetCalendarInfoEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCalendarInfoEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetCalendarInfoEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCalendarInfoEx$MH() { return GetCalendarInfoEx$MH_; }

    static final FunctionDescriptor GetNumberFormatEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumberFormatEx$FUNC() { return GetNumberFormatEx$FUNC_; }

    static final MethodHandle GetNumberFormatEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumberFormatEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetNumberFormatEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumberFormatEx$MH() { return GetNumberFormatEx$MH_; }

    static final FunctionDescriptor GetCurrencyFormatEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrencyFormatEx$FUNC() { return GetCurrencyFormatEx$FUNC_; }

    static final MethodHandle GetCurrencyFormatEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrencyFormatEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetCurrencyFormatEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrencyFormatEx$MH() { return GetCurrencyFormatEx$MH_; }

    static final FunctionDescriptor GetUserDefaultLocaleName$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetUserDefaultLocaleName$FUNC() { return GetUserDefaultLocaleName$FUNC_; }

    static final MethodHandle GetUserDefaultLocaleName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUserDefaultLocaleName",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetUserDefaultLocaleName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUserDefaultLocaleName$MH() { return GetUserDefaultLocaleName$MH_; }

    static final FunctionDescriptor GetSystemDefaultLocaleName$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemDefaultLocaleName$FUNC() { return GetSystemDefaultLocaleName$FUNC_; }

    static final MethodHandle GetSystemDefaultLocaleName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemDefaultLocaleName",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetSystemDefaultLocaleName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemDefaultLocaleName$MH() { return GetSystemDefaultLocaleName$MH_; }

    static final FunctionDescriptor IsNLSDefinedString$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsNLSDefinedString$FUNC() { return IsNLSDefinedString$FUNC_; }

    static final MethodHandle IsNLSDefinedString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsNLSDefinedString",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IsNLSDefinedString$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsNLSDefinedString$MH() { return IsNLSDefinedString$MH_; }

    static final FunctionDescriptor GetNLSVersionEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNLSVersionEx$FUNC() { return GetNLSVersionEx$FUNC_; }

    static final MethodHandle GetNLSVersionEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNLSVersionEx",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNLSVersionEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNLSVersionEx$MH() { return GetNLSVersionEx$MH_; }

    static final FunctionDescriptor IsValidNLSVersion$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsValidNLSVersion$FUNC() { return IsValidNLSVersion$FUNC_; }

    static final MethodHandle IsValidNLSVersion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsValidNLSVersion",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IsValidNLSVersion$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsValidNLSVersion$MH() { return IsValidNLSVersion$MH_; }

    static final FunctionDescriptor FindNLSStringEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindNLSStringEx$FUNC() { return FindNLSStringEx$FUNC_; }

    static final MethodHandle FindNLSStringEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindNLSStringEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        FindNLSStringEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindNLSStringEx$MH() { return FindNLSStringEx$MH_; }

    static final FunctionDescriptor LCMapStringEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor LCMapStringEx$FUNC() { return LCMapStringEx$FUNC_; }

    static final MethodHandle LCMapStringEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LCMapStringEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        LCMapStringEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LCMapStringEx$MH() { return LCMapStringEx$MH_; }

    static final FunctionDescriptor IsValidLocaleName$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsValidLocaleName$FUNC() { return IsValidLocaleName$FUNC_; }

    static final MethodHandle IsValidLocaleName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsValidLocaleName",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsValidLocaleName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsValidLocaleName$MH() { return IsValidLocaleName$MH_; }

    static final FunctionDescriptor EnumCalendarInfoExEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumCalendarInfoExEx$FUNC() { return EnumCalendarInfoExEx$FUNC_; }

    static final MethodHandle EnumCalendarInfoExEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumCalendarInfoExEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IJ)I",
        EnumCalendarInfoExEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumCalendarInfoExEx$MH() { return EnumCalendarInfoExEx$MH_; }

    static final FunctionDescriptor EnumCalendarInfoExEx$pCalInfoEnumProcExEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumCalendarInfoExEx$pCalInfoEnumProcExEx$FUNC() { return EnumCalendarInfoExEx$pCalInfoEnumProcExEx$FUNC_; }

    static final FunctionDescriptor EnumDateFormatsExEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumDateFormatsExEx$FUNC() { return EnumDateFormatsExEx$FUNC_; }

    static final MethodHandle EnumDateFormatsExEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDateFormatsExEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        EnumDateFormatsExEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumDateFormatsExEx$MH() { return EnumDateFormatsExEx$MH_; }

    static final FunctionDescriptor EnumDateFormatsExEx$lpDateFmtEnumProcExEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumDateFormatsExEx$lpDateFmtEnumProcExEx$FUNC() { return EnumDateFormatsExEx$lpDateFmtEnumProcExEx$FUNC_; }

    static final FunctionDescriptor EnumTimeFormatsEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumTimeFormatsEx$FUNC() { return EnumTimeFormatsEx$FUNC_; }

    static final MethodHandle EnumTimeFormatsEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumTimeFormatsEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        EnumTimeFormatsEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumTimeFormatsEx$MH() { return EnumTimeFormatsEx$MH_; }

    static final FunctionDescriptor EnumTimeFormatsEx$lpTimeFmtEnumProcEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumTimeFormatsEx$lpTimeFmtEnumProcEx$FUNC() { return EnumTimeFormatsEx$lpTimeFmtEnumProcEx$FUNC_; }

    static final FunctionDescriptor EnumSystemLocalesEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemLocalesEx$FUNC() { return EnumSystemLocalesEx$FUNC_; }

    static final MethodHandle EnumSystemLocalesEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumSystemLocalesEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I",
        EnumSystemLocalesEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumSystemLocalesEx$MH() { return EnumSystemLocalesEx$MH_; }

    static final FunctionDescriptor EnumSystemLocalesEx$lpLocaleEnumProcEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemLocalesEx$lpLocaleEnumProcEx$FUNC() { return EnumSystemLocalesEx$lpLocaleEnumProcEx$FUNC_; }

    static final FunctionDescriptor ResolveLocaleName$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ResolveLocaleName$FUNC() { return ResolveLocaleName$FUNC_; }

    static final MethodHandle ResolveLocaleName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ResolveLocaleName",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ResolveLocaleName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ResolveLocaleName$MH() { return ResolveLocaleName$MH_; }

    static final MemoryLayout _COORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("X"),
        C_SHORT.withName("Y")
    ).withName("_COORD");
    public static jdk.incubator.foreign.MemoryLayout _COORD$struct$LAYOUT() { return _COORD$struct$LAYOUT_; }

    static final MemoryLayout _COORD$X$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _COORD$X$LAYOUT() { return _COORD$X$LAYOUT_; }

    static final VarHandle _COORD$X$VH_ = _COORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("X"));
    public static java.lang.invoke.VarHandle _COORD$X$VH() { return _COORD$X$VH_; }

    static final MemoryLayout _COORD$Y$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _COORD$Y$LAYOUT() { return _COORD$Y$LAYOUT_; }

    static final VarHandle _COORD$Y$VH_ = _COORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Y"));
    public static java.lang.invoke.VarHandle _COORD$Y$VH() { return _COORD$Y$VH_; }

    static final MemoryLayout _SMALL_RECT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Left"),
        C_SHORT.withName("Top"),
        C_SHORT.withName("Right"),
        C_SHORT.withName("Bottom")
    ).withName("_SMALL_RECT");
    public static jdk.incubator.foreign.MemoryLayout _SMALL_RECT$struct$LAYOUT() { return _SMALL_RECT$struct$LAYOUT_; }

    static final MemoryLayout _SMALL_RECT$Left$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SMALL_RECT$Left$LAYOUT() { return _SMALL_RECT$Left$LAYOUT_; }

    static final VarHandle _SMALL_RECT$Left$VH_ = _SMALL_RECT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Left"));
    public static java.lang.invoke.VarHandle _SMALL_RECT$Left$VH() { return _SMALL_RECT$Left$VH_; }

    static final MemoryLayout _SMALL_RECT$Top$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SMALL_RECT$Top$LAYOUT() { return _SMALL_RECT$Top$LAYOUT_; }

    static final VarHandle _SMALL_RECT$Top$VH_ = _SMALL_RECT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Top"));
    public static java.lang.invoke.VarHandle _SMALL_RECT$Top$VH() { return _SMALL_RECT$Top$VH_; }

    static final MemoryLayout _SMALL_RECT$Right$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SMALL_RECT$Right$LAYOUT() { return _SMALL_RECT$Right$LAYOUT_; }

    static final VarHandle _SMALL_RECT$Right$VH_ = _SMALL_RECT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Right"));
    public static java.lang.invoke.VarHandle _SMALL_RECT$Right$VH() { return _SMALL_RECT$Right$VH_; }

    static final MemoryLayout _SMALL_RECT$Bottom$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SMALL_RECT$Bottom$LAYOUT() { return _SMALL_RECT$Bottom$LAYOUT_; }

    static final VarHandle _SMALL_RECT$Bottom$VH_ = _SMALL_RECT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Bottom"));
    public static java.lang.invoke.VarHandle _SMALL_RECT$Bottom$VH() { return _SMALL_RECT$Bottom$VH_; }

    static final MemoryLayout _KEY_EVENT_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("bKeyDown"),
        C_SHORT.withName("wRepeatCount"),
        C_SHORT.withName("wVirtualKeyCode"),
        C_SHORT.withName("wVirtualScanCode"),
        MemoryLayout.ofUnion(
            C_SHORT.withName("UnicodeChar"),
            C_BOOL.withName("AsciiChar")
        ).withName("uChar"),
        C_INT.withName("dwControlKeyState")
    ).withName("_KEY_EVENT_RECORD");
    public static jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$struct$LAYOUT() { return _KEY_EVENT_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _KEY_EVENT_RECORD$bKeyDown$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$bKeyDown$LAYOUT() { return _KEY_EVENT_RECORD$bKeyDown$LAYOUT_; }

    static final VarHandle _KEY_EVENT_RECORD$bKeyDown$VH_ = _KEY_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bKeyDown"));
    public static java.lang.invoke.VarHandle _KEY_EVENT_RECORD$bKeyDown$VH() { return _KEY_EVENT_RECORD$bKeyDown$VH_; }

    static final MemoryLayout _KEY_EVENT_RECORD$wRepeatCount$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$wRepeatCount$LAYOUT() { return _KEY_EVENT_RECORD$wRepeatCount$LAYOUT_; }

    static final VarHandle _KEY_EVENT_RECORD$wRepeatCount$VH_ = _KEY_EVENT_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wRepeatCount"));
    public static java.lang.invoke.VarHandle _KEY_EVENT_RECORD$wRepeatCount$VH() { return _KEY_EVENT_RECORD$wRepeatCount$VH_; }

    static final MemoryLayout _KEY_EVENT_RECORD$wVirtualKeyCode$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$wVirtualKeyCode$LAYOUT() { return _KEY_EVENT_RECORD$wVirtualKeyCode$LAYOUT_; }

    static final VarHandle _KEY_EVENT_RECORD$wVirtualKeyCode$VH_ = _KEY_EVENT_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wVirtualKeyCode"));
    public static java.lang.invoke.VarHandle _KEY_EVENT_RECORD$wVirtualKeyCode$VH() { return _KEY_EVENT_RECORD$wVirtualKeyCode$VH_; }

    static final MemoryLayout _KEY_EVENT_RECORD$wVirtualScanCode$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$wVirtualScanCode$LAYOUT() { return _KEY_EVENT_RECORD$wVirtualScanCode$LAYOUT_; }

    static final VarHandle _KEY_EVENT_RECORD$wVirtualScanCode$VH_ = _KEY_EVENT_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wVirtualScanCode"));
    public static java.lang.invoke.VarHandle _KEY_EVENT_RECORD$wVirtualScanCode$VH() { return _KEY_EVENT_RECORD$wVirtualScanCode$VH_; }

    static final MemoryLayout uChar$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_SHORT.withName("UnicodeChar"),
        C_BOOL.withName("AsciiChar")
    );
    public static jdk.incubator.foreign.MemoryLayout uChar$struct$LAYOUT() { return uChar$struct$LAYOUT_; }

    static final MemoryLayout uChar$UnicodeChar$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout uChar$UnicodeChar$LAYOUT() { return uChar$UnicodeChar$LAYOUT_; }

    static final VarHandle uChar$UnicodeChar$VH_ = uChar$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("UnicodeChar"));
    public static java.lang.invoke.VarHandle uChar$UnicodeChar$VH() { return uChar$UnicodeChar$VH_; }

    static final MemoryLayout uChar$AsciiChar$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout uChar$AsciiChar$LAYOUT() { return uChar$AsciiChar$LAYOUT_; }

    static final VarHandle uChar$AsciiChar$VH_ = uChar$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AsciiChar"));
    public static java.lang.invoke.VarHandle uChar$AsciiChar$VH() { return uChar$AsciiChar$VH_; }

    static final MemoryLayout _KEY_EVENT_RECORD$dwControlKeyState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$dwControlKeyState$LAYOUT() { return _KEY_EVENT_RECORD$dwControlKeyState$LAYOUT_; }

    static final VarHandle _KEY_EVENT_RECORD$dwControlKeyState$VH_ = _KEY_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwControlKeyState"));
    public static java.lang.invoke.VarHandle _KEY_EVENT_RECORD$dwControlKeyState$VH() { return _KEY_EVENT_RECORD$dwControlKeyState$VH_; }

    static final MemoryLayout _MOUSE_EVENT_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwMousePosition"),
        C_INT.withName("dwButtonState"),
        C_INT.withName("dwControlKeyState"),
        C_INT.withName("dwEventFlags")
    ).withName("_MOUSE_EVENT_RECORD");
    public static jdk.incubator.foreign.MemoryLayout _MOUSE_EVENT_RECORD$struct$LAYOUT() { return _MOUSE_EVENT_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _MOUSE_EVENT_RECORD$dwButtonState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MOUSE_EVENT_RECORD$dwButtonState$LAYOUT() { return _MOUSE_EVENT_RECORD$dwButtonState$LAYOUT_; }

    static final VarHandle _MOUSE_EVENT_RECORD$dwButtonState$VH_ = _MOUSE_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwButtonState"));
    public static java.lang.invoke.VarHandle _MOUSE_EVENT_RECORD$dwButtonState$VH() { return _MOUSE_EVENT_RECORD$dwButtonState$VH_; }

    static final MemoryLayout _MOUSE_EVENT_RECORD$dwControlKeyState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MOUSE_EVENT_RECORD$dwControlKeyState$LAYOUT() { return _MOUSE_EVENT_RECORD$dwControlKeyState$LAYOUT_; }

    static final VarHandle _MOUSE_EVENT_RECORD$dwControlKeyState$VH_ = _MOUSE_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwControlKeyState"));
    public static java.lang.invoke.VarHandle _MOUSE_EVENT_RECORD$dwControlKeyState$VH() { return _MOUSE_EVENT_RECORD$dwControlKeyState$VH_; }

    static final MemoryLayout _MOUSE_EVENT_RECORD$dwEventFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MOUSE_EVENT_RECORD$dwEventFlags$LAYOUT() { return _MOUSE_EVENT_RECORD$dwEventFlags$LAYOUT_; }

    static final VarHandle _MOUSE_EVENT_RECORD$dwEventFlags$VH_ = _MOUSE_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwEventFlags"));
    public static java.lang.invoke.VarHandle _MOUSE_EVENT_RECORD$dwEventFlags$VH() { return _MOUSE_EVENT_RECORD$dwEventFlags$VH_; }

    static final MemoryLayout _WINDOW_BUFFER_SIZE_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwSize")
    ).withName("_WINDOW_BUFFER_SIZE_RECORD");
    public static jdk.incubator.foreign.MemoryLayout _WINDOW_BUFFER_SIZE_RECORD$struct$LAYOUT() { return _WINDOW_BUFFER_SIZE_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _MENU_EVENT_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwCommandId")
    ).withName("_MENU_EVENT_RECORD");
    public static jdk.incubator.foreign.MemoryLayout _MENU_EVENT_RECORD$struct$LAYOUT() { return _MENU_EVENT_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _MENU_EVENT_RECORD$dwCommandId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MENU_EVENT_RECORD$dwCommandId$LAYOUT() { return _MENU_EVENT_RECORD$dwCommandId$LAYOUT_; }

    static final VarHandle _MENU_EVENT_RECORD$dwCommandId$VH_ = _MENU_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCommandId"));
    public static java.lang.invoke.VarHandle _MENU_EVENT_RECORD$dwCommandId$VH() { return _MENU_EVENT_RECORD$dwCommandId$VH_; }

    static final MemoryLayout _FOCUS_EVENT_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("bSetFocus")
    ).withName("_FOCUS_EVENT_RECORD");
    public static jdk.incubator.foreign.MemoryLayout _FOCUS_EVENT_RECORD$struct$LAYOUT() { return _FOCUS_EVENT_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _FOCUS_EVENT_RECORD$bSetFocus$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FOCUS_EVENT_RECORD$bSetFocus$LAYOUT() { return _FOCUS_EVENT_RECORD$bSetFocus$LAYOUT_; }

    static final VarHandle _FOCUS_EVENT_RECORD$bSetFocus$VH_ = _FOCUS_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bSetFocus"));
    public static java.lang.invoke.VarHandle _FOCUS_EVENT_RECORD$bSetFocus$VH() { return _FOCUS_EVENT_RECORD$bSetFocus$VH_; }

    static final MemoryLayout _INPUT_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("EventType"),
        MemoryLayout.ofPaddingBits(16),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_INT.withName("bKeyDown"),
                C_SHORT.withName("wRepeatCount"),
                C_SHORT.withName("wVirtualKeyCode"),
                C_SHORT.withName("wVirtualScanCode"),
                MemoryLayout.ofUnion(
                    C_SHORT.withName("UnicodeChar"),
                    C_BOOL.withName("AsciiChar")
                ).withName("uChar"),
                C_INT.withName("dwControlKeyState")
            ).withName("KeyEvent"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofStruct(
                    C_SHORT.withName("X"),
                    C_SHORT.withName("Y")
                ).withName("dwMousePosition"),
                C_INT.withName("dwButtonState"),
                C_INT.withName("dwControlKeyState"),
                C_INT.withName("dwEventFlags")
            ).withName("MouseEvent"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofStruct(
                    C_SHORT.withName("X"),
                    C_SHORT.withName("Y")
                ).withName("dwSize")
            ).withName("WindowBufferSizeEvent"),
            MemoryLayout.ofStruct(
                C_INT.withName("dwCommandId")
            ).withName("MenuEvent"),
            MemoryLayout.ofStruct(
                C_INT.withName("bSetFocus")
            ).withName("FocusEvent")
        ).withName("Event")
    ).withName("_INPUT_RECORD");
    public static jdk.incubator.foreign.MemoryLayout _INPUT_RECORD$struct$LAYOUT() { return _INPUT_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _INPUT_RECORD$EventType$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _INPUT_RECORD$EventType$LAYOUT() { return _INPUT_RECORD$EventType$LAYOUT_; }

    static final VarHandle _INPUT_RECORD$EventType$VH_ = _INPUT_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("EventType"));
    public static java.lang.invoke.VarHandle _INPUT_RECORD$EventType$VH() { return _INPUT_RECORD$EventType$VH_; }

    static final MemoryLayout Event$struct$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_INT.withName("bKeyDown"),
            C_SHORT.withName("wRepeatCount"),
            C_SHORT.withName("wVirtualKeyCode"),
            C_SHORT.withName("wVirtualScanCode"),
            MemoryLayout.ofUnion(
                C_SHORT.withName("UnicodeChar"),
                C_BOOL.withName("AsciiChar")
            ).withName("uChar"),
            C_INT.withName("dwControlKeyState")
        ).withName("KeyEvent"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_SHORT.withName("X"),
                C_SHORT.withName("Y")
            ).withName("dwMousePosition"),
            C_INT.withName("dwButtonState"),
            C_INT.withName("dwControlKeyState"),
            C_INT.withName("dwEventFlags")
        ).withName("MouseEvent"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_SHORT.withName("X"),
                C_SHORT.withName("Y")
            ).withName("dwSize")
        ).withName("WindowBufferSizeEvent"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwCommandId")
        ).withName("MenuEvent"),
        MemoryLayout.ofStruct(
            C_INT.withName("bSetFocus")
        ).withName("FocusEvent")
    );
    public static jdk.incubator.foreign.MemoryLayout Event$struct$LAYOUT() { return Event$struct$LAYOUT_; }

    static final MemoryLayout _CHAR_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_SHORT.withName("UnicodeChar"),
            C_BOOL.withName("AsciiChar")
        ).withName("Char"),
        C_SHORT.withName("Attributes")
    ).withName("_CHAR_INFO");
    public static jdk.incubator.foreign.MemoryLayout _CHAR_INFO$struct$LAYOUT() { return _CHAR_INFO$struct$LAYOUT_; }

    static final MemoryLayout Char$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_SHORT.withName("UnicodeChar"),
        C_BOOL.withName("AsciiChar")
    );
    public static jdk.incubator.foreign.MemoryLayout Char$struct$LAYOUT() { return Char$struct$LAYOUT_; }

    static final MemoryLayout Char$UnicodeChar$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout Char$UnicodeChar$LAYOUT() { return Char$UnicodeChar$LAYOUT_; }

    static final VarHandle Char$UnicodeChar$VH_ = Char$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("UnicodeChar"));
    public static java.lang.invoke.VarHandle Char$UnicodeChar$VH() { return Char$UnicodeChar$VH_; }

    static final MemoryLayout Char$AsciiChar$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout Char$AsciiChar$LAYOUT() { return Char$AsciiChar$LAYOUT_; }

    static final VarHandle Char$AsciiChar$VH_ = Char$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AsciiChar"));
    public static java.lang.invoke.VarHandle Char$AsciiChar$VH() { return Char$AsciiChar$VH_; }

    static final MemoryLayout _CHAR_INFO$Attributes$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _CHAR_INFO$Attributes$LAYOUT() { return _CHAR_INFO$Attributes$LAYOUT_; }

    static final VarHandle _CHAR_INFO$Attributes$VH_ = _CHAR_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Attributes"));
    public static java.lang.invoke.VarHandle _CHAR_INFO$Attributes$VH() { return _CHAR_INFO$Attributes$VH_; }

    static final MemoryLayout _CONSOLE_FONT_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("nFont"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwFontSize")
    ).withName("_CONSOLE_FONT_INFO");
    public static jdk.incubator.foreign.MemoryLayout _CONSOLE_FONT_INFO$struct$LAYOUT() { return _CONSOLE_FONT_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CONSOLE_FONT_INFO$nFont$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CONSOLE_FONT_INFO$nFont$LAYOUT() { return _CONSOLE_FONT_INFO$nFont$LAYOUT_; }

    static final VarHandle _CONSOLE_FONT_INFO$nFont$VH_ = _CONSOLE_FONT_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFont"));
    public static java.lang.invoke.VarHandle _CONSOLE_FONT_INFO$nFont$VH() { return _CONSOLE_FONT_INFO$nFont$VH_; }

    static final FunctionDescriptor AllocConsole$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor AllocConsole$FUNC() { return AllocConsole$FUNC_; }

    static final MethodHandle AllocConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AllocConsole",
        "()I",
        AllocConsole$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AllocConsole$MH() { return AllocConsole$MH_; }

    static final FunctionDescriptor FreeConsole$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor FreeConsole$FUNC() { return FreeConsole$FUNC_; }

    static final MethodHandle FreeConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeConsole",
        "()I",
        FreeConsole$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FreeConsole$MH() { return FreeConsole$MH_; }

    static final FunctionDescriptor AttachConsole$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor AttachConsole$FUNC() { return AttachConsole$FUNC_; }

    static final MethodHandle AttachConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AttachConsole",
        "(I)I",
        AttachConsole$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AttachConsole$MH() { return AttachConsole$MH_; }

    static final FunctionDescriptor GetConsoleCP$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetConsoleCP$FUNC() { return GetConsoleCP$FUNC_; }

    static final MethodHandle GetConsoleCP$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleCP",
        "()I",
        GetConsoleCP$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetConsoleCP$MH() { return GetConsoleCP$MH_; }

    static final FunctionDescriptor GetConsoleOutputCP$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetConsoleOutputCP$FUNC() { return GetConsoleOutputCP$FUNC_; }

    static final MethodHandle GetConsoleOutputCP$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleOutputCP",
        "()I",
        GetConsoleOutputCP$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetConsoleOutputCP$MH() { return GetConsoleOutputCP$MH_; }

    static final FunctionDescriptor GetConsoleMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetConsoleMode$FUNC() { return GetConsoleMode$FUNC_; }

    static final MethodHandle GetConsoleMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleMode",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetConsoleMode$MH() { return GetConsoleMode$MH_; }

    static final FunctionDescriptor SetConsoleMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetConsoleMode$FUNC() { return SetConsoleMode$FUNC_; }

    static final MethodHandle SetConsoleMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleMode",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetConsoleMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetConsoleMode$MH() { return SetConsoleMode$MH_; }

    static final FunctionDescriptor GetNumberOfConsoleInputEvents$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumberOfConsoleInputEvents$FUNC() { return GetNumberOfConsoleInputEvents$FUNC_; }

    static final MethodHandle GetNumberOfConsoleInputEvents$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumberOfConsoleInputEvents",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNumberOfConsoleInputEvents$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumberOfConsoleInputEvents$MH() { return GetNumberOfConsoleInputEvents$MH_; }

    static final FunctionDescriptor ReadConsoleInputA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadConsoleInputA$FUNC() { return ReadConsoleInputA$FUNC_; }

    static final MethodHandle ReadConsoleInputA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleInputA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleInputA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadConsoleInputA$MH() { return ReadConsoleInputA$MH_; }

    static final FunctionDescriptor ReadConsoleInputW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadConsoleInputW$FUNC() { return ReadConsoleInputW$FUNC_; }

    static final MethodHandle ReadConsoleInputW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleInputW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleInputW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadConsoleInputW$MH() { return ReadConsoleInputW$MH_; }

    static final FunctionDescriptor PeekConsoleInputA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor PeekConsoleInputA$FUNC() { return PeekConsoleInputA$FUNC_; }

    static final MethodHandle PeekConsoleInputA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PeekConsoleInputA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        PeekConsoleInputA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PeekConsoleInputA$MH() { return PeekConsoleInputA$MH_; }

    static final FunctionDescriptor PeekConsoleInputW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor PeekConsoleInputW$FUNC() { return PeekConsoleInputW$FUNC_; }

    static final MethodHandle PeekConsoleInputW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PeekConsoleInputW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        PeekConsoleInputW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PeekConsoleInputW$MH() { return PeekConsoleInputW$MH_; }

    static final MemoryLayout _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("nLength"),
        C_INT.withName("nInitialChars"),
        C_INT.withName("dwCtrlWakeupMask"),
        C_INT.withName("dwControlKeyState")
    ).withName("_CONSOLE_READCONSOLE_CONTROL");
    public static jdk.incubator.foreign.MemoryLayout _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT() { return _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_; }

    static final MemoryLayout _CONSOLE_READCONSOLE_CONTROL$nLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CONSOLE_READCONSOLE_CONTROL$nLength$LAYOUT() { return _CONSOLE_READCONSOLE_CONTROL$nLength$LAYOUT_; }

    static final VarHandle _CONSOLE_READCONSOLE_CONTROL$nLength$VH_ = _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nLength"));
    public static java.lang.invoke.VarHandle _CONSOLE_READCONSOLE_CONTROL$nLength$VH() { return _CONSOLE_READCONSOLE_CONTROL$nLength$VH_; }

    static final MemoryLayout _CONSOLE_READCONSOLE_CONTROL$nInitialChars$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CONSOLE_READCONSOLE_CONTROL$nInitialChars$LAYOUT() { return _CONSOLE_READCONSOLE_CONTROL$nInitialChars$LAYOUT_; }

    static final VarHandle _CONSOLE_READCONSOLE_CONTROL$nInitialChars$VH_ = _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nInitialChars"));
    public static java.lang.invoke.VarHandle _CONSOLE_READCONSOLE_CONTROL$nInitialChars$VH() { return _CONSOLE_READCONSOLE_CONTROL$nInitialChars$VH_; }

    static final MemoryLayout _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$LAYOUT() { return _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$LAYOUT_; }

    static final VarHandle _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$VH_ = _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCtrlWakeupMask"));
    public static java.lang.invoke.VarHandle _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$VH() { return _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$VH_; }

    static final MemoryLayout _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$LAYOUT() { return _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$LAYOUT_; }

    static final VarHandle _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$VH_ = _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwControlKeyState"));
    public static java.lang.invoke.VarHandle _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$VH() { return _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$VH_; }

    static final FunctionDescriptor ReadConsoleA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadConsoleA$FUNC() { return ReadConsoleA$FUNC_; }

    static final MethodHandle ReadConsoleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadConsoleA$MH() { return ReadConsoleA$MH_; }

    static final FunctionDescriptor ReadConsoleW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadConsoleW$FUNC() { return ReadConsoleW$FUNC_; }

    static final MethodHandle ReadConsoleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadConsoleW$MH() { return ReadConsoleW$MH_; }

    static final FunctionDescriptor WriteConsoleA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteConsoleA$FUNC() { return WriteConsoleA$FUNC_; }

    static final MethodHandle WriteConsoleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteConsoleA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteConsoleA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteConsoleA$MH() { return WriteConsoleA$MH_; }

    static final FunctionDescriptor WriteConsoleW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteConsoleW$FUNC() { return WriteConsoleW$FUNC_; }

    static final MethodHandle WriteConsoleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteConsoleW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteConsoleW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteConsoleW$MH() { return WriteConsoleW$MH_; }

    static final FunctionDescriptor SetConsoleCtrlHandler$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetConsoleCtrlHandler$FUNC() { return SetConsoleCtrlHandler$FUNC_; }

    static final MethodHandle SetConsoleCtrlHandler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleCtrlHandler",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetConsoleCtrlHandler$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetConsoleCtrlHandler$MH() { return SetConsoleCtrlHandler$MH_; }

    static final FunctionDescriptor SetConsoleCtrlHandler$HandlerRoutine$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetConsoleCtrlHandler$HandlerRoutine$FUNC() { return SetConsoleCtrlHandler$HandlerRoutine$FUNC_; }

    static final FunctionDescriptor CreatePseudoConsole$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePseudoConsole$FUNC() { return CreatePseudoConsole$FUNC_; }

    static final MethodHandle CreatePseudoConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePseudoConsole",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CreatePseudoConsole$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePseudoConsole$MH() { return CreatePseudoConsole$MH_; }

    static final FunctionDescriptor ResizePseudoConsole$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD")
    );
    public static jdk.incubator.foreign.FunctionDescriptor ResizePseudoConsole$FUNC() { return ResizePseudoConsole$FUNC_; }

    static final MethodHandle ResizePseudoConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ResizePseudoConsole",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        ResizePseudoConsole$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ResizePseudoConsole$MH() { return ResizePseudoConsole$MH_; }

    static final FunctionDescriptor ClosePseudoConsole$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ClosePseudoConsole$FUNC() { return ClosePseudoConsole$FUNC_; }

    static final MethodHandle ClosePseudoConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClosePseudoConsole",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        ClosePseudoConsole$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ClosePseudoConsole$MH() { return ClosePseudoConsole$MH_; }

    static final FunctionDescriptor FillConsoleOutputCharacterA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_BOOL,
        C_INT,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FillConsoleOutputCharacterA$FUNC() { return FillConsoleOutputCharacterA$FUNC_; }

    static final MethodHandle FillConsoleOutputCharacterA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FillConsoleOutputCharacterA",
        "(Ljdk/incubator/foreign/MemoryAddress;BILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        FillConsoleOutputCharacterA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FillConsoleOutputCharacterA$MH() { return FillConsoleOutputCharacterA$MH_; }

    static final FunctionDescriptor FillConsoleOutputCharacterW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT,
        C_INT,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FillConsoleOutputCharacterW$FUNC() { return FillConsoleOutputCharacterW$FUNC_; }

    static final MethodHandle FillConsoleOutputCharacterW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FillConsoleOutputCharacterW",
        "(Ljdk/incubator/foreign/MemoryAddress;SILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        FillConsoleOutputCharacterW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FillConsoleOutputCharacterW$MH() { return FillConsoleOutputCharacterW$MH_; }

    static final FunctionDescriptor FillConsoleOutputAttribute$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT,
        C_INT,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FillConsoleOutputAttribute$FUNC() { return FillConsoleOutputAttribute$FUNC_; }

    static final MethodHandle FillConsoleOutputAttribute$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FillConsoleOutputAttribute",
        "(Ljdk/incubator/foreign/MemoryAddress;SILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        FillConsoleOutputAttribute$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FillConsoleOutputAttribute$MH() { return FillConsoleOutputAttribute$MH_; }

    static final FunctionDescriptor GenerateConsoleCtrlEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GenerateConsoleCtrlEvent$FUNC() { return GenerateConsoleCtrlEvent$FUNC_; }

    static final MethodHandle GenerateConsoleCtrlEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GenerateConsoleCtrlEvent",
        "(II)I",
        GenerateConsoleCtrlEvent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GenerateConsoleCtrlEvent$MH() { return GenerateConsoleCtrlEvent$MH_; }

}

