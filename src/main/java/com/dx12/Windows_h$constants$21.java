// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$21 extends Windows_h$constants$20 {
    Windows_h$constants$21() {}
    static final MemoryLayout _STARTUPINFOA$dwX$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$dwX$LAYOUT() { return _STARTUPINFOA$dwX$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$dwX$VH_ = _STARTUPINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwX"));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$dwX$VH() { return _STARTUPINFOA$dwX$VH_; }

    static final MemoryLayout _STARTUPINFOA$dwY$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$dwY$LAYOUT() { return _STARTUPINFOA$dwY$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$dwY$VH_ = _STARTUPINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwY"));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$dwY$VH() { return _STARTUPINFOA$dwY$VH_; }

    static final MemoryLayout _STARTUPINFOA$dwXSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$dwXSize$LAYOUT() { return _STARTUPINFOA$dwXSize$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$dwXSize$VH_ = _STARTUPINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwXSize"));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$dwXSize$VH() { return _STARTUPINFOA$dwXSize$VH_; }

    static final MemoryLayout _STARTUPINFOA$dwYSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$dwYSize$LAYOUT() { return _STARTUPINFOA$dwYSize$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$dwYSize$VH_ = _STARTUPINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwYSize"));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$dwYSize$VH() { return _STARTUPINFOA$dwYSize$VH_; }

    static final MemoryLayout _STARTUPINFOA$dwXCountChars$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$dwXCountChars$LAYOUT() { return _STARTUPINFOA$dwXCountChars$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$dwXCountChars$VH_ = _STARTUPINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwXCountChars"));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$dwXCountChars$VH() { return _STARTUPINFOA$dwXCountChars$VH_; }

    static final MemoryLayout _STARTUPINFOA$dwYCountChars$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$dwYCountChars$LAYOUT() { return _STARTUPINFOA$dwYCountChars$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$dwYCountChars$VH_ = _STARTUPINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwYCountChars"));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$dwYCountChars$VH() { return _STARTUPINFOA$dwYCountChars$VH_; }

    static final MemoryLayout _STARTUPINFOA$dwFillAttribute$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$dwFillAttribute$LAYOUT() { return _STARTUPINFOA$dwFillAttribute$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$dwFillAttribute$VH_ = _STARTUPINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFillAttribute"));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$dwFillAttribute$VH() { return _STARTUPINFOA$dwFillAttribute$VH_; }

    static final MemoryLayout _STARTUPINFOA$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$dwFlags$LAYOUT() { return _STARTUPINFOA$dwFlags$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$dwFlags$VH_ = _STARTUPINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$dwFlags$VH() { return _STARTUPINFOA$dwFlags$VH_; }

    static final MemoryLayout _STARTUPINFOA$wShowWindow$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$wShowWindow$LAYOUT() { return _STARTUPINFOA$wShowWindow$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$wShowWindow$VH_ = _STARTUPINFOA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wShowWindow"));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$wShowWindow$VH() { return _STARTUPINFOA$wShowWindow$VH_; }

    static final MemoryLayout _STARTUPINFOA$cbReserved2$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$cbReserved2$LAYOUT() { return _STARTUPINFOA$cbReserved2$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$cbReserved2$VH_ = _STARTUPINFOA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cbReserved2"));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$cbReserved2$VH() { return _STARTUPINFOA$cbReserved2$VH_; }

    static final MemoryLayout _STARTUPINFOA$lpReserved2$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$lpReserved2$LAYOUT() { return _STARTUPINFOA$lpReserved2$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$lpReserved2$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpReserved2")));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$lpReserved2$VH() { return _STARTUPINFOA$lpReserved2$VH_; }

    static final MemoryLayout _STARTUPINFOA$hStdInput$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$hStdInput$LAYOUT() { return _STARTUPINFOA$hStdInput$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$hStdInput$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hStdInput")));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$hStdInput$VH() { return _STARTUPINFOA$hStdInput$VH_; }

    static final MemoryLayout _STARTUPINFOA$hStdOutput$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$hStdOutput$LAYOUT() { return _STARTUPINFOA$hStdOutput$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$hStdOutput$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hStdOutput")));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$hStdOutput$VH() { return _STARTUPINFOA$hStdOutput$VH_; }

    static final MemoryLayout _STARTUPINFOA$hStdError$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$hStdError$LAYOUT() { return _STARTUPINFOA$hStdError$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$hStdError$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hStdError")));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$hStdError$VH() { return _STARTUPINFOA$hStdError$VH_; }

    static final MemoryLayout _STARTUPINFOW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cb"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpReserved"),
        C_POINTER.withName("lpDesktop"),
        C_POINTER.withName("lpTitle"),
        C_INT.withName("dwX"),
        C_INT.withName("dwY"),
        C_INT.withName("dwXSize"),
        C_INT.withName("dwYSize"),
        C_INT.withName("dwXCountChars"),
        C_INT.withName("dwYCountChars"),
        C_INT.withName("dwFillAttribute"),
        C_INT.withName("dwFlags"),
        C_SHORT.withName("wShowWindow"),
        C_SHORT.withName("cbReserved2"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpReserved2"),
        C_POINTER.withName("hStdInput"),
        C_POINTER.withName("hStdOutput"),
        C_POINTER.withName("hStdError")
    ).withName("_STARTUPINFOW");
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$struct$LAYOUT() { return _STARTUPINFOW$struct$LAYOUT_; }

    static final MemoryLayout _STARTUPINFOW$cb$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$cb$LAYOUT() { return _STARTUPINFOW$cb$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$cb$VH_ = _STARTUPINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cb"));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$cb$VH() { return _STARTUPINFOW$cb$VH_; }

    static final MemoryLayout _STARTUPINFOW$lpReserved$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$lpReserved$LAYOUT() { return _STARTUPINFOW$lpReserved$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$lpReserved$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpReserved")));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$lpReserved$VH() { return _STARTUPINFOW$lpReserved$VH_; }

    static final MemoryLayout _STARTUPINFOW$lpDesktop$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$lpDesktop$LAYOUT() { return _STARTUPINFOW$lpDesktop$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$lpDesktop$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDesktop")));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$lpDesktop$VH() { return _STARTUPINFOW$lpDesktop$VH_; }

    static final MemoryLayout _STARTUPINFOW$lpTitle$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$lpTitle$LAYOUT() { return _STARTUPINFOW$lpTitle$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$lpTitle$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpTitle")));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$lpTitle$VH() { return _STARTUPINFOW$lpTitle$VH_; }

    static final MemoryLayout _STARTUPINFOW$dwX$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$dwX$LAYOUT() { return _STARTUPINFOW$dwX$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$dwX$VH_ = _STARTUPINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwX"));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$dwX$VH() { return _STARTUPINFOW$dwX$VH_; }

    static final MemoryLayout _STARTUPINFOW$dwY$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$dwY$LAYOUT() { return _STARTUPINFOW$dwY$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$dwY$VH_ = _STARTUPINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwY"));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$dwY$VH() { return _STARTUPINFOW$dwY$VH_; }

    static final MemoryLayout _STARTUPINFOW$dwXSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$dwXSize$LAYOUT() { return _STARTUPINFOW$dwXSize$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$dwXSize$VH_ = _STARTUPINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwXSize"));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$dwXSize$VH() { return _STARTUPINFOW$dwXSize$VH_; }

    static final MemoryLayout _STARTUPINFOW$dwYSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$dwYSize$LAYOUT() { return _STARTUPINFOW$dwYSize$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$dwYSize$VH_ = _STARTUPINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwYSize"));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$dwYSize$VH() { return _STARTUPINFOW$dwYSize$VH_; }

    static final MemoryLayout _STARTUPINFOW$dwXCountChars$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$dwXCountChars$LAYOUT() { return _STARTUPINFOW$dwXCountChars$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$dwXCountChars$VH_ = _STARTUPINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwXCountChars"));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$dwXCountChars$VH() { return _STARTUPINFOW$dwXCountChars$VH_; }

    static final MemoryLayout _STARTUPINFOW$dwYCountChars$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$dwYCountChars$LAYOUT() { return _STARTUPINFOW$dwYCountChars$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$dwYCountChars$VH_ = _STARTUPINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwYCountChars"));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$dwYCountChars$VH() { return _STARTUPINFOW$dwYCountChars$VH_; }

    static final MemoryLayout _STARTUPINFOW$dwFillAttribute$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$dwFillAttribute$LAYOUT() { return _STARTUPINFOW$dwFillAttribute$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$dwFillAttribute$VH_ = _STARTUPINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFillAttribute"));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$dwFillAttribute$VH() { return _STARTUPINFOW$dwFillAttribute$VH_; }

    static final MemoryLayout _STARTUPINFOW$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$dwFlags$LAYOUT() { return _STARTUPINFOW$dwFlags$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$dwFlags$VH_ = _STARTUPINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$dwFlags$VH() { return _STARTUPINFOW$dwFlags$VH_; }

    static final MemoryLayout _STARTUPINFOW$wShowWindow$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$wShowWindow$LAYOUT() { return _STARTUPINFOW$wShowWindow$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$wShowWindow$VH_ = _STARTUPINFOW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wShowWindow"));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$wShowWindow$VH() { return _STARTUPINFOW$wShowWindow$VH_; }

    static final MemoryLayout _STARTUPINFOW$cbReserved2$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$cbReserved2$LAYOUT() { return _STARTUPINFOW$cbReserved2$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$cbReserved2$VH_ = _STARTUPINFOW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cbReserved2"));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$cbReserved2$VH() { return _STARTUPINFOW$cbReserved2$VH_; }

    static final MemoryLayout _STARTUPINFOW$lpReserved2$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$lpReserved2$LAYOUT() { return _STARTUPINFOW$lpReserved2$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$lpReserved2$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpReserved2")));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$lpReserved2$VH() { return _STARTUPINFOW$lpReserved2$VH_; }

    static final MemoryLayout _STARTUPINFOW$hStdInput$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$hStdInput$LAYOUT() { return _STARTUPINFOW$hStdInput$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$hStdInput$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hStdInput")));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$hStdInput$VH() { return _STARTUPINFOW$hStdInput$VH_; }

    static final MemoryLayout _STARTUPINFOW$hStdOutput$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$hStdOutput$LAYOUT() { return _STARTUPINFOW$hStdOutput$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$hStdOutput$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hStdOutput")));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$hStdOutput$VH() { return _STARTUPINFOW$hStdOutput$VH_; }

    static final MemoryLayout _STARTUPINFOW$hStdError$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOW$hStdError$LAYOUT() { return _STARTUPINFOW$hStdError$LAYOUT_; }

    static final VarHandle _STARTUPINFOW$hStdError$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hStdError")));
    public static java.lang.invoke.VarHandle _STARTUPINFOW$hStdError$VH() { return _STARTUPINFOW$hStdError$VH_; }

    static final FunctionDescriptor QueueUserAPC$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueueUserAPC$FUNC() { return QueueUserAPC$FUNC_; }

    static final MethodHandle QueueUserAPC$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueueUserAPC",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        QueueUserAPC$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueueUserAPC$MH() { return QueueUserAPC$MH_; }

    static final FunctionDescriptor QueueUserAPC$pfnAPC$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueueUserAPC$pfnAPC$FUNC() { return QueueUserAPC$pfnAPC$FUNC_; }

    static final FunctionDescriptor GetProcessTimes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessTimes$FUNC() { return GetProcessTimes$FUNC_; }

    static final MethodHandle GetProcessTimes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessTimes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessTimes$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessTimes$MH() { return GetProcessTimes$MH_; }

    static final FunctionDescriptor GetCurrentProcess$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentProcess$FUNC() { return GetCurrentProcess$FUNC_; }

    static final MethodHandle GetCurrentProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentProcess",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetCurrentProcess$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentProcess$MH() { return GetCurrentProcess$MH_; }

    static final FunctionDescriptor GetCurrentProcessId$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentProcessId$FUNC() { return GetCurrentProcessId$FUNC_; }

    static final MethodHandle GetCurrentProcessId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentProcessId",
        "()I",
        GetCurrentProcessId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentProcessId$MH() { return GetCurrentProcessId$MH_; }

    static final FunctionDescriptor ExitProcess$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ExitProcess$FUNC() { return ExitProcess$FUNC_; }

    static final MethodHandle ExitProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExitProcess",
        "(I)V",
        ExitProcess$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ExitProcess$MH() { return ExitProcess$MH_; }

    static final FunctionDescriptor TerminateProcess$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor TerminateProcess$FUNC() { return TerminateProcess$FUNC_; }

    static final MethodHandle TerminateProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TerminateProcess",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        TerminateProcess$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TerminateProcess$MH() { return TerminateProcess$MH_; }

    static final FunctionDescriptor GetExitCodeProcess$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetExitCodeProcess$FUNC() { return GetExitCodeProcess$FUNC_; }

    static final MethodHandle GetExitCodeProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetExitCodeProcess",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetExitCodeProcess$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetExitCodeProcess$MH() { return GetExitCodeProcess$MH_; }

    static final FunctionDescriptor SwitchToThread$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor SwitchToThread$FUNC() { return SwitchToThread$FUNC_; }

    static final MethodHandle SwitchToThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SwitchToThread",
        "()I",
        SwitchToThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SwitchToThread$MH() { return SwitchToThread$MH_; }

    static final FunctionDescriptor CreateThread$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateThread$FUNC() { return CreateThread$FUNC_; }

    static final MethodHandle CreateThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateThread",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateThread$MH() { return CreateThread$MH_; }

    static final FunctionDescriptor CreateThread$lpStartAddress$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateThread$lpStartAddress$FUNC() { return CreateThread$lpStartAddress$FUNC_; }

    static final FunctionDescriptor CreateRemoteThread$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateRemoteThread$FUNC() { return CreateRemoteThread$FUNC_; }

    static final MethodHandle CreateRemoteThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateRemoteThread",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateRemoteThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateRemoteThread$MH() { return CreateRemoteThread$MH_; }

    static final FunctionDescriptor CreateRemoteThread$lpStartAddress$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateRemoteThread$lpStartAddress$FUNC() { return CreateRemoteThread$lpStartAddress$FUNC_; }

    static final FunctionDescriptor GetCurrentThread$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentThread$FUNC() { return GetCurrentThread$FUNC_; }

    static final MethodHandle GetCurrentThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentThread",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetCurrentThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentThread$MH() { return GetCurrentThread$MH_; }

    static final FunctionDescriptor GetCurrentThreadId$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentThreadId$FUNC() { return GetCurrentThreadId$FUNC_; }

    static final MethodHandle GetCurrentThreadId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentThreadId",
        "()I",
        GetCurrentThreadId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentThreadId$MH() { return GetCurrentThreadId$MH_; }

    static final FunctionDescriptor OpenThread$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenThread$FUNC() { return OpenThread$FUNC_; }

    static final MethodHandle OpenThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenThread",
        "(III)Ljdk/incubator/foreign/MemoryAddress;",
        OpenThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenThread$MH() { return OpenThread$MH_; }

    static final FunctionDescriptor SetThreadPriority$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadPriority$FUNC() { return SetThreadPriority$FUNC_; }

    static final MethodHandle SetThreadPriority$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadPriority",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetThreadPriority$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadPriority$MH() { return SetThreadPriority$MH_; }

    static final FunctionDescriptor SetThreadPriorityBoost$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadPriorityBoost$FUNC() { return SetThreadPriorityBoost$FUNC_; }

    static final MethodHandle SetThreadPriorityBoost$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadPriorityBoost",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetThreadPriorityBoost$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadPriorityBoost$MH() { return SetThreadPriorityBoost$MH_; }

    static final FunctionDescriptor GetThreadPriorityBoost$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadPriorityBoost$FUNC() { return GetThreadPriorityBoost$FUNC_; }

    static final MethodHandle GetThreadPriorityBoost$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadPriorityBoost",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetThreadPriorityBoost$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadPriorityBoost$MH() { return GetThreadPriorityBoost$MH_; }

    static final FunctionDescriptor GetThreadPriority$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadPriority$FUNC() { return GetThreadPriority$FUNC_; }

    static final MethodHandle GetThreadPriority$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadPriority",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetThreadPriority$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadPriority$MH() { return GetThreadPriority$MH_; }

    static final FunctionDescriptor ExitThread$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ExitThread$FUNC() { return ExitThread$FUNC_; }

    static final MethodHandle ExitThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExitThread",
        "(I)V",
        ExitThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ExitThread$MH() { return ExitThread$MH_; }

    static final FunctionDescriptor TerminateThread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor TerminateThread$FUNC() { return TerminateThread$FUNC_; }

    static final MethodHandle TerminateThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TerminateThread",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        TerminateThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TerminateThread$MH() { return TerminateThread$MH_; }

    static final FunctionDescriptor GetExitCodeThread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetExitCodeThread$FUNC() { return GetExitCodeThread$FUNC_; }

    static final MethodHandle GetExitCodeThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetExitCodeThread",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetExitCodeThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetExitCodeThread$MH() { return GetExitCodeThread$MH_; }

    static final FunctionDescriptor SuspendThread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SuspendThread$FUNC() { return SuspendThread$FUNC_; }

    static final MethodHandle SuspendThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SuspendThread",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SuspendThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SuspendThread$MH() { return SuspendThread$MH_; }

    static final FunctionDescriptor ResumeThread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ResumeThread$FUNC() { return ResumeThread$FUNC_; }

    static final MethodHandle ResumeThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ResumeThread",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ResumeThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ResumeThread$MH() { return ResumeThread$MH_; }

    static final FunctionDescriptor TlsAlloc$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor TlsAlloc$FUNC() { return TlsAlloc$FUNC_; }

    static final MethodHandle TlsAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TlsAlloc",
        "()I",
        TlsAlloc$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TlsAlloc$MH() { return TlsAlloc$MH_; }

    static final FunctionDescriptor TlsGetValue$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor TlsGetValue$FUNC() { return TlsGetValue$FUNC_; }

    static final MethodHandle TlsGetValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TlsGetValue",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        TlsGetValue$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TlsGetValue$MH() { return TlsGetValue$MH_; }

    static final FunctionDescriptor TlsSetValue$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TlsSetValue$FUNC() { return TlsSetValue$FUNC_; }

    static final MethodHandle TlsSetValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TlsSetValue",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        TlsSetValue$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TlsSetValue$MH() { return TlsSetValue$MH_; }

    static final FunctionDescriptor TlsFree$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor TlsFree$FUNC() { return TlsFree$FUNC_; }

    static final MethodHandle TlsFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TlsFree",
        "(I)I",
        TlsFree$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TlsFree$MH() { return TlsFree$MH_; }

    static final FunctionDescriptor CreateProcessA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateProcessA$FUNC() { return CreateProcessA$FUNC_; }

    static final MethodHandle CreateProcessA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateProcessA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateProcessA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateProcessA$MH() { return CreateProcessA$MH_; }

    static final FunctionDescriptor CreateProcessW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateProcessW$FUNC() { return CreateProcessW$FUNC_; }

    static final MethodHandle CreateProcessW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateProcessW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateProcessW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateProcessW$MH() { return CreateProcessW$MH_; }

    static final FunctionDescriptor SetProcessShutdownParameters$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessShutdownParameters$FUNC() { return SetProcessShutdownParameters$FUNC_; }

    static final MethodHandle SetProcessShutdownParameters$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessShutdownParameters",
        "(II)I",
        SetProcessShutdownParameters$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessShutdownParameters$MH() { return SetProcessShutdownParameters$MH_; }

    static final FunctionDescriptor GetProcessVersion$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessVersion$FUNC() { return GetProcessVersion$FUNC_; }

    static final MethodHandle GetProcessVersion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessVersion",
        "(I)I",
        GetProcessVersion$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessVersion$MH() { return GetProcessVersion$MH_; }

    static final FunctionDescriptor GetStartupInfoW$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetStartupInfoW$FUNC() { return GetStartupInfoW$FUNC_; }

    static final MethodHandle GetStartupInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStartupInfoW",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GetStartupInfoW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetStartupInfoW$MH() { return GetStartupInfoW$MH_; }

    static final FunctionDescriptor CreateProcessAsUserW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateProcessAsUserW$FUNC() { return CreateProcessAsUserW$FUNC_; }

    static final MethodHandle CreateProcessAsUserW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateProcessAsUserW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateProcessAsUserW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateProcessAsUserW$MH() { return CreateProcessAsUserW$MH_; }

    static final FunctionDescriptor GetCurrentProcessToken$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentProcessToken$FUNC() { return GetCurrentProcessToken$FUNC_; }

    static final MethodHandle GetCurrentProcessToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentProcessToken",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetCurrentProcessToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentProcessToken$MH() { return GetCurrentProcessToken$MH_; }

    static final FunctionDescriptor GetCurrentThreadToken$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentThreadToken$FUNC() { return GetCurrentThreadToken$FUNC_; }

    static final MethodHandle GetCurrentThreadToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentThreadToken",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetCurrentThreadToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentThreadToken$MH() { return GetCurrentThreadToken$MH_; }

    static final FunctionDescriptor GetCurrentThreadEffectiveToken$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentThreadEffectiveToken$FUNC() { return GetCurrentThreadEffectiveToken$FUNC_; }

    static final MethodHandle GetCurrentThreadEffectiveToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentThreadEffectiveToken",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetCurrentThreadEffectiveToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentThreadEffectiveToken$MH() { return GetCurrentThreadEffectiveToken$MH_; }

    static final FunctionDescriptor SetThreadToken$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadToken$FUNC() { return SetThreadToken$FUNC_; }

    static final MethodHandle SetThreadToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadToken",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetThreadToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadToken$MH() { return SetThreadToken$MH_; }

    static final FunctionDescriptor OpenProcessToken$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenProcessToken$FUNC() { return OpenProcessToken$FUNC_; }

    static final MethodHandle OpenProcessToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenProcessToken",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        OpenProcessToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenProcessToken$MH() { return OpenProcessToken$MH_; }

    static final FunctionDescriptor OpenThreadToken$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenThreadToken$FUNC() { return OpenThreadToken$FUNC_; }

    static final MethodHandle OpenThreadToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenThreadToken",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        OpenThreadToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenThreadToken$MH() { return OpenThreadToken$MH_; }

    static final FunctionDescriptor SetPriorityClass$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetPriorityClass$FUNC() { return SetPriorityClass$FUNC_; }

    static final MethodHandle SetPriorityClass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetPriorityClass",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetPriorityClass$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetPriorityClass$MH() { return SetPriorityClass$MH_; }

    static final FunctionDescriptor GetPriorityClass$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPriorityClass$FUNC() { return GetPriorityClass$FUNC_; }

    static final MethodHandle GetPriorityClass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPriorityClass",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPriorityClass$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPriorityClass$MH() { return GetPriorityClass$MH_; }

    static final FunctionDescriptor SetThreadStackGuarantee$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadStackGuarantee$FUNC() { return SetThreadStackGuarantee$FUNC_; }

    static final MethodHandle SetThreadStackGuarantee$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadStackGuarantee",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetThreadStackGuarantee$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadStackGuarantee$MH() { return SetThreadStackGuarantee$MH_; }

    static final FunctionDescriptor ProcessIdToSessionId$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ProcessIdToSessionId$FUNC() { return ProcessIdToSessionId$FUNC_; }

    static final MethodHandle ProcessIdToSessionId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ProcessIdToSessionId",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        ProcessIdToSessionId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ProcessIdToSessionId$MH() { return ProcessIdToSessionId$MH_; }

    static final FunctionDescriptor GetProcessId$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessId$FUNC() { return GetProcessId$FUNC_; }

    static final MethodHandle GetProcessId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessId",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessId$MH() { return GetProcessId$MH_; }

    static final FunctionDescriptor GetThreadId$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadId$FUNC() { return GetThreadId$FUNC_; }

    static final MethodHandle GetThreadId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadId",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetThreadId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadId$MH() { return GetThreadId$MH_; }

    static final FunctionDescriptor FlushProcessWriteBuffers$FUNC_ = FunctionDescriptor.ofVoid();
    public static jdk.incubator.foreign.FunctionDescriptor FlushProcessWriteBuffers$FUNC() { return FlushProcessWriteBuffers$FUNC_; }

    static final MethodHandle FlushProcessWriteBuffers$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlushProcessWriteBuffers",
        "()V",
        FlushProcessWriteBuffers$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FlushProcessWriteBuffers$MH() { return FlushProcessWriteBuffers$MH_; }

    static final FunctionDescriptor GetProcessIdOfThread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessIdOfThread$FUNC() { return GetProcessIdOfThread$FUNC_; }

    static final MethodHandle GetProcessIdOfThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessIdOfThread",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessIdOfThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessIdOfThread$MH() { return GetProcessIdOfThread$MH_; }

    static final FunctionDescriptor InitializeProcThreadAttributeList$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeProcThreadAttributeList$FUNC() { return InitializeProcThreadAttributeList$FUNC_; }

    static final MethodHandle InitializeProcThreadAttributeList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeProcThreadAttributeList",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        InitializeProcThreadAttributeList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeProcThreadAttributeList$MH() { return InitializeProcThreadAttributeList$MH_; }

    static final FunctionDescriptor DeleteProcThreadAttributeList$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteProcThreadAttributeList$FUNC() { return DeleteProcThreadAttributeList$FUNC_; }

    static final MethodHandle DeleteProcThreadAttributeList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteProcThreadAttributeList",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        DeleteProcThreadAttributeList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteProcThreadAttributeList$MH() { return DeleteProcThreadAttributeList$MH_; }

    static final FunctionDescriptor UpdateProcThreadAttribute$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UpdateProcThreadAttribute$FUNC() { return UpdateProcThreadAttribute$FUNC_; }

    static final MethodHandle UpdateProcThreadAttribute$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UpdateProcThreadAttribute",
        "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        UpdateProcThreadAttribute$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UpdateProcThreadAttribute$MH() { return UpdateProcThreadAttribute$MH_; }

    static final FunctionDescriptor SetProcessDynamicEHContinuationTargets$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessDynamicEHContinuationTargets$FUNC() { return SetProcessDynamicEHContinuationTargets$FUNC_; }

    static final MethodHandle SetProcessDynamicEHContinuationTargets$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessDynamicEHContinuationTargets",
        "(Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;)I",
        SetProcessDynamicEHContinuationTargets$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessDynamicEHContinuationTargets$MH() { return SetProcessDynamicEHContinuationTargets$MH_; }

    static final FunctionDescriptor SetProcessAffinityUpdateMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessAffinityUpdateMode$FUNC() { return SetProcessAffinityUpdateMode$FUNC_; }

    static final MethodHandle SetProcessAffinityUpdateMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessAffinityUpdateMode",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetProcessAffinityUpdateMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessAffinityUpdateMode$MH() { return SetProcessAffinityUpdateMode$MH_; }

    static final FunctionDescriptor QueryProcessAffinityUpdateMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryProcessAffinityUpdateMode$FUNC() { return QueryProcessAffinityUpdateMode$FUNC_; }

    static final MethodHandle QueryProcessAffinityUpdateMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryProcessAffinityUpdateMode",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryProcessAffinityUpdateMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryProcessAffinityUpdateMode$MH() { return QueryProcessAffinityUpdateMode$MH_; }

    static final FunctionDescriptor CreateRemoteThreadEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateRemoteThreadEx$FUNC() { return CreateRemoteThreadEx$FUNC_; }

    static final MethodHandle CreateRemoteThreadEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateRemoteThreadEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateRemoteThreadEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateRemoteThreadEx$MH() { return CreateRemoteThreadEx$MH_; }

    static final FunctionDescriptor CreateRemoteThreadEx$lpStartAddress$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateRemoteThreadEx$lpStartAddress$FUNC() { return CreateRemoteThreadEx$lpStartAddress$FUNC_; }

    static final FunctionDescriptor GetCurrentThreadStackLimits$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentThreadStackLimits$FUNC() { return GetCurrentThreadStackLimits$FUNC_; }

    static final MethodHandle GetCurrentThreadStackLimits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentThreadStackLimits",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        GetCurrentThreadStackLimits$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentThreadStackLimits$MH() { return GetCurrentThreadStackLimits$MH_; }

    static final FunctionDescriptor GetThreadContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadContext$FUNC() { return GetThreadContext$FUNC_; }

    static final MethodHandle GetThreadContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetThreadContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadContext$MH() { return GetThreadContext$MH_; }

    static final FunctionDescriptor GetProcessMitigationPolicy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessMitigationPolicy$FUNC() { return GetProcessMitigationPolicy$FUNC_; }

    static final MethodHandle GetProcessMitigationPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessMitigationPolicy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;J)I",
        GetProcessMitigationPolicy$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessMitigationPolicy$MH() { return GetProcessMitigationPolicy$MH_; }

    static final FunctionDescriptor SetThreadContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadContext$FUNC() { return SetThreadContext$FUNC_; }

    static final MethodHandle SetThreadContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetThreadContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadContext$MH() { return SetThreadContext$MH_; }

    static final FunctionDescriptor SetProcessMitigationPolicy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessMitigationPolicy$FUNC() { return SetProcessMitigationPolicy$FUNC_; }

    static final MethodHandle SetProcessMitigationPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessMitigationPolicy",
        "(ILjdk/incubator/foreign/MemoryAddress;J)I",
        SetProcessMitigationPolicy$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessMitigationPolicy$MH() { return SetProcessMitigationPolicy$MH_; }

    static final FunctionDescriptor FlushInstructionCache$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor FlushInstructionCache$FUNC() { return FlushInstructionCache$FUNC_; }

    static final MethodHandle FlushInstructionCache$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlushInstructionCache",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        FlushInstructionCache$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FlushInstructionCache$MH() { return FlushInstructionCache$MH_; }

    static final FunctionDescriptor GetThreadTimes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadTimes$FUNC() { return GetThreadTimes$FUNC_; }

    static final MethodHandle GetThreadTimes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadTimes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetThreadTimes$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadTimes$MH() { return GetThreadTimes$MH_; }

    static final FunctionDescriptor OpenProcess$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenProcess$FUNC() { return OpenProcess$FUNC_; }

    static final MethodHandle OpenProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenProcess",
        "(III)Ljdk/incubator/foreign/MemoryAddress;",
        OpenProcess$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenProcess$MH() { return OpenProcess$MH_; }

    static final FunctionDescriptor IsProcessorFeaturePresent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsProcessorFeaturePresent$FUNC() { return IsProcessorFeaturePresent$FUNC_; }

    static final MethodHandle IsProcessorFeaturePresent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsProcessorFeaturePresent",
        "(I)I",
        IsProcessorFeaturePresent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsProcessorFeaturePresent$MH() { return IsProcessorFeaturePresent$MH_; }

    static final FunctionDescriptor GetProcessHandleCount$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessHandleCount$FUNC() { return GetProcessHandleCount$FUNC_; }

    static final MethodHandle GetProcessHandleCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessHandleCount",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessHandleCount$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessHandleCount$MH() { return GetProcessHandleCount$MH_; }

    static final FunctionDescriptor GetCurrentProcessorNumber$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentProcessorNumber$FUNC() { return GetCurrentProcessorNumber$FUNC_; }

    static final MethodHandle GetCurrentProcessorNumber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentProcessorNumber",
        "()I",
        GetCurrentProcessorNumber$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentProcessorNumber$MH() { return GetCurrentProcessorNumber$MH_; }

    static final FunctionDescriptor SetThreadIdealProcessorEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadIdealProcessorEx$FUNC() { return SetThreadIdealProcessorEx$FUNC_; }

    static final MethodHandle SetThreadIdealProcessorEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadIdealProcessorEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetThreadIdealProcessorEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadIdealProcessorEx$MH() { return SetThreadIdealProcessorEx$MH_; }

    static final FunctionDescriptor GetThreadIdealProcessorEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadIdealProcessorEx$FUNC() { return GetThreadIdealProcessorEx$FUNC_; }

    static final MethodHandle GetThreadIdealProcessorEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadIdealProcessorEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetThreadIdealProcessorEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadIdealProcessorEx$MH() { return GetThreadIdealProcessorEx$MH_; }

    static final FunctionDescriptor GetCurrentProcessorNumberEx$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentProcessorNumberEx$FUNC() { return GetCurrentProcessorNumberEx$FUNC_; }

    static final MethodHandle GetCurrentProcessorNumberEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentProcessorNumberEx",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GetCurrentProcessorNumberEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentProcessorNumberEx$MH() { return GetCurrentProcessorNumberEx$MH_; }

    static final FunctionDescriptor GetProcessPriorityBoost$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessPriorityBoost$FUNC() { return GetProcessPriorityBoost$FUNC_; }

    static final MethodHandle GetProcessPriorityBoost$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessPriorityBoost",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessPriorityBoost$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessPriorityBoost$MH() { return GetProcessPriorityBoost$MH_; }

    static final FunctionDescriptor SetProcessPriorityBoost$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessPriorityBoost$FUNC() { return SetProcessPriorityBoost$FUNC_; }

    static final MethodHandle SetProcessPriorityBoost$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessPriorityBoost",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetProcessPriorityBoost$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessPriorityBoost$MH() { return SetProcessPriorityBoost$MH_; }

    static final FunctionDescriptor GetThreadIOPendingFlag$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadIOPendingFlag$FUNC() { return GetThreadIOPendingFlag$FUNC_; }

    static final MethodHandle GetThreadIOPendingFlag$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadIOPendingFlag",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetThreadIOPendingFlag$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadIOPendingFlag$MH() { return GetThreadIOPendingFlag$MH_; }

    static final FunctionDescriptor GetSystemTimes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemTimes$FUNC() { return GetSystemTimes$FUNC_; }

    static final MethodHandle GetSystemTimes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemTimes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSystemTimes$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemTimes$MH() { return GetSystemTimes$MH_; }

    public static int ThreadMemoryPriority() { return (int)0L; }

    public static int ThreadAbsoluteCpuPriority() { return (int)1L; }

    public static int ThreadDynamicCodePolicy() { return (int)2L; }

    public static int ThreadPowerThrottling() { return (int)3L; }

    public static int ThreadInformationClassMax() { return (int)4L; }

    static final MemoryLayout _MEMORY_PRIORITY_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MemoryPriority")
    ).withName("_MEMORY_PRIORITY_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_PRIORITY_INFORMATION$struct$LAYOUT() { return _MEMORY_PRIORITY_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _MEMORY_PRIORITY_INFORMATION$MemoryPriority$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORY_PRIORITY_INFORMATION$MemoryPriority$LAYOUT() { return _MEMORY_PRIORITY_INFORMATION$MemoryPriority$LAYOUT_; }

    static final VarHandle _MEMORY_PRIORITY_INFORMATION$MemoryPriority$VH_ = _MEMORY_PRIORITY_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MemoryPriority"));
    public static java.lang.invoke.VarHandle _MEMORY_PRIORITY_INFORMATION$MemoryPriority$VH() { return _MEMORY_PRIORITY_INFORMATION$MemoryPriority$VH_; }

    static final FunctionDescriptor GetThreadInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadInformation$FUNC() { return GetThreadInformation$FUNC_; }

    static final MethodHandle GetThreadInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetThreadInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadInformation$MH() { return GetThreadInformation$MH_; }

    static final FunctionDescriptor SetThreadInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadInformation$FUNC() { return SetThreadInformation$FUNC_; }

    static final MethodHandle SetThreadInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetThreadInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadInformation$MH() { return SetThreadInformation$MH_; }

    static final MemoryLayout _THREAD_POWER_THROTTLING_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Version"),
        C_INT.withName("ControlMask"),
        C_INT.withName("StateMask")
    ).withName("_THREAD_POWER_THROTTLING_STATE");
    public static jdk.incubator.foreign.MemoryLayout _THREAD_POWER_THROTTLING_STATE$struct$LAYOUT() { return _THREAD_POWER_THROTTLING_STATE$struct$LAYOUT_; }

    static final MemoryLayout _THREAD_POWER_THROTTLING_STATE$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _THREAD_POWER_THROTTLING_STATE$Version$LAYOUT() { return _THREAD_POWER_THROTTLING_STATE$Version$LAYOUT_; }

    static final VarHandle _THREAD_POWER_THROTTLING_STATE$Version$VH_ = _THREAD_POWER_THROTTLING_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _THREAD_POWER_THROTTLING_STATE$Version$VH() { return _THREAD_POWER_THROTTLING_STATE$Version$VH_; }

    static final MemoryLayout _THREAD_POWER_THROTTLING_STATE$ControlMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _THREAD_POWER_THROTTLING_STATE$ControlMask$LAYOUT() { return _THREAD_POWER_THROTTLING_STATE$ControlMask$LAYOUT_; }

    static final VarHandle _THREAD_POWER_THROTTLING_STATE$ControlMask$VH_ = _THREAD_POWER_THROTTLING_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlMask"));
    public static java.lang.invoke.VarHandle _THREAD_POWER_THROTTLING_STATE$ControlMask$VH() { return _THREAD_POWER_THROTTLING_STATE$ControlMask$VH_; }

    static final MemoryLayout _THREAD_POWER_THROTTLING_STATE$StateMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _THREAD_POWER_THROTTLING_STATE$StateMask$LAYOUT() { return _THREAD_POWER_THROTTLING_STATE$StateMask$LAYOUT_; }

    static final VarHandle _THREAD_POWER_THROTTLING_STATE$StateMask$VH_ = _THREAD_POWER_THROTTLING_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StateMask"));
    public static java.lang.invoke.VarHandle _THREAD_POWER_THROTTLING_STATE$StateMask$VH() { return _THREAD_POWER_THROTTLING_STATE$StateMask$VH_; }

    static final FunctionDescriptor IsProcessCritical$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsProcessCritical$FUNC() { return IsProcessCritical$FUNC_; }

    static final MethodHandle IsProcessCritical$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsProcessCritical",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IsProcessCritical$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsProcessCritical$MH() { return IsProcessCritical$MH_; }

    static final FunctionDescriptor SetProtectedPolicy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProtectedPolicy$FUNC() { return SetProtectedPolicy$FUNC_; }

    static final MethodHandle SetProtectedPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProtectedPolicy",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        SetProtectedPolicy$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProtectedPolicy$MH() { return SetProtectedPolicy$MH_; }

    static final FunctionDescriptor QueryProtectedPolicy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryProtectedPolicy$FUNC() { return QueryProtectedPolicy$FUNC_; }

    static final MethodHandle QueryProtectedPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryProtectedPolicy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryProtectedPolicy$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryProtectedPolicy$MH() { return QueryProtectedPolicy$MH_; }

    static final FunctionDescriptor SetThreadIdealProcessor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadIdealProcessor$FUNC() { return SetThreadIdealProcessor$FUNC_; }

    static final MethodHandle SetThreadIdealProcessor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadIdealProcessor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetThreadIdealProcessor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadIdealProcessor$MH() { return SetThreadIdealProcessor$MH_; }

    public static int ProcessMemoryPriority() { return (int)0L; }

    public static int ProcessMemoryExhaustionInfo() { return (int)1L; }

    public static int ProcessAppMemoryInfo() { return (int)2L; }

    public static int ProcessInPrivateInfo() { return (int)3L; }

    public static int ProcessPowerThrottling() { return (int)4L; }

    public static int ProcessReservedValue1() { return (int)5L; }

    public static int ProcessTelemetryCoverageInfo() { return (int)6L; }

    public static int ProcessProtectionLevelInfo() { return (int)7L; }

    public static int ProcessLeapSecondInfo() { return (int)8L; }

    public static int ProcessInformationClassMax() { return (int)9L; }

    static final MemoryLayout _APP_MEMORY_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("AvailableCommit"),
        C_LONGLONG.withName("PrivateCommitUsage"),
        C_LONGLONG.withName("PeakPrivateCommitUsage"),
        C_LONGLONG.withName("TotalCommitUsage")
    ).withName("_APP_MEMORY_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _APP_MEMORY_INFORMATION$struct$LAYOUT() { return _APP_MEMORY_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _APP_MEMORY_INFORMATION$AvailableCommit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _APP_MEMORY_INFORMATION$AvailableCommit$LAYOUT() { return _APP_MEMORY_INFORMATION$AvailableCommit$LAYOUT_; }

    static final VarHandle _APP_MEMORY_INFORMATION$AvailableCommit$VH_ = _APP_MEMORY_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AvailableCommit"));
    public static java.lang.invoke.VarHandle _APP_MEMORY_INFORMATION$AvailableCommit$VH() { return _APP_MEMORY_INFORMATION$AvailableCommit$VH_; }

    static final MemoryLayout _APP_MEMORY_INFORMATION$PrivateCommitUsage$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _APP_MEMORY_INFORMATION$PrivateCommitUsage$LAYOUT() { return _APP_MEMORY_INFORMATION$PrivateCommitUsage$LAYOUT_; }

    static final VarHandle _APP_MEMORY_INFORMATION$PrivateCommitUsage$VH_ = _APP_MEMORY_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PrivateCommitUsage"));
    public static java.lang.invoke.VarHandle _APP_MEMORY_INFORMATION$PrivateCommitUsage$VH() { return _APP_MEMORY_INFORMATION$PrivateCommitUsage$VH_; }

    static final MemoryLayout _APP_MEMORY_INFORMATION$PeakPrivateCommitUsage$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _APP_MEMORY_INFORMATION$PeakPrivateCommitUsage$LAYOUT() { return _APP_MEMORY_INFORMATION$PeakPrivateCommitUsage$LAYOUT_; }

    static final VarHandle _APP_MEMORY_INFORMATION$PeakPrivateCommitUsage$VH_ = _APP_MEMORY_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PeakPrivateCommitUsage"));
    public static java.lang.invoke.VarHandle _APP_MEMORY_INFORMATION$PeakPrivateCommitUsage$VH() { return _APP_MEMORY_INFORMATION$PeakPrivateCommitUsage$VH_; }

    static final MemoryLayout _APP_MEMORY_INFORMATION$TotalCommitUsage$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _APP_MEMORY_INFORMATION$TotalCommitUsage$LAYOUT() { return _APP_MEMORY_INFORMATION$TotalCommitUsage$LAYOUT_; }

    static final VarHandle _APP_MEMORY_INFORMATION$TotalCommitUsage$VH_ = _APP_MEMORY_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalCommitUsage"));
    public static java.lang.invoke.VarHandle _APP_MEMORY_INFORMATION$TotalCommitUsage$VH() { return _APP_MEMORY_INFORMATION$TotalCommitUsage$VH_; }

    public static int PMETypeFailFastOnCommitFailure() { return (int)0L; }

    public static int PMETypeMax() { return (int)1L; }

    static final MemoryLayout _PROCESS_MEMORY_EXHAUSTION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Version"),
        C_SHORT.withName("Reserved"),
        C_INT.withName("Type"),
        C_LONGLONG.withName("Value")
    ).withName("_PROCESS_MEMORY_EXHAUSTION_INFO");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MEMORY_EXHAUSTION_INFO$struct$LAYOUT() { return _PROCESS_MEMORY_EXHAUSTION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MEMORY_EXHAUSTION_INFO$Version$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MEMORY_EXHAUSTION_INFO$Version$LAYOUT() { return _PROCESS_MEMORY_EXHAUSTION_INFO$Version$LAYOUT_; }

    static final VarHandle _PROCESS_MEMORY_EXHAUSTION_INFO$Version$VH_ = _PROCESS_MEMORY_EXHAUSTION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _PROCESS_MEMORY_EXHAUSTION_INFO$Version$VH() { return _PROCESS_MEMORY_EXHAUSTION_INFO$Version$VH_; }

    static final MemoryLayout _PROCESS_MEMORY_EXHAUSTION_INFO$Reserved$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MEMORY_EXHAUSTION_INFO$Reserved$LAYOUT() { return _PROCESS_MEMORY_EXHAUSTION_INFO$Reserved$LAYOUT_; }

    static final VarHandle _PROCESS_MEMORY_EXHAUSTION_INFO$Reserved$VH_ = _PROCESS_MEMORY_EXHAUSTION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _PROCESS_MEMORY_EXHAUSTION_INFO$Reserved$VH() { return _PROCESS_MEMORY_EXHAUSTION_INFO$Reserved$VH_; }

    static final MemoryLayout _PROCESS_MEMORY_EXHAUSTION_INFO$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MEMORY_EXHAUSTION_INFO$Type$LAYOUT() { return _PROCESS_MEMORY_EXHAUSTION_INFO$Type$LAYOUT_; }

    static final VarHandle _PROCESS_MEMORY_EXHAUSTION_INFO$Type$VH_ = _PROCESS_MEMORY_EXHAUSTION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _PROCESS_MEMORY_EXHAUSTION_INFO$Type$VH() { return _PROCESS_MEMORY_EXHAUSTION_INFO$Type$VH_; }

    static final MemoryLayout _PROCESS_MEMORY_EXHAUSTION_INFO$Value$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MEMORY_EXHAUSTION_INFO$Value$LAYOUT() { return _PROCESS_MEMORY_EXHAUSTION_INFO$Value$LAYOUT_; }

    static final VarHandle _PROCESS_MEMORY_EXHAUSTION_INFO$Value$VH_ = _PROCESS_MEMORY_EXHAUSTION_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Value"));
    public static java.lang.invoke.VarHandle _PROCESS_MEMORY_EXHAUSTION_INFO$Value$VH() { return _PROCESS_MEMORY_EXHAUSTION_INFO$Value$VH_; }

    static final MemoryLayout _PROCESS_POWER_THROTTLING_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Version"),
        C_INT.withName("ControlMask"),
        C_INT.withName("StateMask")
    ).withName("_PROCESS_POWER_THROTTLING_STATE");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_POWER_THROTTLING_STATE$struct$LAYOUT() { return _PROCESS_POWER_THROTTLING_STATE$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_POWER_THROTTLING_STATE$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_POWER_THROTTLING_STATE$Version$LAYOUT() { return _PROCESS_POWER_THROTTLING_STATE$Version$LAYOUT_; }

    static final VarHandle _PROCESS_POWER_THROTTLING_STATE$Version$VH_ = _PROCESS_POWER_THROTTLING_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _PROCESS_POWER_THROTTLING_STATE$Version$VH() { return _PROCESS_POWER_THROTTLING_STATE$Version$VH_; }

    static final MemoryLayout _PROCESS_POWER_THROTTLING_STATE$ControlMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_POWER_THROTTLING_STATE$ControlMask$LAYOUT() { return _PROCESS_POWER_THROTTLING_STATE$ControlMask$LAYOUT_; }

    static final VarHandle _PROCESS_POWER_THROTTLING_STATE$ControlMask$VH_ = _PROCESS_POWER_THROTTLING_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlMask"));
    public static java.lang.invoke.VarHandle _PROCESS_POWER_THROTTLING_STATE$ControlMask$VH() { return _PROCESS_POWER_THROTTLING_STATE$ControlMask$VH_; }

    static final MemoryLayout _PROCESS_POWER_THROTTLING_STATE$StateMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_POWER_THROTTLING_STATE$StateMask$LAYOUT() { return _PROCESS_POWER_THROTTLING_STATE$StateMask$LAYOUT_; }

    static final VarHandle _PROCESS_POWER_THROTTLING_STATE$StateMask$VH_ = _PROCESS_POWER_THROTTLING_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StateMask"));
    public static java.lang.invoke.VarHandle _PROCESS_POWER_THROTTLING_STATE$StateMask$VH() { return _PROCESS_POWER_THROTTLING_STATE$StateMask$VH_; }

    static final MemoryLayout PROCESS_PROTECTION_LEVEL_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ProtectionLevel")
    ).withName("PROCESS_PROTECTION_LEVEL_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout PROCESS_PROTECTION_LEVEL_INFORMATION$struct$LAYOUT() { return PROCESS_PROTECTION_LEVEL_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout PROCESS_PROTECTION_LEVEL_INFORMATION$ProtectionLevel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PROCESS_PROTECTION_LEVEL_INFORMATION$ProtectionLevel$LAYOUT() { return PROCESS_PROTECTION_LEVEL_INFORMATION$ProtectionLevel$LAYOUT_; }

    static final VarHandle PROCESS_PROTECTION_LEVEL_INFORMATION$ProtectionLevel$VH_ = PROCESS_PROTECTION_LEVEL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ProtectionLevel"));
    public static java.lang.invoke.VarHandle PROCESS_PROTECTION_LEVEL_INFORMATION$ProtectionLevel$VH() { return PROCESS_PROTECTION_LEVEL_INFORMATION$ProtectionLevel$VH_; }

    static final MemoryLayout _PROCESS_LEAP_SECOND_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT.withName("Reserved")
    ).withName("_PROCESS_LEAP_SECOND_INFO");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_LEAP_SECOND_INFO$struct$LAYOUT() { return _PROCESS_LEAP_SECOND_INFO$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_LEAP_SECOND_INFO$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_LEAP_SECOND_INFO$Flags$LAYOUT() { return _PROCESS_LEAP_SECOND_INFO$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_LEAP_SECOND_INFO$Flags$VH_ = _PROCESS_LEAP_SECOND_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_LEAP_SECOND_INFO$Flags$VH() { return _PROCESS_LEAP_SECOND_INFO$Flags$VH_; }

    static final MemoryLayout _PROCESS_LEAP_SECOND_INFO$Reserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_LEAP_SECOND_INFO$Reserved$LAYOUT() { return _PROCESS_LEAP_SECOND_INFO$Reserved$LAYOUT_; }

    static final VarHandle _PROCESS_LEAP_SECOND_INFO$Reserved$VH_ = _PROCESS_LEAP_SECOND_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _PROCESS_LEAP_SECOND_INFO$Reserved$VH() { return _PROCESS_LEAP_SECOND_INFO$Reserved$VH_; }

    static final FunctionDescriptor SetProcessInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessInformation$FUNC() { return SetProcessInformation$FUNC_; }

    static final MethodHandle SetProcessInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetProcessInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessInformation$MH() { return SetProcessInformation$MH_; }

    static final FunctionDescriptor GetProcessInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessInformation$FUNC() { return GetProcessInformation$FUNC_; }

    static final MethodHandle GetProcessInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetProcessInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessInformation$MH() { return GetProcessInformation$MH_; }

    static final FunctionDescriptor GetSystemCpuSetInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemCpuSetInformation$FUNC() { return GetSystemCpuSetInformation$FUNC_; }

    static final MethodHandle GetSystemCpuSetInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemCpuSetInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetSystemCpuSetInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemCpuSetInformation$MH() { return GetSystemCpuSetInformation$MH_; }

    static final FunctionDescriptor GetProcessDefaultCpuSets$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessDefaultCpuSets$FUNC() { return GetProcessDefaultCpuSets$FUNC_; }

    static final MethodHandle GetProcessDefaultCpuSets$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessDefaultCpuSets",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetProcessDefaultCpuSets$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessDefaultCpuSets$MH() { return GetProcessDefaultCpuSets$MH_; }

    static final FunctionDescriptor SetProcessDefaultCpuSets$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessDefaultCpuSets$FUNC() { return SetProcessDefaultCpuSets$FUNC_; }

    static final MethodHandle SetProcessDefaultCpuSets$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessDefaultCpuSets",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetProcessDefaultCpuSets$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessDefaultCpuSets$MH() { return SetProcessDefaultCpuSets$MH_; }

    static final FunctionDescriptor GetThreadSelectedCpuSets$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadSelectedCpuSets$FUNC() { return GetThreadSelectedCpuSets$FUNC_; }

    static final MethodHandle GetThreadSelectedCpuSets$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadSelectedCpuSets",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetThreadSelectedCpuSets$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadSelectedCpuSets$MH() { return GetThreadSelectedCpuSets$MH_; }

    static final FunctionDescriptor SetThreadSelectedCpuSets$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadSelectedCpuSets$FUNC() { return SetThreadSelectedCpuSets$FUNC_; }

    static final MethodHandle SetThreadSelectedCpuSets$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadSelectedCpuSets",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetThreadSelectedCpuSets$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadSelectedCpuSets$MH() { return SetThreadSelectedCpuSets$MH_; }

    static final FunctionDescriptor CreateProcessAsUserA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateProcessAsUserA$FUNC() { return CreateProcessAsUserA$FUNC_; }

    static final MethodHandle CreateProcessAsUserA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateProcessAsUserA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateProcessAsUserA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateProcessAsUserA$MH() { return CreateProcessAsUserA$MH_; }

    static final FunctionDescriptor GetProcessShutdownParameters$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessShutdownParameters$FUNC() { return GetProcessShutdownParameters$FUNC_; }

    static final MethodHandle GetProcessShutdownParameters$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessShutdownParameters",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessShutdownParameters$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessShutdownParameters$MH() { return GetProcessShutdownParameters$MH_; }

    static final FunctionDescriptor SetThreadDescription$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadDescription$FUNC() { return SetThreadDescription$FUNC_; }

    static final MethodHandle SetThreadDescription$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadDescription",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetThreadDescription$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadDescription$MH() { return SetThreadDescription$MH_; }

    static final FunctionDescriptor GetThreadDescription$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadDescription$FUNC() { return GetThreadDescription$FUNC_; }

    static final MethodHandle GetThreadDescription$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadDescription",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetThreadDescription$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadDescription$MH() { return GetThreadDescription$MH_; }

    static final MemoryLayout _SYSTEM_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwOemId"),
        C_SHORT.withName("wProcessorArchitecture"),
        C_SHORT.withName("wReserved"),
        C_INT.withName("dwPageSize"),
        C_POINTER.withName("lpMinimumApplicationAddress"),
        C_POINTER.withName("lpMaximumApplicationAddress"),
        C_LONGLONG.withName("dwActiveProcessorMask"),
        C_INT.withName("dwNumberOfProcessors"),
        C_INT.withName("dwProcessorType"),
        C_INT.withName("dwAllocationGranularity"),
        C_SHORT.withName("wProcessorLevel"),
        C_SHORT.withName("wProcessorRevision")
    ).withName("_SYSTEM_INFO");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$struct$LAYOUT() { return _SYSTEM_INFO$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_INFO$dwOemId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$dwOemId$LAYOUT() { return _SYSTEM_INFO$dwOemId$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$dwOemId$VH_ = _SYSTEM_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOemId"));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$dwOemId$VH() { return _SYSTEM_INFO$dwOemId$VH_; }

    static final MemoryLayout _SYSTEM_INFO$wProcessorArchitecture$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$wProcessorArchitecture$LAYOUT() { return _SYSTEM_INFO$wProcessorArchitecture$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$wProcessorArchitecture$VH_ = _SYSTEM_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wProcessorArchitecture"));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$wProcessorArchitecture$VH() { return _SYSTEM_INFO$wProcessorArchitecture$VH_; }

    static final MemoryLayout _SYSTEM_INFO$wReserved$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$wReserved$LAYOUT() { return _SYSTEM_INFO$wReserved$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$wReserved$VH_ = _SYSTEM_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wReserved"));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$wReserved$VH() { return _SYSTEM_INFO$wReserved$VH_; }

    static final MemoryLayout _SYSTEM_INFO$dwPageSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$dwPageSize$LAYOUT() { return _SYSTEM_INFO$dwPageSize$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$dwPageSize$VH_ = _SYSTEM_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPageSize"));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$dwPageSize$VH() { return _SYSTEM_INFO$dwPageSize$VH_; }

    static final MemoryLayout _SYSTEM_INFO$lpMinimumApplicationAddress$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$lpMinimumApplicationAddress$LAYOUT() { return _SYSTEM_INFO$lpMinimumApplicationAddress$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$lpMinimumApplicationAddress$VH_ = MemoryHandles.asAddressVarHandle(_SYSTEM_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpMinimumApplicationAddress")));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$lpMinimumApplicationAddress$VH() { return _SYSTEM_INFO$lpMinimumApplicationAddress$VH_; }

    static final MemoryLayout _SYSTEM_INFO$lpMaximumApplicationAddress$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$lpMaximumApplicationAddress$LAYOUT() { return _SYSTEM_INFO$lpMaximumApplicationAddress$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$lpMaximumApplicationAddress$VH_ = MemoryHandles.asAddressVarHandle(_SYSTEM_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpMaximumApplicationAddress")));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$lpMaximumApplicationAddress$VH() { return _SYSTEM_INFO$lpMaximumApplicationAddress$VH_; }

    static final MemoryLayout _SYSTEM_INFO$dwActiveProcessorMask$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$dwActiveProcessorMask$LAYOUT() { return _SYSTEM_INFO$dwActiveProcessorMask$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$dwActiveProcessorMask$VH_ = _SYSTEM_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwActiveProcessorMask"));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$dwActiveProcessorMask$VH() { return _SYSTEM_INFO$dwActiveProcessorMask$VH_; }

    static final MemoryLayout _SYSTEM_INFO$dwNumberOfProcessors$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$dwNumberOfProcessors$LAYOUT() { return _SYSTEM_INFO$dwNumberOfProcessors$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$dwNumberOfProcessors$VH_ = _SYSTEM_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwNumberOfProcessors"));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$dwNumberOfProcessors$VH() { return _SYSTEM_INFO$dwNumberOfProcessors$VH_; }

    static final MemoryLayout _SYSTEM_INFO$dwProcessorType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$dwProcessorType$LAYOUT() { return _SYSTEM_INFO$dwProcessorType$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$dwProcessorType$VH_ = _SYSTEM_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProcessorType"));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$dwProcessorType$VH() { return _SYSTEM_INFO$dwProcessorType$VH_; }

    static final MemoryLayout _SYSTEM_INFO$dwAllocationGranularity$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$dwAllocationGranularity$LAYOUT() { return _SYSTEM_INFO$dwAllocationGranularity$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$dwAllocationGranularity$VH_ = _SYSTEM_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwAllocationGranularity"));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$dwAllocationGranularity$VH() { return _SYSTEM_INFO$dwAllocationGranularity$VH_; }

    static final MemoryLayout _SYSTEM_INFO$wProcessorLevel$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$wProcessorLevel$LAYOUT() { return _SYSTEM_INFO$wProcessorLevel$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$wProcessorLevel$VH_ = _SYSTEM_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wProcessorLevel"));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$wProcessorLevel$VH() { return _SYSTEM_INFO$wProcessorLevel$VH_; }

    static final MemoryLayout _SYSTEM_INFO$wProcessorRevision$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_INFO$wProcessorRevision$LAYOUT() { return _SYSTEM_INFO$wProcessorRevision$LAYOUT_; }

    static final VarHandle _SYSTEM_INFO$wProcessorRevision$VH_ = _SYSTEM_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wProcessorRevision"));
    public static java.lang.invoke.VarHandle _SYSTEM_INFO$wProcessorRevision$VH() { return _SYSTEM_INFO$wProcessorRevision$VH_; }

    static final MemoryLayout _MEMORYSTATUSEX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwLength"),
        C_INT.withName("dwMemoryLoad"),
        C_LONGLONG.withName("ullTotalPhys"),
        C_LONGLONG.withName("ullAvailPhys"),
        C_LONGLONG.withName("ullTotalPageFile"),
        C_LONGLONG.withName("ullAvailPageFile"),
        C_LONGLONG.withName("ullTotalVirtual"),
        C_LONGLONG.withName("ullAvailVirtual"),
        C_LONGLONG.withName("ullAvailExtendedVirtual")
    ).withName("_MEMORYSTATUSEX");
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUSEX$struct$LAYOUT() { return _MEMORYSTATUSEX$struct$LAYOUT_; }

    static final MemoryLayout _MEMORYSTATUSEX$dwLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUSEX$dwLength$LAYOUT() { return _MEMORYSTATUSEX$dwLength$LAYOUT_; }

    static final VarHandle _MEMORYSTATUSEX$dwLength$VH_ = _MEMORYSTATUSEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwLength"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUSEX$dwLength$VH() { return _MEMORYSTATUSEX$dwLength$VH_; }

    static final MemoryLayout _MEMORYSTATUSEX$dwMemoryLoad$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUSEX$dwMemoryLoad$LAYOUT() { return _MEMORYSTATUSEX$dwMemoryLoad$LAYOUT_; }

    static final VarHandle _MEMORYSTATUSEX$dwMemoryLoad$VH_ = _MEMORYSTATUSEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMemoryLoad"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUSEX$dwMemoryLoad$VH() { return _MEMORYSTATUSEX$dwMemoryLoad$VH_; }

    static final MemoryLayout _MEMORYSTATUSEX$ullTotalPhys$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUSEX$ullTotalPhys$LAYOUT() { return _MEMORYSTATUSEX$ullTotalPhys$LAYOUT_; }

    static final VarHandle _MEMORYSTATUSEX$ullTotalPhys$VH_ = _MEMORYSTATUSEX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ullTotalPhys"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUSEX$ullTotalPhys$VH() { return _MEMORYSTATUSEX$ullTotalPhys$VH_; }

    static final MemoryLayout _MEMORYSTATUSEX$ullAvailPhys$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUSEX$ullAvailPhys$LAYOUT() { return _MEMORYSTATUSEX$ullAvailPhys$LAYOUT_; }

    static final VarHandle _MEMORYSTATUSEX$ullAvailPhys$VH_ = _MEMORYSTATUSEX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ullAvailPhys"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUSEX$ullAvailPhys$VH() { return _MEMORYSTATUSEX$ullAvailPhys$VH_; }

    static final MemoryLayout _MEMORYSTATUSEX$ullTotalPageFile$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUSEX$ullTotalPageFile$LAYOUT() { return _MEMORYSTATUSEX$ullTotalPageFile$LAYOUT_; }

    static final VarHandle _MEMORYSTATUSEX$ullTotalPageFile$VH_ = _MEMORYSTATUSEX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ullTotalPageFile"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUSEX$ullTotalPageFile$VH() { return _MEMORYSTATUSEX$ullTotalPageFile$VH_; }

    static final MemoryLayout _MEMORYSTATUSEX$ullAvailPageFile$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUSEX$ullAvailPageFile$LAYOUT() { return _MEMORYSTATUSEX$ullAvailPageFile$LAYOUT_; }

    static final VarHandle _MEMORYSTATUSEX$ullAvailPageFile$VH_ = _MEMORYSTATUSEX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ullAvailPageFile"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUSEX$ullAvailPageFile$VH() { return _MEMORYSTATUSEX$ullAvailPageFile$VH_; }

    static final MemoryLayout _MEMORYSTATUSEX$ullTotalVirtual$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUSEX$ullTotalVirtual$LAYOUT() { return _MEMORYSTATUSEX$ullTotalVirtual$LAYOUT_; }

    static final VarHandle _MEMORYSTATUSEX$ullTotalVirtual$VH_ = _MEMORYSTATUSEX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ullTotalVirtual"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUSEX$ullTotalVirtual$VH() { return _MEMORYSTATUSEX$ullTotalVirtual$VH_; }

    static final MemoryLayout _MEMORYSTATUSEX$ullAvailVirtual$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUSEX$ullAvailVirtual$LAYOUT() { return _MEMORYSTATUSEX$ullAvailVirtual$LAYOUT_; }

    static final VarHandle _MEMORYSTATUSEX$ullAvailVirtual$VH_ = _MEMORYSTATUSEX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ullAvailVirtual"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUSEX$ullAvailVirtual$VH() { return _MEMORYSTATUSEX$ullAvailVirtual$VH_; }

    static final MemoryLayout _MEMORYSTATUSEX$ullAvailExtendedVirtual$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUSEX$ullAvailExtendedVirtual$LAYOUT() { return _MEMORYSTATUSEX$ullAvailExtendedVirtual$LAYOUT_; }

    static final VarHandle _MEMORYSTATUSEX$ullAvailExtendedVirtual$VH_ = _MEMORYSTATUSEX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ullAvailExtendedVirtual"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUSEX$ullAvailExtendedVirtual$VH() { return _MEMORYSTATUSEX$ullAvailExtendedVirtual$VH_; }

    static final FunctionDescriptor GlobalMemoryStatusEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalMemoryStatusEx$FUNC() { return GlobalMemoryStatusEx$FUNC_; }

    static final MethodHandle GlobalMemoryStatusEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalMemoryStatusEx",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GlobalMemoryStatusEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalMemoryStatusEx$MH() { return GlobalMemoryStatusEx$MH_; }

    static final FunctionDescriptor GetSystemInfo$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemInfo$FUNC() { return GetSystemInfo$FUNC_; }

    static final MethodHandle GetSystemInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GetSystemInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemInfo$MH() { return GetSystemInfo$MH_; }

    static final FunctionDescriptor GetSystemTime$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemTime$FUNC() { return GetSystemTime$FUNC_; }

    static final MethodHandle GetSystemTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemTime",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GetSystemTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemTime$MH() { return GetSystemTime$MH_; }

    static final FunctionDescriptor GetSystemTimeAsFileTime$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemTimeAsFileTime$FUNC() { return GetSystemTimeAsFileTime$FUNC_; }

    static final MethodHandle GetSystemTimeAsFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemTimeAsFileTime",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GetSystemTimeAsFileTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemTimeAsFileTime$MH() { return GetSystemTimeAsFileTime$MH_; }

    static final FunctionDescriptor GetLocalTime$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLocalTime$FUNC() { return GetLocalTime$FUNC_; }

    static final MethodHandle GetLocalTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLocalTime",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GetLocalTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLocalTime$MH() { return GetLocalTime$MH_; }

    static final FunctionDescriptor IsUserCetAvailableInEnvironment$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsUserCetAvailableInEnvironment$FUNC() { return IsUserCetAvailableInEnvironment$FUNC_; }

    static final MethodHandle IsUserCetAvailableInEnvironment$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsUserCetAvailableInEnvironment",
        "(I)I",
        IsUserCetAvailableInEnvironment$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsUserCetAvailableInEnvironment$MH() { return IsUserCetAvailableInEnvironment$MH_; }

    static final FunctionDescriptor GetSystemLeapSecondInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemLeapSecondInformation$FUNC() { return GetSystemLeapSecondInformation$FUNC_; }

    static final MethodHandle GetSystemLeapSecondInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemLeapSecondInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSystemLeapSecondInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemLeapSecondInformation$MH() { return GetSystemLeapSecondInformation$MH_; }

    static final FunctionDescriptor GetVersion$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetVersion$FUNC() { return GetVersion$FUNC_; }

    static final MethodHandle GetVersion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVersion",
        "()I",
        GetVersion$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVersion$MH() { return GetVersion$MH_; }

    static final FunctionDescriptor SetLocalTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetLocalTime$FUNC() { return SetLocalTime$FUNC_; }

    static final MethodHandle SetLocalTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetLocalTime",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetLocalTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetLocalTime$MH() { return SetLocalTime$MH_; }

    static final FunctionDescriptor GetTickCount$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetTickCount$FUNC() { return GetTickCount$FUNC_; }

    static final MethodHandle GetTickCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTickCount",
        "()I",
        GetTickCount$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTickCount$MH() { return GetTickCount$MH_; }

    static final FunctionDescriptor GetTickCount64$FUNC_ = FunctionDescriptor.of(C_LONGLONG);
    public static jdk.incubator.foreign.FunctionDescriptor GetTickCount64$FUNC() { return GetTickCount64$FUNC_; }

    static final MethodHandle GetTickCount64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTickCount64",
        "()J",
        GetTickCount64$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTickCount64$MH() { return GetTickCount64$MH_; }

    static final FunctionDescriptor GetSystemTimeAdjustment$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemTimeAdjustment$FUNC() { return GetSystemTimeAdjustment$FUNC_; }

    static final MethodHandle GetSystemTimeAdjustment$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemTimeAdjustment",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSystemTimeAdjustment$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemTimeAdjustment$MH() { return GetSystemTimeAdjustment$MH_; }

    static final FunctionDescriptor GetSystemTimeAdjustmentPrecise$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemTimeAdjustmentPrecise$FUNC() { return GetSystemTimeAdjustmentPrecise$FUNC_; }

    static final MethodHandle GetSystemTimeAdjustmentPrecise$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemTimeAdjustmentPrecise",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSystemTimeAdjustmentPrecise$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemTimeAdjustmentPrecise$MH() { return GetSystemTimeAdjustmentPrecise$MH_; }

    static final FunctionDescriptor GetSystemDirectoryA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemDirectoryA$FUNC() { return GetSystemDirectoryA$FUNC_; }

    static final MethodHandle GetSystemDirectoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemDirectoryA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetSystemDirectoryA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemDirectoryA$MH() { return GetSystemDirectoryA$MH_; }

    static final FunctionDescriptor GetSystemDirectoryW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemDirectoryW$FUNC() { return GetSystemDirectoryW$FUNC_; }

    static final MethodHandle GetSystemDirectoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemDirectoryW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetSystemDirectoryW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemDirectoryW$MH() { return GetSystemDirectoryW$MH_; }

    static final FunctionDescriptor GetWindowsDirectoryA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindowsDirectoryA$FUNC() { return GetWindowsDirectoryA$FUNC_; }

    static final MethodHandle GetWindowsDirectoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowsDirectoryA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetWindowsDirectoryA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindowsDirectoryA$MH() { return GetWindowsDirectoryA$MH_; }

    static final FunctionDescriptor GetWindowsDirectoryW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindowsDirectoryW$FUNC() { return GetWindowsDirectoryW$FUNC_; }

    static final MethodHandle GetWindowsDirectoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowsDirectoryW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetWindowsDirectoryW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindowsDirectoryW$MH() { return GetWindowsDirectoryW$MH_; }

    static final FunctionDescriptor GetSystemWindowsDirectoryA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemWindowsDirectoryA$FUNC() { return GetSystemWindowsDirectoryA$FUNC_; }

    static final MethodHandle GetSystemWindowsDirectoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemWindowsDirectoryA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetSystemWindowsDirectoryA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemWindowsDirectoryA$MH() { return GetSystemWindowsDirectoryA$MH_; }

    static final FunctionDescriptor GetSystemWindowsDirectoryW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemWindowsDirectoryW$FUNC() { return GetSystemWindowsDirectoryW$FUNC_; }

    static final MethodHandle GetSystemWindowsDirectoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemWindowsDirectoryW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetSystemWindowsDirectoryW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemWindowsDirectoryW$MH() { return GetSystemWindowsDirectoryW$MH_; }

    public static int ComputerNameNetBIOS() { return (int)0L; }

    public static int ComputerNameDnsHostname() { return (int)1L; }

    public static int ComputerNameDnsDomain() { return (int)2L; }

    public static int ComputerNameDnsFullyQualified() { return (int)3L; }

    public static int ComputerNamePhysicalNetBIOS() { return (int)4L; }

    public static int ComputerNamePhysicalDnsHostname() { return (int)5L; }

    public static int ComputerNamePhysicalDnsDomain() { return (int)6L; }

    public static int ComputerNamePhysicalDnsFullyQualified() { return (int)7L; }

    public static int ComputerNameMax() { return (int)8L; }

    static final FunctionDescriptor GetComputerNameExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetComputerNameExA$FUNC() { return GetComputerNameExA$FUNC_; }

    static final MethodHandle GetComputerNameExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetComputerNameExA",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetComputerNameExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetComputerNameExA$MH() { return GetComputerNameExA$MH_; }

    static final FunctionDescriptor GetComputerNameExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetComputerNameExW$FUNC() { return GetComputerNameExW$FUNC_; }

    static final MethodHandle GetComputerNameExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetComputerNameExW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetComputerNameExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetComputerNameExW$MH() { return GetComputerNameExW$MH_; }

    static final FunctionDescriptor SetComputerNameExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetComputerNameExW$FUNC() { return SetComputerNameExW$FUNC_; }

    static final MethodHandle SetComputerNameExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetComputerNameExW",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        SetComputerNameExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetComputerNameExW$MH() { return SetComputerNameExW$MH_; }

    static final FunctionDescriptor SetSystemTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSystemTime$FUNC() { return SetSystemTime$FUNC_; }

    static final MethodHandle SetSystemTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSystemTime",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetSystemTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSystemTime$MH() { return SetSystemTime$MH_; }

    static final FunctionDescriptor GetVersionExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetVersionExA$FUNC() { return GetVersionExA$FUNC_; }

    static final MethodHandle GetVersionExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVersionExA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetVersionExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVersionExA$MH() { return GetVersionExA$MH_; }

    static final FunctionDescriptor GetVersionExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetVersionExW$FUNC() { return GetVersionExW$FUNC_; }

    static final MethodHandle GetVersionExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVersionExW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetVersionExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVersionExW$MH() { return GetVersionExW$MH_; }

    static final FunctionDescriptor GetLogicalProcessorInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLogicalProcessorInformation$FUNC() { return GetLogicalProcessorInformation$FUNC_; }

    static final MethodHandle GetLogicalProcessorInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLogicalProcessorInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetLogicalProcessorInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLogicalProcessorInformation$MH() { return GetLogicalProcessorInformation$MH_; }

    static final FunctionDescriptor GetLogicalProcessorInformationEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLogicalProcessorInformationEx$FUNC() { return GetLogicalProcessorInformationEx$FUNC_; }

    static final MethodHandle GetLogicalProcessorInformationEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLogicalProcessorInformationEx",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetLogicalProcessorInformationEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLogicalProcessorInformationEx$MH() { return GetLogicalProcessorInformationEx$MH_; }

    static final FunctionDescriptor GetNativeSystemInfo$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNativeSystemInfo$FUNC() { return GetNativeSystemInfo$FUNC_; }

    static final MethodHandle GetNativeSystemInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNativeSystemInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GetNativeSystemInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNativeSystemInfo$MH() { return GetNativeSystemInfo$MH_; }

    static final FunctionDescriptor GetSystemTimePreciseAsFileTime$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemTimePreciseAsFileTime$FUNC() { return GetSystemTimePreciseAsFileTime$FUNC_; }

    static final MethodHandle GetSystemTimePreciseAsFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemTimePreciseAsFileTime",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GetSystemTimePreciseAsFileTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemTimePreciseAsFileTime$MH() { return GetSystemTimePreciseAsFileTime$MH_; }

    static final FunctionDescriptor GetProductInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProductInfo$FUNC() { return GetProductInfo$FUNC_; }

    static final MethodHandle GetProductInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProductInfo",
        "(IIIILjdk/incubator/foreign/MemoryAddress;)I",
        GetProductInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProductInfo$MH() { return GetProductInfo$MH_; }

    static final FunctionDescriptor GetOsSafeBootMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetOsSafeBootMode$FUNC() { return GetOsSafeBootMode$FUNC_; }

    static final MethodHandle GetOsSafeBootMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOsSafeBootMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetOsSafeBootMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetOsSafeBootMode$MH() { return GetOsSafeBootMode$MH_; }

    static final FunctionDescriptor EnumSystemFirmwareTables$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumSystemFirmwareTables$FUNC() { return EnumSystemFirmwareTables$FUNC_; }

    static final MethodHandle EnumSystemFirmwareTables$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumSystemFirmwareTables",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        EnumSystemFirmwareTables$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumSystemFirmwareTables$MH() { return EnumSystemFirmwareTables$MH_; }

    static final FunctionDescriptor GetSystemFirmwareTable$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemFirmwareTable$FUNC() { return GetSystemFirmwareTable$FUNC_; }

    static final MethodHandle GetSystemFirmwareTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemFirmwareTable",
        "(IILjdk/incubator/foreign/MemoryAddress;I)I",
        GetSystemFirmwareTable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemFirmwareTable$MH() { return GetSystemFirmwareTable$MH_; }

    static final FunctionDescriptor DnsHostnameToComputerNameExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DnsHostnameToComputerNameExW$FUNC() { return DnsHostnameToComputerNameExW$FUNC_; }

    static final MethodHandle DnsHostnameToComputerNameExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DnsHostnameToComputerNameExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DnsHostnameToComputerNameExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DnsHostnameToComputerNameExW$MH() { return DnsHostnameToComputerNameExW$MH_; }

    static final FunctionDescriptor GetPhysicallyInstalledSystemMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPhysicallyInstalledSystemMemory$FUNC() { return GetPhysicallyInstalledSystemMemory$FUNC_; }

    static final MethodHandle GetPhysicallyInstalledSystemMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPhysicallyInstalledSystemMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPhysicallyInstalledSystemMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPhysicallyInstalledSystemMemory$MH() { return GetPhysicallyInstalledSystemMemory$MH_; }

    static final FunctionDescriptor SetComputerNameEx2W$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetComputerNameEx2W$FUNC() { return SetComputerNameEx2W$FUNC_; }

    static final MethodHandle SetComputerNameEx2W$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetComputerNameEx2W",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        SetComputerNameEx2W$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetComputerNameEx2W$MH() { return SetComputerNameEx2W$MH_; }

    static final FunctionDescriptor SetSystemTimeAdjustment$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSystemTimeAdjustment$FUNC() { return SetSystemTimeAdjustment$FUNC_; }

    static final MethodHandle SetSystemTimeAdjustment$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSystemTimeAdjustment",
        "(II)I",
        SetSystemTimeAdjustment$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSystemTimeAdjustment$MH() { return SetSystemTimeAdjustment$MH_; }

    static final FunctionDescriptor SetSystemTimeAdjustmentPrecise$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSystemTimeAdjustmentPrecise$FUNC() { return SetSystemTimeAdjustmentPrecise$FUNC_; }

    static final MethodHandle SetSystemTimeAdjustmentPrecise$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSystemTimeAdjustmentPrecise",
        "(JI)I",
        SetSystemTimeAdjustmentPrecise$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSystemTimeAdjustmentPrecise$MH() { return SetSystemTimeAdjustmentPrecise$MH_; }

    static final FunctionDescriptor InstallELAMCertificateInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InstallELAMCertificateInfo$FUNC() { return InstallELAMCertificateInfo$FUNC_; }

    static final MethodHandle InstallELAMCertificateInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InstallELAMCertificateInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        InstallELAMCertificateInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InstallELAMCertificateInfo$MH() { return InstallELAMCertificateInfo$MH_; }

    static final FunctionDescriptor GetProcessorSystemCycleTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessorSystemCycleTime$FUNC() { return GetProcessorSystemCycleTime$FUNC_; }

    static final MethodHandle GetProcessorSystemCycleTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessorSystemCycleTime",
        "(SLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessorSystemCycleTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessorSystemCycleTime$MH() { return GetProcessorSystemCycleTime$MH_; }

    static final FunctionDescriptor GetOsManufacturingMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetOsManufacturingMode$FUNC() { return GetOsManufacturingMode$FUNC_; }

    static final MethodHandle GetOsManufacturingMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOsManufacturingMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetOsManufacturingMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetOsManufacturingMode$MH() { return GetOsManufacturingMode$MH_; }

    static final FunctionDescriptor GetIntegratedDisplaySize$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetIntegratedDisplaySize$FUNC() { return GetIntegratedDisplaySize$FUNC_; }

    static final MethodHandle GetIntegratedDisplaySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetIntegratedDisplaySize",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetIntegratedDisplaySize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetIntegratedDisplaySize$MH() { return GetIntegratedDisplaySize$MH_; }

    static final FunctionDescriptor SetComputerNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetComputerNameA$FUNC() { return SetComputerNameA$FUNC_; }

    static final MethodHandle SetComputerNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetComputerNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetComputerNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetComputerNameA$MH() { return SetComputerNameA$MH_; }

    static final FunctionDescriptor SetComputerNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetComputerNameW$FUNC() { return SetComputerNameW$FUNC_; }

    static final MethodHandle SetComputerNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetComputerNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetComputerNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetComputerNameW$MH() { return SetComputerNameW$MH_; }

    static final FunctionDescriptor SetComputerNameExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetComputerNameExA$FUNC() { return SetComputerNameExA$FUNC_; }

    static final MethodHandle SetComputerNameExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetComputerNameExA",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        SetComputerNameExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetComputerNameExA$MH() { return SetComputerNameExA$MH_; }

    static final FunctionDescriptor VirtualAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualAlloc$FUNC() { return VirtualAlloc$FUNC_; }

    static final MethodHandle VirtualAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualAlloc",
        "(Ljdk/incubator/foreign/MemoryAddress;JII)Ljdk/incubator/foreign/MemoryAddress;",
        VirtualAlloc$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualAlloc$MH() { return VirtualAlloc$MH_; }

    static final FunctionDescriptor VirtualProtect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualProtect$FUNC() { return VirtualProtect$FUNC_; }

    static final MethodHandle VirtualProtect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualProtect",
        "(Ljdk/incubator/foreign/MemoryAddress;JILjdk/incubator/foreign/MemoryAddress;)I",
        VirtualProtect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualProtect$MH() { return VirtualProtect$MH_; }

    static final FunctionDescriptor VirtualFree$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualFree$FUNC() { return VirtualFree$FUNC_; }

    static final MethodHandle VirtualFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualFree",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)I",
        VirtualFree$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualFree$MH() { return VirtualFree$MH_; }

    static final FunctionDescriptor VirtualQuery$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualQuery$FUNC() { return VirtualQuery$FUNC_; }

    static final MethodHandle VirtualQuery$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualQuery",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        VirtualQuery$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualQuery$MH() { return VirtualQuery$MH_; }

    static final FunctionDescriptor VirtualAllocEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualAllocEx$FUNC() { return VirtualAllocEx$FUNC_; }

    static final MethodHandle VirtualAllocEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualAllocEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JII)Ljdk/incubator/foreign/MemoryAddress;",
        VirtualAllocEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualAllocEx$MH() { return VirtualAllocEx$MH_; }

    static final FunctionDescriptor VirtualProtectEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualProtectEx$FUNC() { return VirtualProtectEx$FUNC_; }

    static final MethodHandle VirtualProtectEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualProtectEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JILjdk/incubator/foreign/MemoryAddress;)I",
        VirtualProtectEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualProtectEx$MH() { return VirtualProtectEx$MH_; }

    static final FunctionDescriptor VirtualQueryEx$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualQueryEx$FUNC() { return VirtualQueryEx$FUNC_; }

    static final MethodHandle VirtualQueryEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualQueryEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        VirtualQueryEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualQueryEx$MH() { return VirtualQueryEx$MH_; }

    static final FunctionDescriptor ReadProcessMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadProcessMemory$FUNC() { return ReadProcessMemory$FUNC_; }

    static final MethodHandle ReadProcessMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadProcessMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        ReadProcessMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadProcessMemory$MH() { return ReadProcessMemory$MH_; }

    static final FunctionDescriptor WriteProcessMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteProcessMemory$FUNC() { return WriteProcessMemory$FUNC_; }

    static final MethodHandle WriteProcessMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteProcessMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        WriteProcessMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteProcessMemory$MH() { return WriteProcessMemory$MH_; }

    static final FunctionDescriptor CreateFileMappingW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFileMappingW$FUNC() { return CreateFileMappingW$FUNC_; }

    static final MethodHandle CreateFileMappingW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileMappingW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFileMappingW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFileMappingW$MH() { return CreateFileMappingW$MH_; }

    static final FunctionDescriptor OpenFileMappingW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenFileMappingW$FUNC() { return OpenFileMappingW$FUNC_; }

    static final MethodHandle OpenFileMappingW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenFileMappingW",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenFileMappingW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenFileMappingW$MH() { return OpenFileMappingW$MH_; }

    static final FunctionDescriptor MapViewOfFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapViewOfFile$FUNC() { return MapViewOfFile$FUNC_; }

    static final MethodHandle MapViewOfFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapViewOfFile",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIJ)Ljdk/incubator/foreign/MemoryAddress;",
        MapViewOfFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapViewOfFile$MH() { return MapViewOfFile$MH_; }

    static final FunctionDescriptor MapViewOfFileEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapViewOfFileEx$FUNC() { return MapViewOfFileEx$FUNC_; }

    static final MethodHandle MapViewOfFileEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapViewOfFileEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIJLjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        MapViewOfFileEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapViewOfFileEx$MH() { return MapViewOfFileEx$MH_; }

    static final FunctionDescriptor VirtualFreeEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualFreeEx$FUNC() { return VirtualFreeEx$FUNC_; }

    static final MethodHandle VirtualFreeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualFreeEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        VirtualFreeEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualFreeEx$MH() { return VirtualFreeEx$MH_; }

    static final FunctionDescriptor FlushViewOfFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor FlushViewOfFile$FUNC() { return FlushViewOfFile$FUNC_; }

    static final MethodHandle FlushViewOfFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlushViewOfFile",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        FlushViewOfFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FlushViewOfFile$MH() { return FlushViewOfFile$MH_; }

    static final FunctionDescriptor UnmapViewOfFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnmapViewOfFile$FUNC() { return UnmapViewOfFile$FUNC_; }

    static final MethodHandle UnmapViewOfFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnmapViewOfFile",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnmapViewOfFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnmapViewOfFile$MH() { return UnmapViewOfFile$MH_; }

    static final FunctionDescriptor GetLargePageMinimum$FUNC_ = FunctionDescriptor.of(C_LONGLONG);
    public static jdk.incubator.foreign.FunctionDescriptor GetLargePageMinimum$FUNC() { return GetLargePageMinimum$FUNC_; }

    static final MethodHandle GetLargePageMinimum$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLargePageMinimum",
        "()J",
        GetLargePageMinimum$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLargePageMinimum$MH() { return GetLargePageMinimum$MH_; }

    static final FunctionDescriptor GetProcessWorkingSetSizeEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessWorkingSetSizeEx$FUNC() { return GetProcessWorkingSetSizeEx$FUNC_; }

    static final MethodHandle GetProcessWorkingSetSizeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessWorkingSetSizeEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessWorkingSetSizeEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessWorkingSetSizeEx$MH() { return GetProcessWorkingSetSizeEx$MH_; }

    static final FunctionDescriptor SetProcessWorkingSetSizeEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessWorkingSetSizeEx$FUNC() { return SetProcessWorkingSetSizeEx$FUNC_; }

    static final MethodHandle SetProcessWorkingSetSizeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessWorkingSetSizeEx",
        "(Ljdk/incubator/foreign/MemoryAddress;JJI)I",
        SetProcessWorkingSetSizeEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessWorkingSetSizeEx$MH() { return SetProcessWorkingSetSizeEx$MH_; }

    static final FunctionDescriptor VirtualLock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualLock$FUNC() { return VirtualLock$FUNC_; }

    static final MethodHandle VirtualLock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualLock",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        VirtualLock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualLock$MH() { return VirtualLock$MH_; }

    static final FunctionDescriptor VirtualUnlock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualUnlock$FUNC() { return VirtualUnlock$FUNC_; }

    static final MethodHandle VirtualUnlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualUnlock",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        VirtualUnlock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualUnlock$MH() { return VirtualUnlock$MH_; }

    static final FunctionDescriptor GetWriteWatch$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWriteWatch$FUNC() { return GetWriteWatch$FUNC_; }

    static final MethodHandle GetWriteWatch$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWriteWatch",
        "(ILjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWriteWatch$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWriteWatch$MH() { return GetWriteWatch$MH_; }

    static final FunctionDescriptor ResetWriteWatch$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor ResetWriteWatch$FUNC() { return ResetWriteWatch$FUNC_; }

    static final MethodHandle ResetWriteWatch$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ResetWriteWatch",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        ResetWriteWatch$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ResetWriteWatch$MH() { return ResetWriteWatch$MH_; }

    public static int LowMemoryResourceNotification() { return (int)0L; }

    public static int HighMemoryResourceNotification() { return (int)1L; }

    static final FunctionDescriptor CreateMemoryResourceNotification$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateMemoryResourceNotification$FUNC() { return CreateMemoryResourceNotification$FUNC_; }

    static final MethodHandle CreateMemoryResourceNotification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMemoryResourceNotification",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateMemoryResourceNotification$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateMemoryResourceNotification$MH() { return CreateMemoryResourceNotification$MH_; }

    static final FunctionDescriptor QueryMemoryResourceNotification$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryMemoryResourceNotification$FUNC() { return QueryMemoryResourceNotification$FUNC_; }

    static final MethodHandle QueryMemoryResourceNotification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryMemoryResourceNotification",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryMemoryResourceNotification$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryMemoryResourceNotification$MH() { return QueryMemoryResourceNotification$MH_; }

    static final FunctionDescriptor GetSystemFileCacheSize$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemFileCacheSize$FUNC() { return GetSystemFileCacheSize$FUNC_; }

    static final MethodHandle GetSystemFileCacheSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemFileCacheSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSystemFileCacheSize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemFileCacheSize$MH() { return GetSystemFileCacheSize$MH_; }

    static final FunctionDescriptor SetSystemFileCacheSize$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSystemFileCacheSize$FUNC() { return SetSystemFileCacheSize$FUNC_; }

    static final MethodHandle SetSystemFileCacheSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSystemFileCacheSize",
        "(JJI)I",
        SetSystemFileCacheSize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSystemFileCacheSize$MH() { return SetSystemFileCacheSize$MH_; }

    static final FunctionDescriptor CreateFileMappingNumaW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFileMappingNumaW$FUNC() { return CreateFileMappingNumaW$FUNC_; }

    static final MethodHandle CreateFileMappingNumaW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileMappingNumaW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFileMappingNumaW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFileMappingNumaW$MH() { return CreateFileMappingNumaW$MH_; }

    static final MemoryLayout _WIN32_MEMORY_RANGE_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("VirtualAddress"),
        C_LONGLONG.withName("NumberOfBytes")
    ).withName("_WIN32_MEMORY_RANGE_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _WIN32_MEMORY_RANGE_ENTRY$struct$LAYOUT() { return _WIN32_MEMORY_RANGE_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _WIN32_MEMORY_RANGE_ENTRY$VirtualAddress$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _WIN32_MEMORY_RANGE_ENTRY$VirtualAddress$LAYOUT() { return _WIN32_MEMORY_RANGE_ENTRY$VirtualAddress$LAYOUT_; }

    static final VarHandle _WIN32_MEMORY_RANGE_ENTRY$VirtualAddress$VH_ = MemoryHandles.asAddressVarHandle(_WIN32_MEMORY_RANGE_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VirtualAddress")));
    public static java.lang.invoke.VarHandle _WIN32_MEMORY_RANGE_ENTRY$VirtualAddress$VH() { return _WIN32_MEMORY_RANGE_ENTRY$VirtualAddress$VH_; }

    static final MemoryLayout _WIN32_MEMORY_RANGE_ENTRY$NumberOfBytes$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _WIN32_MEMORY_RANGE_ENTRY$NumberOfBytes$LAYOUT() { return _WIN32_MEMORY_RANGE_ENTRY$NumberOfBytes$LAYOUT_; }

    static final VarHandle _WIN32_MEMORY_RANGE_ENTRY$NumberOfBytes$VH_ = _WIN32_MEMORY_RANGE_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumberOfBytes"));
    public static java.lang.invoke.VarHandle _WIN32_MEMORY_RANGE_ENTRY$NumberOfBytes$VH() { return _WIN32_MEMORY_RANGE_ENTRY$NumberOfBytes$VH_; }

    static final FunctionDescriptor PrefetchVirtualMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PrefetchVirtualMemory$FUNC() { return PrefetchVirtualMemory$FUNC_; }

    static final MethodHandle PrefetchVirtualMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PrefetchVirtualMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;I)I",
        PrefetchVirtualMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PrefetchVirtualMemory$MH() { return PrefetchVirtualMemory$MH_; }

    static final FunctionDescriptor CreateFileMappingFromApp$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFileMappingFromApp$FUNC() { return CreateFileMappingFromApp$FUNC_; }

    static final MethodHandle CreateFileMappingFromApp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileMappingFromApp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFileMappingFromApp$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFileMappingFromApp$MH() { return CreateFileMappingFromApp$MH_; }

    static final FunctionDescriptor MapViewOfFileFromApp$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapViewOfFileFromApp$FUNC() { return MapViewOfFileFromApp$FUNC_; }

    static final MethodHandle MapViewOfFileFromApp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapViewOfFileFromApp",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)Ljdk/incubator/foreign/MemoryAddress;",
        MapViewOfFileFromApp$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapViewOfFileFromApp$MH() { return MapViewOfFileFromApp$MH_; }

    static final FunctionDescriptor UnmapViewOfFileEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnmapViewOfFileEx$FUNC() { return UnmapViewOfFileEx$FUNC_; }

    static final MethodHandle UnmapViewOfFileEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnmapViewOfFileEx",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        UnmapViewOfFileEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnmapViewOfFileEx$MH() { return UnmapViewOfFileEx$MH_; }

    static final FunctionDescriptor AllocateUserPhysicalPages$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AllocateUserPhysicalPages$FUNC() { return AllocateUserPhysicalPages$FUNC_; }

    static final MethodHandle AllocateUserPhysicalPages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AllocateUserPhysicalPages",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AllocateUserPhysicalPages$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AllocateUserPhysicalPages$MH() { return AllocateUserPhysicalPages$MH_; }

    static final FunctionDescriptor FreeUserPhysicalPages$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FreeUserPhysicalPages$FUNC() { return FreeUserPhysicalPages$FUNC_; }

    static final MethodHandle FreeUserPhysicalPages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeUserPhysicalPages",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FreeUserPhysicalPages$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FreeUserPhysicalPages$MH() { return FreeUserPhysicalPages$MH_; }

    static final FunctionDescriptor MapUserPhysicalPages$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapUserPhysicalPages$FUNC() { return MapUserPhysicalPages$FUNC_; }

    static final MethodHandle MapUserPhysicalPages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapUserPhysicalPages",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        MapUserPhysicalPages$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapUserPhysicalPages$MH() { return MapUserPhysicalPages$MH_; }

    static final FunctionDescriptor AllocateUserPhysicalPagesNuma$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor AllocateUserPhysicalPagesNuma$FUNC() { return AllocateUserPhysicalPagesNuma$FUNC_; }

    static final MethodHandle AllocateUserPhysicalPagesNuma$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AllocateUserPhysicalPagesNuma",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        AllocateUserPhysicalPagesNuma$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AllocateUserPhysicalPagesNuma$MH() { return AllocateUserPhysicalPagesNuma$MH_; }

    static final FunctionDescriptor VirtualAllocExNuma$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualAllocExNuma$FUNC() { return VirtualAllocExNuma$FUNC_; }

    static final MethodHandle VirtualAllocExNuma$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualAllocExNuma",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JIII)Ljdk/incubator/foreign/MemoryAddress;",
        VirtualAllocExNuma$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualAllocExNuma$MH() { return VirtualAllocExNuma$MH_; }

    static final FunctionDescriptor GetMemoryErrorHandlingCapabilities$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetMemoryErrorHandlingCapabilities$FUNC() { return GetMemoryErrorHandlingCapabilities$FUNC_; }

    static final MethodHandle GetMemoryErrorHandlingCapabilities$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMemoryErrorHandlingCapabilities",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetMemoryErrorHandlingCapabilities$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMemoryErrorHandlingCapabilities$MH() { return GetMemoryErrorHandlingCapabilities$MH_; }

    static final FunctionDescriptor RegisterBadMemoryNotification$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterBadMemoryNotification$FUNC() { return RegisterBadMemoryNotification$FUNC_; }

    static final MethodHandle RegisterBadMemoryNotification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterBadMemoryNotification",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RegisterBadMemoryNotification$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterBadMemoryNotification$MH() { return RegisterBadMemoryNotification$MH_; }

    static final FunctionDescriptor RegisterBadMemoryNotification$Callback$FUNC_ = FunctionDescriptor.ofVoid();
    public static jdk.incubator.foreign.FunctionDescriptor RegisterBadMemoryNotification$Callback$FUNC() { return RegisterBadMemoryNotification$Callback$FUNC_; }

    static final FunctionDescriptor UnregisterBadMemoryNotification$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterBadMemoryNotification$FUNC() { return UnregisterBadMemoryNotification$FUNC_; }

    static final MethodHandle UnregisterBadMemoryNotification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterBadMemoryNotification",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnregisterBadMemoryNotification$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterBadMemoryNotification$MH() { return UnregisterBadMemoryNotification$MH_; }

    public static int VmOfferPriorityVeryLow() { return (int)1L; }

    public static int VmOfferPriorityLow() { return (int)2L; }

    public static int VmOfferPriorityBelowNormal() { return (int)3L; }

    public static int VmOfferPriorityNormal() { return (int)4L; }

    static final FunctionDescriptor OfferVirtualMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor OfferVirtualMemory$FUNC() { return OfferVirtualMemory$FUNC_; }

    static final MethodHandle OfferVirtualMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OfferVirtualMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)I",
        OfferVirtualMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OfferVirtualMemory$MH() { return OfferVirtualMemory$MH_; }

    static final FunctionDescriptor ReclaimVirtualMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReclaimVirtualMemory$FUNC() { return ReclaimVirtualMemory$FUNC_; }

    static final MethodHandle ReclaimVirtualMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReclaimVirtualMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        ReclaimVirtualMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReclaimVirtualMemory$MH() { return ReclaimVirtualMemory$MH_; }

    static final FunctionDescriptor DiscardVirtualMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DiscardVirtualMemory$FUNC() { return DiscardVirtualMemory$FUNC_; }

    static final MethodHandle DiscardVirtualMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DiscardVirtualMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        DiscardVirtualMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DiscardVirtualMemory$MH() { return DiscardVirtualMemory$MH_; }

    static final FunctionDescriptor SetProcessValidCallTargets$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessValidCallTargets$FUNC() { return SetProcessValidCallTargets$FUNC_; }

    static final MethodHandle SetProcessValidCallTargets$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessValidCallTargets",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JILjdk/incubator/foreign/MemoryAddress;)I",
        SetProcessValidCallTargets$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessValidCallTargets$MH() { return SetProcessValidCallTargets$MH_; }

    static final FunctionDescriptor SetProcessValidCallTargetsForMappedView$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessValidCallTargetsForMappedView$FUNC() { return SetProcessValidCallTargetsForMappedView$FUNC_; }

    static final MethodHandle SetProcessValidCallTargetsForMappedView$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessValidCallTargetsForMappedView",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        SetProcessValidCallTargetsForMappedView$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessValidCallTargetsForMappedView$MH() { return SetProcessValidCallTargetsForMappedView$MH_; }

    static final FunctionDescriptor VirtualAllocFromApp$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualAllocFromApp$FUNC() { return VirtualAllocFromApp$FUNC_; }

    static final MethodHandle VirtualAllocFromApp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualAllocFromApp",
        "(Ljdk/incubator/foreign/MemoryAddress;JII)Ljdk/incubator/foreign/MemoryAddress;",
        VirtualAllocFromApp$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualAllocFromApp$MH() { return VirtualAllocFromApp$MH_; }

    static final FunctionDescriptor VirtualProtectFromApp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualProtectFromApp$FUNC() { return VirtualProtectFromApp$FUNC_; }

    static final MethodHandle VirtualProtectFromApp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualProtectFromApp",
        "(Ljdk/incubator/foreign/MemoryAddress;JILjdk/incubator/foreign/MemoryAddress;)I",
        VirtualProtectFromApp$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualProtectFromApp$MH() { return VirtualProtectFromApp$MH_; }

    static final FunctionDescriptor OpenFileMappingFromApp$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenFileMappingFromApp$FUNC() { return OpenFileMappingFromApp$FUNC_; }

    static final MethodHandle OpenFileMappingFromApp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenFileMappingFromApp",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenFileMappingFromApp$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenFileMappingFromApp$MH() { return OpenFileMappingFromApp$MH_; }

    public static int MemoryRegionInfo() { return (int)0L; }

    static final MemoryLayout WIN32_MEMORY_REGION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("AllocationBase"),
        C_INT.withName("AllocationProtect"),
        C_INT.withName("Flags"),
        C_INT,
        C_LONGLONG.withName("RegionSize"),
        C_LONGLONG.withName("CommitSize")
    ).withName("WIN32_MEMORY_REGION_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout WIN32_MEMORY_REGION_INFORMATION$struct$LAYOUT() { return WIN32_MEMORY_REGION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout WIN32_MEMORY_REGION_INFORMATION$AllocationBase$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout WIN32_MEMORY_REGION_INFORMATION$AllocationBase$LAYOUT() { return WIN32_MEMORY_REGION_INFORMATION$AllocationBase$LAYOUT_; }

    static final VarHandle WIN32_MEMORY_REGION_INFORMATION$AllocationBase$VH_ = MemoryHandles.asAddressVarHandle(WIN32_MEMORY_REGION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationBase")));
    public static java.lang.invoke.VarHandle WIN32_MEMORY_REGION_INFORMATION$AllocationBase$VH() { return WIN32_MEMORY_REGION_INFORMATION$AllocationBase$VH_; }

    static final MemoryLayout WIN32_MEMORY_REGION_INFORMATION$AllocationProtect$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout WIN32_MEMORY_REGION_INFORMATION$AllocationProtect$LAYOUT() { return WIN32_MEMORY_REGION_INFORMATION$AllocationProtect$LAYOUT_; }

    static final VarHandle WIN32_MEMORY_REGION_INFORMATION$AllocationProtect$VH_ = WIN32_MEMORY_REGION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationProtect"));
    public static java.lang.invoke.VarHandle WIN32_MEMORY_REGION_INFORMATION$AllocationProtect$VH() { return WIN32_MEMORY_REGION_INFORMATION$AllocationProtect$VH_; }

    static final MemoryLayout WIN32_MEMORY_REGION_INFORMATION$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout WIN32_MEMORY_REGION_INFORMATION$Flags$LAYOUT() { return WIN32_MEMORY_REGION_INFORMATION$Flags$LAYOUT_; }

    static final VarHandle WIN32_MEMORY_REGION_INFORMATION$Flags$VH_ = WIN32_MEMORY_REGION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle WIN32_MEMORY_REGION_INFORMATION$Flags$VH() { return WIN32_MEMORY_REGION_INFORMATION$Flags$VH_; }

    static final MemoryLayout WIN32_MEMORY_REGION_INFORMATION$RegionSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout WIN32_MEMORY_REGION_INFORMATION$RegionSize$LAYOUT() { return WIN32_MEMORY_REGION_INFORMATION$RegionSize$LAYOUT_; }

    static final VarHandle WIN32_MEMORY_REGION_INFORMATION$RegionSize$VH_ = WIN32_MEMORY_REGION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegionSize"));
    public static java.lang.invoke.VarHandle WIN32_MEMORY_REGION_INFORMATION$RegionSize$VH() { return WIN32_MEMORY_REGION_INFORMATION$RegionSize$VH_; }

    static final MemoryLayout WIN32_MEMORY_REGION_INFORMATION$CommitSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout WIN32_MEMORY_REGION_INFORMATION$CommitSize$LAYOUT() { return WIN32_MEMORY_REGION_INFORMATION$CommitSize$LAYOUT_; }

    static final VarHandle WIN32_MEMORY_REGION_INFORMATION$CommitSize$VH_ = WIN32_MEMORY_REGION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CommitSize"));
    public static java.lang.invoke.VarHandle WIN32_MEMORY_REGION_INFORMATION$CommitSize$VH() { return WIN32_MEMORY_REGION_INFORMATION$CommitSize$VH_; }

    static final FunctionDescriptor QueryVirtualMemoryInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryVirtualMemoryInformation$FUNC() { return QueryVirtualMemoryInformation$FUNC_; }

    static final MethodHandle QueryVirtualMemoryInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryVirtualMemoryInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        QueryVirtualMemoryInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryVirtualMemoryInformation$MH() { return QueryVirtualMemoryInformation$MH_; }

    static final FunctionDescriptor MapViewOfFileNuma2$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapViewOfFileNuma2$FUNC() { return MapViewOfFileNuma2$FUNC_; }

    static final MethodHandle MapViewOfFileNuma2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapViewOfFileNuma2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;JIII)Ljdk/incubator/foreign/MemoryAddress;",
        MapViewOfFileNuma2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapViewOfFileNuma2$MH() { return MapViewOfFileNuma2$MH_; }

    static final FunctionDescriptor MapViewOfFile2$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapViewOfFile2$FUNC() { return MapViewOfFile2$FUNC_; }

    static final MethodHandle MapViewOfFile2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapViewOfFile2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;JII)Ljdk/incubator/foreign/MemoryAddress;",
        MapViewOfFile2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapViewOfFile2$MH() { return MapViewOfFile2$MH_; }

    static final FunctionDescriptor UnmapViewOfFile2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnmapViewOfFile2$FUNC() { return UnmapViewOfFile2$FUNC_; }

    static final MethodHandle UnmapViewOfFile2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnmapViewOfFile2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        UnmapViewOfFile2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnmapViewOfFile2$MH() { return UnmapViewOfFile2$MH_; }

    static final FunctionDescriptor VirtualUnlockEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualUnlockEx$FUNC() { return VirtualUnlockEx$FUNC_; }

    static final MethodHandle VirtualUnlockEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualUnlockEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        VirtualUnlockEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualUnlockEx$MH() { return VirtualUnlockEx$MH_; }

    static final FunctionDescriptor VirtualAlloc2$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualAlloc2$FUNC() { return VirtualAlloc2$FUNC_; }

    static final MethodHandle VirtualAlloc2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualAlloc2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JIILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        VirtualAlloc2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualAlloc2$MH() { return VirtualAlloc2$MH_; }

    static final FunctionDescriptor MapViewOfFile3$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapViewOfFile3$FUNC() { return MapViewOfFile3$FUNC_; }

    static final MethodHandle MapViewOfFile3$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapViewOfFile3",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJIILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        MapViewOfFile3$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapViewOfFile3$MH() { return MapViewOfFile3$MH_; }

    static final FunctionDescriptor VirtualAlloc2FromApp$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor VirtualAlloc2FromApp$FUNC() { return VirtualAlloc2FromApp$FUNC_; }

    static final MethodHandle VirtualAlloc2FromApp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VirtualAlloc2FromApp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JIILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        VirtualAlloc2FromApp$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VirtualAlloc2FromApp$MH() { return VirtualAlloc2FromApp$MH_; }

    static final FunctionDescriptor MapViewOfFile3FromApp$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapViewOfFile3FromApp$FUNC() { return MapViewOfFile3FromApp$FUNC_; }

    static final MethodHandle MapViewOfFile3FromApp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapViewOfFile3FromApp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJIILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        MapViewOfFile3FromApp$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapViewOfFile3FromApp$MH() { return MapViewOfFile3FromApp$MH_; }

    static final FunctionDescriptor CreateFileMapping2$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFileMapping2$FUNC() { return CreateFileMapping2$FUNC_; }

    static final MethodHandle CreateFileMapping2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileMapping2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIJLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFileMapping2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFileMapping2$MH() { return CreateFileMapping2$MH_; }

    static final FunctionDescriptor IsEnclaveTypeSupported$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsEnclaveTypeSupported$FUNC() { return IsEnclaveTypeSupported$FUNC_; }

    static final MethodHandle IsEnclaveTypeSupported$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsEnclaveTypeSupported",
        "(I)I",
        IsEnclaveTypeSupported$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsEnclaveTypeSupported$MH() { return IsEnclaveTypeSupported$MH_; }

    static final FunctionDescriptor CreateEnclave$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateEnclave$FUNC() { return CreateEnclave$FUNC_; }

    static final MethodHandle CreateEnclave$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateEnclave",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateEnclave$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateEnclave$MH() { return CreateEnclave$MH_; }

    static final FunctionDescriptor LoadEnclaveData$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadEnclaveData$FUNC() { return LoadEnclaveData$FUNC_; }

    static final MethodHandle LoadEnclaveData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadEnclaveData",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LoadEnclaveData$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadEnclaveData$MH() { return LoadEnclaveData$MH_; }

    static final FunctionDescriptor InitializeEnclave$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeEnclave$FUNC() { return InitializeEnclave$FUNC_; }

    static final MethodHandle InitializeEnclave$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeEnclave",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        InitializeEnclave$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeEnclave$MH() { return InitializeEnclave$MH_; }

    static final FunctionDescriptor LoadEnclaveImageA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadEnclaveImageA$FUNC() { return LoadEnclaveImageA$FUNC_; }

    static final MethodHandle LoadEnclaveImageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadEnclaveImageA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LoadEnclaveImageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadEnclaveImageA$MH() { return LoadEnclaveImageA$MH_; }

    static final FunctionDescriptor LoadEnclaveImageW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadEnclaveImageW$FUNC() { return LoadEnclaveImageW$FUNC_; }

    static final MethodHandle LoadEnclaveImageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadEnclaveImageW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LoadEnclaveImageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadEnclaveImageW$MH() { return LoadEnclaveImageW$MH_; }

    static final FunctionDescriptor CallEnclave$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallEnclave$FUNC() { return CallEnclave$FUNC_; }

    static final MethodHandle CallEnclave$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CallEnclave",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CallEnclave$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CallEnclave$MH() { return CallEnclave$MH_; }

    static final FunctionDescriptor CallEnclave$lpRoutine$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallEnclave$lpRoutine$FUNC() { return CallEnclave$lpRoutine$FUNC_; }

    static final FunctionDescriptor TerminateEnclave$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor TerminateEnclave$FUNC() { return TerminateEnclave$FUNC_; }

    static final MethodHandle TerminateEnclave$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TerminateEnclave",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        TerminateEnclave$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TerminateEnclave$MH() { return TerminateEnclave$MH_; }

    static final FunctionDescriptor DeleteEnclave$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteEnclave$FUNC() { return DeleteEnclave$FUNC_; }

    static final MethodHandle DeleteEnclave$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteEnclave",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteEnclave$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteEnclave$MH() { return DeleteEnclave$MH_; }

    static final FunctionDescriptor QueueUserWorkItem$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueueUserWorkItem$FUNC() { return QueueUserWorkItem$FUNC_; }

    static final MethodHandle QueueUserWorkItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueueUserWorkItem",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        QueueUserWorkItem$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueueUserWorkItem$MH() { return QueueUserWorkItem$MH_; }

    static final FunctionDescriptor QueueUserWorkItem$Function$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueueUserWorkItem$Function$FUNC() { return QueueUserWorkItem$Function$FUNC_; }

    static final FunctionDescriptor UnregisterWaitEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterWaitEx$FUNC() { return UnregisterWaitEx$FUNC_; }

    static final MethodHandle UnregisterWaitEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterWaitEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        UnregisterWaitEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterWaitEx$MH() { return UnregisterWaitEx$MH_; }

    static final FunctionDescriptor CreateTimerQueue$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor CreateTimerQueue$FUNC() { return CreateTimerQueue$FUNC_; }

    static final MethodHandle CreateTimerQueue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateTimerQueue",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        CreateTimerQueue$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateTimerQueue$MH() { return CreateTimerQueue$MH_; }

    static final FunctionDescriptor CreateTimerQueueTimer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateTimerQueueTimer$FUNC() { return CreateTimerQueueTimer$FUNC_; }

    static final MethodHandle CreateTimerQueueTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateTimerQueueTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        CreateTimerQueueTimer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateTimerQueueTimer$MH() { return CreateTimerQueueTimer$MH_; }

    static final FunctionDescriptor CreateTimerQueueTimer$Callback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateTimerQueueTimer$Callback$FUNC() { return CreateTimerQueueTimer$Callback$FUNC_; }

    static final FunctionDescriptor ChangeTimerQueueTimer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ChangeTimerQueueTimer$FUNC() { return ChangeTimerQueueTimer$FUNC_; }

    static final MethodHandle ChangeTimerQueueTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChangeTimerQueueTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        ChangeTimerQueueTimer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ChangeTimerQueueTimer$MH() { return ChangeTimerQueueTimer$MH_; }

    static final FunctionDescriptor DeleteTimerQueueTimer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteTimerQueueTimer$FUNC() { return DeleteTimerQueueTimer$FUNC_; }

    static final MethodHandle DeleteTimerQueueTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteTimerQueueTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteTimerQueueTimer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteTimerQueueTimer$MH() { return DeleteTimerQueueTimer$MH_; }

    static final FunctionDescriptor DeleteTimerQueueEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteTimerQueueEx$FUNC() { return DeleteTimerQueueEx$FUNC_; }

    static final MethodHandle DeleteTimerQueueEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteTimerQueueEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteTimerQueueEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteTimerQueueEx$MH() { return DeleteTimerQueueEx$MH_; }

    static final FunctionDescriptor CreateThreadpool$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateThreadpool$FUNC() { return CreateThreadpool$FUNC_; }

    static final MethodHandle CreateThreadpool$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateThreadpool",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateThreadpool$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateThreadpool$MH() { return CreateThreadpool$MH_; }

    static final FunctionDescriptor SetThreadpoolThreadMaximum$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolThreadMaximum$FUNC() { return SetThreadpoolThreadMaximum$FUNC_; }

    static final MethodHandle SetThreadpoolThreadMaximum$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolThreadMaximum",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        SetThreadpoolThreadMaximum$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolThreadMaximum$MH() { return SetThreadpoolThreadMaximum$MH_; }

    static final FunctionDescriptor SetThreadpoolThreadMinimum$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolThreadMinimum$FUNC() { return SetThreadpoolThreadMinimum$FUNC_; }

    static final MethodHandle SetThreadpoolThreadMinimum$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolThreadMinimum",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetThreadpoolThreadMinimum$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolThreadMinimum$MH() { return SetThreadpoolThreadMinimum$MH_; }

    static final FunctionDescriptor SetThreadpoolStackInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolStackInformation$FUNC() { return SetThreadpoolStackInformation$FUNC_; }

    static final MethodHandle SetThreadpoolStackInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolStackInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetThreadpoolStackInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolStackInformation$MH() { return SetThreadpoolStackInformation$MH_; }

    static final FunctionDescriptor QueryThreadpoolStackInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryThreadpoolStackInformation$FUNC() { return QueryThreadpoolStackInformation$FUNC_; }

    static final MethodHandle QueryThreadpoolStackInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryThreadpoolStackInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryThreadpoolStackInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryThreadpoolStackInformation$MH() { return QueryThreadpoolStackInformation$MH_; }

    static final FunctionDescriptor CloseThreadpool$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseThreadpool$FUNC() { return CloseThreadpool$FUNC_; }

    static final MethodHandle CloseThreadpool$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseThreadpool",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CloseThreadpool$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseThreadpool$MH() { return CloseThreadpool$MH_; }

    static final FunctionDescriptor CreateThreadpoolCleanupGroup$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor CreateThreadpoolCleanupGroup$FUNC() { return CreateThreadpoolCleanupGroup$FUNC_; }

    static final MethodHandle CreateThreadpoolCleanupGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateThreadpoolCleanupGroup",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        CreateThreadpoolCleanupGroup$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateThreadpoolCleanupGroup$MH() { return CreateThreadpoolCleanupGroup$MH_; }

    static final FunctionDescriptor CloseThreadpoolCleanupGroupMembers$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseThreadpoolCleanupGroupMembers$FUNC() { return CloseThreadpoolCleanupGroupMembers$FUNC_; }

    static final MethodHandle CloseThreadpoolCleanupGroupMembers$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseThreadpoolCleanupGroupMembers",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
        CloseThreadpoolCleanupGroupMembers$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseThreadpoolCleanupGroupMembers$MH() { return CloseThreadpoolCleanupGroupMembers$MH_; }

    static final FunctionDescriptor CloseThreadpoolCleanupGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseThreadpoolCleanupGroup$FUNC() { return CloseThreadpoolCleanupGroup$FUNC_; }

    static final MethodHandle CloseThreadpoolCleanupGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseThreadpoolCleanupGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CloseThreadpoolCleanupGroup$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseThreadpoolCleanupGroup$MH() { return CloseThreadpoolCleanupGroup$MH_; }

    static final FunctionDescriptor SetEventWhenCallbackReturns$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetEventWhenCallbackReturns$FUNC() { return SetEventWhenCallbackReturns$FUNC_; }

    static final MethodHandle SetEventWhenCallbackReturns$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetEventWhenCallbackReturns",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        SetEventWhenCallbackReturns$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetEventWhenCallbackReturns$MH() { return SetEventWhenCallbackReturns$MH_; }

    static final FunctionDescriptor ReleaseSemaphoreWhenCallbackReturns$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReleaseSemaphoreWhenCallbackReturns$FUNC() { return ReleaseSemaphoreWhenCallbackReturns$FUNC_; }

    static final MethodHandle ReleaseSemaphoreWhenCallbackReturns$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReleaseSemaphoreWhenCallbackReturns",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        ReleaseSemaphoreWhenCallbackReturns$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReleaseSemaphoreWhenCallbackReturns$MH() { return ReleaseSemaphoreWhenCallbackReturns$MH_; }

    static final FunctionDescriptor ReleaseMutexWhenCallbackReturns$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReleaseMutexWhenCallbackReturns$FUNC() { return ReleaseMutexWhenCallbackReturns$FUNC_; }

    static final MethodHandle ReleaseMutexWhenCallbackReturns$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReleaseMutexWhenCallbackReturns",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ReleaseMutexWhenCallbackReturns$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReleaseMutexWhenCallbackReturns$MH() { return ReleaseMutexWhenCallbackReturns$MH_; }

    static final FunctionDescriptor LeaveCriticalSectionWhenCallbackReturns$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LeaveCriticalSectionWhenCallbackReturns$FUNC() { return LeaveCriticalSectionWhenCallbackReturns$FUNC_; }

    static final MethodHandle LeaveCriticalSectionWhenCallbackReturns$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LeaveCriticalSectionWhenCallbackReturns",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        LeaveCriticalSectionWhenCallbackReturns$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LeaveCriticalSectionWhenCallbackReturns$MH() { return LeaveCriticalSectionWhenCallbackReturns$MH_; }

    static final FunctionDescriptor FreeLibraryWhenCallbackReturns$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FreeLibraryWhenCallbackReturns$FUNC() { return FreeLibraryWhenCallbackReturns$FUNC_; }

    static final MethodHandle FreeLibraryWhenCallbackReturns$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeLibraryWhenCallbackReturns",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FreeLibraryWhenCallbackReturns$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FreeLibraryWhenCallbackReturns$MH() { return FreeLibraryWhenCallbackReturns$MH_; }

    static final FunctionDescriptor CallbackMayRunLong$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallbackMayRunLong$FUNC() { return CallbackMayRunLong$FUNC_; }

    static final MethodHandle CallbackMayRunLong$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CallbackMayRunLong",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CallbackMayRunLong$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CallbackMayRunLong$MH() { return CallbackMayRunLong$MH_; }

    static final FunctionDescriptor DisassociateCurrentThreadFromCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DisassociateCurrentThreadFromCallback$FUNC() { return DisassociateCurrentThreadFromCallback$FUNC_; }

    static final MethodHandle DisassociateCurrentThreadFromCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DisassociateCurrentThreadFromCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        DisassociateCurrentThreadFromCallback$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DisassociateCurrentThreadFromCallback$MH() { return DisassociateCurrentThreadFromCallback$MH_; }

    static final FunctionDescriptor TrySubmitThreadpoolCallback$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TrySubmitThreadpoolCallback$FUNC() { return TrySubmitThreadpoolCallback$FUNC_; }

    static final MethodHandle TrySubmitThreadpoolCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TrySubmitThreadpoolCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        TrySubmitThreadpoolCallback$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TrySubmitThreadpoolCallback$MH() { return TrySubmitThreadpoolCallback$MH_; }

    static final FunctionDescriptor TrySubmitThreadpoolCallback$pfns$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TrySubmitThreadpoolCallback$pfns$FUNC() { return TrySubmitThreadpoolCallback$pfns$FUNC_; }

    static final FunctionDescriptor CreateThreadpoolWork$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateThreadpoolWork$FUNC() { return CreateThreadpoolWork$FUNC_; }

    static final MethodHandle CreateThreadpoolWork$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateThreadpoolWork",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateThreadpoolWork$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateThreadpoolWork$MH() { return CreateThreadpoolWork$MH_; }

    static final FunctionDescriptor CreateThreadpoolWork$pfnwk$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateThreadpoolWork$pfnwk$FUNC() { return CreateThreadpoolWork$pfnwk$FUNC_; }

    static final FunctionDescriptor SubmitThreadpoolWork$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SubmitThreadpoolWork$FUNC() { return SubmitThreadpoolWork$FUNC_; }

    static final MethodHandle SubmitThreadpoolWork$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SubmitThreadpoolWork",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        SubmitThreadpoolWork$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SubmitThreadpoolWork$MH() { return SubmitThreadpoolWork$MH_; }

    static final FunctionDescriptor WaitForThreadpoolWorkCallbacks$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitForThreadpoolWorkCallbacks$FUNC() { return WaitForThreadpoolWorkCallbacks$FUNC_; }

    static final MethodHandle WaitForThreadpoolWorkCallbacks$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitForThreadpoolWorkCallbacks",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        WaitForThreadpoolWorkCallbacks$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitForThreadpoolWorkCallbacks$MH() { return WaitForThreadpoolWorkCallbacks$MH_; }

    static final FunctionDescriptor CloseThreadpoolWork$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseThreadpoolWork$FUNC() { return CloseThreadpoolWork$FUNC_; }

    static final MethodHandle CloseThreadpoolWork$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseThreadpoolWork",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CloseThreadpoolWork$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseThreadpoolWork$MH() { return CloseThreadpoolWork$MH_; }

    static final FunctionDescriptor CreateThreadpoolTimer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateThreadpoolTimer$FUNC() { return CreateThreadpoolTimer$FUNC_; }

    static final MethodHandle CreateThreadpoolTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateThreadpoolTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateThreadpoolTimer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateThreadpoolTimer$MH() { return CreateThreadpoolTimer$MH_; }

    static final FunctionDescriptor CreateThreadpoolTimer$pfnti$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateThreadpoolTimer$pfnti$FUNC() { return CreateThreadpoolTimer$pfnti$FUNC_; }

    static final FunctionDescriptor SetThreadpoolTimer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolTimer$FUNC() { return SetThreadpoolTimer$FUNC_; }

    static final MethodHandle SetThreadpoolTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)V",
        SetThreadpoolTimer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolTimer$MH() { return SetThreadpoolTimer$MH_; }

    static final FunctionDescriptor IsThreadpoolTimerSet$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsThreadpoolTimerSet$FUNC() { return IsThreadpoolTimerSet$FUNC_; }

    static final MethodHandle IsThreadpoolTimerSet$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsThreadpoolTimerSet",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsThreadpoolTimerSet$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsThreadpoolTimerSet$MH() { return IsThreadpoolTimerSet$MH_; }

    static final FunctionDescriptor WaitForThreadpoolTimerCallbacks$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitForThreadpoolTimerCallbacks$FUNC() { return WaitForThreadpoolTimerCallbacks$FUNC_; }

    static final MethodHandle WaitForThreadpoolTimerCallbacks$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitForThreadpoolTimerCallbacks",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        WaitForThreadpoolTimerCallbacks$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitForThreadpoolTimerCallbacks$MH() { return WaitForThreadpoolTimerCallbacks$MH_; }

    static final FunctionDescriptor CloseThreadpoolTimer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseThreadpoolTimer$FUNC() { return CloseThreadpoolTimer$FUNC_; }

    static final MethodHandle CloseThreadpoolTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseThreadpoolTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CloseThreadpoolTimer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseThreadpoolTimer$MH() { return CloseThreadpoolTimer$MH_; }

    static final FunctionDescriptor CreateThreadpoolWait$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateThreadpoolWait$FUNC() { return CreateThreadpoolWait$FUNC_; }

    static final MethodHandle CreateThreadpoolWait$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateThreadpoolWait",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateThreadpoolWait$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateThreadpoolWait$MH() { return CreateThreadpoolWait$MH_; }

    static final FunctionDescriptor CreateThreadpoolWait$pfnwa$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateThreadpoolWait$pfnwa$FUNC() { return CreateThreadpoolWait$pfnwa$FUNC_; }

    static final FunctionDescriptor SetThreadpoolWait$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolWait$FUNC() { return SetThreadpoolWait$FUNC_; }

    static final MethodHandle SetThreadpoolWait$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolWait",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        SetThreadpoolWait$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolWait$MH() { return SetThreadpoolWait$MH_; }

    static final FunctionDescriptor WaitForThreadpoolWaitCallbacks$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitForThreadpoolWaitCallbacks$FUNC() { return WaitForThreadpoolWaitCallbacks$FUNC_; }

    static final MethodHandle WaitForThreadpoolWaitCallbacks$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitForThreadpoolWaitCallbacks",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        WaitForThreadpoolWaitCallbacks$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitForThreadpoolWaitCallbacks$MH() { return WaitForThreadpoolWaitCallbacks$MH_; }

    static final FunctionDescriptor CloseThreadpoolWait$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseThreadpoolWait$FUNC() { return CloseThreadpoolWait$FUNC_; }

    static final MethodHandle CloseThreadpoolWait$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseThreadpoolWait",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CloseThreadpoolWait$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseThreadpoolWait$MH() { return CloseThreadpoolWait$MH_; }

    static final FunctionDescriptor CreateThreadpoolIo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateThreadpoolIo$FUNC() { return CreateThreadpoolIo$FUNC_; }

    static final MethodHandle CreateThreadpoolIo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateThreadpoolIo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateThreadpoolIo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateThreadpoolIo$MH() { return CreateThreadpoolIo$MH_; }

    static final FunctionDescriptor CreateThreadpoolIo$pfnio$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateThreadpoolIo$pfnio$FUNC() { return CreateThreadpoolIo$pfnio$FUNC_; }

    static final FunctionDescriptor StartThreadpoolIo$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor StartThreadpoolIo$FUNC() { return StartThreadpoolIo$FUNC_; }

    static final MethodHandle StartThreadpoolIo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StartThreadpoolIo",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        StartThreadpoolIo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle StartThreadpoolIo$MH() { return StartThreadpoolIo$MH_; }

    static final FunctionDescriptor CancelThreadpoolIo$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CancelThreadpoolIo$FUNC() { return CancelThreadpoolIo$FUNC_; }

    static final MethodHandle CancelThreadpoolIo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CancelThreadpoolIo",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CancelThreadpoolIo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CancelThreadpoolIo$MH() { return CancelThreadpoolIo$MH_; }

    static final FunctionDescriptor WaitForThreadpoolIoCallbacks$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitForThreadpoolIoCallbacks$FUNC() { return WaitForThreadpoolIoCallbacks$FUNC_; }

    static final MethodHandle WaitForThreadpoolIoCallbacks$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitForThreadpoolIoCallbacks",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        WaitForThreadpoolIoCallbacks$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitForThreadpoolIoCallbacks$MH() { return WaitForThreadpoolIoCallbacks$MH_; }

    static final FunctionDescriptor CloseThreadpoolIo$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseThreadpoolIo$FUNC() { return CloseThreadpoolIo$FUNC_; }

    static final MethodHandle CloseThreadpoolIo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseThreadpoolIo",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CloseThreadpoolIo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseThreadpoolIo$MH() { return CloseThreadpoolIo$MH_; }

    static final FunctionDescriptor SetThreadpoolTimerEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolTimerEx$FUNC() { return SetThreadpoolTimerEx$FUNC_; }

    static final MethodHandle SetThreadpoolTimerEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolTimerEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetThreadpoolTimerEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolTimerEx$MH() { return SetThreadpoolTimerEx$MH_; }

    static final FunctionDescriptor SetThreadpoolWaitEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolWaitEx$FUNC() { return SetThreadpoolWaitEx$FUNC_; }

    static final MethodHandle SetThreadpoolWaitEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolWaitEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetThreadpoolWaitEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolWaitEx$MH() { return SetThreadpoolWaitEx$MH_; }

    static final FunctionDescriptor IsProcessInJob$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsProcessInJob$FUNC() { return IsProcessInJob$FUNC_; }

    static final MethodHandle IsProcessInJob$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsProcessInJob",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IsProcessInJob$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsProcessInJob$MH() { return IsProcessInJob$MH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxIops"),
        C_LONGLONG.withName("MaxBandwidth"),
        C_LONGLONG.withName("ReservationIops"),
        C_POINTER.withName("VolumeName"),
        C_INT.withName("BaseIoSize"),
        C_INT.withName("ControlFlags")
    ).withName("JOBOBJECT_IO_RATE_CONTROL_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$struct$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxBandwidth$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxBandwidth"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$MaxBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ReservationIops$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ReservationIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ReservationIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ReservationIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationIops"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ReservationIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ReservationIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$VolumeName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$VolumeName$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$VolumeName$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$VolumeName$VH_ = MemoryHandles.asAddressVarHandle(JOBOBJECT_IO_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeName")));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$VolumeName$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$VolumeName$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$BaseIoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$BaseIoSize$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$BaseIoSize$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$BaseIoSize$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseIoSize"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$BaseIoSize$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$BaseIoSize$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ControlFlags$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    public static java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ControlFlags$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION$ControlFlags$VH_; }

    static final FunctionDescriptor CreateJobObjectW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateJobObjectW$FUNC() { return CreateJobObjectW$FUNC_; }

    static final MethodHandle CreateJobObjectW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateJobObjectW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateJobObjectW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateJobObjectW$MH() { return CreateJobObjectW$MH_; }

    static final FunctionDescriptor FreeMemoryJobObject$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FreeMemoryJobObject$FUNC() { return FreeMemoryJobObject$FUNC_; }

    static final MethodHandle FreeMemoryJobObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeMemoryJobObject",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FreeMemoryJobObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FreeMemoryJobObject$MH() { return FreeMemoryJobObject$MH_; }

    static final FunctionDescriptor OpenJobObjectW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenJobObjectW$FUNC() { return OpenJobObjectW$FUNC_; }

    static final MethodHandle OpenJobObjectW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenJobObjectW",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenJobObjectW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenJobObjectW$MH() { return OpenJobObjectW$MH_; }

    static final FunctionDescriptor AssignProcessToJobObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AssignProcessToJobObject$FUNC() { return AssignProcessToJobObject$FUNC_; }

    static final MethodHandle AssignProcessToJobObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AssignProcessToJobObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AssignProcessToJobObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AssignProcessToJobObject$MH() { return AssignProcessToJobObject$MH_; }

    static final FunctionDescriptor TerminateJobObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor TerminateJobObject$FUNC() { return TerminateJobObject$FUNC_; }

    static final MethodHandle TerminateJobObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TerminateJobObject",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        TerminateJobObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TerminateJobObject$MH() { return TerminateJobObject$MH_; }

    static final FunctionDescriptor SetInformationJobObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetInformationJobObject$FUNC() { return SetInformationJobObject$FUNC_; }

    static final MethodHandle SetInformationJobObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetInformationJobObject",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetInformationJobObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetInformationJobObject$MH() { return SetInformationJobObject$MH_; }

    static final FunctionDescriptor SetIoRateControlInformationJobObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetIoRateControlInformationJobObject$FUNC() { return SetIoRateControlInformationJobObject$FUNC_; }

    static final MethodHandle SetIoRateControlInformationJobObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetIoRateControlInformationJobObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetIoRateControlInformationJobObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetIoRateControlInformationJobObject$MH() { return SetIoRateControlInformationJobObject$MH_; }

    static final FunctionDescriptor QueryInformationJobObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryInformationJobObject$FUNC() { return QueryInformationJobObject$FUNC_; }

    static final MethodHandle QueryInformationJobObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryInformationJobObject",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        QueryInformationJobObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryInformationJobObject$MH() { return QueryInformationJobObject$MH_; }

    static final FunctionDescriptor QueryIoRateControlInformationJobObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryIoRateControlInformationJobObject$FUNC() { return QueryIoRateControlInformationJobObject$FUNC_; }

    static final MethodHandle QueryIoRateControlInformationJobObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryIoRateControlInformationJobObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryIoRateControlInformationJobObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryIoRateControlInformationJobObject$MH() { return QueryIoRateControlInformationJobObject$MH_; }

    static final FunctionDescriptor Wow64DisableWow64FsRedirection$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor Wow64DisableWow64FsRedirection$FUNC() { return Wow64DisableWow64FsRedirection$FUNC_; }

    static final MethodHandle Wow64DisableWow64FsRedirection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Wow64DisableWow64FsRedirection",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        Wow64DisableWow64FsRedirection$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Wow64DisableWow64FsRedirection$MH() { return Wow64DisableWow64FsRedirection$MH_; }

    static final FunctionDescriptor Wow64RevertWow64FsRedirection$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor Wow64RevertWow64FsRedirection$FUNC() { return Wow64RevertWow64FsRedirection$FUNC_; }

    static final MethodHandle Wow64RevertWow64FsRedirection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Wow64RevertWow64FsRedirection",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        Wow64RevertWow64FsRedirection$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Wow64RevertWow64FsRedirection$MH() { return Wow64RevertWow64FsRedirection$MH_; }

    static final FunctionDescriptor IsWow64Process$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsWow64Process$FUNC() { return IsWow64Process$FUNC_; }

    static final MethodHandle IsWow64Process$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsWow64Process",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IsWow64Process$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsWow64Process$MH() { return IsWow64Process$MH_; }

    static final FunctionDescriptor GetSystemWow64DirectoryA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemWow64DirectoryA$FUNC() { return GetSystemWow64DirectoryA$FUNC_; }

    static final MethodHandle GetSystemWow64DirectoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemWow64DirectoryA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetSystemWow64DirectoryA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemWow64DirectoryA$MH() { return GetSystemWow64DirectoryA$MH_; }

    static final FunctionDescriptor GetSystemWow64DirectoryW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemWow64DirectoryW$FUNC() { return GetSystemWow64DirectoryW$FUNC_; }

    static final MethodHandle GetSystemWow64DirectoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemWow64DirectoryW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetSystemWow64DirectoryW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemWow64DirectoryW$MH() { return GetSystemWow64DirectoryW$MH_; }

    static final FunctionDescriptor Wow64SetThreadDefaultGuestMachine$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor Wow64SetThreadDefaultGuestMachine$FUNC() { return Wow64SetThreadDefaultGuestMachine$FUNC_; }

    static final MethodHandle Wow64SetThreadDefaultGuestMachine$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Wow64SetThreadDefaultGuestMachine",
        "(S)S",
        Wow64SetThreadDefaultGuestMachine$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Wow64SetThreadDefaultGuestMachine$MH() { return Wow64SetThreadDefaultGuestMachine$MH_; }

    static final FunctionDescriptor IsWow64Process2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsWow64Process2$FUNC() { return IsWow64Process2$FUNC_; }

    static final MethodHandle IsWow64Process2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsWow64Process2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IsWow64Process2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsWow64Process2$MH() { return IsWow64Process2$MH_; }

}

