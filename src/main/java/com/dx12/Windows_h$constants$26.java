// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$26 extends Windows_h$constants$25 {
    Windows_h$constants$26() {}
    static final MemoryLayout tagEXTLOGPEN32$elpHatch$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGPEN32$elpHatch$LAYOUT() { return tagEXTLOGPEN32$elpHatch$LAYOUT_; }

    static final VarHandle tagEXTLOGPEN32$elpHatch$VH_ = tagEXTLOGPEN32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elpHatch"));
    public static java.lang.invoke.VarHandle tagEXTLOGPEN32$elpHatch$VH() { return tagEXTLOGPEN32$elpHatch$VH_; }

    static final MemoryLayout tagEXTLOGPEN32$elpNumEntries$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGPEN32$elpNumEntries$LAYOUT() { return tagEXTLOGPEN32$elpNumEntries$LAYOUT_; }

    static final VarHandle tagEXTLOGPEN32$elpNumEntries$VH_ = tagEXTLOGPEN32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elpNumEntries"));
    public static java.lang.invoke.VarHandle tagEXTLOGPEN32$elpNumEntries$VH() { return tagEXTLOGPEN32$elpNumEntries$VH_; }

    static final MemoryLayout tagPALETTEENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("peRed"),
        C_BOOL.withName("peGreen"),
        C_BOOL.withName("peBlue"),
        C_BOOL.withName("peFlags")
    ).withName("tagPALETTEENTRY");
    public static jdk.incubator.foreign.MemoryLayout tagPALETTEENTRY$struct$LAYOUT() { return tagPALETTEENTRY$struct$LAYOUT_; }

    static final MemoryLayout tagPALETTEENTRY$peRed$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPALETTEENTRY$peRed$LAYOUT() { return tagPALETTEENTRY$peRed$LAYOUT_; }

    static final VarHandle tagPALETTEENTRY$peRed$VH_ = tagPALETTEENTRY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("peRed"));
    public static java.lang.invoke.VarHandle tagPALETTEENTRY$peRed$VH() { return tagPALETTEENTRY$peRed$VH_; }

    static final MemoryLayout tagPALETTEENTRY$peGreen$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPALETTEENTRY$peGreen$LAYOUT() { return tagPALETTEENTRY$peGreen$LAYOUT_; }

    static final VarHandle tagPALETTEENTRY$peGreen$VH_ = tagPALETTEENTRY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("peGreen"));
    public static java.lang.invoke.VarHandle tagPALETTEENTRY$peGreen$VH() { return tagPALETTEENTRY$peGreen$VH_; }

    static final MemoryLayout tagPALETTEENTRY$peBlue$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPALETTEENTRY$peBlue$LAYOUT() { return tagPALETTEENTRY$peBlue$LAYOUT_; }

    static final VarHandle tagPALETTEENTRY$peBlue$VH_ = tagPALETTEENTRY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("peBlue"));
    public static java.lang.invoke.VarHandle tagPALETTEENTRY$peBlue$VH() { return tagPALETTEENTRY$peBlue$VH_; }

    static final MemoryLayout tagPALETTEENTRY$peFlags$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPALETTEENTRY$peFlags$LAYOUT() { return tagPALETTEENTRY$peFlags$LAYOUT_; }

    static final VarHandle tagPALETTEENTRY$peFlags$VH_ = tagPALETTEENTRY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("peFlags"));
    public static java.lang.invoke.VarHandle tagPALETTEENTRY$peFlags$VH() { return tagPALETTEENTRY$peFlags$VH_; }

    static final MemoryLayout tagLOGPALETTE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("palVersion"),
        C_SHORT.withName("palNumEntries"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_BOOL.withName("peRed"),
            C_BOOL.withName("peGreen"),
            C_BOOL.withName("peBlue"),
            C_BOOL.withName("peFlags")
        ).withName("tagPALETTEENTRY")).withName("palPalEntry")
    ).withName("tagLOGPALETTE");
    public static jdk.incubator.foreign.MemoryLayout tagLOGPALETTE$struct$LAYOUT() { return tagLOGPALETTE$struct$LAYOUT_; }

    static final MemoryLayout tagLOGPALETTE$palVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGPALETTE$palVersion$LAYOUT() { return tagLOGPALETTE$palVersion$LAYOUT_; }

    static final VarHandle tagLOGPALETTE$palVersion$VH_ = tagLOGPALETTE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("palVersion"));
    public static java.lang.invoke.VarHandle tagLOGPALETTE$palVersion$VH() { return tagLOGPALETTE$palVersion$VH_; }

    static final MemoryLayout tagLOGPALETTE$palNumEntries$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGPALETTE$palNumEntries$LAYOUT() { return tagLOGPALETTE$palNumEntries$LAYOUT_; }

    static final VarHandle tagLOGPALETTE$palNumEntries$VH_ = tagLOGPALETTE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("palNumEntries"));
    public static java.lang.invoke.VarHandle tagLOGPALETTE$palNumEntries$VH() { return tagLOGPALETTE$palNumEntries$VH_; }

    static final MemoryLayout tagLOGFONTA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("lfHeight"),
        C_INT.withName("lfWidth"),
        C_INT.withName("lfEscapement"),
        C_INT.withName("lfOrientation"),
        C_INT.withName("lfWeight"),
        C_BOOL.withName("lfItalic"),
        C_BOOL.withName("lfUnderline"),
        C_BOOL.withName("lfStrikeOut"),
        C_BOOL.withName("lfCharSet"),
        C_BOOL.withName("lfOutPrecision"),
        C_BOOL.withName("lfClipPrecision"),
        C_BOOL.withName("lfQuality"),
        C_BOOL.withName("lfPitchAndFamily"),
        MemoryLayout.ofSequence(32, C_BOOL).withName("lfFaceName")
    ).withName("tagLOGFONTA");
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$struct$LAYOUT() { return tagLOGFONTA$struct$LAYOUT_; }

    static final MemoryLayout tagLOGFONTA$lfHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfHeight$LAYOUT() { return tagLOGFONTA$lfHeight$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfHeight$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lfHeight"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfHeight$VH() { return tagLOGFONTA$lfHeight$VH_; }

    static final MemoryLayout tagLOGFONTA$lfWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfWidth$LAYOUT() { return tagLOGFONTA$lfWidth$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfWidth$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lfWidth"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfWidth$VH() { return tagLOGFONTA$lfWidth$VH_; }

    static final MemoryLayout tagLOGFONTA$lfEscapement$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfEscapement$LAYOUT() { return tagLOGFONTA$lfEscapement$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfEscapement$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lfEscapement"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfEscapement$VH() { return tagLOGFONTA$lfEscapement$VH_; }

    static final MemoryLayout tagLOGFONTA$lfOrientation$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfOrientation$LAYOUT() { return tagLOGFONTA$lfOrientation$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfOrientation$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lfOrientation"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfOrientation$VH() { return tagLOGFONTA$lfOrientation$VH_; }

    static final MemoryLayout tagLOGFONTA$lfWeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfWeight$LAYOUT() { return tagLOGFONTA$lfWeight$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfWeight$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lfWeight"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfWeight$VH() { return tagLOGFONTA$lfWeight$VH_; }

    static final MemoryLayout tagLOGFONTA$lfItalic$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfItalic$LAYOUT() { return tagLOGFONTA$lfItalic$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfItalic$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfItalic"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfItalic$VH() { return tagLOGFONTA$lfItalic$VH_; }

    static final MemoryLayout tagLOGFONTA$lfUnderline$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfUnderline$LAYOUT() { return tagLOGFONTA$lfUnderline$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfUnderline$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfUnderline"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfUnderline$VH() { return tagLOGFONTA$lfUnderline$VH_; }

    static final MemoryLayout tagLOGFONTA$lfStrikeOut$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfStrikeOut$LAYOUT() { return tagLOGFONTA$lfStrikeOut$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfStrikeOut$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfStrikeOut"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfStrikeOut$VH() { return tagLOGFONTA$lfStrikeOut$VH_; }

    static final MemoryLayout tagLOGFONTA$lfCharSet$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfCharSet$LAYOUT() { return tagLOGFONTA$lfCharSet$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfCharSet$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfCharSet"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfCharSet$VH() { return tagLOGFONTA$lfCharSet$VH_; }

    static final MemoryLayout tagLOGFONTA$lfOutPrecision$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfOutPrecision$LAYOUT() { return tagLOGFONTA$lfOutPrecision$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfOutPrecision$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfOutPrecision"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfOutPrecision$VH() { return tagLOGFONTA$lfOutPrecision$VH_; }

    static final MemoryLayout tagLOGFONTA$lfClipPrecision$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfClipPrecision$LAYOUT() { return tagLOGFONTA$lfClipPrecision$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfClipPrecision$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfClipPrecision"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfClipPrecision$VH() { return tagLOGFONTA$lfClipPrecision$VH_; }

    static final MemoryLayout tagLOGFONTA$lfQuality$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfQuality$LAYOUT() { return tagLOGFONTA$lfQuality$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfQuality$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfQuality"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfQuality$VH() { return tagLOGFONTA$lfQuality$VH_; }

    static final MemoryLayout tagLOGFONTA$lfPitchAndFamily$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTA$lfPitchAndFamily$LAYOUT() { return tagLOGFONTA$lfPitchAndFamily$LAYOUT_; }

    static final VarHandle tagLOGFONTA$lfPitchAndFamily$VH_ = tagLOGFONTA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfPitchAndFamily"));
    public static java.lang.invoke.VarHandle tagLOGFONTA$lfPitchAndFamily$VH() { return tagLOGFONTA$lfPitchAndFamily$VH_; }

    static final MemoryLayout tagLOGFONTW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("lfHeight"),
        C_INT.withName("lfWidth"),
        C_INT.withName("lfEscapement"),
        C_INT.withName("lfOrientation"),
        C_INT.withName("lfWeight"),
        C_BOOL.withName("lfItalic"),
        C_BOOL.withName("lfUnderline"),
        C_BOOL.withName("lfStrikeOut"),
        C_BOOL.withName("lfCharSet"),
        C_BOOL.withName("lfOutPrecision"),
        C_BOOL.withName("lfClipPrecision"),
        C_BOOL.withName("lfQuality"),
        C_BOOL.withName("lfPitchAndFamily"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
    ).withName("tagLOGFONTW");
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$struct$LAYOUT() { return tagLOGFONTW$struct$LAYOUT_; }

    static final MemoryLayout tagLOGFONTW$lfHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfHeight$LAYOUT() { return tagLOGFONTW$lfHeight$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfHeight$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lfHeight"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfHeight$VH() { return tagLOGFONTW$lfHeight$VH_; }

    static final MemoryLayout tagLOGFONTW$lfWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfWidth$LAYOUT() { return tagLOGFONTW$lfWidth$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfWidth$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lfWidth"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfWidth$VH() { return tagLOGFONTW$lfWidth$VH_; }

    static final MemoryLayout tagLOGFONTW$lfEscapement$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfEscapement$LAYOUT() { return tagLOGFONTW$lfEscapement$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfEscapement$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lfEscapement"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfEscapement$VH() { return tagLOGFONTW$lfEscapement$VH_; }

    static final MemoryLayout tagLOGFONTW$lfOrientation$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfOrientation$LAYOUT() { return tagLOGFONTW$lfOrientation$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfOrientation$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lfOrientation"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfOrientation$VH() { return tagLOGFONTW$lfOrientation$VH_; }

    static final MemoryLayout tagLOGFONTW$lfWeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfWeight$LAYOUT() { return tagLOGFONTW$lfWeight$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfWeight$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lfWeight"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfWeight$VH() { return tagLOGFONTW$lfWeight$VH_; }

    static final MemoryLayout tagLOGFONTW$lfItalic$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfItalic$LAYOUT() { return tagLOGFONTW$lfItalic$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfItalic$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfItalic"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfItalic$VH() { return tagLOGFONTW$lfItalic$VH_; }

    static final MemoryLayout tagLOGFONTW$lfUnderline$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfUnderline$LAYOUT() { return tagLOGFONTW$lfUnderline$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfUnderline$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfUnderline"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfUnderline$VH() { return tagLOGFONTW$lfUnderline$VH_; }

    static final MemoryLayout tagLOGFONTW$lfStrikeOut$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfStrikeOut$LAYOUT() { return tagLOGFONTW$lfStrikeOut$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfStrikeOut$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfStrikeOut"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfStrikeOut$VH() { return tagLOGFONTW$lfStrikeOut$VH_; }

    static final MemoryLayout tagLOGFONTW$lfCharSet$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfCharSet$LAYOUT() { return tagLOGFONTW$lfCharSet$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfCharSet$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfCharSet"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfCharSet$VH() { return tagLOGFONTW$lfCharSet$VH_; }

    static final MemoryLayout tagLOGFONTW$lfOutPrecision$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfOutPrecision$LAYOUT() { return tagLOGFONTW$lfOutPrecision$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfOutPrecision$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfOutPrecision"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfOutPrecision$VH() { return tagLOGFONTW$lfOutPrecision$VH_; }

    static final MemoryLayout tagLOGFONTW$lfClipPrecision$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfClipPrecision$LAYOUT() { return tagLOGFONTW$lfClipPrecision$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfClipPrecision$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfClipPrecision"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfClipPrecision$VH() { return tagLOGFONTW$lfClipPrecision$VH_; }

    static final MemoryLayout tagLOGFONTW$lfQuality$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfQuality$LAYOUT() { return tagLOGFONTW$lfQuality$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfQuality$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfQuality"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfQuality$VH() { return tagLOGFONTW$lfQuality$VH_; }

    static final MemoryLayout tagLOGFONTW$lfPitchAndFamily$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagLOGFONTW$lfPitchAndFamily$LAYOUT() { return tagLOGFONTW$lfPitchAndFamily$LAYOUT_; }

    static final VarHandle tagLOGFONTW$lfPitchAndFamily$VH_ = tagLOGFONTW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("lfPitchAndFamily"));
    public static java.lang.invoke.VarHandle tagLOGFONTW$lfPitchAndFamily$VH() { return tagLOGFONTW$lfPitchAndFamily$VH_; }

    static final MemoryLayout tagENUMLOGFONTA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_BOOL).withName("lfFaceName")
        ).withName("elfLogFont"),
        MemoryLayout.ofSequence(64, C_BOOL).withName("elfFullName"),
        MemoryLayout.ofSequence(32, C_BOOL).withName("elfStyle")
    ).withName("tagENUMLOGFONTA");
    public static jdk.incubator.foreign.MemoryLayout tagENUMLOGFONTA$struct$LAYOUT() { return tagENUMLOGFONTA$struct$LAYOUT_; }

    static final MemoryLayout tagENUMLOGFONTW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
        ).withName("elfLogFont"),
        MemoryLayout.ofSequence(64, C_SHORT).withName("elfFullName"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("elfStyle")
    ).withName("tagENUMLOGFONTW");
    public static jdk.incubator.foreign.MemoryLayout tagENUMLOGFONTW$struct$LAYOUT() { return tagENUMLOGFONTW$struct$LAYOUT_; }

    static final MemoryLayout tagENUMLOGFONTEXA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_BOOL).withName("lfFaceName")
        ).withName("elfLogFont"),
        MemoryLayout.ofSequence(64, C_BOOL).withName("elfFullName"),
        MemoryLayout.ofSequence(32, C_BOOL).withName("elfStyle"),
        MemoryLayout.ofSequence(32, C_BOOL).withName("elfScript")
    ).withName("tagENUMLOGFONTEXA");
    public static jdk.incubator.foreign.MemoryLayout tagENUMLOGFONTEXA$struct$LAYOUT() { return tagENUMLOGFONTEXA$struct$LAYOUT_; }

    static final MemoryLayout tagENUMLOGFONTEXW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
        ).withName("elfLogFont"),
        MemoryLayout.ofSequence(64, C_SHORT).withName("elfFullName"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("elfStyle"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("elfScript")
    ).withName("tagENUMLOGFONTEXW");
    public static jdk.incubator.foreign.MemoryLayout tagENUMLOGFONTEXW$struct$LAYOUT() { return tagENUMLOGFONTEXW$struct$LAYOUT_; }

    static final MemoryLayout tagPANOSE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("bFamilyType"),
        C_BOOL.withName("bSerifStyle"),
        C_BOOL.withName("bWeight"),
        C_BOOL.withName("bProportion"),
        C_BOOL.withName("bContrast"),
        C_BOOL.withName("bStrokeVariation"),
        C_BOOL.withName("bArmStyle"),
        C_BOOL.withName("bLetterform"),
        C_BOOL.withName("bMidline"),
        C_BOOL.withName("bXHeight")
    ).withName("tagPANOSE");
    public static jdk.incubator.foreign.MemoryLayout tagPANOSE$struct$LAYOUT() { return tagPANOSE$struct$LAYOUT_; }

    static final MemoryLayout tagPANOSE$bFamilyType$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPANOSE$bFamilyType$LAYOUT() { return tagPANOSE$bFamilyType$LAYOUT_; }

    static final VarHandle tagPANOSE$bFamilyType$VH_ = tagPANOSE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bFamilyType"));
    public static java.lang.invoke.VarHandle tagPANOSE$bFamilyType$VH() { return tagPANOSE$bFamilyType$VH_; }

    static final MemoryLayout tagPANOSE$bSerifStyle$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPANOSE$bSerifStyle$LAYOUT() { return tagPANOSE$bSerifStyle$LAYOUT_; }

    static final VarHandle tagPANOSE$bSerifStyle$VH_ = tagPANOSE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bSerifStyle"));
    public static java.lang.invoke.VarHandle tagPANOSE$bSerifStyle$VH() { return tagPANOSE$bSerifStyle$VH_; }

    static final MemoryLayout tagPANOSE$bWeight$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPANOSE$bWeight$LAYOUT() { return tagPANOSE$bWeight$LAYOUT_; }

    static final VarHandle tagPANOSE$bWeight$VH_ = tagPANOSE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bWeight"));
    public static java.lang.invoke.VarHandle tagPANOSE$bWeight$VH() { return tagPANOSE$bWeight$VH_; }

    static final MemoryLayout tagPANOSE$bProportion$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPANOSE$bProportion$LAYOUT() { return tagPANOSE$bProportion$LAYOUT_; }

    static final VarHandle tagPANOSE$bProportion$VH_ = tagPANOSE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bProportion"));
    public static java.lang.invoke.VarHandle tagPANOSE$bProportion$VH() { return tagPANOSE$bProportion$VH_; }

    static final MemoryLayout tagPANOSE$bContrast$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPANOSE$bContrast$LAYOUT() { return tagPANOSE$bContrast$LAYOUT_; }

    static final VarHandle tagPANOSE$bContrast$VH_ = tagPANOSE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bContrast"));
    public static java.lang.invoke.VarHandle tagPANOSE$bContrast$VH() { return tagPANOSE$bContrast$VH_; }

    static final MemoryLayout tagPANOSE$bStrokeVariation$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPANOSE$bStrokeVariation$LAYOUT() { return tagPANOSE$bStrokeVariation$LAYOUT_; }

    static final VarHandle tagPANOSE$bStrokeVariation$VH_ = tagPANOSE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bStrokeVariation"));
    public static java.lang.invoke.VarHandle tagPANOSE$bStrokeVariation$VH() { return tagPANOSE$bStrokeVariation$VH_; }

    static final MemoryLayout tagPANOSE$bArmStyle$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPANOSE$bArmStyle$LAYOUT() { return tagPANOSE$bArmStyle$LAYOUT_; }

    static final VarHandle tagPANOSE$bArmStyle$VH_ = tagPANOSE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bArmStyle"));
    public static java.lang.invoke.VarHandle tagPANOSE$bArmStyle$VH() { return tagPANOSE$bArmStyle$VH_; }

    static final MemoryLayout tagPANOSE$bLetterform$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPANOSE$bLetterform$LAYOUT() { return tagPANOSE$bLetterform$LAYOUT_; }

    static final VarHandle tagPANOSE$bLetterform$VH_ = tagPANOSE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bLetterform"));
    public static java.lang.invoke.VarHandle tagPANOSE$bLetterform$VH() { return tagPANOSE$bLetterform$VH_; }

    static final MemoryLayout tagPANOSE$bMidline$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPANOSE$bMidline$LAYOUT() { return tagPANOSE$bMidline$LAYOUT_; }

    static final VarHandle tagPANOSE$bMidline$VH_ = tagPANOSE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bMidline"));
    public static java.lang.invoke.VarHandle tagPANOSE$bMidline$VH() { return tagPANOSE$bMidline$VH_; }

    static final MemoryLayout tagPANOSE$bXHeight$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPANOSE$bXHeight$LAYOUT() { return tagPANOSE$bXHeight$LAYOUT_; }

    static final VarHandle tagPANOSE$bXHeight$VH_ = tagPANOSE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bXHeight"));
    public static java.lang.invoke.VarHandle tagPANOSE$bXHeight$VH() { return tagPANOSE$bXHeight$VH_; }

    static final MemoryLayout tagEXTLOGFONTA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_BOOL).withName("lfFaceName")
        ).withName("elfLogFont"),
        MemoryLayout.ofSequence(64, C_BOOL).withName("elfFullName"),
        MemoryLayout.ofSequence(32, C_BOOL).withName("elfStyle"),
        C_INT.withName("elfVersion"),
        C_INT.withName("elfStyleSize"),
        C_INT.withName("elfMatch"),
        C_INT.withName("elfReserved"),
        MemoryLayout.ofSequence(4, C_BOOL).withName("elfVendorId"),
        C_INT.withName("elfCulture"),
        MemoryLayout.ofStruct(
            C_BOOL.withName("bFamilyType"),
            C_BOOL.withName("bSerifStyle"),
            C_BOOL.withName("bWeight"),
            C_BOOL.withName("bProportion"),
            C_BOOL.withName("bContrast"),
            C_BOOL.withName("bStrokeVariation"),
            C_BOOL.withName("bArmStyle"),
            C_BOOL.withName("bLetterform"),
            C_BOOL.withName("bMidline"),
            C_BOOL.withName("bXHeight")
        ).withName("elfPanose"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("tagEXTLOGFONTA");
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTA$struct$LAYOUT() { return tagEXTLOGFONTA$struct$LAYOUT_; }

    static final MemoryLayout tagEXTLOGFONTA$elfVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTA$elfVersion$LAYOUT() { return tagEXTLOGFONTA$elfVersion$LAYOUT_; }

    static final VarHandle tagEXTLOGFONTA$elfVersion$VH_ = tagEXTLOGFONTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elfVersion"));
    public static java.lang.invoke.VarHandle tagEXTLOGFONTA$elfVersion$VH() { return tagEXTLOGFONTA$elfVersion$VH_; }

    static final MemoryLayout tagEXTLOGFONTA$elfStyleSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTA$elfStyleSize$LAYOUT() { return tagEXTLOGFONTA$elfStyleSize$LAYOUT_; }

    static final VarHandle tagEXTLOGFONTA$elfStyleSize$VH_ = tagEXTLOGFONTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elfStyleSize"));
    public static java.lang.invoke.VarHandle tagEXTLOGFONTA$elfStyleSize$VH() { return tagEXTLOGFONTA$elfStyleSize$VH_; }

    static final MemoryLayout tagEXTLOGFONTA$elfMatch$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTA$elfMatch$LAYOUT() { return tagEXTLOGFONTA$elfMatch$LAYOUT_; }

    static final VarHandle tagEXTLOGFONTA$elfMatch$VH_ = tagEXTLOGFONTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elfMatch"));
    public static java.lang.invoke.VarHandle tagEXTLOGFONTA$elfMatch$VH() { return tagEXTLOGFONTA$elfMatch$VH_; }

    static final MemoryLayout tagEXTLOGFONTA$elfReserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTA$elfReserved$LAYOUT() { return tagEXTLOGFONTA$elfReserved$LAYOUT_; }

    static final VarHandle tagEXTLOGFONTA$elfReserved$VH_ = tagEXTLOGFONTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elfReserved"));
    public static java.lang.invoke.VarHandle tagEXTLOGFONTA$elfReserved$VH() { return tagEXTLOGFONTA$elfReserved$VH_; }

    static final MemoryLayout tagEXTLOGFONTA$elfCulture$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTA$elfCulture$LAYOUT() { return tagEXTLOGFONTA$elfCulture$LAYOUT_; }

    static final VarHandle tagEXTLOGFONTA$elfCulture$VH_ = tagEXTLOGFONTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elfCulture"));
    public static java.lang.invoke.VarHandle tagEXTLOGFONTA$elfCulture$VH() { return tagEXTLOGFONTA$elfCulture$VH_; }

    static final MemoryLayout tagEXTLOGFONTW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
        ).withName("elfLogFont"),
        MemoryLayout.ofSequence(64, C_SHORT).withName("elfFullName"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("elfStyle"),
        C_INT.withName("elfVersion"),
        C_INT.withName("elfStyleSize"),
        C_INT.withName("elfMatch"),
        C_INT.withName("elfReserved"),
        MemoryLayout.ofSequence(4, C_BOOL).withName("elfVendorId"),
        C_INT.withName("elfCulture"),
        MemoryLayout.ofStruct(
            C_BOOL.withName("bFamilyType"),
            C_BOOL.withName("bSerifStyle"),
            C_BOOL.withName("bWeight"),
            C_BOOL.withName("bProportion"),
            C_BOOL.withName("bContrast"),
            C_BOOL.withName("bStrokeVariation"),
            C_BOOL.withName("bArmStyle"),
            C_BOOL.withName("bLetterform"),
            C_BOOL.withName("bMidline"),
            C_BOOL.withName("bXHeight")
        ).withName("elfPanose"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("tagEXTLOGFONTW");
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTW$struct$LAYOUT() { return tagEXTLOGFONTW$struct$LAYOUT_; }

    static final MemoryLayout tagEXTLOGFONTW$elfVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTW$elfVersion$LAYOUT() { return tagEXTLOGFONTW$elfVersion$LAYOUT_; }

    static final VarHandle tagEXTLOGFONTW$elfVersion$VH_ = tagEXTLOGFONTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elfVersion"));
    public static java.lang.invoke.VarHandle tagEXTLOGFONTW$elfVersion$VH() { return tagEXTLOGFONTW$elfVersion$VH_; }

    static final MemoryLayout tagEXTLOGFONTW$elfStyleSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTW$elfStyleSize$LAYOUT() { return tagEXTLOGFONTW$elfStyleSize$LAYOUT_; }

    static final VarHandle tagEXTLOGFONTW$elfStyleSize$VH_ = tagEXTLOGFONTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elfStyleSize"));
    public static java.lang.invoke.VarHandle tagEXTLOGFONTW$elfStyleSize$VH() { return tagEXTLOGFONTW$elfStyleSize$VH_; }

    static final MemoryLayout tagEXTLOGFONTW$elfMatch$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTW$elfMatch$LAYOUT() { return tagEXTLOGFONTW$elfMatch$LAYOUT_; }

    static final VarHandle tagEXTLOGFONTW$elfMatch$VH_ = tagEXTLOGFONTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elfMatch"));
    public static java.lang.invoke.VarHandle tagEXTLOGFONTW$elfMatch$VH() { return tagEXTLOGFONTW$elfMatch$VH_; }

    static final MemoryLayout tagEXTLOGFONTW$elfReserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTW$elfReserved$LAYOUT() { return tagEXTLOGFONTW$elfReserved$LAYOUT_; }

    static final VarHandle tagEXTLOGFONTW$elfReserved$VH_ = tagEXTLOGFONTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elfReserved"));
    public static java.lang.invoke.VarHandle tagEXTLOGFONTW$elfReserved$VH() { return tagEXTLOGFONTW$elfReserved$VH_; }

    static final MemoryLayout tagEXTLOGFONTW$elfCulture$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagEXTLOGFONTW$elfCulture$LAYOUT() { return tagEXTLOGFONTW$elfCulture$LAYOUT_; }

    static final VarHandle tagEXTLOGFONTW$elfCulture$VH_ = tagEXTLOGFONTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("elfCulture"));
    public static java.lang.invoke.VarHandle tagEXTLOGFONTW$elfCulture$VH() { return tagEXTLOGFONTW$elfCulture$VH_; }

    static final MemoryLayout _devicemodeA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(32, C_BOOL).withName("dmDeviceName"),
        C_SHORT.withName("dmSpecVersion"),
        C_SHORT.withName("dmDriverVersion"),
        C_SHORT.withName("dmSize"),
        C_SHORT.withName("dmDriverExtra"),
        C_INT.withName("dmFields"),
        C_SHORT.withName("dmOrientation"),
        C_SHORT.withName("dmPaperSize"),
        C_SHORT.withName("dmPaperLength"),
        C_SHORT.withName("dmPaperWidth"),
        C_SHORT.withName("dmScale"),
        C_SHORT.withName("dmCopies"),
        C_SHORT.withName("dmDefaultSource"),
        C_SHORT.withName("dmPrintQuality"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("dmPosition"),
        C_INT.withName("dmDisplayOrientation"),
        C_INT.withName("dmDisplayFixedOutput"),
        C_SHORT.withName("dmColor"),
        C_SHORT.withName("dmDuplex"),
        C_SHORT.withName("dmYResolution"),
        C_SHORT.withName("dmTTOption"),
        C_SHORT.withName("dmCollate"),
        MemoryLayout.ofSequence(32, C_BOOL).withName("dmFormName"),
        C_SHORT.withName("dmLogPixels"),
        C_INT.withName("dmBitsPerPel"),
        C_INT.withName("dmPelsWidth"),
        C_INT.withName("dmPelsHeight"),
        C_INT.withName("dmDisplayFlags"),
        C_INT.withName("dmNup"),
        C_INT.withName("dmDisplayFrequency"),
        C_INT.withName("dmICMMethod"),
        C_INT.withName("dmICMIntent"),
        C_INT.withName("dmMediaType"),
        C_INT.withName("dmDitherType"),
        C_INT.withName("dmReserved1"),
        C_INT.withName("dmReserved2"),
        C_INT.withName("dmPanningWidth"),
        C_INT.withName("dmPanningHeight")
    ).withName("_devicemodeA");
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$struct$LAYOUT() { return _devicemodeA$struct$LAYOUT_; }

    static final MemoryLayout _devicemodeA$dmSpecVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmSpecVersion$LAYOUT() { return _devicemodeA$dmSpecVersion$LAYOUT_; }

    static final VarHandle _devicemodeA$dmSpecVersion$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmSpecVersion"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmSpecVersion$VH() { return _devicemodeA$dmSpecVersion$VH_; }

    static final MemoryLayout _devicemodeA$dmDriverVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmDriverVersion$LAYOUT() { return _devicemodeA$dmDriverVersion$LAYOUT_; }

    static final VarHandle _devicemodeA$dmDriverVersion$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmDriverVersion"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmDriverVersion$VH() { return _devicemodeA$dmDriverVersion$VH_; }

    static final MemoryLayout _devicemodeA$dmSize$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmSize$LAYOUT() { return _devicemodeA$dmSize$LAYOUT_; }

    static final VarHandle _devicemodeA$dmSize$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmSize"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmSize$VH() { return _devicemodeA$dmSize$VH_; }

    static final MemoryLayout _devicemodeA$dmDriverExtra$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmDriverExtra$LAYOUT() { return _devicemodeA$dmDriverExtra$LAYOUT_; }

    static final VarHandle _devicemodeA$dmDriverExtra$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmDriverExtra"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmDriverExtra$VH() { return _devicemodeA$dmDriverExtra$VH_; }

    static final MemoryLayout _devicemodeA$dmFields$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmFields$LAYOUT() { return _devicemodeA$dmFields$LAYOUT_; }

    static final VarHandle _devicemodeA$dmFields$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmFields"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmFields$VH() { return _devicemodeA$dmFields$VH_; }

    static final MemoryLayout _devicemodeA$dmOrientation$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmOrientation$LAYOUT() { return _devicemodeA$dmOrientation$LAYOUT_; }

    static final VarHandle _devicemodeA$dmOrientation$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmOrientation"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmOrientation$VH() { return _devicemodeA$dmOrientation$VH_; }

    static final MemoryLayout _devicemodeA$dmPaperSize$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmPaperSize$LAYOUT() { return _devicemodeA$dmPaperSize$LAYOUT_; }

    static final VarHandle _devicemodeA$dmPaperSize$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmPaperSize"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmPaperSize$VH() { return _devicemodeA$dmPaperSize$VH_; }

    static final MemoryLayout _devicemodeA$dmPaperLength$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmPaperLength$LAYOUT() { return _devicemodeA$dmPaperLength$LAYOUT_; }

    static final VarHandle _devicemodeA$dmPaperLength$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmPaperLength"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmPaperLength$VH() { return _devicemodeA$dmPaperLength$VH_; }

    static final MemoryLayout _devicemodeA$dmPaperWidth$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmPaperWidth$LAYOUT() { return _devicemodeA$dmPaperWidth$LAYOUT_; }

    static final VarHandle _devicemodeA$dmPaperWidth$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmPaperWidth"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmPaperWidth$VH() { return _devicemodeA$dmPaperWidth$VH_; }

    static final MemoryLayout _devicemodeA$dmScale$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmScale$LAYOUT() { return _devicemodeA$dmScale$LAYOUT_; }

    static final VarHandle _devicemodeA$dmScale$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmScale"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmScale$VH() { return _devicemodeA$dmScale$VH_; }

    static final MemoryLayout _devicemodeA$dmCopies$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmCopies$LAYOUT() { return _devicemodeA$dmCopies$LAYOUT_; }

    static final VarHandle _devicemodeA$dmCopies$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmCopies"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmCopies$VH() { return _devicemodeA$dmCopies$VH_; }

    static final MemoryLayout _devicemodeA$dmDefaultSource$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmDefaultSource$LAYOUT() { return _devicemodeA$dmDefaultSource$LAYOUT_; }

    static final VarHandle _devicemodeA$dmDefaultSource$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmDefaultSource"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmDefaultSource$VH() { return _devicemodeA$dmDefaultSource$VH_; }

    static final MemoryLayout _devicemodeA$dmPrintQuality$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmPrintQuality$LAYOUT() { return _devicemodeA$dmPrintQuality$LAYOUT_; }

    static final VarHandle _devicemodeA$dmPrintQuality$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmPrintQuality"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmPrintQuality$VH() { return _devicemodeA$dmPrintQuality$VH_; }

    static final MemoryLayout _devicemodeA$dmDisplayOrientation$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmDisplayOrientation$LAYOUT() { return _devicemodeA$dmDisplayOrientation$LAYOUT_; }

    static final VarHandle _devicemodeA$dmDisplayOrientation$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmDisplayOrientation"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmDisplayOrientation$VH() { return _devicemodeA$dmDisplayOrientation$VH_; }

    static final MemoryLayout _devicemodeA$dmDisplayFixedOutput$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmDisplayFixedOutput$LAYOUT() { return _devicemodeA$dmDisplayFixedOutput$LAYOUT_; }

    static final VarHandle _devicemodeA$dmDisplayFixedOutput$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmDisplayFixedOutput"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmDisplayFixedOutput$VH() { return _devicemodeA$dmDisplayFixedOutput$VH_; }

    static final MemoryLayout _devicemodeA$dmColor$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmColor$LAYOUT() { return _devicemodeA$dmColor$LAYOUT_; }

    static final VarHandle _devicemodeA$dmColor$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmColor"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmColor$VH() { return _devicemodeA$dmColor$VH_; }

    static final MemoryLayout _devicemodeA$dmDuplex$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmDuplex$LAYOUT() { return _devicemodeA$dmDuplex$LAYOUT_; }

    static final VarHandle _devicemodeA$dmDuplex$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmDuplex"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmDuplex$VH() { return _devicemodeA$dmDuplex$VH_; }

    static final MemoryLayout _devicemodeA$dmYResolution$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmYResolution$LAYOUT() { return _devicemodeA$dmYResolution$LAYOUT_; }

    static final VarHandle _devicemodeA$dmYResolution$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmYResolution"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmYResolution$VH() { return _devicemodeA$dmYResolution$VH_; }

    static final MemoryLayout _devicemodeA$dmTTOption$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmTTOption$LAYOUT() { return _devicemodeA$dmTTOption$LAYOUT_; }

    static final VarHandle _devicemodeA$dmTTOption$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmTTOption"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmTTOption$VH() { return _devicemodeA$dmTTOption$VH_; }

    static final MemoryLayout _devicemodeA$dmCollate$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmCollate$LAYOUT() { return _devicemodeA$dmCollate$LAYOUT_; }

    static final VarHandle _devicemodeA$dmCollate$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmCollate"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmCollate$VH() { return _devicemodeA$dmCollate$VH_; }

    static final MemoryLayout _devicemodeA$dmLogPixels$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmLogPixels$LAYOUT() { return _devicemodeA$dmLogPixels$LAYOUT_; }

    static final VarHandle _devicemodeA$dmLogPixels$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmLogPixels"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmLogPixels$VH() { return _devicemodeA$dmLogPixels$VH_; }

    static final MemoryLayout _devicemodeA$dmBitsPerPel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmBitsPerPel$LAYOUT() { return _devicemodeA$dmBitsPerPel$LAYOUT_; }

    static final VarHandle _devicemodeA$dmBitsPerPel$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmBitsPerPel"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmBitsPerPel$VH() { return _devicemodeA$dmBitsPerPel$VH_; }

    static final MemoryLayout _devicemodeA$dmPelsWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmPelsWidth$LAYOUT() { return _devicemodeA$dmPelsWidth$LAYOUT_; }

    static final VarHandle _devicemodeA$dmPelsWidth$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmPelsWidth"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmPelsWidth$VH() { return _devicemodeA$dmPelsWidth$VH_; }

    static final MemoryLayout _devicemodeA$dmPelsHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmPelsHeight$LAYOUT() { return _devicemodeA$dmPelsHeight$LAYOUT_; }

    static final VarHandle _devicemodeA$dmPelsHeight$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmPelsHeight"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmPelsHeight$VH() { return _devicemodeA$dmPelsHeight$VH_; }

    static final MemoryLayout _devicemodeA$dmDisplayFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmDisplayFlags$LAYOUT() { return _devicemodeA$dmDisplayFlags$LAYOUT_; }

    static final VarHandle _devicemodeA$dmDisplayFlags$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmDisplayFlags"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmDisplayFlags$VH() { return _devicemodeA$dmDisplayFlags$VH_; }

    static final MemoryLayout _devicemodeA$dmNup$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmNup$LAYOUT() { return _devicemodeA$dmNup$LAYOUT_; }

    static final VarHandle _devicemodeA$dmNup$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmNup"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmNup$VH() { return _devicemodeA$dmNup$VH_; }

    static final MemoryLayout _devicemodeA$dmDisplayFrequency$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmDisplayFrequency$LAYOUT() { return _devicemodeA$dmDisplayFrequency$LAYOUT_; }

    static final VarHandle _devicemodeA$dmDisplayFrequency$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmDisplayFrequency"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmDisplayFrequency$VH() { return _devicemodeA$dmDisplayFrequency$VH_; }

    static final MemoryLayout _devicemodeA$dmICMMethod$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmICMMethod$LAYOUT() { return _devicemodeA$dmICMMethod$LAYOUT_; }

    static final VarHandle _devicemodeA$dmICMMethod$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmICMMethod"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmICMMethod$VH() { return _devicemodeA$dmICMMethod$VH_; }

    static final MemoryLayout _devicemodeA$dmICMIntent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmICMIntent$LAYOUT() { return _devicemodeA$dmICMIntent$LAYOUT_; }

    static final VarHandle _devicemodeA$dmICMIntent$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmICMIntent"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmICMIntent$VH() { return _devicemodeA$dmICMIntent$VH_; }

    static final MemoryLayout _devicemodeA$dmMediaType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmMediaType$LAYOUT() { return _devicemodeA$dmMediaType$LAYOUT_; }

    static final VarHandle _devicemodeA$dmMediaType$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmMediaType"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmMediaType$VH() { return _devicemodeA$dmMediaType$VH_; }

    static final MemoryLayout _devicemodeA$dmDitherType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmDitherType$LAYOUT() { return _devicemodeA$dmDitherType$LAYOUT_; }

    static final VarHandle _devicemodeA$dmDitherType$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmDitherType"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmDitherType$VH() { return _devicemodeA$dmDitherType$VH_; }

    static final MemoryLayout _devicemodeA$dmReserved1$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmReserved1$LAYOUT() { return _devicemodeA$dmReserved1$LAYOUT_; }

    static final VarHandle _devicemodeA$dmReserved1$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmReserved1"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmReserved1$VH() { return _devicemodeA$dmReserved1$VH_; }

    static final MemoryLayout _devicemodeA$dmReserved2$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmReserved2$LAYOUT() { return _devicemodeA$dmReserved2$LAYOUT_; }

    static final VarHandle _devicemodeA$dmReserved2$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmReserved2"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmReserved2$VH() { return _devicemodeA$dmReserved2$VH_; }

    static final MemoryLayout _devicemodeA$dmPanningWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmPanningWidth$LAYOUT() { return _devicemodeA$dmPanningWidth$LAYOUT_; }

    static final VarHandle _devicemodeA$dmPanningWidth$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmPanningWidth"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmPanningWidth$VH() { return _devicemodeA$dmPanningWidth$VH_; }

    static final MemoryLayout _devicemodeA$dmPanningHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeA$dmPanningHeight$LAYOUT() { return _devicemodeA$dmPanningHeight$LAYOUT_; }

    static final VarHandle _devicemodeA$dmPanningHeight$VH_ = _devicemodeA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmPanningHeight"));
    public static java.lang.invoke.VarHandle _devicemodeA$dmPanningHeight$VH() { return _devicemodeA$dmPanningHeight$VH_; }

    static final MemoryLayout _devicemodeW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(32, C_SHORT).withName("dmDeviceName"),
        C_SHORT.withName("dmSpecVersion"),
        C_SHORT.withName("dmDriverVersion"),
        C_SHORT.withName("dmSize"),
        C_SHORT.withName("dmDriverExtra"),
        C_INT.withName("dmFields"),
        C_SHORT.withName("dmOrientation"),
        C_SHORT.withName("dmPaperSize"),
        C_SHORT.withName("dmPaperLength"),
        C_SHORT.withName("dmPaperWidth"),
        C_SHORT.withName("dmScale"),
        C_SHORT.withName("dmCopies"),
        C_SHORT.withName("dmDefaultSource"),
        C_SHORT.withName("dmPrintQuality"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("dmPosition"),
        C_INT.withName("dmDisplayOrientation"),
        C_INT.withName("dmDisplayFixedOutput"),
        C_SHORT.withName("dmColor"),
        C_SHORT.withName("dmDuplex"),
        C_SHORT.withName("dmYResolution"),
        C_SHORT.withName("dmTTOption"),
        C_SHORT.withName("dmCollate"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("dmFormName"),
        C_SHORT.withName("dmLogPixels"),
        C_INT.withName("dmBitsPerPel"),
        C_INT.withName("dmPelsWidth"),
        C_INT.withName("dmPelsHeight"),
        C_INT.withName("dmDisplayFlags"),
        C_INT.withName("dmNup"),
        C_INT.withName("dmDisplayFrequency"),
        C_INT.withName("dmICMMethod"),
        C_INT.withName("dmICMIntent"),
        C_INT.withName("dmMediaType"),
        C_INT.withName("dmDitherType"),
        C_INT.withName("dmReserved1"),
        C_INT.withName("dmReserved2"),
        C_INT.withName("dmPanningWidth"),
        C_INT.withName("dmPanningHeight")
    ).withName("_devicemodeW");
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$struct$LAYOUT() { return _devicemodeW$struct$LAYOUT_; }

    static final MemoryLayout _devicemodeW$dmSpecVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmSpecVersion$LAYOUT() { return _devicemodeW$dmSpecVersion$LAYOUT_; }

    static final VarHandle _devicemodeW$dmSpecVersion$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmSpecVersion"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmSpecVersion$VH() { return _devicemodeW$dmSpecVersion$VH_; }

    static final MemoryLayout _devicemodeW$dmDriverVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmDriverVersion$LAYOUT() { return _devicemodeW$dmDriverVersion$LAYOUT_; }

    static final VarHandle _devicemodeW$dmDriverVersion$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmDriverVersion"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmDriverVersion$VH() { return _devicemodeW$dmDriverVersion$VH_; }

    static final MemoryLayout _devicemodeW$dmSize$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmSize$LAYOUT() { return _devicemodeW$dmSize$LAYOUT_; }

    static final VarHandle _devicemodeW$dmSize$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmSize"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmSize$VH() { return _devicemodeW$dmSize$VH_; }

    static final MemoryLayout _devicemodeW$dmDriverExtra$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmDriverExtra$LAYOUT() { return _devicemodeW$dmDriverExtra$LAYOUT_; }

    static final VarHandle _devicemodeW$dmDriverExtra$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmDriverExtra"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmDriverExtra$VH() { return _devicemodeW$dmDriverExtra$VH_; }

    static final MemoryLayout _devicemodeW$dmFields$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmFields$LAYOUT() { return _devicemodeW$dmFields$LAYOUT_; }

    static final VarHandle _devicemodeW$dmFields$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmFields"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmFields$VH() { return _devicemodeW$dmFields$VH_; }

    static final MemoryLayout _devicemodeW$dmOrientation$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmOrientation$LAYOUT() { return _devicemodeW$dmOrientation$LAYOUT_; }

    static final VarHandle _devicemodeW$dmOrientation$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmOrientation"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmOrientation$VH() { return _devicemodeW$dmOrientation$VH_; }

    static final MemoryLayout _devicemodeW$dmPaperSize$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmPaperSize$LAYOUT() { return _devicemodeW$dmPaperSize$LAYOUT_; }

    static final VarHandle _devicemodeW$dmPaperSize$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmPaperSize"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmPaperSize$VH() { return _devicemodeW$dmPaperSize$VH_; }

    static final MemoryLayout _devicemodeW$dmPaperLength$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmPaperLength$LAYOUT() { return _devicemodeW$dmPaperLength$LAYOUT_; }

    static final VarHandle _devicemodeW$dmPaperLength$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmPaperLength"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmPaperLength$VH() { return _devicemodeW$dmPaperLength$VH_; }

    static final MemoryLayout _devicemodeW$dmPaperWidth$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmPaperWidth$LAYOUT() { return _devicemodeW$dmPaperWidth$LAYOUT_; }

    static final VarHandle _devicemodeW$dmPaperWidth$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmPaperWidth"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmPaperWidth$VH() { return _devicemodeW$dmPaperWidth$VH_; }

    static final MemoryLayout _devicemodeW$dmScale$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmScale$LAYOUT() { return _devicemodeW$dmScale$LAYOUT_; }

    static final VarHandle _devicemodeW$dmScale$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmScale"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmScale$VH() { return _devicemodeW$dmScale$VH_; }

    static final MemoryLayout _devicemodeW$dmCopies$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmCopies$LAYOUT() { return _devicemodeW$dmCopies$LAYOUT_; }

    static final VarHandle _devicemodeW$dmCopies$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmCopies"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmCopies$VH() { return _devicemodeW$dmCopies$VH_; }

    static final MemoryLayout _devicemodeW$dmDefaultSource$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmDefaultSource$LAYOUT() { return _devicemodeW$dmDefaultSource$LAYOUT_; }

    static final VarHandle _devicemodeW$dmDefaultSource$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmDefaultSource"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmDefaultSource$VH() { return _devicemodeW$dmDefaultSource$VH_; }

    static final MemoryLayout _devicemodeW$dmPrintQuality$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmPrintQuality$LAYOUT() { return _devicemodeW$dmPrintQuality$LAYOUT_; }

    static final VarHandle _devicemodeW$dmPrintQuality$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmPrintQuality"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmPrintQuality$VH() { return _devicemodeW$dmPrintQuality$VH_; }

    static final MemoryLayout _devicemodeW$dmDisplayOrientation$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmDisplayOrientation$LAYOUT() { return _devicemodeW$dmDisplayOrientation$LAYOUT_; }

    static final VarHandle _devicemodeW$dmDisplayOrientation$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmDisplayOrientation"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmDisplayOrientation$VH() { return _devicemodeW$dmDisplayOrientation$VH_; }

    static final MemoryLayout _devicemodeW$dmDisplayFixedOutput$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmDisplayFixedOutput$LAYOUT() { return _devicemodeW$dmDisplayFixedOutput$LAYOUT_; }

    static final VarHandle _devicemodeW$dmDisplayFixedOutput$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmDisplayFixedOutput"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmDisplayFixedOutput$VH() { return _devicemodeW$dmDisplayFixedOutput$VH_; }

    static final MemoryLayout _devicemodeW$dmColor$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmColor$LAYOUT() { return _devicemodeW$dmColor$LAYOUT_; }

    static final VarHandle _devicemodeW$dmColor$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmColor"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmColor$VH() { return _devicemodeW$dmColor$VH_; }

    static final MemoryLayout _devicemodeW$dmDuplex$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmDuplex$LAYOUT() { return _devicemodeW$dmDuplex$LAYOUT_; }

    static final VarHandle _devicemodeW$dmDuplex$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmDuplex"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmDuplex$VH() { return _devicemodeW$dmDuplex$VH_; }

    static final MemoryLayout _devicemodeW$dmYResolution$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmYResolution$LAYOUT() { return _devicemodeW$dmYResolution$LAYOUT_; }

    static final VarHandle _devicemodeW$dmYResolution$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmYResolution"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmYResolution$VH() { return _devicemodeW$dmYResolution$VH_; }

    static final MemoryLayout _devicemodeW$dmTTOption$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmTTOption$LAYOUT() { return _devicemodeW$dmTTOption$LAYOUT_; }

    static final VarHandle _devicemodeW$dmTTOption$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmTTOption"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmTTOption$VH() { return _devicemodeW$dmTTOption$VH_; }

    static final MemoryLayout _devicemodeW$dmCollate$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmCollate$LAYOUT() { return _devicemodeW$dmCollate$LAYOUT_; }

    static final VarHandle _devicemodeW$dmCollate$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmCollate"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmCollate$VH() { return _devicemodeW$dmCollate$VH_; }

    static final MemoryLayout _devicemodeW$dmLogPixels$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmLogPixels$LAYOUT() { return _devicemodeW$dmLogPixels$LAYOUT_; }

    static final VarHandle _devicemodeW$dmLogPixels$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("dmLogPixels"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmLogPixels$VH() { return _devicemodeW$dmLogPixels$VH_; }

    static final MemoryLayout _devicemodeW$dmBitsPerPel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmBitsPerPel$LAYOUT() { return _devicemodeW$dmBitsPerPel$LAYOUT_; }

    static final VarHandle _devicemodeW$dmBitsPerPel$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmBitsPerPel"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmBitsPerPel$VH() { return _devicemodeW$dmBitsPerPel$VH_; }

    static final MemoryLayout _devicemodeW$dmPelsWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmPelsWidth$LAYOUT() { return _devicemodeW$dmPelsWidth$LAYOUT_; }

    static final VarHandle _devicemodeW$dmPelsWidth$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmPelsWidth"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmPelsWidth$VH() { return _devicemodeW$dmPelsWidth$VH_; }

    static final MemoryLayout _devicemodeW$dmPelsHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmPelsHeight$LAYOUT() { return _devicemodeW$dmPelsHeight$LAYOUT_; }

    static final VarHandle _devicemodeW$dmPelsHeight$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmPelsHeight"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmPelsHeight$VH() { return _devicemodeW$dmPelsHeight$VH_; }

    static final MemoryLayout _devicemodeW$dmDisplayFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmDisplayFlags$LAYOUT() { return _devicemodeW$dmDisplayFlags$LAYOUT_; }

    static final VarHandle _devicemodeW$dmDisplayFlags$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmDisplayFlags"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmDisplayFlags$VH() { return _devicemodeW$dmDisplayFlags$VH_; }

    static final MemoryLayout _devicemodeW$dmNup$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmNup$LAYOUT() { return _devicemodeW$dmNup$LAYOUT_; }

    static final VarHandle _devicemodeW$dmNup$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmNup"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmNup$VH() { return _devicemodeW$dmNup$VH_; }

    static final MemoryLayout _devicemodeW$dmDisplayFrequency$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmDisplayFrequency$LAYOUT() { return _devicemodeW$dmDisplayFrequency$LAYOUT_; }

    static final VarHandle _devicemodeW$dmDisplayFrequency$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmDisplayFrequency"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmDisplayFrequency$VH() { return _devicemodeW$dmDisplayFrequency$VH_; }

    static final MemoryLayout _devicemodeW$dmICMMethod$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmICMMethod$LAYOUT() { return _devicemodeW$dmICMMethod$LAYOUT_; }

    static final VarHandle _devicemodeW$dmICMMethod$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmICMMethod"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmICMMethod$VH() { return _devicemodeW$dmICMMethod$VH_; }

    static final MemoryLayout _devicemodeW$dmICMIntent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmICMIntent$LAYOUT() { return _devicemodeW$dmICMIntent$LAYOUT_; }

    static final VarHandle _devicemodeW$dmICMIntent$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmICMIntent"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmICMIntent$VH() { return _devicemodeW$dmICMIntent$VH_; }

    static final MemoryLayout _devicemodeW$dmMediaType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmMediaType$LAYOUT() { return _devicemodeW$dmMediaType$LAYOUT_; }

    static final VarHandle _devicemodeW$dmMediaType$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmMediaType"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmMediaType$VH() { return _devicemodeW$dmMediaType$VH_; }

    static final MemoryLayout _devicemodeW$dmDitherType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmDitherType$LAYOUT() { return _devicemodeW$dmDitherType$LAYOUT_; }

    static final VarHandle _devicemodeW$dmDitherType$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmDitherType"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmDitherType$VH() { return _devicemodeW$dmDitherType$VH_; }

    static final MemoryLayout _devicemodeW$dmReserved1$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmReserved1$LAYOUT() { return _devicemodeW$dmReserved1$LAYOUT_; }

    static final VarHandle _devicemodeW$dmReserved1$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmReserved1"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmReserved1$VH() { return _devicemodeW$dmReserved1$VH_; }

    static final MemoryLayout _devicemodeW$dmReserved2$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmReserved2$LAYOUT() { return _devicemodeW$dmReserved2$LAYOUT_; }

    static final VarHandle _devicemodeW$dmReserved2$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmReserved2"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmReserved2$VH() { return _devicemodeW$dmReserved2$VH_; }

    static final MemoryLayout _devicemodeW$dmPanningWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmPanningWidth$LAYOUT() { return _devicemodeW$dmPanningWidth$LAYOUT_; }

    static final VarHandle _devicemodeW$dmPanningWidth$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmPanningWidth"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmPanningWidth$VH() { return _devicemodeW$dmPanningWidth$VH_; }

    static final MemoryLayout _devicemodeW$dmPanningHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _devicemodeW$dmPanningHeight$LAYOUT() { return _devicemodeW$dmPanningHeight$LAYOUT_; }

    static final VarHandle _devicemodeW$dmPanningHeight$VH_ = _devicemodeW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dmPanningHeight"));
    public static java.lang.invoke.VarHandle _devicemodeW$dmPanningHeight$VH() { return _devicemodeW$dmPanningHeight$VH_; }

    static final MemoryLayout _DISPLAY_DEVICEA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cb"),
        MemoryLayout.ofSequence(32, C_BOOL).withName("DeviceName"),
        MemoryLayout.ofSequence(128, C_BOOL).withName("DeviceString"),
        C_INT.withName("StateFlags"),
        MemoryLayout.ofSequence(128, C_BOOL).withName("DeviceID"),
        MemoryLayout.ofSequence(128, C_BOOL).withName("DeviceKey")
    ).withName("_DISPLAY_DEVICEA");
    public static jdk.incubator.foreign.MemoryLayout _DISPLAY_DEVICEA$struct$LAYOUT() { return _DISPLAY_DEVICEA$struct$LAYOUT_; }

    static final MemoryLayout _DISPLAY_DEVICEA$cb$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DISPLAY_DEVICEA$cb$LAYOUT() { return _DISPLAY_DEVICEA$cb$LAYOUT_; }

    static final VarHandle _DISPLAY_DEVICEA$cb$VH_ = _DISPLAY_DEVICEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cb"));
    public static java.lang.invoke.VarHandle _DISPLAY_DEVICEA$cb$VH() { return _DISPLAY_DEVICEA$cb$VH_; }

    static final MemoryLayout _DISPLAY_DEVICEA$StateFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DISPLAY_DEVICEA$StateFlags$LAYOUT() { return _DISPLAY_DEVICEA$StateFlags$LAYOUT_; }

    static final VarHandle _DISPLAY_DEVICEA$StateFlags$VH_ = _DISPLAY_DEVICEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StateFlags"));
    public static java.lang.invoke.VarHandle _DISPLAY_DEVICEA$StateFlags$VH() { return _DISPLAY_DEVICEA$StateFlags$VH_; }

    static final MemoryLayout _DISPLAY_DEVICEW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cb"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("DeviceName"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("DeviceString"),
        C_INT.withName("StateFlags"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("DeviceID"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("DeviceKey")
    ).withName("_DISPLAY_DEVICEW");
    public static jdk.incubator.foreign.MemoryLayout _DISPLAY_DEVICEW$struct$LAYOUT() { return _DISPLAY_DEVICEW$struct$LAYOUT_; }

    static final MemoryLayout _DISPLAY_DEVICEW$cb$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DISPLAY_DEVICEW$cb$LAYOUT() { return _DISPLAY_DEVICEW$cb$LAYOUT_; }

    static final VarHandle _DISPLAY_DEVICEW$cb$VH_ = _DISPLAY_DEVICEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cb"));
    public static java.lang.invoke.VarHandle _DISPLAY_DEVICEW$cb$VH() { return _DISPLAY_DEVICEW$cb$VH_; }

    static final MemoryLayout _DISPLAY_DEVICEW$StateFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DISPLAY_DEVICEW$StateFlags$LAYOUT() { return _DISPLAY_DEVICEW$StateFlags$LAYOUT_; }

    static final VarHandle _DISPLAY_DEVICEW$StateFlags$VH_ = _DISPLAY_DEVICEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StateFlags"));
    public static java.lang.invoke.VarHandle _DISPLAY_DEVICEW$StateFlags$VH() { return _DISPLAY_DEVICEW$StateFlags$VH_; }

    static final MemoryLayout DISPLAYCONFIG_RATIONAL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Numerator"),
        C_INT.withName("Denominator")
    ).withName("DISPLAYCONFIG_RATIONAL");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_RATIONAL$struct$LAYOUT() { return DISPLAYCONFIG_RATIONAL$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_RATIONAL$Numerator$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_RATIONAL$Numerator$LAYOUT() { return DISPLAYCONFIG_RATIONAL$Numerator$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_RATIONAL$Numerator$VH_ = DISPLAYCONFIG_RATIONAL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Numerator"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_RATIONAL$Numerator$VH() { return DISPLAYCONFIG_RATIONAL$Numerator$VH_; }

    static final MemoryLayout DISPLAYCONFIG_RATIONAL$Denominator$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_RATIONAL$Denominator$LAYOUT() { return DISPLAYCONFIG_RATIONAL$Denominator$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_RATIONAL$Denominator$VH_ = DISPLAYCONFIG_RATIONAL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Denominator"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_RATIONAL$Denominator$VH() { return DISPLAYCONFIG_RATIONAL$Denominator$VH_; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER() { return (int)-1L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15() { return (int)0L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO() { return (int)1L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO() { return (int)2L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO() { return (int)3L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI() { return (int)4L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI() { return (int)5L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS() { return (int)6L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN() { return (int)8L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI() { return (int)9L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL() { return (int)10L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED() { return (int)11L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL() { return (int)12L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED() { return (int)13L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE() { return (int)14L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST() { return (int)15L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED() { return (int)16L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL() { return (int)17L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL() { return (int)-2147483648L; }

    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32() { return (int)-1L; }

    public static int DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED() { return (int)0L; }

    public static int DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE() { return (int)1L; }

    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED() { return (int)2L; }

    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST() { return (int)2L; }

    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST() { return (int)3L; }

    public static int DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32() { return (int)-1L; }

    static final MemoryLayout DISPLAYCONFIG_2DREGION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cx"),
        C_INT.withName("cy")
    ).withName("DISPLAYCONFIG_2DREGION");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_2DREGION$struct$LAYOUT() { return DISPLAYCONFIG_2DREGION$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_2DREGION$cx$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_2DREGION$cx$LAYOUT() { return DISPLAYCONFIG_2DREGION$cx$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_2DREGION$cx$VH_ = DISPLAYCONFIG_2DREGION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cx"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_2DREGION$cx$VH() { return DISPLAYCONFIG_2DREGION$cx$VH_; }

    static final MemoryLayout DISPLAYCONFIG_2DREGION$cy$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_2DREGION$cy$LAYOUT() { return DISPLAYCONFIG_2DREGION$cy$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_2DREGION$cy$VH_ = DISPLAYCONFIG_2DREGION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cy"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_2DREGION$cy$VH() { return DISPLAYCONFIG_2DREGION$cy$VH_; }

    static final MemoryLayout DISPLAYCONFIG_VIDEO_SIGNAL_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("pixelRate"),
        MemoryLayout.ofStruct(
            C_INT.withName("Numerator"),
            C_INT.withName("Denominator")
        ).withName("hSyncFreq"),
        MemoryLayout.ofStruct(
            C_INT.withName("Numerator"),
            C_INT.withName("Denominator")
        ).withName("vSyncFreq"),
        MemoryLayout.ofStruct(
            C_INT.withName("cx"),
            C_INT.withName("cy")
        ).withName("activeSize"),
        MemoryLayout.ofStruct(
            C_INT.withName("cx"),
            C_INT.withName("cy")
        ).withName("totalSize"),
        MemoryLayout.ofStruct(
            C_INT
        ).withName("AdditionalSignalInfo"),
        C_INT.withName("videoStandard"),
        C_INT.withName("scanLineOrdering")
    ).withName("DISPLAYCONFIG_VIDEO_SIGNAL_INFO");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_VIDEO_SIGNAL_INFO$struct$LAYOUT() { return DISPLAYCONFIG_VIDEO_SIGNAL_INFO$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_VIDEO_SIGNAL_INFO$pixelRate$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_VIDEO_SIGNAL_INFO$pixelRate$LAYOUT() { return DISPLAYCONFIG_VIDEO_SIGNAL_INFO$pixelRate$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_VIDEO_SIGNAL_INFO$pixelRate$VH_ = DISPLAYCONFIG_VIDEO_SIGNAL_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pixelRate"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_VIDEO_SIGNAL_INFO$pixelRate$VH() { return DISPLAYCONFIG_VIDEO_SIGNAL_INFO$pixelRate$VH_; }

    static final MemoryLayout AdditionalSignalInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT
    );
    public static jdk.incubator.foreign.MemoryLayout AdditionalSignalInfo$struct$LAYOUT() { return AdditionalSignalInfo$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_VIDEO_SIGNAL_INFO$videoStandard$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_VIDEO_SIGNAL_INFO$videoStandard$LAYOUT() { return DISPLAYCONFIG_VIDEO_SIGNAL_INFO$videoStandard$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_VIDEO_SIGNAL_INFO$videoStandard$VH_ = DISPLAYCONFIG_VIDEO_SIGNAL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("videoStandard"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_VIDEO_SIGNAL_INFO$videoStandard$VH() { return DISPLAYCONFIG_VIDEO_SIGNAL_INFO$videoStandard$VH_; }

    static final MemoryLayout DISPLAYCONFIG_VIDEO_SIGNAL_INFO$scanLineOrdering$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_VIDEO_SIGNAL_INFO$scanLineOrdering$LAYOUT() { return DISPLAYCONFIG_VIDEO_SIGNAL_INFO$scanLineOrdering$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_VIDEO_SIGNAL_INFO$scanLineOrdering$VH_ = DISPLAYCONFIG_VIDEO_SIGNAL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("scanLineOrdering"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_VIDEO_SIGNAL_INFO$scanLineOrdering$VH() { return DISPLAYCONFIG_VIDEO_SIGNAL_INFO$scanLineOrdering$VH_; }

    public static int DISPLAYCONFIG_SCALING_IDENTITY() { return (int)1L; }

    public static int DISPLAYCONFIG_SCALING_CENTERED() { return (int)2L; }

    public static int DISPLAYCONFIG_SCALING_STRETCHED() { return (int)3L; }

    public static int DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX() { return (int)4L; }

    public static int DISPLAYCONFIG_SCALING_CUSTOM() { return (int)5L; }

    public static int DISPLAYCONFIG_SCALING_PREFERRED() { return (int)128L; }

    public static int DISPLAYCONFIG_SCALING_FORCE_UINT32() { return (int)-1L; }

    public static int DISPLAYCONFIG_ROTATION_IDENTITY() { return (int)1L; }

    public static int DISPLAYCONFIG_ROTATION_ROTATE90() { return (int)2L; }

    public static int DISPLAYCONFIG_ROTATION_ROTATE180() { return (int)3L; }

    public static int DISPLAYCONFIG_ROTATION_ROTATE270() { return (int)4L; }

    public static int DISPLAYCONFIG_ROTATION_FORCE_UINT32() { return (int)-1L; }

    public static int DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE() { return (int)1L; }

    public static int DISPLAYCONFIG_MODE_INFO_TYPE_TARGET() { return (int)2L; }

    public static int DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE() { return (int)3L; }

    public static int DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32() { return (int)-1L; }

    public static int DISPLAYCONFIG_PIXELFORMAT_8BPP() { return (int)1L; }

    public static int DISPLAYCONFIG_PIXELFORMAT_16BPP() { return (int)2L; }

    public static int DISPLAYCONFIG_PIXELFORMAT_24BPP() { return (int)3L; }

    public static int DISPLAYCONFIG_PIXELFORMAT_32BPP() { return (int)4L; }

    public static int DISPLAYCONFIG_PIXELFORMAT_NONGDI() { return (int)5L; }

    public static int DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32() { return (int)-1L; }

    static final MemoryLayout DISPLAYCONFIG_SOURCE_MODE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("width"),
        C_INT.withName("height"),
        C_INT.withName("pixelFormat"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("position")
    ).withName("DISPLAYCONFIG_SOURCE_MODE");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_SOURCE_MODE$struct$LAYOUT() { return DISPLAYCONFIG_SOURCE_MODE$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_SOURCE_MODE$width$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_SOURCE_MODE$width$LAYOUT() { return DISPLAYCONFIG_SOURCE_MODE$width$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_SOURCE_MODE$width$VH_ = DISPLAYCONFIG_SOURCE_MODE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("width"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_SOURCE_MODE$width$VH() { return DISPLAYCONFIG_SOURCE_MODE$width$VH_; }

    static final MemoryLayout DISPLAYCONFIG_SOURCE_MODE$height$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_SOURCE_MODE$height$LAYOUT() { return DISPLAYCONFIG_SOURCE_MODE$height$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_SOURCE_MODE$height$VH_ = DISPLAYCONFIG_SOURCE_MODE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("height"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_SOURCE_MODE$height$VH() { return DISPLAYCONFIG_SOURCE_MODE$height$VH_; }

    static final MemoryLayout DISPLAYCONFIG_SOURCE_MODE$pixelFormat$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_SOURCE_MODE$pixelFormat$LAYOUT() { return DISPLAYCONFIG_SOURCE_MODE$pixelFormat$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_SOURCE_MODE$pixelFormat$VH_ = DISPLAYCONFIG_SOURCE_MODE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pixelFormat"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_SOURCE_MODE$pixelFormat$VH() { return DISPLAYCONFIG_SOURCE_MODE$pixelFormat$VH_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_MODE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("pixelRate"),
            MemoryLayout.ofStruct(
                C_INT.withName("Numerator"),
                C_INT.withName("Denominator")
            ).withName("hSyncFreq"),
            MemoryLayout.ofStruct(
                C_INT.withName("Numerator"),
                C_INT.withName("Denominator")
            ).withName("vSyncFreq"),
            MemoryLayout.ofStruct(
                C_INT.withName("cx"),
                C_INT.withName("cy")
            ).withName("activeSize"),
            MemoryLayout.ofStruct(
                C_INT.withName("cx"),
                C_INT.withName("cy")
            ).withName("totalSize"),
            MemoryLayout.ofStruct(
                C_INT
            ).withName("AdditionalSignalInfo"),
            C_INT.withName("videoStandard"),
            C_INT.withName("scanLineOrdering")
        ).withName("targetVideoSignalInfo")
    ).withName("DISPLAYCONFIG_TARGET_MODE");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_MODE$struct$LAYOUT() { return DISPLAYCONFIG_TARGET_MODE$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_DESKTOP_IMAGE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("PathSourceSize"),
        MemoryLayout.ofStruct(
            C_INT.withName("left"),
            C_INT.withName("top"),
            C_INT.withName("right"),
            C_INT.withName("bottom")
        ).withName("DesktopImageRegion"),
        MemoryLayout.ofStruct(
            C_INT.withName("left"),
            C_INT.withName("top"),
            C_INT.withName("right"),
            C_INT.withName("bottom")
        ).withName("DesktopImageClip")
    ).withName("DISPLAYCONFIG_DESKTOP_IMAGE_INFO");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_DESKTOP_IMAGE_INFO$struct$LAYOUT() { return DISPLAYCONFIG_DESKTOP_IMAGE_INFO$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_MODE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("infoType"),
        C_INT.withName("id"),
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("adapterId"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONGLONG.withName("pixelRate"),
                MemoryLayout.ofStruct(
                    C_INT.withName("Numerator"),
                    C_INT.withName("Denominator")
                ).withName("hSyncFreq"),
                MemoryLayout.ofStruct(
                    C_INT.withName("Numerator"),
                    C_INT.withName("Denominator")
                ).withName("vSyncFreq"),
                MemoryLayout.ofStruct(
                    C_INT.withName("cx"),
                    C_INT.withName("cy")
                ).withName("activeSize"),
                MemoryLayout.ofStruct(
                    C_INT.withName("cx"),
                    C_INT.withName("cy")
                ).withName("totalSize"),
                MemoryLayout.ofStruct(
                    C_INT
                ).withName("AdditionalSignalInfo"),
                C_INT.withName("videoStandard"),
                C_INT.withName("scanLineOrdering")
            ).withName("targetVideoSignalInfo")
        ).withName("targetMode"),
        MemoryLayout.ofStruct(
            C_INT.withName("width"),
            C_INT.withName("height"),
            C_INT.withName("pixelFormat"),
            MemoryLayout.ofStruct(
                C_INT.withName("x"),
                C_INT.withName("y")
            ).withName("position")
        ).withName("sourceMode"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("x"),
                C_INT.withName("y")
            ).withName("PathSourceSize"),
            MemoryLayout.ofStruct(
                C_INT.withName("left"),
                C_INT.withName("top"),
                C_INT.withName("right"),
                C_INT.withName("bottom")
            ).withName("DesktopImageRegion"),
            MemoryLayout.ofStruct(
                C_INT.withName("left"),
                C_INT.withName("top"),
                C_INT.withName("right"),
                C_INT.withName("bottom")
            ).withName("DesktopImageClip")
        ).withName("desktopImageInfo")
    ).withName("DISPLAYCONFIG_MODE_INFO");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_MODE_INFO$struct$LAYOUT() { return DISPLAYCONFIG_MODE_INFO$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_MODE_INFO$infoType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_MODE_INFO$infoType$LAYOUT() { return DISPLAYCONFIG_MODE_INFO$infoType$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_MODE_INFO$infoType$VH_ = DISPLAYCONFIG_MODE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("infoType"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_MODE_INFO$infoType$VH() { return DISPLAYCONFIG_MODE_INFO$infoType$VH_; }

    static final MemoryLayout DISPLAYCONFIG_MODE_INFO$id$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_MODE_INFO$id$LAYOUT() { return DISPLAYCONFIG_MODE_INFO$id$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_MODE_INFO$id$VH_ = DISPLAYCONFIG_MODE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("id"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_MODE_INFO$id$VH() { return DISPLAYCONFIG_MODE_INFO$id$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_SOURCE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("adapterId"),
        C_INT.withName("id"),
        C_INT.withName("modeInfoIdx"),
        C_INT,
        C_INT.withName("statusFlags")
    ).withName("DISPLAYCONFIG_PATH_SOURCE_INFO");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_SOURCE_INFO$struct$LAYOUT() { return DISPLAYCONFIG_PATH_SOURCE_INFO$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_SOURCE_INFO$id$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_SOURCE_INFO$id$LAYOUT() { return DISPLAYCONFIG_PATH_SOURCE_INFO$id$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_SOURCE_INFO$id$VH_ = DISPLAYCONFIG_PATH_SOURCE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("id"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_SOURCE_INFO$id$VH() { return DISPLAYCONFIG_PATH_SOURCE_INFO$id$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_SOURCE_INFO$modeInfoIdx$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_SOURCE_INFO$modeInfoIdx$LAYOUT() { return DISPLAYCONFIG_PATH_SOURCE_INFO$modeInfoIdx$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_SOURCE_INFO$modeInfoIdx$VH_ = DISPLAYCONFIG_PATH_SOURCE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("modeInfoIdx"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_SOURCE_INFO$modeInfoIdx$VH() { return DISPLAYCONFIG_PATH_SOURCE_INFO$modeInfoIdx$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_SOURCE_INFO$statusFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_SOURCE_INFO$statusFlags$LAYOUT() { return DISPLAYCONFIG_PATH_SOURCE_INFO$statusFlags$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_SOURCE_INFO$statusFlags$VH_ = DISPLAYCONFIG_PATH_SOURCE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("statusFlags"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_SOURCE_INFO$statusFlags$VH() { return DISPLAYCONFIG_PATH_SOURCE_INFO$statusFlags$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("adapterId"),
        C_INT.withName("id"),
        C_INT.withName("modeInfoIdx"),
        C_INT,
        C_INT.withName("outputTechnology"),
        C_INT.withName("rotation"),
        C_INT.withName("scaling"),
        MemoryLayout.ofStruct(
            C_INT.withName("Numerator"),
            C_INT.withName("Denominator")
        ).withName("refreshRate"),
        C_INT.withName("scanLineOrdering"),
        C_INT.withName("targetAvailable"),
        C_INT.withName("statusFlags")
    ).withName("DISPLAYCONFIG_PATH_TARGET_INFO");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$struct$LAYOUT() { return DISPLAYCONFIG_PATH_TARGET_INFO$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$id$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$id$LAYOUT() { return DISPLAYCONFIG_PATH_TARGET_INFO$id$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$id$VH_ = DISPLAYCONFIG_PATH_TARGET_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("id"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$id$VH() { return DISPLAYCONFIG_PATH_TARGET_INFO$id$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$modeInfoIdx$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$modeInfoIdx$LAYOUT() { return DISPLAYCONFIG_PATH_TARGET_INFO$modeInfoIdx$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$modeInfoIdx$VH_ = DISPLAYCONFIG_PATH_TARGET_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("modeInfoIdx"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$modeInfoIdx$VH() { return DISPLAYCONFIG_PATH_TARGET_INFO$modeInfoIdx$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$outputTechnology$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$outputTechnology$LAYOUT() { return DISPLAYCONFIG_PATH_TARGET_INFO$outputTechnology$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$outputTechnology$VH_ = DISPLAYCONFIG_PATH_TARGET_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("outputTechnology"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$outputTechnology$VH() { return DISPLAYCONFIG_PATH_TARGET_INFO$outputTechnology$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$rotation$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$rotation$LAYOUT() { return DISPLAYCONFIG_PATH_TARGET_INFO$rotation$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$rotation$VH_ = DISPLAYCONFIG_PATH_TARGET_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("rotation"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$rotation$VH() { return DISPLAYCONFIG_PATH_TARGET_INFO$rotation$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$scaling$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$scaling$LAYOUT() { return DISPLAYCONFIG_PATH_TARGET_INFO$scaling$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$scaling$VH_ = DISPLAYCONFIG_PATH_TARGET_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("scaling"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$scaling$VH() { return DISPLAYCONFIG_PATH_TARGET_INFO$scaling$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$scanLineOrdering$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$scanLineOrdering$LAYOUT() { return DISPLAYCONFIG_PATH_TARGET_INFO$scanLineOrdering$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$scanLineOrdering$VH_ = DISPLAYCONFIG_PATH_TARGET_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("scanLineOrdering"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$scanLineOrdering$VH() { return DISPLAYCONFIG_PATH_TARGET_INFO$scanLineOrdering$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$targetAvailable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$targetAvailable$LAYOUT() { return DISPLAYCONFIG_PATH_TARGET_INFO$targetAvailable$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$targetAvailable$VH_ = DISPLAYCONFIG_PATH_TARGET_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("targetAvailable"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$targetAvailable$VH() { return DISPLAYCONFIG_PATH_TARGET_INFO$targetAvailable$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$statusFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_TARGET_INFO$statusFlags$LAYOUT() { return DISPLAYCONFIG_PATH_TARGET_INFO$statusFlags$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$statusFlags$VH_ = DISPLAYCONFIG_PATH_TARGET_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("statusFlags"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_TARGET_INFO$statusFlags$VH() { return DISPLAYCONFIG_PATH_TARGET_INFO$statusFlags$VH_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id"),
            C_INT.withName("modeInfoIdx"),
            C_INT,
            C_INT.withName("statusFlags")
        ).withName("sourceInfo"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id"),
            C_INT.withName("modeInfoIdx"),
            C_INT,
            C_INT.withName("outputTechnology"),
            C_INT.withName("rotation"),
            C_INT.withName("scaling"),
            MemoryLayout.ofStruct(
                C_INT.withName("Numerator"),
                C_INT.withName("Denominator")
            ).withName("refreshRate"),
            C_INT.withName("scanLineOrdering"),
            C_INT.withName("targetAvailable"),
            C_INT.withName("statusFlags")
        ).withName("targetInfo"),
        C_INT.withName("flags")
    ).withName("DISPLAYCONFIG_PATH_INFO");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_INFO$struct$LAYOUT() { return DISPLAYCONFIG_PATH_INFO$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_PATH_INFO$flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_PATH_INFO$flags$LAYOUT() { return DISPLAYCONFIG_PATH_INFO$flags$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_PATH_INFO$flags$VH_ = DISPLAYCONFIG_PATH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("flags"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_PATH_INFO$flags$VH() { return DISPLAYCONFIG_PATH_INFO$flags$VH_; }

    public static int DISPLAYCONFIG_TOPOLOGY_INTERNAL() { return (int)1L; }

    public static int DISPLAYCONFIG_TOPOLOGY_CLONE() { return (int)2L; }

    public static int DISPLAYCONFIG_TOPOLOGY_EXTEND() { return (int)4L; }

    public static int DISPLAYCONFIG_TOPOLOGY_EXTERNAL() { return (int)8L; }

    public static int DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32() { return (int)-1L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME() { return (int)1L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME() { return (int)2L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE() { return (int)3L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME() { return (int)4L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE() { return (int)5L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE() { return (int)6L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION() { return (int)7L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION() { return (int)8L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO() { return (int)9L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE() { return (int)10L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL() { return (int)11L; }

    public static int DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32() { return (int)-1L; }

    static final MemoryLayout DISPLAYCONFIG_DEVICE_INFO_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("type"),
        C_INT.withName("size"),
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("adapterId"),
        C_INT.withName("id")
    ).withName("DISPLAYCONFIG_DEVICE_INFO_HEADER");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_DEVICE_INFO_HEADER$struct$LAYOUT() { return DISPLAYCONFIG_DEVICE_INFO_HEADER$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_DEVICE_INFO_HEADER$type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_DEVICE_INFO_HEADER$type$LAYOUT() { return DISPLAYCONFIG_DEVICE_INFO_HEADER$type$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_DEVICE_INFO_HEADER$type$VH_ = DISPLAYCONFIG_DEVICE_INFO_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("type"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_DEVICE_INFO_HEADER$type$VH() { return DISPLAYCONFIG_DEVICE_INFO_HEADER$type$VH_; }

    static final MemoryLayout DISPLAYCONFIG_DEVICE_INFO_HEADER$size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_DEVICE_INFO_HEADER$size$LAYOUT() { return DISPLAYCONFIG_DEVICE_INFO_HEADER$size$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_DEVICE_INFO_HEADER$size$VH_ = DISPLAYCONFIG_DEVICE_INFO_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("size"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_DEVICE_INFO_HEADER$size$VH() { return DISPLAYCONFIG_DEVICE_INFO_HEADER$size$VH_; }

    static final MemoryLayout DISPLAYCONFIG_DEVICE_INFO_HEADER$id$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_DEVICE_INFO_HEADER$id$LAYOUT() { return DISPLAYCONFIG_DEVICE_INFO_HEADER$id$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_DEVICE_INFO_HEADER$id$VH_ = DISPLAYCONFIG_DEVICE_INFO_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("id"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_DEVICE_INFO_HEADER$id$VH() { return DISPLAYCONFIG_DEVICE_INFO_HEADER$id$VH_; }

    static final MemoryLayout DISPLAYCONFIG_SOURCE_DEVICE_NAME$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("type"),
            C_INT.withName("size"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id")
        ).withName("header"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("viewGdiDeviceName")
    ).withName("DISPLAYCONFIG_SOURCE_DEVICE_NAME");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_SOURCE_DEVICE_NAME$struct$LAYOUT() { return DISPLAYCONFIG_SOURCE_DEVICE_NAME$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT,
        C_INT.withName("value")
    ).withName("DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS$struct$LAYOUT() { return DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS$value$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS$value$LAYOUT() { return DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS$value$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS$value$VH_ = DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("value"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS$value$VH() { return DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS$value$VH_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("type"),
            C_INT.withName("size"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id")
        ).withName("header"),
        MemoryLayout.ofStruct(
            C_INT,
            C_INT.withName("value")
        ).withName("flags"),
        C_INT.withName("outputTechnology"),
        C_SHORT.withName("edidManufactureId"),
        C_SHORT.withName("edidProductCodeId"),
        C_INT.withName("connectorInstance"),
        MemoryLayout.ofSequence(64, C_SHORT).withName("monitorFriendlyDeviceName"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("monitorDevicePath")
    ).withName("DISPLAYCONFIG_TARGET_DEVICE_NAME");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME$struct$LAYOUT() { return DISPLAYCONFIG_TARGET_DEVICE_NAME$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME$outputTechnology$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME$outputTechnology$LAYOUT() { return DISPLAYCONFIG_TARGET_DEVICE_NAME$outputTechnology$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_TARGET_DEVICE_NAME$outputTechnology$VH_ = DISPLAYCONFIG_TARGET_DEVICE_NAME$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("outputTechnology"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_TARGET_DEVICE_NAME$outputTechnology$VH() { return DISPLAYCONFIG_TARGET_DEVICE_NAME$outputTechnology$VH_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME$edidManufactureId$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME$edidManufactureId$LAYOUT() { return DISPLAYCONFIG_TARGET_DEVICE_NAME$edidManufactureId$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_TARGET_DEVICE_NAME$edidManufactureId$VH_ = DISPLAYCONFIG_TARGET_DEVICE_NAME$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("edidManufactureId"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_TARGET_DEVICE_NAME$edidManufactureId$VH() { return DISPLAYCONFIG_TARGET_DEVICE_NAME$edidManufactureId$VH_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME$edidProductCodeId$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME$edidProductCodeId$LAYOUT() { return DISPLAYCONFIG_TARGET_DEVICE_NAME$edidProductCodeId$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_TARGET_DEVICE_NAME$edidProductCodeId$VH_ = DISPLAYCONFIG_TARGET_DEVICE_NAME$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("edidProductCodeId"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_TARGET_DEVICE_NAME$edidProductCodeId$VH() { return DISPLAYCONFIG_TARGET_DEVICE_NAME$edidProductCodeId$VH_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME$connectorInstance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_DEVICE_NAME$connectorInstance$LAYOUT() { return DISPLAYCONFIG_TARGET_DEVICE_NAME$connectorInstance$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_TARGET_DEVICE_NAME$connectorInstance$VH_ = DISPLAYCONFIG_TARGET_DEVICE_NAME$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("connectorInstance"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_TARGET_DEVICE_NAME$connectorInstance$VH() { return DISPLAYCONFIG_TARGET_DEVICE_NAME$connectorInstance$VH_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_PREFERRED_MODE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("type"),
            C_INT.withName("size"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id")
        ).withName("header"),
        C_INT.withName("width"),
        C_INT.withName("height"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONGLONG.withName("pixelRate"),
                MemoryLayout.ofStruct(
                    C_INT.withName("Numerator"),
                    C_INT.withName("Denominator")
                ).withName("hSyncFreq"),
                MemoryLayout.ofStruct(
                    C_INT.withName("Numerator"),
                    C_INT.withName("Denominator")
                ).withName("vSyncFreq"),
                MemoryLayout.ofStruct(
                    C_INT.withName("cx"),
                    C_INT.withName("cy")
                ).withName("activeSize"),
                MemoryLayout.ofStruct(
                    C_INT.withName("cx"),
                    C_INT.withName("cy")
                ).withName("totalSize"),
                MemoryLayout.ofStruct(
                    C_INT
                ).withName("AdditionalSignalInfo"),
                C_INT.withName("videoStandard"),
                C_INT.withName("scanLineOrdering")
            ).withName("targetVideoSignalInfo")
        ).withName("targetMode")
    ).withName("DISPLAYCONFIG_TARGET_PREFERRED_MODE");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_PREFERRED_MODE$struct$LAYOUT() { return DISPLAYCONFIG_TARGET_PREFERRED_MODE$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_PREFERRED_MODE$width$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_PREFERRED_MODE$width$LAYOUT() { return DISPLAYCONFIG_TARGET_PREFERRED_MODE$width$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_TARGET_PREFERRED_MODE$width$VH_ = DISPLAYCONFIG_TARGET_PREFERRED_MODE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("width"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_TARGET_PREFERRED_MODE$width$VH() { return DISPLAYCONFIG_TARGET_PREFERRED_MODE$width$VH_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_PREFERRED_MODE$height$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_PREFERRED_MODE$height$LAYOUT() { return DISPLAYCONFIG_TARGET_PREFERRED_MODE$height$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_TARGET_PREFERRED_MODE$height$VH_ = DISPLAYCONFIG_TARGET_PREFERRED_MODE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("height"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_TARGET_PREFERRED_MODE$height$VH() { return DISPLAYCONFIG_TARGET_PREFERRED_MODE$height$VH_; }

    static final MemoryLayout DISPLAYCONFIG_ADAPTER_NAME$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("type"),
            C_INT.withName("size"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id")
        ).withName("header"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("adapterDevicePath")
    ).withName("DISPLAYCONFIG_ADAPTER_NAME");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_ADAPTER_NAME$struct$LAYOUT() { return DISPLAYCONFIG_ADAPTER_NAME$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_BASE_TYPE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("type"),
            C_INT.withName("size"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id")
        ).withName("header"),
        C_INT.withName("baseOutputTechnology")
    ).withName("DISPLAYCONFIG_TARGET_BASE_TYPE");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_BASE_TYPE$struct$LAYOUT() { return DISPLAYCONFIG_TARGET_BASE_TYPE$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_TARGET_BASE_TYPE$baseOutputTechnology$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_TARGET_BASE_TYPE$baseOutputTechnology$LAYOUT() { return DISPLAYCONFIG_TARGET_BASE_TYPE$baseOutputTechnology$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_TARGET_BASE_TYPE$baseOutputTechnology$VH_ = DISPLAYCONFIG_TARGET_BASE_TYPE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("baseOutputTechnology"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_TARGET_BASE_TYPE$baseOutputTechnology$VH() { return DISPLAYCONFIG_TARGET_BASE_TYPE$baseOutputTechnology$VH_; }

    static final MemoryLayout DISPLAYCONFIG_SET_TARGET_PERSISTENCE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("type"),
            C_INT.withName("size"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id")
        ).withName("header"),
        C_INT,
        C_INT.withName("value")
    ).withName("DISPLAYCONFIG_SET_TARGET_PERSISTENCE");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_SET_TARGET_PERSISTENCE$struct$LAYOUT() { return DISPLAYCONFIG_SET_TARGET_PERSISTENCE$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_SET_TARGET_PERSISTENCE$value$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_SET_TARGET_PERSISTENCE$value$LAYOUT() { return DISPLAYCONFIG_SET_TARGET_PERSISTENCE$value$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_SET_TARGET_PERSISTENCE$value$VH_ = DISPLAYCONFIG_SET_TARGET_PERSISTENCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("value"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_SET_TARGET_PERSISTENCE$value$VH() { return DISPLAYCONFIG_SET_TARGET_PERSISTENCE$value$VH_; }

    static final MemoryLayout DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("type"),
            C_INT.withName("size"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id")
        ).withName("header"),
        C_INT,
        C_INT.withName("value")
    ).withName("DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION");
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION$struct$LAYOUT() { return DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION$struct$LAYOUT_; }

    static final MemoryLayout DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION$value$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION$value$LAYOUT() { return DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION$value$LAYOUT_; }

    static final VarHandle DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION$value$VH_ = DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("value"));
    public static java.lang.invoke.VarHandle DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION$value$VH() { return DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION$value$VH_; }

    public static int DISPLAYCONFIG_COLOR_ENCODING_RGB() { return (int)0L; }

    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR444() { return (int)1L; }

    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR422() { return (int)2L; }

    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR420() { return (int)3L; }

    public static int DISPLAYCONFIG_COLOR_ENCODING_INTENSITY() { return (int)4L; }

    public static int DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32() { return (int)-1L; }

    static final MemoryLayout _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("type"),
            C_INT.withName("size"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id")
        ).withName("header"),
        C_INT,
        C_INT.withName("value"),
        C_INT.withName("colorEncoding"),
        C_INT.withName("bitsPerColorChannel")
    ).withName("_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO");
    public static jdk.incubator.foreign.MemoryLayout _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$struct$LAYOUT() { return _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$struct$LAYOUT_; }

    static final MemoryLayout _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$value$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$value$LAYOUT() { return _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$value$LAYOUT_; }

    static final VarHandle _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$value$VH_ = _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("value"));
    public static java.lang.invoke.VarHandle _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$value$VH() { return _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$value$VH_; }

    static final MemoryLayout _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$colorEncoding$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$colorEncoding$LAYOUT() { return _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$colorEncoding$LAYOUT_; }

    static final VarHandle _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$colorEncoding$VH_ = _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("colorEncoding"));
    public static java.lang.invoke.VarHandle _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$colorEncoding$VH() { return _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$colorEncoding$VH_; }

    static final MemoryLayout _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$bitsPerColorChannel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$bitsPerColorChannel$LAYOUT() { return _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$bitsPerColorChannel$LAYOUT_; }

    static final VarHandle _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$bitsPerColorChannel$VH_ = _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bitsPerColorChannel"));
    public static java.lang.invoke.VarHandle _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$bitsPerColorChannel$VH() { return _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO$bitsPerColorChannel$VH_; }

    static final MemoryLayout _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("type"),
            C_INT.withName("size"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id")
        ).withName("header"),
        C_INT,
        C_INT.withName("value")
    ).withName("_DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE");
    public static jdk.incubator.foreign.MemoryLayout _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE$struct$LAYOUT() { return _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE$struct$LAYOUT_; }

    static final MemoryLayout _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE$value$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE$value$LAYOUT() { return _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE$value$LAYOUT_; }

    static final VarHandle _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE$value$VH_ = _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("value"));
    public static java.lang.invoke.VarHandle _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE$value$VH() { return _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE$value$VH_; }

    static final MemoryLayout _DISPLAYCONFIG_SDR_WHITE_LEVEL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("type"),
            C_INT.withName("size"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id")
        ).withName("header"),
        C_INT.withName("SDRWhiteLevel")
    ).withName("_DISPLAYCONFIG_SDR_WHITE_LEVEL");
    public static jdk.incubator.foreign.MemoryLayout _DISPLAYCONFIG_SDR_WHITE_LEVEL$struct$LAYOUT() { return _DISPLAYCONFIG_SDR_WHITE_LEVEL$struct$LAYOUT_; }

    static final MemoryLayout _DISPLAYCONFIG_SDR_WHITE_LEVEL$SDRWhiteLevel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DISPLAYCONFIG_SDR_WHITE_LEVEL$SDRWhiteLevel$LAYOUT() { return _DISPLAYCONFIG_SDR_WHITE_LEVEL$SDRWhiteLevel$LAYOUT_; }

    static final VarHandle _DISPLAYCONFIG_SDR_WHITE_LEVEL$SDRWhiteLevel$VH_ = _DISPLAYCONFIG_SDR_WHITE_LEVEL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SDRWhiteLevel"));
    public static java.lang.invoke.VarHandle _DISPLAYCONFIG_SDR_WHITE_LEVEL$SDRWhiteLevel$VH() { return _DISPLAYCONFIG_SDR_WHITE_LEVEL$SDRWhiteLevel$VH_; }

    static final MemoryLayout _RGNDATAHEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwSize"),
        C_INT.withName("iType"),
        C_INT.withName("nCount"),
        C_INT.withName("nRgnSize"),
        MemoryLayout.ofStruct(
            C_INT.withName("left"),
            C_INT.withName("top"),
            C_INT.withName("right"),
            C_INT.withName("bottom")
        ).withName("rcBound")
    ).withName("_RGNDATAHEADER");
    public static jdk.incubator.foreign.MemoryLayout _RGNDATAHEADER$struct$LAYOUT() { return _RGNDATAHEADER$struct$LAYOUT_; }

    static final MemoryLayout _RGNDATAHEADER$dwSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RGNDATAHEADER$dwSize$LAYOUT() { return _RGNDATAHEADER$dwSize$LAYOUT_; }

    static final VarHandle _RGNDATAHEADER$dwSize$VH_ = _RGNDATAHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    public static java.lang.invoke.VarHandle _RGNDATAHEADER$dwSize$VH() { return _RGNDATAHEADER$dwSize$VH_; }

    static final MemoryLayout _RGNDATAHEADER$iType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RGNDATAHEADER$iType$LAYOUT() { return _RGNDATAHEADER$iType$LAYOUT_; }

    static final VarHandle _RGNDATAHEADER$iType$VH_ = _RGNDATAHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iType"));
    public static java.lang.invoke.VarHandle _RGNDATAHEADER$iType$VH() { return _RGNDATAHEADER$iType$VH_; }

    static final MemoryLayout _RGNDATAHEADER$nCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RGNDATAHEADER$nCount$LAYOUT() { return _RGNDATAHEADER$nCount$LAYOUT_; }

    static final VarHandle _RGNDATAHEADER$nCount$VH_ = _RGNDATAHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nCount"));
    public static java.lang.invoke.VarHandle _RGNDATAHEADER$nCount$VH() { return _RGNDATAHEADER$nCount$VH_; }

    static final MemoryLayout _RGNDATAHEADER$nRgnSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RGNDATAHEADER$nRgnSize$LAYOUT() { return _RGNDATAHEADER$nRgnSize$LAYOUT_; }

    static final VarHandle _RGNDATAHEADER$nRgnSize$VH_ = _RGNDATAHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nRgnSize"));
    public static java.lang.invoke.VarHandle _RGNDATAHEADER$nRgnSize$VH() { return _RGNDATAHEADER$nRgnSize$VH_; }

    static final MemoryLayout _RGNDATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("dwSize"),
            C_INT.withName("iType"),
            C_INT.withName("nCount"),
            C_INT.withName("nRgnSize"),
            MemoryLayout.ofStruct(
                C_INT.withName("left"),
                C_INT.withName("top"),
                C_INT.withName("right"),
                C_INT.withName("bottom")
            ).withName("rcBound")
        ).withName("rdh"),
        MemoryLayout.ofSequence(1, C_BOOL).withName("Buffer"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_RGNDATA");
    public static jdk.incubator.foreign.MemoryLayout _RGNDATA$struct$LAYOUT() { return _RGNDATA$struct$LAYOUT_; }

    static final MemoryLayout _ABC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("abcA"),
        C_INT.withName("abcB"),
        C_INT.withName("abcC")
    ).withName("_ABC");
    public static jdk.incubator.foreign.MemoryLayout _ABC$struct$LAYOUT() { return _ABC$struct$LAYOUT_; }

    static final MemoryLayout _ABC$abcA$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ABC$abcA$LAYOUT() { return _ABC$abcA$LAYOUT_; }

    static final VarHandle _ABC$abcA$VH_ = _ABC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("abcA"));
    public static java.lang.invoke.VarHandle _ABC$abcA$VH() { return _ABC$abcA$VH_; }

    static final MemoryLayout _ABC$abcB$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ABC$abcB$LAYOUT() { return _ABC$abcB$LAYOUT_; }

    static final VarHandle _ABC$abcB$VH_ = _ABC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("abcB"));
    public static java.lang.invoke.VarHandle _ABC$abcB$VH() { return _ABC$abcB$VH_; }

    static final MemoryLayout _ABC$abcC$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ABC$abcC$LAYOUT() { return _ABC$abcC$LAYOUT_; }

    static final VarHandle _ABC$abcC$VH_ = _ABC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("abcC"));
    public static java.lang.invoke.VarHandle _ABC$abcC$VH() { return _ABC$abcC$VH_; }

    static final MemoryLayout _ABCFLOAT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_FLOAT.withName("abcfA"),
        C_FLOAT.withName("abcfB"),
        C_FLOAT.withName("abcfC")
    ).withName("_ABCFLOAT");
    public static jdk.incubator.foreign.MemoryLayout _ABCFLOAT$struct$LAYOUT() { return _ABCFLOAT$struct$LAYOUT_; }

    static final MemoryLayout _ABCFLOAT$abcfA$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout _ABCFLOAT$abcfA$LAYOUT() { return _ABCFLOAT$abcfA$LAYOUT_; }

    static final VarHandle _ABCFLOAT$abcfA$VH_ = _ABCFLOAT$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("abcfA"));
    public static java.lang.invoke.VarHandle _ABCFLOAT$abcfA$VH() { return _ABCFLOAT$abcfA$VH_; }

}

