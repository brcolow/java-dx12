// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$11 extends Windows_h$constants$10 {
    Windows_h$constants$11() {}
    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Name"),
        C_SHORT.withName("ValueType"),
        C_SHORT.withName("Reserved"),
        C_INT.withName("Flags"),
        C_INT.withName("ValueCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            C_POINTER.withName("pInt64"),
            C_POINTER.withName("pUint64"),
            C_POINTER.withName("ppString"),
            C_POINTER.withName("pFqbn"),
            C_POINTER.withName("pOctetString")
        ).withName("Values")
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_V1");
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Name$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Name$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Name$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Name")));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ValueType"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ValueCount"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH_; }

    static final MemoryLayout Values$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("pInt64"),
        C_POINTER.withName("pUint64"),
        C_POINTER.withName("ppString"),
        C_POINTER.withName("pFqbn"),
        C_POINTER.withName("pOctetString")
    );
    public static jdk.incubator.foreign.MemoryLayout Values$struct$LAYOUT() { return Values$struct$LAYOUT_; }

    static final MemoryLayout Values$pInt64$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout Values$pInt64$LAYOUT() { return Values$pInt64$LAYOUT_; }

    static final VarHandle Values$pInt64$VH_ = MemoryHandles.asAddressVarHandle(Values$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pInt64")));
    public static java.lang.invoke.VarHandle Values$pInt64$VH() { return Values$pInt64$VH_; }

    static final MemoryLayout Values$pUint64$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout Values$pUint64$LAYOUT() { return Values$pUint64$LAYOUT_; }

    static final VarHandle Values$pUint64$VH_ = MemoryHandles.asAddressVarHandle(Values$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUint64")));
    public static java.lang.invoke.VarHandle Values$pUint64$VH() { return Values$pUint64$VH_; }

    static final MemoryLayout Values$ppString$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout Values$ppString$LAYOUT() { return Values$ppString$LAYOUT_; }

    static final VarHandle Values$ppString$VH_ = MemoryHandles.asAddressVarHandle(Values$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ppString")));
    public static java.lang.invoke.VarHandle Values$ppString$VH() { return Values$ppString$VH_; }

    static final MemoryLayout Values$pFqbn$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout Values$pFqbn$LAYOUT() { return Values$pFqbn$LAYOUT_; }

    static final VarHandle Values$pFqbn$VH_ = MemoryHandles.asAddressVarHandle(Values$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pFqbn")));
    public static java.lang.invoke.VarHandle Values$pFqbn$VH() { return Values$pFqbn$VH_; }

    static final MemoryLayout Values$pOctetString$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout Values$pOctetString$LAYOUT() { return Values$pOctetString$LAYOUT_; }

    static final VarHandle Values$pOctetString$VH_ = MemoryHandles.asAddressVarHandle(Values$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pOctetString")));
    public static java.lang.invoke.VarHandle Values$pOctetString$VH() { return Values$pOctetString$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Name"),
        C_SHORT.withName("ValueType"),
        C_SHORT.withName("Reserved"),
        C_INT.withName("Flags"),
        C_INT.withName("ValueCount"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofSequence(1, C_INT).withName("pInt64"),
            MemoryLayout.ofSequence(1, C_INT).withName("pUint64"),
            MemoryLayout.ofSequence(1, C_INT).withName("ppString"),
            MemoryLayout.ofSequence(1, C_INT).withName("pFqbn"),
            MemoryLayout.ofSequence(1, C_INT).withName("pOctetString")
        ).withName("Values")
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1");
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Name"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ValueType"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ValueCount"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Version"),
        C_SHORT.withName("Reserved"),
        C_INT.withName("AttributeCount"),
        MemoryLayout.ofUnion(
            C_POINTER.withName("pAttributeV1")
        ).withName("Attribute")
    ).withName("_CLAIM_SECURITY_ATTRIBUTES_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH_ = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH_ = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH_ = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AttributeCount"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH_; }

    static final MemoryLayout Attribute$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("pAttributeV1")
    );
    public static jdk.incubator.foreign.MemoryLayout Attribute$struct$LAYOUT() { return Attribute$struct$LAYOUT_; }

    static final MemoryLayout Attribute$pAttributeV1$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout Attribute$pAttributeV1$LAYOUT() { return Attribute$pAttributeV1$LAYOUT_; }

    static final VarHandle Attribute$pAttributeV1$VH_ = MemoryHandles.asAddressVarHandle(Attribute$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAttributeV1")));
    public static java.lang.invoke.VarHandle Attribute$pAttributeV1$VH() { return Attribute$pAttributeV1$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Length"),
        C_INT.withName("ImpersonationLevel"),
        C_BOOL.withName("ContextTrackingMode"),
        C_BOOL.withName("EffectiveOnly"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_SECURITY_QUALITY_OF_SERVICE");
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$Length$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$Length$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$Length$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$Length$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    public static java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$Length$VH() { return _SECURITY_QUALITY_OF_SERVICE$Length$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImpersonationLevel"));
    public static java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH() { return _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ContextTrackingMode"));
    public static java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH() { return _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EffectiveOnly"));
    public static java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH() { return _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Token"),
        C_BOOL.withName("CopyOnOpen"),
        C_BOOL.withName("EffectiveOnly"),
        MemoryLayout.ofPaddingBits(16),
        C_INT.withName("Level")
    ).withName("_SE_IMPERSONATION_STATE");
    public static jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$struct$LAYOUT() { return _SE_IMPERSONATION_STATE$struct$LAYOUT_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$Token$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$Token$LAYOUT() { return _SE_IMPERSONATION_STATE$Token$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$Token$VH_ = MemoryHandles.asAddressVarHandle(_SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Token")));
    public static java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$Token$VH() { return _SE_IMPERSONATION_STATE$Token$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$CopyOnOpen$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$CopyOnOpen$LAYOUT() { return _SE_IMPERSONATION_STATE$CopyOnOpen$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$CopyOnOpen$VH_ = _SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("CopyOnOpen"));
    public static java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$CopyOnOpen$VH() { return _SE_IMPERSONATION_STATE$CopyOnOpen$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$EffectiveOnly$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$EffectiveOnly$LAYOUT() { return _SE_IMPERSONATION_STATE$EffectiveOnly$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$EffectiveOnly$VH_ = _SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EffectiveOnly"));
    public static java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$EffectiveOnly$VH() { return _SE_IMPERSONATION_STATE$EffectiveOnly$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$Level$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$Level$LAYOUT() { return _SE_IMPERSONATION_STATE$Level$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$Level$VH_ = _SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Level"));
    public static java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$Level$VH() { return _SE_IMPERSONATION_STATE$Level$VH_; }

    public static int SeImageSignatureNone() { return (int)0L; }

    public static int SeImageSignatureEmbedded() { return (int)1L; }

    public static int SeImageSignatureCache() { return (int)2L; }

    public static int SeImageSignatureCatalogCached() { return (int)3L; }

    public static int SeImageSignatureCatalogNotCached() { return (int)4L; }

    public static int SeImageSignatureCatalogHint() { return (int)5L; }

    public static int SeImageSignaturePackageCatalog() { return (int)6L; }

    public static int SeLearningModeInvalidType() { return (int)0L; }

    public static int SeLearningModeSettings() { return (int)1L; }

    public static int SeLearningModeMax() { return (int)2L; }

    static final MemoryLayout _SECURITY_CAPABILITIES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("AppContainerSid"),
        C_POINTER.withName("Capabilities"),
        C_INT.withName("CapabilityCount"),
        C_INT.withName("Reserved")
    ).withName("_SECURITY_CAPABILITIES");
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$struct$LAYOUT() { return _SECURITY_CAPABILITIES$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$AppContainerSid$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$AppContainerSid$LAYOUT() { return _SECURITY_CAPABILITIES$AppContainerSid$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$AppContainerSid$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AppContainerSid")));
    public static java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$AppContainerSid$VH() { return _SECURITY_CAPABILITIES$AppContainerSid$VH_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$Capabilities$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$Capabilities$LAYOUT() { return _SECURITY_CAPABILITIES$Capabilities$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$Capabilities$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Capabilities")));
    public static java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$Capabilities$VH() { return _SECURITY_CAPABILITIES$Capabilities$VH_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$CapabilityCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$CapabilityCount$LAYOUT() { return _SECURITY_CAPABILITIES$CapabilityCount$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$CapabilityCount$VH_ = _SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CapabilityCount"));
    public static java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$CapabilityCount$VH() { return _SECURITY_CAPABILITIES$CapabilityCount$VH_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$Reserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$Reserved$LAYOUT() { return _SECURITY_CAPABILITIES$Reserved$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$Reserved$VH_ = _SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$Reserved$VH() { return _SECURITY_CAPABILITIES$Reserved$VH_; }

    static final MemoryLayout _JOB_SET_ARRAY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("JobHandle"),
        C_INT.withName("MemberLevel"),
        C_INT.withName("Flags")
    ).withName("_JOB_SET_ARRAY");
    public static jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$struct$LAYOUT() { return _JOB_SET_ARRAY$struct$LAYOUT_; }

    static final MemoryLayout _JOB_SET_ARRAY$JobHandle$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$JobHandle$LAYOUT() { return _JOB_SET_ARRAY$JobHandle$LAYOUT_; }

    static final VarHandle _JOB_SET_ARRAY$JobHandle$VH_ = MemoryHandles.asAddressVarHandle(_JOB_SET_ARRAY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobHandle")));
    public static java.lang.invoke.VarHandle _JOB_SET_ARRAY$JobHandle$VH() { return _JOB_SET_ARRAY$JobHandle$VH_; }

    static final MemoryLayout _JOB_SET_ARRAY$MemberLevel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$MemberLevel$LAYOUT() { return _JOB_SET_ARRAY$MemberLevel$LAYOUT_; }

    static final VarHandle _JOB_SET_ARRAY$MemberLevel$VH_ = _JOB_SET_ARRAY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MemberLevel"));
    public static java.lang.invoke.VarHandle _JOB_SET_ARRAY$MemberLevel$VH() { return _JOB_SET_ARRAY$MemberLevel$VH_; }

    static final MemoryLayout _JOB_SET_ARRAY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$Flags$LAYOUT() { return _JOB_SET_ARRAY$Flags$LAYOUT_; }

    static final VarHandle _JOB_SET_ARRAY$Flags$VH_ = _JOB_SET_ARRAY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _JOB_SET_ARRAY$Flags$VH() { return _JOB_SET_ARRAY$Flags$VH_; }

    static final MemoryLayout _EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Next"),
        C_POINTER.withName("Handler")
    ).withName("_EXCEPTION_REGISTRATION_RECORD");
    public static jdk.incubator.foreign.MemoryLayout _EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT() { return _EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Next$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Next$LAYOUT() { return _EXCEPTION_REGISTRATION_RECORD$Next$LAYOUT_; }

    static final VarHandle _EXCEPTION_REGISTRATION_RECORD$Next$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    public static java.lang.invoke.VarHandle _EXCEPTION_REGISTRATION_RECORD$Next$VH() { return _EXCEPTION_REGISTRATION_RECORD$Next$VH_; }

    static final MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Handler$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Handler$LAYOUT() { return _EXCEPTION_REGISTRATION_RECORD$Handler$LAYOUT_; }

    static final VarHandle _EXCEPTION_REGISTRATION_RECORD$Handler$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Handler")));
    public static java.lang.invoke.VarHandle _EXCEPTION_REGISTRATION_RECORD$Handler$VH() { return _EXCEPTION_REGISTRATION_RECORD$Handler$VH_; }

    static final MemoryLayout _NT_TIB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("ExceptionList"),
        C_POINTER.withName("StackBase"),
        C_POINTER.withName("StackLimit"),
        C_POINTER.withName("SubSystemTib"),
        C_POINTER.withName("FiberData"),
        C_INT.withName("Version"),
        C_POINTER.withName("ArbitraryUserPointer"),
        C_POINTER.withName("Self")
    ).withName("_NT_TIB");
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB$struct$LAYOUT() { return _NT_TIB$struct$LAYOUT_; }

    static final MemoryLayout _NT_TIB$ExceptionList$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB$ExceptionList$LAYOUT() { return _NT_TIB$ExceptionList$LAYOUT_; }

    static final VarHandle _NT_TIB$ExceptionList$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionList")));
    public static java.lang.invoke.VarHandle _NT_TIB$ExceptionList$VH() { return _NT_TIB$ExceptionList$VH_; }

    static final MemoryLayout _NT_TIB$StackBase$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB$StackBase$LAYOUT() { return _NT_TIB$StackBase$LAYOUT_; }

    static final VarHandle _NT_TIB$StackBase$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackBase")));
    public static java.lang.invoke.VarHandle _NT_TIB$StackBase$VH() { return _NT_TIB$StackBase$VH_; }

    static final MemoryLayout _NT_TIB$StackLimit$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB$StackLimit$LAYOUT() { return _NT_TIB$StackLimit$LAYOUT_; }

    static final VarHandle _NT_TIB$StackLimit$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackLimit")));
    public static java.lang.invoke.VarHandle _NT_TIB$StackLimit$VH() { return _NT_TIB$StackLimit$VH_; }

    static final MemoryLayout _NT_TIB$SubSystemTib$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB$SubSystemTib$LAYOUT() { return _NT_TIB$SubSystemTib$LAYOUT_; }

    static final VarHandle _NT_TIB$SubSystemTib$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SubSystemTib")));
    public static java.lang.invoke.VarHandle _NT_TIB$SubSystemTib$VH() { return _NT_TIB$SubSystemTib$VH_; }

    static final MemoryLayout _NT_TIB$FiberData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB$FiberData$LAYOUT() { return _NT_TIB$FiberData$LAYOUT_; }

    static final VarHandle _NT_TIB$FiberData$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FiberData")));
    public static java.lang.invoke.VarHandle _NT_TIB$FiberData$VH() { return _NT_TIB$FiberData$VH_; }

    static final MemoryLayout _NT_TIB$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB$Version$LAYOUT() { return _NT_TIB$Version$LAYOUT_; }

    static final VarHandle _NT_TIB$Version$VH_ = _NT_TIB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _NT_TIB$Version$VH() { return _NT_TIB$Version$VH_; }

    static final MemoryLayout _NT_TIB$ArbitraryUserPointer$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB$ArbitraryUserPointer$LAYOUT() { return _NT_TIB$ArbitraryUserPointer$LAYOUT_; }

    static final VarHandle _NT_TIB$ArbitraryUserPointer$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ArbitraryUserPointer")));
    public static java.lang.invoke.VarHandle _NT_TIB$ArbitraryUserPointer$VH() { return _NT_TIB$ArbitraryUserPointer$VH_; }

    static final MemoryLayout _NT_TIB$Self$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB$Self$LAYOUT() { return _NT_TIB$Self$LAYOUT_; }

    static final VarHandle _NT_TIB$Self$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Self")));
    public static java.lang.invoke.VarHandle _NT_TIB$Self$VH() { return _NT_TIB$Self$VH_; }

    static final MemoryLayout _NT_TIB32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ExceptionList"),
        C_INT.withName("StackBase"),
        C_INT.withName("StackLimit"),
        C_INT.withName("SubSystemTib"),
        C_INT.withName("FiberData"),
        C_INT.withName("Version"),
        C_INT.withName("ArbitraryUserPointer"),
        C_INT.withName("Self")
    ).withName("_NT_TIB32");
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB32$struct$LAYOUT() { return _NT_TIB32$struct$LAYOUT_; }

    static final MemoryLayout _NT_TIB32$ExceptionList$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB32$ExceptionList$LAYOUT() { return _NT_TIB32$ExceptionList$LAYOUT_; }

    static final VarHandle _NT_TIB32$ExceptionList$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionList"));
    public static java.lang.invoke.VarHandle _NT_TIB32$ExceptionList$VH() { return _NT_TIB32$ExceptionList$VH_; }

    static final MemoryLayout _NT_TIB32$StackBase$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB32$StackBase$LAYOUT() { return _NT_TIB32$StackBase$LAYOUT_; }

    static final VarHandle _NT_TIB32$StackBase$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StackBase"));
    public static java.lang.invoke.VarHandle _NT_TIB32$StackBase$VH() { return _NT_TIB32$StackBase$VH_; }

    static final MemoryLayout _NT_TIB32$StackLimit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB32$StackLimit$LAYOUT() { return _NT_TIB32$StackLimit$LAYOUT_; }

    static final VarHandle _NT_TIB32$StackLimit$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StackLimit"));
    public static java.lang.invoke.VarHandle _NT_TIB32$StackLimit$VH() { return _NT_TIB32$StackLimit$VH_; }

    static final MemoryLayout _NT_TIB32$SubSystemTib$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB32$SubSystemTib$LAYOUT() { return _NT_TIB32$SubSystemTib$LAYOUT_; }

    static final VarHandle _NT_TIB32$SubSystemTib$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SubSystemTib"));
    public static java.lang.invoke.VarHandle _NT_TIB32$SubSystemTib$VH() { return _NT_TIB32$SubSystemTib$VH_; }

    static final MemoryLayout _NT_TIB32$FiberData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB32$FiberData$LAYOUT() { return _NT_TIB32$FiberData$LAYOUT_; }

    static final VarHandle _NT_TIB32$FiberData$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FiberData"));
    public static java.lang.invoke.VarHandle _NT_TIB32$FiberData$VH() { return _NT_TIB32$FiberData$VH_; }

    static final MemoryLayout _NT_TIB32$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB32$Version$LAYOUT() { return _NT_TIB32$Version$LAYOUT_; }

    static final VarHandle _NT_TIB32$Version$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _NT_TIB32$Version$VH() { return _NT_TIB32$Version$VH_; }

    static final MemoryLayout _NT_TIB32$ArbitraryUserPointer$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB32$ArbitraryUserPointer$LAYOUT() { return _NT_TIB32$ArbitraryUserPointer$LAYOUT_; }

    static final VarHandle _NT_TIB32$ArbitraryUserPointer$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArbitraryUserPointer"));
    public static java.lang.invoke.VarHandle _NT_TIB32$ArbitraryUserPointer$VH() { return _NT_TIB32$ArbitraryUserPointer$VH_; }

    static final MemoryLayout _NT_TIB32$Self$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB32$Self$LAYOUT() { return _NT_TIB32$Self$LAYOUT_; }

    static final VarHandle _NT_TIB32$Self$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Self"));
    public static java.lang.invoke.VarHandle _NT_TIB32$Self$VH() { return _NT_TIB32$Self$VH_; }

    static final MemoryLayout _NT_TIB64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("ExceptionList"),
        C_LONGLONG.withName("StackBase"),
        C_LONGLONG.withName("StackLimit"),
        C_LONGLONG.withName("SubSystemTib"),
        C_LONGLONG.withName("FiberData"),
        C_INT.withName("Version"),
        C_LONGLONG.withName("ArbitraryUserPointer"),
        C_LONGLONG.withName("Self")
    ).withName("_NT_TIB64");
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB64$struct$LAYOUT() { return _NT_TIB64$struct$LAYOUT_; }

    static final MemoryLayout _NT_TIB64$ExceptionList$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB64$ExceptionList$LAYOUT() { return _NT_TIB64$ExceptionList$LAYOUT_; }

    static final VarHandle _NT_TIB64$ExceptionList$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionList"));
    public static java.lang.invoke.VarHandle _NT_TIB64$ExceptionList$VH() { return _NT_TIB64$ExceptionList$VH_; }

    static final MemoryLayout _NT_TIB64$StackBase$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB64$StackBase$LAYOUT() { return _NT_TIB64$StackBase$LAYOUT_; }

    static final VarHandle _NT_TIB64$StackBase$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackBase"));
    public static java.lang.invoke.VarHandle _NT_TIB64$StackBase$VH() { return _NT_TIB64$StackBase$VH_; }

    static final MemoryLayout _NT_TIB64$StackLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB64$StackLimit$LAYOUT() { return _NT_TIB64$StackLimit$LAYOUT_; }

    static final VarHandle _NT_TIB64$StackLimit$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackLimit"));
    public static java.lang.invoke.VarHandle _NT_TIB64$StackLimit$VH() { return _NT_TIB64$StackLimit$VH_; }

    static final MemoryLayout _NT_TIB64$SubSystemTib$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB64$SubSystemTib$LAYOUT() { return _NT_TIB64$SubSystemTib$LAYOUT_; }

    static final VarHandle _NT_TIB64$SubSystemTib$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SubSystemTib"));
    public static java.lang.invoke.VarHandle _NT_TIB64$SubSystemTib$VH() { return _NT_TIB64$SubSystemTib$VH_; }

    static final MemoryLayout _NT_TIB64$FiberData$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB64$FiberData$LAYOUT() { return _NT_TIB64$FiberData$LAYOUT_; }

    static final VarHandle _NT_TIB64$FiberData$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FiberData"));
    public static java.lang.invoke.VarHandle _NT_TIB64$FiberData$VH() { return _NT_TIB64$FiberData$VH_; }

    static final MemoryLayout _NT_TIB64$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB64$Version$LAYOUT() { return _NT_TIB64$Version$LAYOUT_; }

    static final VarHandle _NT_TIB64$Version$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _NT_TIB64$Version$VH() { return _NT_TIB64$Version$VH_; }

    static final MemoryLayout _NT_TIB64$ArbitraryUserPointer$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB64$ArbitraryUserPointer$LAYOUT() { return _NT_TIB64$ArbitraryUserPointer$LAYOUT_; }

    static final VarHandle _NT_TIB64$ArbitraryUserPointer$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ArbitraryUserPointer"));
    public static java.lang.invoke.VarHandle _NT_TIB64$ArbitraryUserPointer$VH() { return _NT_TIB64$ArbitraryUserPointer$VH_; }

    static final MemoryLayout _NT_TIB64$Self$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _NT_TIB64$Self$LAYOUT() { return _NT_TIB64$Self$LAYOUT_; }

    static final VarHandle _NT_TIB64$Self$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Self"));
    public static java.lang.invoke.VarHandle _NT_TIB64$Self$VH() { return _NT_TIB64$Self$VH_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("UmsVersion"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("UmsContext"),
        C_POINTER.withName("UmsCompletionList")
    ).withName("_UMS_CREATE_THREAD_ATTRIBUTES");
    public static jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$LAYOUT_; }

    static final VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH_ = _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UmsVersion"));
    public static java.lang.invoke.VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$LAYOUT_; }

    static final VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH_ = MemoryHandles.asAddressVarHandle(_UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UmsContext")));
    public static java.lang.invoke.VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$LAYOUT_; }

    static final VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH_ = MemoryHandles.asAddressVarHandle(_UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UmsCompletionList")));
    public static java.lang.invoke.VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH_; }

    static final MemoryLayout _WOW64_ARCHITECTURE_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT
    ).withName("_WOW64_ARCHITECTURE_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _WOW64_ARCHITECTURE_INFORMATION$struct$LAYOUT() { return _WOW64_ARCHITECTURE_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("TargetAddress"),
        C_LONGLONG.withName("Flags")
    ).withName("_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$struct$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$VH_ = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TargetAddress"));
    public static java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$VH_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$VH_ = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$VH_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("NumberOfTargets"),
        C_SHORT.withName("Reserved"),
        C_INT.withName("Reserved2"),
        C_POINTER.withName("Targets")
    ).withName("_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$VH_ = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfTargets"));
    public static java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$VH_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$VH_ = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$VH_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$VH_ = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    public static java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$VH_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$VH_ = MemoryHandles.asAddressVarHandle(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Targets")));
    public static java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$VH_; }

    static final MemoryLayout _QUOTA_LIMITS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("PagedPoolLimit"),
        C_LONGLONG.withName("NonPagedPoolLimit"),
        C_LONGLONG.withName("MinimumWorkingSetSize"),
        C_LONGLONG.withName("MaximumWorkingSetSize"),
        C_LONGLONG.withName("PagefileLimit"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TimeLimit")
    ).withName("_QUOTA_LIMITS");
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$struct$LAYOUT() { return _QUOTA_LIMITS$struct$LAYOUT_; }

    static final MemoryLayout _QUOTA_LIMITS$PagedPoolLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$PagedPoolLimit$LAYOUT() { return _QUOTA_LIMITS$PagedPoolLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS$PagedPoolLimit$VH_ = _QUOTA_LIMITS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PagedPoolLimit"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS$PagedPoolLimit$VH() { return _QUOTA_LIMITS$PagedPoolLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS$NonPagedPoolLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$NonPagedPoolLimit$LAYOUT() { return _QUOTA_LIMITS$NonPagedPoolLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS$NonPagedPoolLimit$VH_ = _QUOTA_LIMITS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NonPagedPoolLimit"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS$NonPagedPoolLimit$VH() { return _QUOTA_LIMITS$NonPagedPoolLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS$MinimumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$MinimumWorkingSetSize$LAYOUT() { return _QUOTA_LIMITS$MinimumWorkingSetSize$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS$MinimumWorkingSetSize$VH_ = _QUOTA_LIMITS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MinimumWorkingSetSize"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS$MinimumWorkingSetSize$VH() { return _QUOTA_LIMITS$MinimumWorkingSetSize$VH_; }

    static final MemoryLayout _QUOTA_LIMITS$MaximumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$MaximumWorkingSetSize$LAYOUT() { return _QUOTA_LIMITS$MaximumWorkingSetSize$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS$MaximumWorkingSetSize$VH_ = _QUOTA_LIMITS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumWorkingSetSize"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS$MaximumWorkingSetSize$VH() { return _QUOTA_LIMITS$MaximumWorkingSetSize$VH_; }

    static final MemoryLayout _QUOTA_LIMITS$PagefileLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$PagefileLimit$LAYOUT() { return _QUOTA_LIMITS$PagefileLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS$PagefileLimit$VH_ = _QUOTA_LIMITS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PagefileLimit"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS$PagefileLimit$VH() { return _QUOTA_LIMITS$PagefileLimit$VH_; }

    static final MemoryLayout _RATE_QUOTA_LIMIT$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_INT.withName("RateData"),
        C_INT
    ).withName("_RATE_QUOTA_LIMIT");
    public static jdk.incubator.foreign.MemoryLayout _RATE_QUOTA_LIMIT$struct$LAYOUT() { return _RATE_QUOTA_LIMIT$struct$LAYOUT_; }

    static final MemoryLayout _RATE_QUOTA_LIMIT$RateData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RATE_QUOTA_LIMIT$RateData$LAYOUT() { return _RATE_QUOTA_LIMIT$RateData$LAYOUT_; }

    static final VarHandle _RATE_QUOTA_LIMIT$RateData$VH_ = _RATE_QUOTA_LIMIT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateData"));
    public static java.lang.invoke.VarHandle _RATE_QUOTA_LIMIT$RateData$VH() { return _RATE_QUOTA_LIMIT$RateData$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("PagedPoolLimit"),
        C_LONGLONG.withName("NonPagedPoolLimit"),
        C_LONGLONG.withName("MinimumWorkingSetSize"),
        C_LONGLONG.withName("MaximumWorkingSetSize"),
        C_LONGLONG.withName("PagefileLimit"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TimeLimit"),
        C_LONGLONG.withName("WorkingSetLimit"),
        C_LONGLONG.withName("Reserved2"),
        C_LONGLONG.withName("Reserved3"),
        C_LONGLONG.withName("Reserved4"),
        C_INT.withName("Flags"),
        MemoryLayout.ofUnion(
            C_INT.withName("RateData"),
            C_INT
        ).withName("CpuRateLimit")
    ).withName("_QUOTA_LIMITS_EX");
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$struct$LAYOUT() { return _QUOTA_LIMITS_EX$struct$LAYOUT_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$PagedPoolLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$PagedPoolLimit$LAYOUT() { return _QUOTA_LIMITS_EX$PagedPoolLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$PagedPoolLimit$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PagedPoolLimit"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$PagedPoolLimit$VH() { return _QUOTA_LIMITS_EX$PagedPoolLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$NonPagedPoolLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$NonPagedPoolLimit$LAYOUT() { return _QUOTA_LIMITS_EX$NonPagedPoolLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$NonPagedPoolLimit$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NonPagedPoolLimit"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$NonPagedPoolLimit$VH() { return _QUOTA_LIMITS_EX$NonPagedPoolLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$MinimumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$MinimumWorkingSetSize$LAYOUT() { return _QUOTA_LIMITS_EX$MinimumWorkingSetSize$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$MinimumWorkingSetSize$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MinimumWorkingSetSize"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$MinimumWorkingSetSize$VH() { return _QUOTA_LIMITS_EX$MinimumWorkingSetSize$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$MaximumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$MaximumWorkingSetSize$LAYOUT() { return _QUOTA_LIMITS_EX$MaximumWorkingSetSize$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$MaximumWorkingSetSize$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumWorkingSetSize"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$MaximumWorkingSetSize$VH() { return _QUOTA_LIMITS_EX$MaximumWorkingSetSize$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$PagefileLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$PagefileLimit$LAYOUT() { return _QUOTA_LIMITS_EX$PagefileLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$PagefileLimit$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PagefileLimit"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$PagefileLimit$VH() { return _QUOTA_LIMITS_EX$PagefileLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$WorkingSetLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$WorkingSetLimit$LAYOUT() { return _QUOTA_LIMITS_EX$WorkingSetLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$WorkingSetLimit$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("WorkingSetLimit"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$WorkingSetLimit$VH() { return _QUOTA_LIMITS_EX$WorkingSetLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$Reserved2$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$Reserved2$LAYOUT() { return _QUOTA_LIMITS_EX$Reserved2$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$Reserved2$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$Reserved2$VH() { return _QUOTA_LIMITS_EX$Reserved2$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$Reserved3$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$Reserved3$LAYOUT() { return _QUOTA_LIMITS_EX$Reserved3$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$Reserved3$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved3"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$Reserved3$VH() { return _QUOTA_LIMITS_EX$Reserved3$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$Reserved4$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$Reserved4$LAYOUT() { return _QUOTA_LIMITS_EX$Reserved4$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$Reserved4$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved4"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$Reserved4$VH() { return _QUOTA_LIMITS_EX$Reserved4$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$Flags$LAYOUT() { return _QUOTA_LIMITS_EX$Flags$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$Flags$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$Flags$VH() { return _QUOTA_LIMITS_EX$Flags$VH_; }

    static final MemoryLayout _IO_COUNTERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("ReadOperationCount"),
        C_LONGLONG.withName("WriteOperationCount"),
        C_LONGLONG.withName("OtherOperationCount"),
        C_LONGLONG.withName("ReadTransferCount"),
        C_LONGLONG.withName("WriteTransferCount"),
        C_LONGLONG.withName("OtherTransferCount")
    ).withName("_IO_COUNTERS");
    public static jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$struct$LAYOUT() { return _IO_COUNTERS$struct$LAYOUT_; }

    static final MemoryLayout _IO_COUNTERS$ReadOperationCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$ReadOperationCount$LAYOUT() { return _IO_COUNTERS$ReadOperationCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$ReadOperationCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReadOperationCount"));
    public static java.lang.invoke.VarHandle _IO_COUNTERS$ReadOperationCount$VH() { return _IO_COUNTERS$ReadOperationCount$VH_; }

    static final MemoryLayout _IO_COUNTERS$WriteOperationCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$WriteOperationCount$LAYOUT() { return _IO_COUNTERS$WriteOperationCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$WriteOperationCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("WriteOperationCount"));
    public static java.lang.invoke.VarHandle _IO_COUNTERS$WriteOperationCount$VH() { return _IO_COUNTERS$WriteOperationCount$VH_; }

    static final MemoryLayout _IO_COUNTERS$OtherOperationCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$OtherOperationCount$LAYOUT() { return _IO_COUNTERS$OtherOperationCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$OtherOperationCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OtherOperationCount"));
    public static java.lang.invoke.VarHandle _IO_COUNTERS$OtherOperationCount$VH() { return _IO_COUNTERS$OtherOperationCount$VH_; }

    static final MemoryLayout _IO_COUNTERS$ReadTransferCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$ReadTransferCount$LAYOUT() { return _IO_COUNTERS$ReadTransferCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$ReadTransferCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReadTransferCount"));
    public static java.lang.invoke.VarHandle _IO_COUNTERS$ReadTransferCount$VH() { return _IO_COUNTERS$ReadTransferCount$VH_; }

    static final MemoryLayout _IO_COUNTERS$WriteTransferCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$WriteTransferCount$LAYOUT() { return _IO_COUNTERS$WriteTransferCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$WriteTransferCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("WriteTransferCount"));
    public static java.lang.invoke.VarHandle _IO_COUNTERS$WriteTransferCount$VH() { return _IO_COUNTERS$WriteTransferCount$VH_; }

    static final MemoryLayout _IO_COUNTERS$OtherTransferCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$OtherTransferCount$LAYOUT() { return _IO_COUNTERS$OtherTransferCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$OtherTransferCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OtherTransferCount"));
    public static java.lang.invoke.VarHandle _IO_COUNTERS$OtherTransferCount$VH() { return _IO_COUNTERS$OtherTransferCount$VH_; }

    public static int PMCCounter() { return (int)0L; }

    public static int MaxHardwareCounterType() { return (int)1L; }

    public static int ProcessDEPPolicy() { return (int)0L; }

    public static int ProcessASLRPolicy() { return (int)1L; }

    public static int ProcessDynamicCodePolicy() { return (int)2L; }

    public static int ProcessStrictHandleCheckPolicy() { return (int)3L; }

    public static int ProcessSystemCallDisablePolicy() { return (int)4L; }

    public static int ProcessMitigationOptionsMask() { return (int)5L; }

    public static int ProcessExtensionPointDisablePolicy() { return (int)6L; }

    public static int ProcessControlFlowGuardPolicy() { return (int)7L; }

    public static int ProcessSignaturePolicy() { return (int)8L; }

    public static int ProcessFontDisablePolicy() { return (int)9L; }

    public static int ProcessImageLoadPolicy() { return (int)10L; }

    public static int ProcessSystemCallFilterPolicy() { return (int)11L; }

    public static int ProcessPayloadRestrictionPolicy() { return (int)12L; }

    public static int ProcessChildProcessPolicy() { return (int)13L; }

    public static int ProcessSideChannelIsolationPolicy() { return (int)14L; }

    public static int ProcessUserShadowStackPolicy() { return (int)15L; }

    public static int MaxProcessMitigationPolicy() { return (int)16L; }

    static final MemoryLayout _PROCESS_MITIGATION_ASLR_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_ASLR_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_ASLR_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_ASLR_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_ASLR_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_ASLR_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_ASLR_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_ASLR_POLICY$Flags$VH_ = _PROCESS_MITIGATION_ASLR_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_ASLR_POLICY$Flags$VH() { return _PROCESS_MITIGATION_ASLR_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT,
        C_BOOL.withName("Permanent"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_PROCESS_MITIGATION_DEP_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_DEP_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_DEP_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_DEP_POLICY$Flags$VH_ = _PROCESS_MITIGATION_DEP_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_DEP_POLICY$Flags$VH() { return _PROCESS_MITIGATION_DEP_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$Permanent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$Permanent$LAYOUT() { return _PROCESS_MITIGATION_DEP_POLICY$Permanent$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_DEP_POLICY$Permanent$VH_ = _PROCESS_MITIGATION_DEP_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Permanent"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_DEP_POLICY$Permanent$VH() { return _PROCESS_MITIGATION_DEP_POLICY$Permanent$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$VH_ = _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$VH() { return _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$VH_ = _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$VH() { return _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$VH_ = _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$VH() { return _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$VH_ = _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$VH() { return _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$VH_ = _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$VH() { return _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$VH_ = _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$VH() { return _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_FONT_DISABLE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_FONT_DISABLE_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_FONT_DISABLE_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_FONT_DISABLE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$VH_ = _PROCESS_MITIGATION_FONT_DISABLE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$VH() { return _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_IMAGE_LOAD_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$VH_ = _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$VH() { return _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$VH_ = _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$VH() { return _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$VH_ = _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$VH() { return _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_CHILD_PROCESS_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$VH_ = _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$VH() { return _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$VH_ = _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$VH() { return _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$VH_ = _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$VH() { return _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TotalUserTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TotalKernelTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ThisPeriodTotalUserTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ThisPeriodTotalKernelTime"),
        C_INT.withName("TotalPageFaultCount"),
        C_INT.withName("TotalProcesses"),
        C_INT.withName("ActiveProcesses"),
        C_INT.withName("TotalTerminatedProcesses")
    ).withName("_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$LAYOUT() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$VH_ = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalPageFaultCount"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$VH() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$LAYOUT() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$VH_ = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalProcesses"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$VH() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$LAYOUT() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$VH_ = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ActiveProcesses"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$VH() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$LAYOUT() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$VH_ = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalTerminatedProcesses"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$VH() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerProcessUserTimeLimit"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        C_INT.withName("LimitFlags"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("MinimumWorkingSetSize"),
        C_LONGLONG.withName("MaximumWorkingSetSize"),
        C_INT.withName("ActiveProcessLimit"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Affinity"),
        C_INT.withName("PriorityClass"),
        C_INT.withName("SchedulingClass")
    ).withName("_JOBOBJECT_BASIC_LIMIT_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LimitFlags"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MinimumWorkingSetSize"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumWorkingSetSize"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ActiveProcessLimit"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Affinity"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PriorityClass"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SchedulingClass"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$VH_; }

    static final MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("PerProcessUserTimeLimit"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("PerJobUserTimeLimit"),
            C_INT.withName("LimitFlags"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("MinimumWorkingSetSize"),
            C_LONGLONG.withName("MaximumWorkingSetSize"),
            C_INT.withName("ActiveProcessLimit"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("Affinity"),
            C_INT.withName("PriorityClass"),
            C_INT.withName("SchedulingClass")
        ).withName("BasicLimitInformation"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("ReadOperationCount"),
            C_LONGLONG.withName("WriteOperationCount"),
            C_LONGLONG.withName("OtherOperationCount"),
            C_LONGLONG.withName("ReadTransferCount"),
            C_LONGLONG.withName("WriteTransferCount"),
            C_LONGLONG.withName("OtherTransferCount")
        ).withName("IoInfo"),
        C_LONGLONG.withName("ProcessMemoryLimit"),
        C_LONGLONG.withName("JobMemoryLimit"),
        C_LONGLONG.withName("PeakProcessMemoryUsed"),
        C_LONGLONG.withName("PeakJobMemoryUsed")
    ).withName("_JOBOBJECT_EXTENDED_LIMIT_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$LAYOUT() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$VH_ = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessMemoryLimit"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$VH() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$VH_ = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemoryLimit"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$VH() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$LAYOUT() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$LAYOUT_; }

    static final VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$VH_ = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PeakProcessMemoryUsed"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$VH() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$VH_; }

    static final MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$LAYOUT() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$LAYOUT_; }

    static final VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$VH_ = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PeakJobMemoryUsed"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$VH() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NumberOfAssignedProcesses"),
        C_INT.withName("NumberOfProcessIdsInList"),
        MemoryLayout.ofSequence(1, C_LONGLONG).withName("ProcessIdList")
    ).withName("_JOBOBJECT_BASIC_PROCESS_ID_LIST");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$struct$LAYOUT() { return _JOBOBJECT_BASIC_PROCESS_ID_LIST$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$LAYOUT() { return _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$VH_ = _JOBOBJECT_BASIC_PROCESS_ID_LIST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfAssignedProcesses"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$VH() { return _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$LAYOUT() { return _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$VH_ = _JOBOBJECT_BASIC_PROCESS_ID_LIST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfProcessIdsInList"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$VH() { return _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_UI_RESTRICTIONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("UIRestrictionsClass")
    ).withName("_JOBOBJECT_BASIC_UI_RESTRICTIONS");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_UI_RESTRICTIONS$struct$LAYOUT() { return _JOBOBJECT_BASIC_UI_RESTRICTIONS$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$LAYOUT() { return _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$VH_ = _JOBOBJECT_BASIC_UI_RESTRICTIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UIRestrictionsClass"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$VH() { return _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$VH_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("SecurityLimitFlags"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("JobToken"),
        C_POINTER.withName("SidsToDisable"),
        C_POINTER.withName("PrivilegesToDelete"),
        C_POINTER.withName("RestrictedSids")
    ).withName("_JOBOBJECT_SECURITY_LIMIT_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$VH_ = _JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityLimitFlags"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$VH() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$VH_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$LAYOUT_; }

    static final VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobToken")));
    public static java.lang.invoke.VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$VH() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$VH_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$LAYOUT_; }

    static final VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SidsToDisable")));
    public static java.lang.invoke.VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$VH() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$VH_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$LAYOUT_; }

    static final VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PrivilegesToDelete")));
    public static java.lang.invoke.VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$VH() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$VH_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$LAYOUT_; }

    static final VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RestrictedSids")));
    public static java.lang.invoke.VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$VH() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$VH_; }

    static final MemoryLayout _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("EndOfJobTimeAction")
    ).withName("_JOBOBJECT_END_OF_JOB_TIME_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$LAYOUT() { return _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$LAYOUT_; }

    static final VarHandle _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$VH_ = _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndOfJobTimeAction"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$VH() { return _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$VH_; }

    static final MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("CompletionKey"),
        C_POINTER.withName("CompletionPort")
    ).withName("_JOBOBJECT_ASSOCIATE_COMPLETION_PORT");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$struct$LAYOUT() { return _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$LAYOUT() { return _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$LAYOUT_; }

    static final VarHandle _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_ASSOCIATE_COMPLETION_PORT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompletionKey")));
    public static java.lang.invoke.VarHandle _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$VH() { return _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$VH_; }

    static final MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$LAYOUT() { return _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$LAYOUT_; }

    static final VarHandle _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_ASSOCIATE_COMPLETION_PORT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompletionPort")));
    public static java.lang.invoke.VarHandle _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$VH() { return _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("TotalUserTime"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("TotalKernelTime"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("ThisPeriodTotalUserTime"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("ThisPeriodTotalKernelTime"),
            C_INT.withName("TotalPageFaultCount"),
            C_INT.withName("TotalProcesses"),
            C_INT.withName("ActiveProcesses"),
            C_INT.withName("TotalTerminatedProcesses")
        ).withName("BasicInfo"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("ReadOperationCount"),
            C_LONGLONG.withName("WriteOperationCount"),
            C_LONGLONG.withName("OtherOperationCount"),
            C_LONGLONG.withName("ReadTransferCount"),
            C_LONGLONG.withName("WriteTransferCount"),
            C_LONGLONG.withName("OtherTransferCount")
        ).withName("IoInfo")
    ).withName("_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_JOBSET_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MemberLevel")
    ).withName("_JOBOBJECT_JOBSET_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_JOBSET_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_JOBSET_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$LAYOUT() { return _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$LAYOUT_; }

    static final VarHandle _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$VH_ = _JOBOBJECT_JOBSET_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MemberLevel"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$VH() { return _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$VH_; }

    public static int ToleranceLow() { return (int)1L; }

    public static int ToleranceMedium() { return (int)2L; }

    public static int ToleranceHigh() { return (int)3L; }

    public static int ToleranceIntervalShort() { return (int)1L; }

    public static int ToleranceIntervalMedium() { return (int)2L; }

    public static int ToleranceIntervalLong() { return (int)3L; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("IoReadBytesLimit"),
        C_LONGLONG.withName("IoWriteBytesLimit"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        C_LONGLONG.withName("JobMemoryLimit"),
        C_INT.withName("RateControlTolerance"),
        C_INT.withName("RateControlToleranceInterval"),
        C_INT.withName("LimitFlags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytesLimit"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytesLimit"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemoryLimit"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlTolerance"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$VH_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlToleranceInterval"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$VH_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LimitFlags"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("IoReadBytesLimit"),
        C_LONGLONG.withName("IoWriteBytesLimit"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        C_LONGLONG.withName("JobHighMemoryLimit"),
        C_LONGLONG.withName("JobMemoryLimit"),
        C_INT.withName("RateControlTolerance"),
        C_INT.withName("CpuRateControlTolerance"),
        C_INT.withName("RateControlToleranceInterval"),
        C_INT.withName("CpuRateControlToleranceInterval"),
        C_INT.withName("LimitFlags"),
        C_INT.withName("IoRateControlTolerance"),
        C_LONGLONG.withName("JobLowMemoryLimit"),
        C_INT.withName("IoRateControlToleranceInterval"),
        C_INT.withName("NetRateControlTolerance"),
        C_INT.withName("NetRateControlToleranceInterval"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2");
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytesLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytesLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobHighMemoryLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemoryLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlTolerance"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CpuRateControlTolerance"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlToleranceInterval"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CpuRateControlToleranceInterval"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LimitFlags"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IoRateControlTolerance"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobLowMemoryLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IoRateControlToleranceInterval"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NetRateControlTolerance"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NetRateControlToleranceInterval"));
    public static java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("LimitFlags"),
        C_INT.withName("ViolationLimitFlags"),
        C_LONGLONG.withName("IoReadBytes"),
        C_LONGLONG.withName("IoReadBytesLimit"),
        C_LONGLONG.withName("IoWriteBytes"),
        C_LONGLONG.withName("IoWriteBytesLimit"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        C_LONGLONG.withName("JobMemory"),
        C_LONGLONG.withName("JobMemoryLimit"),
        C_INT.withName("RateControlTolerance"),
        C_INT.withName("RateControlToleranceLimit")
    ).withName("_JOBOBJECT_LIMIT_VIOLATION_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LimitFlags"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ViolationLimitFlags"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytes"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytesLimit"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytes"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytesLimit"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemory"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemoryLimit"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlTolerance"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlToleranceLimit"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("LimitFlags"),
        C_INT.withName("ViolationLimitFlags"),
        C_LONGLONG.withName("IoReadBytes"),
        C_LONGLONG.withName("IoReadBytesLimit"),
        C_LONGLONG.withName("IoWriteBytes"),
        C_LONGLONG.withName("IoWriteBytesLimit"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        C_LONGLONG.withName("JobMemory"),
        C_LONGLONG.withName("JobHighMemoryLimit"),
        C_LONGLONG.withName("JobMemoryLimit"),
        C_INT.withName("RateControlTolerance"),
        C_INT.withName("CpuRateControlTolerance"),
        C_INT.withName("RateControlToleranceLimit"),
        C_INT.withName("CpuRateControlToleranceLimit"),
        C_LONGLONG.withName("JobLowMemoryLimit"),
        C_INT.withName("IoRateControlTolerance"),
        C_INT.withName("IoRateControlToleranceLimit"),
        C_INT.withName("NetRateControlTolerance"),
        C_INT.withName("NetRateControlToleranceLimit")
    ).withName("JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2");
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LimitFlags"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ViolationLimitFlags"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytes"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytesLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytes"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytesLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemory"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobHighMemoryLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemoryLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlTolerance"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CpuRateControlTolerance"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlToleranceLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CpuRateControlToleranceLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobLowMemoryLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IoRateControlTolerance"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IoRateControlToleranceLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NetRateControlTolerance"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NetRateControlToleranceLimit"));
    public static java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ControlFlags"),
        C_INT.withName("CpuRate"),
        C_INT.withName("Weight"),
        C_SHORT.withName("MinRate"),
        C_SHORT.withName("MaxRate")
    ).withName("_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$VH_ = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    public static java.lang.invoke.VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$VH() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$VH_; }

}

