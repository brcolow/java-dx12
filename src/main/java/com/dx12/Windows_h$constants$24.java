// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$24 extends Windows_h$constants$23 {
    Windows_h$constants$24() {}
    static final MemoryLayout tagACTCTXA$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXA$cbSize$LAYOUT() { return tagACTCTXA$cbSize$LAYOUT_; }

    static final VarHandle tagACTCTXA$cbSize$VH_ = tagACTCTXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagACTCTXA$cbSize$VH() { return tagACTCTXA$cbSize$VH_; }

    static final MemoryLayout tagACTCTXA$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXA$dwFlags$LAYOUT() { return tagACTCTXA$dwFlags$LAYOUT_; }

    static final VarHandle tagACTCTXA$dwFlags$VH_ = tagACTCTXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagACTCTXA$dwFlags$VH() { return tagACTCTXA$dwFlags$VH_; }

    static final MemoryLayout tagACTCTXA$lpSource$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXA$lpSource$LAYOUT() { return tagACTCTXA$lpSource$LAYOUT_; }

    static final VarHandle tagACTCTXA$lpSource$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTXA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpSource")));
    public static java.lang.invoke.VarHandle tagACTCTXA$lpSource$VH() { return tagACTCTXA$lpSource$VH_; }

    static final MemoryLayout tagACTCTXA$wProcessorArchitecture$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXA$wProcessorArchitecture$LAYOUT() { return tagACTCTXA$wProcessorArchitecture$LAYOUT_; }

    static final VarHandle tagACTCTXA$wProcessorArchitecture$VH_ = tagACTCTXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wProcessorArchitecture"));
    public static java.lang.invoke.VarHandle tagACTCTXA$wProcessorArchitecture$VH() { return tagACTCTXA$wProcessorArchitecture$VH_; }

    static final MemoryLayout tagACTCTXA$wLangId$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXA$wLangId$LAYOUT() { return tagACTCTXA$wLangId$LAYOUT_; }

    static final VarHandle tagACTCTXA$wLangId$VH_ = tagACTCTXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wLangId"));
    public static java.lang.invoke.VarHandle tagACTCTXA$wLangId$VH() { return tagACTCTXA$wLangId$VH_; }

    static final MemoryLayout tagACTCTXA$lpAssemblyDirectory$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXA$lpAssemblyDirectory$LAYOUT() { return tagACTCTXA$lpAssemblyDirectory$LAYOUT_; }

    static final VarHandle tagACTCTXA$lpAssemblyDirectory$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTXA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAssemblyDirectory")));
    public static java.lang.invoke.VarHandle tagACTCTXA$lpAssemblyDirectory$VH() { return tagACTCTXA$lpAssemblyDirectory$VH_; }

    static final MemoryLayout tagACTCTXA$lpResourceName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXA$lpResourceName$LAYOUT() { return tagACTCTXA$lpResourceName$LAYOUT_; }

    static final VarHandle tagACTCTXA$lpResourceName$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTXA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpResourceName")));
    public static java.lang.invoke.VarHandle tagACTCTXA$lpResourceName$VH() { return tagACTCTXA$lpResourceName$VH_; }

    static final MemoryLayout tagACTCTXA$lpApplicationName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXA$lpApplicationName$LAYOUT() { return tagACTCTXA$lpApplicationName$LAYOUT_; }

    static final VarHandle tagACTCTXA$lpApplicationName$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTXA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpApplicationName")));
    public static java.lang.invoke.VarHandle tagACTCTXA$lpApplicationName$VH() { return tagACTCTXA$lpApplicationName$VH_; }

    static final MemoryLayout tagACTCTXA$hModule$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXA$hModule$LAYOUT() { return tagACTCTXA$hModule$LAYOUT_; }

    static final VarHandle tagACTCTXA$hModule$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTXA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hModule")));
    public static java.lang.invoke.VarHandle tagACTCTXA$hModule$VH() { return tagACTCTXA$hModule$VH_; }

    static final MemoryLayout tagACTCTXW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("dwFlags"),
        C_POINTER.withName("lpSource"),
        C_SHORT.withName("wProcessorArchitecture"),
        C_SHORT.withName("wLangId"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpAssemblyDirectory"),
        C_POINTER.withName("lpResourceName"),
        C_POINTER.withName("lpApplicationName"),
        C_POINTER.withName("hModule")
    ).withName("tagACTCTXW");
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXW$struct$LAYOUT() { return tagACTCTXW$struct$LAYOUT_; }

    static final MemoryLayout tagACTCTXW$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXW$cbSize$LAYOUT() { return tagACTCTXW$cbSize$LAYOUT_; }

    static final VarHandle tagACTCTXW$cbSize$VH_ = tagACTCTXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagACTCTXW$cbSize$VH() { return tagACTCTXW$cbSize$VH_; }

    static final MemoryLayout tagACTCTXW$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXW$dwFlags$LAYOUT() { return tagACTCTXW$dwFlags$LAYOUT_; }

    static final VarHandle tagACTCTXW$dwFlags$VH_ = tagACTCTXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagACTCTXW$dwFlags$VH() { return tagACTCTXW$dwFlags$VH_; }

    static final MemoryLayout tagACTCTXW$lpSource$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXW$lpSource$LAYOUT() { return tagACTCTXW$lpSource$LAYOUT_; }

    static final VarHandle tagACTCTXW$lpSource$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTXW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpSource")));
    public static java.lang.invoke.VarHandle tagACTCTXW$lpSource$VH() { return tagACTCTXW$lpSource$VH_; }

    static final MemoryLayout tagACTCTXW$wProcessorArchitecture$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXW$wProcessorArchitecture$LAYOUT() { return tagACTCTXW$wProcessorArchitecture$LAYOUT_; }

    static final VarHandle tagACTCTXW$wProcessorArchitecture$VH_ = tagACTCTXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wProcessorArchitecture"));
    public static java.lang.invoke.VarHandle tagACTCTXW$wProcessorArchitecture$VH() { return tagACTCTXW$wProcessorArchitecture$VH_; }

    static final MemoryLayout tagACTCTXW$wLangId$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXW$wLangId$LAYOUT() { return tagACTCTXW$wLangId$LAYOUT_; }

    static final VarHandle tagACTCTXW$wLangId$VH_ = tagACTCTXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wLangId"));
    public static java.lang.invoke.VarHandle tagACTCTXW$wLangId$VH() { return tagACTCTXW$wLangId$VH_; }

    static final MemoryLayout tagACTCTXW$lpAssemblyDirectory$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXW$lpAssemblyDirectory$LAYOUT() { return tagACTCTXW$lpAssemblyDirectory$LAYOUT_; }

    static final VarHandle tagACTCTXW$lpAssemblyDirectory$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTXW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAssemblyDirectory")));
    public static java.lang.invoke.VarHandle tagACTCTXW$lpAssemblyDirectory$VH() { return tagACTCTXW$lpAssemblyDirectory$VH_; }

    static final MemoryLayout tagACTCTXW$lpResourceName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXW$lpResourceName$LAYOUT() { return tagACTCTXW$lpResourceName$LAYOUT_; }

    static final VarHandle tagACTCTXW$lpResourceName$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTXW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpResourceName")));
    public static java.lang.invoke.VarHandle tagACTCTXW$lpResourceName$VH() { return tagACTCTXW$lpResourceName$VH_; }

    static final MemoryLayout tagACTCTXW$lpApplicationName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXW$lpApplicationName$LAYOUT() { return tagACTCTXW$lpApplicationName$LAYOUT_; }

    static final VarHandle tagACTCTXW$lpApplicationName$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTXW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpApplicationName")));
    public static java.lang.invoke.VarHandle tagACTCTXW$lpApplicationName$VH() { return tagACTCTXW$lpApplicationName$VH_; }

    static final MemoryLayout tagACTCTXW$hModule$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXW$hModule$LAYOUT() { return tagACTCTXW$hModule$LAYOUT_; }

    static final VarHandle tagACTCTXW$hModule$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTXW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hModule")));
    public static java.lang.invoke.VarHandle tagACTCTXW$hModule$VH() { return tagACTCTXW$hModule$VH_; }

    static final FunctionDescriptor CreateActCtxA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateActCtxA$FUNC() { return CreateActCtxA$FUNC_; }

    static final MethodHandle CreateActCtxA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateActCtxA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateActCtxA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateActCtxA$MH() { return CreateActCtxA$MH_; }

    static final FunctionDescriptor CreateActCtxW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateActCtxW$FUNC() { return CreateActCtxW$FUNC_; }

    static final MethodHandle CreateActCtxW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateActCtxW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateActCtxW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateActCtxW$MH() { return CreateActCtxW$MH_; }

    static final FunctionDescriptor AddRefActCtx$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddRefActCtx$FUNC() { return AddRefActCtx$FUNC_; }

    static final MethodHandle AddRefActCtx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddRefActCtx",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        AddRefActCtx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddRefActCtx$MH() { return AddRefActCtx$MH_; }

    static final FunctionDescriptor ReleaseActCtx$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReleaseActCtx$FUNC() { return ReleaseActCtx$FUNC_; }

    static final MethodHandle ReleaseActCtx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReleaseActCtx",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        ReleaseActCtx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReleaseActCtx$MH() { return ReleaseActCtx$MH_; }

    static final FunctionDescriptor ZombifyActCtx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ZombifyActCtx$FUNC() { return ZombifyActCtx$FUNC_; }

    static final MethodHandle ZombifyActCtx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ZombifyActCtx",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ZombifyActCtx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ZombifyActCtx$MH() { return ZombifyActCtx$MH_; }

    static final FunctionDescriptor ActivateActCtx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ActivateActCtx$FUNC() { return ActivateActCtx$FUNC_; }

    static final MethodHandle ActivateActCtx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ActivateActCtx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ActivateActCtx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ActivateActCtx$MH() { return ActivateActCtx$MH_; }

    static final FunctionDescriptor DeactivateActCtx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeactivateActCtx$FUNC() { return DeactivateActCtx$FUNC_; }

    static final MethodHandle DeactivateActCtx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeactivateActCtx",
        "(IJ)I",
        DeactivateActCtx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeactivateActCtx$MH() { return DeactivateActCtx$MH_; }

    static final FunctionDescriptor GetCurrentActCtx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentActCtx$FUNC() { return GetCurrentActCtx$FUNC_; }

    static final MethodHandle GetCurrentActCtx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentActCtx",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCurrentActCtx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentActCtx$MH() { return GetCurrentActCtx$MH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("ulDataFormatVersion"),
        C_POINTER.withName("lpData"),
        C_INT.withName("ulLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpSectionGlobalData"),
        C_INT.withName("ulSectionGlobalDataLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpSectionBase"),
        C_INT.withName("ulSectionTotalLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hActCtx"),
        C_INT.withName("ulAssemblyRosterIndex"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagACTCTX_SECTION_KEYED_DATA_2600");
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$cbSize$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_2600$cbSize$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$cbSize$VH_ = tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$cbSize$VH() { return tagACTCTX_SECTION_KEYED_DATA_2600$cbSize$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$ulDataFormatVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$ulDataFormatVersion$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_2600$ulDataFormatVersion$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$ulDataFormatVersion$VH_ = tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulDataFormatVersion"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$ulDataFormatVersion$VH() { return tagACTCTX_SECTION_KEYED_DATA_2600$ulDataFormatVersion$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$lpData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$lpData$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_2600$lpData$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$lpData$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpData")));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$lpData$VH() { return tagACTCTX_SECTION_KEYED_DATA_2600$lpData$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$ulLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$ulLength$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_2600$ulLength$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$ulLength$VH_ = tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulLength"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$ulLength$VH() { return tagACTCTX_SECTION_KEYED_DATA_2600$ulLength$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionGlobalData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionGlobalData$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionGlobalData$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionGlobalData$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpSectionGlobalData")));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionGlobalData$VH() { return tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionGlobalData$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionGlobalDataLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionGlobalDataLength$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionGlobalDataLength$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionGlobalDataLength$VH_ = tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSectionGlobalDataLength"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionGlobalDataLength$VH() { return tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionGlobalDataLength$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionBase$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionBase$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionBase$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionBase$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpSectionBase")));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionBase$VH() { return tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionBase$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionTotalLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionTotalLength$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionTotalLength$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionTotalLength$VH_ = tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSectionTotalLength"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionTotalLength$VH() { return tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionTotalLength$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$hActCtx$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$hActCtx$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_2600$hActCtx$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$hActCtx$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hActCtx")));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$hActCtx$VH() { return tagACTCTX_SECTION_KEYED_DATA_2600$hActCtx$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$ulAssemblyRosterIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_2600$ulAssemblyRosterIndex$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_2600$ulAssemblyRosterIndex$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$ulAssemblyRosterIndex$VH_ = tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAssemblyRosterIndex"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_2600$ulAssemblyRosterIndex$VH() { return tagACTCTX_SECTION_KEYED_DATA_2600$ulAssemblyRosterIndex$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpInformation"),
        C_POINTER.withName("lpSectionBase"),
        C_INT.withName("ulSectionLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpSectionGlobalDataBase"),
        C_INT.withName("ulSectionGlobalDataLength"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA");
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$struct$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$struct$LAYOUT_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpInformation$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpInformation$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpInformation$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpInformation$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpInformation")));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpInformation$VH() { return tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpInformation$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionBase$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionBase$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionBase$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionBase$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpSectionBase")));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionBase$VH() { return tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionBase$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionLength$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionLength$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionLength$VH_ = tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSectionLength"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionLength$VH() { return tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionLength$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionGlobalDataBase$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionGlobalDataBase$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionGlobalDataBase$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionGlobalDataBase$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpSectionGlobalDataBase")));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionGlobalDataBase$VH() { return tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionGlobalDataBase$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionGlobalDataLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionGlobalDataLength$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionGlobalDataLength$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionGlobalDataLength$VH_ = tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSectionGlobalDataLength"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionGlobalDataLength$VH() { return tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionGlobalDataLength$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("ulDataFormatVersion"),
        C_POINTER.withName("lpData"),
        C_INT.withName("ulLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpSectionGlobalData"),
        C_INT.withName("ulSectionGlobalDataLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpSectionBase"),
        C_INT.withName("ulSectionTotalLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hActCtx"),
        C_INT.withName("ulAssemblyRosterIndex"),
        C_INT.withName("ulFlags"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("lpInformation"),
            C_POINTER.withName("lpSectionBase"),
            C_INT.withName("ulSectionLength"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("lpSectionGlobalDataBase"),
            C_INT.withName("ulSectionGlobalDataLength"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("AssemblyMetadata")
    ).withName("tagACTCTX_SECTION_KEYED_DATA");
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$cbSize$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$cbSize$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA$cbSize$VH_ = tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA$cbSize$VH() { return tagACTCTX_SECTION_KEYED_DATA$cbSize$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulDataFormatVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulDataFormatVersion$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$ulDataFormatVersion$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA$ulDataFormatVersion$VH_ = tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulDataFormatVersion"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA$ulDataFormatVersion$VH() { return tagACTCTX_SECTION_KEYED_DATA$ulDataFormatVersion$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$lpData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$lpData$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$lpData$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA$lpData$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpData")));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA$lpData$VH() { return tagACTCTX_SECTION_KEYED_DATA$lpData$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulLength$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$ulLength$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA$ulLength$VH_ = tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulLength"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA$ulLength$VH() { return tagACTCTX_SECTION_KEYED_DATA$ulLength$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$lpSectionGlobalData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$lpSectionGlobalData$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$lpSectionGlobalData$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA$lpSectionGlobalData$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpSectionGlobalData")));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA$lpSectionGlobalData$VH() { return tagACTCTX_SECTION_KEYED_DATA$lpSectionGlobalData$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulSectionGlobalDataLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulSectionGlobalDataLength$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$ulSectionGlobalDataLength$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA$ulSectionGlobalDataLength$VH_ = tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSectionGlobalDataLength"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA$ulSectionGlobalDataLength$VH() { return tagACTCTX_SECTION_KEYED_DATA$ulSectionGlobalDataLength$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$lpSectionBase$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$lpSectionBase$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$lpSectionBase$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA$lpSectionBase$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpSectionBase")));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA$lpSectionBase$VH() { return tagACTCTX_SECTION_KEYED_DATA$lpSectionBase$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulSectionTotalLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulSectionTotalLength$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$ulSectionTotalLength$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA$ulSectionTotalLength$VH_ = tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSectionTotalLength"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA$ulSectionTotalLength$VH() { return tagACTCTX_SECTION_KEYED_DATA$ulSectionTotalLength$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$hActCtx$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$hActCtx$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$hActCtx$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA$hActCtx$VH_ = MemoryHandles.asAddressVarHandle(tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hActCtx")));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA$hActCtx$VH() { return tagACTCTX_SECTION_KEYED_DATA$hActCtx$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulAssemblyRosterIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulAssemblyRosterIndex$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$ulAssemblyRosterIndex$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA$ulAssemblyRosterIndex$VH_ = tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAssemblyRosterIndex"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA$ulAssemblyRosterIndex$VH() { return tagACTCTX_SECTION_KEYED_DATA$ulAssemblyRosterIndex$VH_; }

    static final MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagACTCTX_SECTION_KEYED_DATA$ulFlags$LAYOUT() { return tagACTCTX_SECTION_KEYED_DATA$ulFlags$LAYOUT_; }

    static final VarHandle tagACTCTX_SECTION_KEYED_DATA$ulFlags$VH_ = tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFlags"));
    public static java.lang.invoke.VarHandle tagACTCTX_SECTION_KEYED_DATA$ulFlags$VH() { return tagACTCTX_SECTION_KEYED_DATA$ulFlags$VH_; }

    static final FunctionDescriptor FindActCtxSectionStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindActCtxSectionStringA$FUNC() { return FindActCtxSectionStringA$FUNC_; }

    static final MethodHandle FindActCtxSectionStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindActCtxSectionStringA",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FindActCtxSectionStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindActCtxSectionStringA$MH() { return FindActCtxSectionStringA$MH_; }

    static final FunctionDescriptor FindActCtxSectionStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindActCtxSectionStringW$FUNC() { return FindActCtxSectionStringW$FUNC_; }

    static final MethodHandle FindActCtxSectionStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindActCtxSectionStringW",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FindActCtxSectionStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindActCtxSectionStringW$MH() { return FindActCtxSectionStringW$MH_; }

    static final FunctionDescriptor FindActCtxSectionGuid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindActCtxSectionGuid$FUNC() { return FindActCtxSectionGuid$FUNC_; }

    static final MethodHandle FindActCtxSectionGuid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindActCtxSectionGuid",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FindActCtxSectionGuid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindActCtxSectionGuid$MH() { return FindActCtxSectionGuid$MH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("hActCtx"),
        C_INT.withName("dwFlags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_ACTIVATION_CONTEXT_BASIC_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_BASIC_INFORMATION$struct$LAYOUT() { return _ACTIVATION_CONTEXT_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_BASIC_INFORMATION$hActCtx$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_BASIC_INFORMATION$hActCtx$LAYOUT() { return _ACTIVATION_CONTEXT_BASIC_INFORMATION$hActCtx$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_BASIC_INFORMATION$hActCtx$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hActCtx")));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_BASIC_INFORMATION$hActCtx$VH() { return _ACTIVATION_CONTEXT_BASIC_INFORMATION$hActCtx$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_BASIC_INFORMATION$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_BASIC_INFORMATION$dwFlags$LAYOUT() { return _ACTIVATION_CONTEXT_BASIC_INFORMATION$dwFlags$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_BASIC_INFORMATION$dwFlags$VH_ = _ACTIVATION_CONTEXT_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_BASIC_INFORMATION$dwFlags$VH() { return _ACTIVATION_CONTEXT_BASIC_INFORMATION$dwFlags$VH_; }

    static final FunctionDescriptor QueryActCtxW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryActCtxW$FUNC() { return QueryActCtxW$FUNC_; }

    static final MethodHandle QueryActCtxW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryActCtxW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        QueryActCtxW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryActCtxW$MH() { return QueryActCtxW$MH_; }

    static final FunctionDescriptor WTSGetActiveConsoleSessionId$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor WTSGetActiveConsoleSessionId$FUNC() { return WTSGetActiveConsoleSessionId$FUNC_; }

    static final MethodHandle WTSGetActiveConsoleSessionId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WTSGetActiveConsoleSessionId",
        "()I",
        WTSGetActiveConsoleSessionId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WTSGetActiveConsoleSessionId$MH() { return WTSGetActiveConsoleSessionId$MH_; }

    static final FunctionDescriptor WTSGetServiceSessionId$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor WTSGetServiceSessionId$FUNC() { return WTSGetServiceSessionId$FUNC_; }

    static final MethodHandle WTSGetServiceSessionId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WTSGetServiceSessionId",
        "()I",
        WTSGetServiceSessionId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WTSGetServiceSessionId$MH() { return WTSGetServiceSessionId$MH_; }

    static final FunctionDescriptor WTSIsServerContainer$FUNC_ = FunctionDescriptor.of(C_BOOL);
    public static jdk.incubator.foreign.FunctionDescriptor WTSIsServerContainer$FUNC() { return WTSIsServerContainer$FUNC_; }

    static final MethodHandle WTSIsServerContainer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WTSIsServerContainer",
        "()B",
        WTSIsServerContainer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WTSIsServerContainer$MH() { return WTSIsServerContainer$MH_; }

    static final FunctionDescriptor GetActiveProcessorGroupCount$FUNC_ = FunctionDescriptor.of(C_SHORT);
    public static jdk.incubator.foreign.FunctionDescriptor GetActiveProcessorGroupCount$FUNC() { return GetActiveProcessorGroupCount$FUNC_; }

    static final MethodHandle GetActiveProcessorGroupCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetActiveProcessorGroupCount",
        "()S",
        GetActiveProcessorGroupCount$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetActiveProcessorGroupCount$MH() { return GetActiveProcessorGroupCount$MH_; }

    static final FunctionDescriptor GetMaximumProcessorGroupCount$FUNC_ = FunctionDescriptor.of(C_SHORT);
    public static jdk.incubator.foreign.FunctionDescriptor GetMaximumProcessorGroupCount$FUNC() { return GetMaximumProcessorGroupCount$FUNC_; }

    static final MethodHandle GetMaximumProcessorGroupCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMaximumProcessorGroupCount",
        "()S",
        GetMaximumProcessorGroupCount$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMaximumProcessorGroupCount$MH() { return GetMaximumProcessorGroupCount$MH_; }

    static final FunctionDescriptor GetActiveProcessorCount$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetActiveProcessorCount$FUNC() { return GetActiveProcessorCount$FUNC_; }

    static final MethodHandle GetActiveProcessorCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetActiveProcessorCount",
        "(S)I",
        GetActiveProcessorCount$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetActiveProcessorCount$MH() { return GetActiveProcessorCount$MH_; }

    static final FunctionDescriptor GetMaximumProcessorCount$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetMaximumProcessorCount$FUNC() { return GetMaximumProcessorCount$FUNC_; }

    static final MethodHandle GetMaximumProcessorCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMaximumProcessorCount",
        "(S)I",
        GetMaximumProcessorCount$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMaximumProcessorCount$MH() { return GetMaximumProcessorCount$MH_; }

    static final FunctionDescriptor GetNumaProcessorNode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_BOOL,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumaProcessorNode$FUNC() { return GetNumaProcessorNode$FUNC_; }

    static final MethodHandle GetNumaProcessorNode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumaProcessorNode",
        "(BLjdk/incubator/foreign/MemoryAddress;)I",
        GetNumaProcessorNode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumaProcessorNode$MH() { return GetNumaProcessorNode$MH_; }

    static final FunctionDescriptor GetNumaNodeNumberFromHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumaNodeNumberFromHandle$FUNC() { return GetNumaNodeNumberFromHandle$FUNC_; }

    static final MethodHandle GetNumaNodeNumberFromHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumaNodeNumberFromHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNumaNodeNumberFromHandle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumaNodeNumberFromHandle$MH() { return GetNumaNodeNumberFromHandle$MH_; }

    static final FunctionDescriptor GetNumaProcessorNodeEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumaProcessorNodeEx$FUNC() { return GetNumaProcessorNodeEx$FUNC_; }

    static final MethodHandle GetNumaProcessorNodeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumaProcessorNodeEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNumaProcessorNodeEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumaProcessorNodeEx$MH() { return GetNumaProcessorNodeEx$MH_; }

    static final FunctionDescriptor GetNumaNodeProcessorMask$FUNC_ = FunctionDescriptor.of(C_INT,
        C_BOOL,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumaNodeProcessorMask$FUNC() { return GetNumaNodeProcessorMask$FUNC_; }

    static final MethodHandle GetNumaNodeProcessorMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumaNodeProcessorMask",
        "(BLjdk/incubator/foreign/MemoryAddress;)I",
        GetNumaNodeProcessorMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumaNodeProcessorMask$MH() { return GetNumaNodeProcessorMask$MH_; }

    static final FunctionDescriptor GetNumaAvailableMemoryNode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_BOOL,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumaAvailableMemoryNode$FUNC() { return GetNumaAvailableMemoryNode$FUNC_; }

    static final MethodHandle GetNumaAvailableMemoryNode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumaAvailableMemoryNode",
        "(BLjdk/incubator/foreign/MemoryAddress;)I",
        GetNumaAvailableMemoryNode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumaAvailableMemoryNode$MH() { return GetNumaAvailableMemoryNode$MH_; }

    static final FunctionDescriptor GetNumaAvailableMemoryNodeEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumaAvailableMemoryNodeEx$FUNC() { return GetNumaAvailableMemoryNodeEx$FUNC_; }

    static final MethodHandle GetNumaAvailableMemoryNodeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumaAvailableMemoryNodeEx",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        GetNumaAvailableMemoryNodeEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumaAvailableMemoryNodeEx$MH() { return GetNumaAvailableMemoryNodeEx$MH_; }

    static final FunctionDescriptor GetNumaProximityNode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumaProximityNode$FUNC() { return GetNumaProximityNode$FUNC_; }

    static final MethodHandle GetNumaProximityNode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumaProximityNode",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetNumaProximityNode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumaProximityNode$MH() { return GetNumaProximityNode$MH_; }

    static final FunctionDescriptor RegisterApplicationRecoveryCallback$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterApplicationRecoveryCallback$FUNC() { return RegisterApplicationRecoveryCallback$FUNC_; }

    static final MethodHandle RegisterApplicationRecoveryCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterApplicationRecoveryCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        RegisterApplicationRecoveryCallback$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterApplicationRecoveryCallback$MH() { return RegisterApplicationRecoveryCallback$MH_; }

    static final FunctionDescriptor RegisterApplicationRecoveryCallback$pRecoveyCallback$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterApplicationRecoveryCallback$pRecoveyCallback$FUNC() { return RegisterApplicationRecoveryCallback$pRecoveyCallback$FUNC_; }

    static final FunctionDescriptor UnregisterApplicationRecoveryCallback$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterApplicationRecoveryCallback$FUNC() { return UnregisterApplicationRecoveryCallback$FUNC_; }

    static final MethodHandle UnregisterApplicationRecoveryCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterApplicationRecoveryCallback",
        "()I",
        UnregisterApplicationRecoveryCallback$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterApplicationRecoveryCallback$MH() { return UnregisterApplicationRecoveryCallback$MH_; }

    static final FunctionDescriptor RegisterApplicationRestart$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterApplicationRestart$FUNC() { return RegisterApplicationRestart$FUNC_; }

    static final MethodHandle RegisterApplicationRestart$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterApplicationRestart",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        RegisterApplicationRestart$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterApplicationRestart$MH() { return RegisterApplicationRestart$MH_; }

    static final FunctionDescriptor UnregisterApplicationRestart$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterApplicationRestart$FUNC() { return UnregisterApplicationRestart$FUNC_; }

    static final MethodHandle UnregisterApplicationRestart$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterApplicationRestart",
        "()I",
        UnregisterApplicationRestart$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterApplicationRestart$MH() { return UnregisterApplicationRestart$MH_; }

    static final FunctionDescriptor GetApplicationRecoveryCallback$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetApplicationRecoveryCallback$FUNC() { return GetApplicationRecoveryCallback$FUNC_; }

    static final MethodHandle GetApplicationRecoveryCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetApplicationRecoveryCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetApplicationRecoveryCallback$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetApplicationRecoveryCallback$MH() { return GetApplicationRecoveryCallback$MH_; }

    static final FunctionDescriptor GetApplicationRestartSettings$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetApplicationRestartSettings$FUNC() { return GetApplicationRestartSettings$FUNC_; }

    static final MethodHandle GetApplicationRestartSettings$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetApplicationRestartSettings",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetApplicationRestartSettings$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetApplicationRestartSettings$MH() { return GetApplicationRestartSettings$MH_; }

    static final FunctionDescriptor ApplicationRecoveryInProgress$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ApplicationRecoveryInProgress$FUNC() { return ApplicationRecoveryInProgress$FUNC_; }

    static final MethodHandle ApplicationRecoveryInProgress$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ApplicationRecoveryInProgress",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ApplicationRecoveryInProgress$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ApplicationRecoveryInProgress$MH() { return ApplicationRecoveryInProgress$MH_; }

    static final FunctionDescriptor ApplicationRecoveryFinished$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ApplicationRecoveryFinished$FUNC() { return ApplicationRecoveryFinished$FUNC_; }

    static final MethodHandle ApplicationRecoveryFinished$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ApplicationRecoveryFinished",
        "(I)V",
        ApplicationRecoveryFinished$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ApplicationRecoveryFinished$MH() { return ApplicationRecoveryFinished$MH_; }

    static final MemoryLayout _FILE_BASIC_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("CreationTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastAccessTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastWriteTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ChangeTime"),
        C_INT.withName("FileAttributes"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_FILE_BASIC_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_BASIC_INFO$struct$LAYOUT() { return _FILE_BASIC_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_BASIC_INFO$FileAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_BASIC_INFO$FileAttributes$LAYOUT() { return _FILE_BASIC_INFO$FileAttributes$LAYOUT_; }

    static final VarHandle _FILE_BASIC_INFO$FileAttributes$VH_ = _FILE_BASIC_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    public static java.lang.invoke.VarHandle _FILE_BASIC_INFO$FileAttributes$VH() { return _FILE_BASIC_INFO$FileAttributes$VH_; }

    static final MemoryLayout _FILE_STANDARD_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("AllocationSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("EndOfFile"),
        C_INT.withName("NumberOfLinks"),
        C_BOOL.withName("DeletePending"),
        C_BOOL.withName("Directory"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_FILE_STANDARD_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_STANDARD_INFO$struct$LAYOUT() { return _FILE_STANDARD_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_STANDARD_INFO$NumberOfLinks$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STANDARD_INFO$NumberOfLinks$LAYOUT() { return _FILE_STANDARD_INFO$NumberOfLinks$LAYOUT_; }

    static final VarHandle _FILE_STANDARD_INFO$NumberOfLinks$VH_ = _FILE_STANDARD_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfLinks"));
    public static java.lang.invoke.VarHandle _FILE_STANDARD_INFO$NumberOfLinks$VH() { return _FILE_STANDARD_INFO$NumberOfLinks$VH_; }

    static final MemoryLayout _FILE_STANDARD_INFO$DeletePending$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STANDARD_INFO$DeletePending$LAYOUT() { return _FILE_STANDARD_INFO$DeletePending$LAYOUT_; }

    static final VarHandle _FILE_STANDARD_INFO$DeletePending$VH_ = _FILE_STANDARD_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DeletePending"));
    public static java.lang.invoke.VarHandle _FILE_STANDARD_INFO$DeletePending$VH() { return _FILE_STANDARD_INFO$DeletePending$VH_; }

    static final MemoryLayout _FILE_STANDARD_INFO$Directory$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STANDARD_INFO$Directory$LAYOUT() { return _FILE_STANDARD_INFO$Directory$LAYOUT_; }

    static final VarHandle _FILE_STANDARD_INFO$Directory$VH_ = _FILE_STANDARD_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Directory"));
    public static java.lang.invoke.VarHandle _FILE_STANDARD_INFO$Directory$VH() { return _FILE_STANDARD_INFO$Directory$VH_; }

    static final MemoryLayout _FILE_NAME_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("FileNameLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_FILE_NAME_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_NAME_INFO$struct$LAYOUT() { return _FILE_NAME_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_NAME_INFO$FileNameLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_NAME_INFO$FileNameLength$LAYOUT() { return _FILE_NAME_INFO$FileNameLength$LAYOUT_; }

    static final VarHandle _FILE_NAME_INFO$FileNameLength$VH_ = _FILE_NAME_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    public static java.lang.invoke.VarHandle _FILE_NAME_INFO$FileNameLength$VH() { return _FILE_NAME_INFO$FileNameLength$VH_; }

    static final MemoryLayout _FILE_CASE_SENSITIVE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags")
    ).withName("_FILE_CASE_SENSITIVE_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_CASE_SENSITIVE_INFO$struct$LAYOUT() { return _FILE_CASE_SENSITIVE_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_CASE_SENSITIVE_INFO$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_CASE_SENSITIVE_INFO$Flags$LAYOUT() { return _FILE_CASE_SENSITIVE_INFO$Flags$LAYOUT_; }

    static final VarHandle _FILE_CASE_SENSITIVE_INFO$Flags$VH_ = _FILE_CASE_SENSITIVE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _FILE_CASE_SENSITIVE_INFO$Flags$VH() { return _FILE_CASE_SENSITIVE_INFO$Flags$VH_; }

    static final MemoryLayout _FILE_RENAME_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("ReplaceIfExists"),
        C_INT.withName("Flags"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("RootDirectory"),
        C_INT.withName("FileNameLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_FILE_RENAME_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_RENAME_INFO$struct$LAYOUT() { return _FILE_RENAME_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_RENAME_INFO$ReplaceIfExists$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _FILE_RENAME_INFO$ReplaceIfExists$LAYOUT() { return _FILE_RENAME_INFO$ReplaceIfExists$LAYOUT_; }

    static final VarHandle _FILE_RENAME_INFO$ReplaceIfExists$VH_ = _FILE_RENAME_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ReplaceIfExists"));
    public static java.lang.invoke.VarHandle _FILE_RENAME_INFO$ReplaceIfExists$VH() { return _FILE_RENAME_INFO$ReplaceIfExists$VH_; }

    static final MemoryLayout _FILE_RENAME_INFO$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_RENAME_INFO$Flags$LAYOUT() { return _FILE_RENAME_INFO$Flags$LAYOUT_; }

    static final VarHandle _FILE_RENAME_INFO$Flags$VH_ = _FILE_RENAME_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _FILE_RENAME_INFO$Flags$VH() { return _FILE_RENAME_INFO$Flags$VH_; }

    static final MemoryLayout _FILE_RENAME_INFO$RootDirectory$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _FILE_RENAME_INFO$RootDirectory$LAYOUT() { return _FILE_RENAME_INFO$RootDirectory$LAYOUT_; }

    static final VarHandle _FILE_RENAME_INFO$RootDirectory$VH_ = MemoryHandles.asAddressVarHandle(_FILE_RENAME_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RootDirectory")));
    public static java.lang.invoke.VarHandle _FILE_RENAME_INFO$RootDirectory$VH() { return _FILE_RENAME_INFO$RootDirectory$VH_; }

    static final MemoryLayout _FILE_RENAME_INFO$FileNameLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_RENAME_INFO$FileNameLength$LAYOUT() { return _FILE_RENAME_INFO$FileNameLength$LAYOUT_; }

    static final VarHandle _FILE_RENAME_INFO$FileNameLength$VH_ = _FILE_RENAME_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    public static java.lang.invoke.VarHandle _FILE_RENAME_INFO$FileNameLength$VH() { return _FILE_RENAME_INFO$FileNameLength$VH_; }

    static final MemoryLayout _FILE_ALLOCATION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("AllocationSize")
    ).withName("_FILE_ALLOCATION_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_ALLOCATION_INFO$struct$LAYOUT() { return _FILE_ALLOCATION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_END_OF_FILE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("EndOfFile")
    ).withName("_FILE_END_OF_FILE_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_END_OF_FILE_INFO$struct$LAYOUT() { return _FILE_END_OF_FILE_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_STREAM_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NextEntryOffset"),
        C_INT.withName("StreamNameLength"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StreamSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StreamAllocationSize"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("StreamName"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_FILE_STREAM_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_STREAM_INFO$struct$LAYOUT() { return _FILE_STREAM_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_STREAM_INFO$NextEntryOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STREAM_INFO$NextEntryOffset$LAYOUT() { return _FILE_STREAM_INFO$NextEntryOffset$LAYOUT_; }

    static final VarHandle _FILE_STREAM_INFO$NextEntryOffset$VH_ = _FILE_STREAM_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextEntryOffset"));
    public static java.lang.invoke.VarHandle _FILE_STREAM_INFO$NextEntryOffset$VH() { return _FILE_STREAM_INFO$NextEntryOffset$VH_; }

    static final MemoryLayout _FILE_STREAM_INFO$StreamNameLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STREAM_INFO$StreamNameLength$LAYOUT() { return _FILE_STREAM_INFO$StreamNameLength$LAYOUT_; }

    static final VarHandle _FILE_STREAM_INFO$StreamNameLength$VH_ = _FILE_STREAM_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StreamNameLength"));
    public static java.lang.invoke.VarHandle _FILE_STREAM_INFO$StreamNameLength$VH() { return _FILE_STREAM_INFO$StreamNameLength$VH_; }

    static final MemoryLayout _FILE_COMPRESSION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("CompressedFileSize"),
        C_SHORT.withName("CompressionFormat"),
        C_BOOL.withName("CompressionUnitShift"),
        C_BOOL.withName("ChunkShift"),
        C_BOOL.withName("ClusterShift"),
        MemoryLayout.ofSequence(3, C_BOOL).withName("Reserved")
    ).withName("_FILE_COMPRESSION_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_COMPRESSION_INFO$struct$LAYOUT() { return _FILE_COMPRESSION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_COMPRESSION_INFO$CompressionFormat$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_COMPRESSION_INFO$CompressionFormat$LAYOUT() { return _FILE_COMPRESSION_INFO$CompressionFormat$LAYOUT_; }

    static final VarHandle _FILE_COMPRESSION_INFO$CompressionFormat$VH_ = _FILE_COMPRESSION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CompressionFormat"));
    public static java.lang.invoke.VarHandle _FILE_COMPRESSION_INFO$CompressionFormat$VH() { return _FILE_COMPRESSION_INFO$CompressionFormat$VH_; }

    static final MemoryLayout _FILE_COMPRESSION_INFO$CompressionUnitShift$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _FILE_COMPRESSION_INFO$CompressionUnitShift$LAYOUT() { return _FILE_COMPRESSION_INFO$CompressionUnitShift$LAYOUT_; }

    static final VarHandle _FILE_COMPRESSION_INFO$CompressionUnitShift$VH_ = _FILE_COMPRESSION_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("CompressionUnitShift"));
    public static java.lang.invoke.VarHandle _FILE_COMPRESSION_INFO$CompressionUnitShift$VH() { return _FILE_COMPRESSION_INFO$CompressionUnitShift$VH_; }

    static final MemoryLayout _FILE_COMPRESSION_INFO$ChunkShift$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _FILE_COMPRESSION_INFO$ChunkShift$LAYOUT() { return _FILE_COMPRESSION_INFO$ChunkShift$LAYOUT_; }

    static final VarHandle _FILE_COMPRESSION_INFO$ChunkShift$VH_ = _FILE_COMPRESSION_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ChunkShift"));
    public static java.lang.invoke.VarHandle _FILE_COMPRESSION_INFO$ChunkShift$VH() { return _FILE_COMPRESSION_INFO$ChunkShift$VH_; }

    static final MemoryLayout _FILE_COMPRESSION_INFO$ClusterShift$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _FILE_COMPRESSION_INFO$ClusterShift$LAYOUT() { return _FILE_COMPRESSION_INFO$ClusterShift$LAYOUT_; }

    static final VarHandle _FILE_COMPRESSION_INFO$ClusterShift$VH_ = _FILE_COMPRESSION_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ClusterShift"));
    public static java.lang.invoke.VarHandle _FILE_COMPRESSION_INFO$ClusterShift$VH() { return _FILE_COMPRESSION_INFO$ClusterShift$VH_; }

    static final MemoryLayout _FILE_ATTRIBUTE_TAG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("FileAttributes"),
        C_INT.withName("ReparseTag")
    ).withName("_FILE_ATTRIBUTE_TAG_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_ATTRIBUTE_TAG_INFO$struct$LAYOUT() { return _FILE_ATTRIBUTE_TAG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_ATTRIBUTE_TAG_INFO$FileAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ATTRIBUTE_TAG_INFO$FileAttributes$LAYOUT() { return _FILE_ATTRIBUTE_TAG_INFO$FileAttributes$LAYOUT_; }

    static final VarHandle _FILE_ATTRIBUTE_TAG_INFO$FileAttributes$VH_ = _FILE_ATTRIBUTE_TAG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    public static java.lang.invoke.VarHandle _FILE_ATTRIBUTE_TAG_INFO$FileAttributes$VH() { return _FILE_ATTRIBUTE_TAG_INFO$FileAttributes$VH_; }

    static final MemoryLayout _FILE_ATTRIBUTE_TAG_INFO$ReparseTag$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ATTRIBUTE_TAG_INFO$ReparseTag$LAYOUT() { return _FILE_ATTRIBUTE_TAG_INFO$ReparseTag$LAYOUT_; }

    static final VarHandle _FILE_ATTRIBUTE_TAG_INFO$ReparseTag$VH_ = _FILE_ATTRIBUTE_TAG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReparseTag"));
    public static java.lang.invoke.VarHandle _FILE_ATTRIBUTE_TAG_INFO$ReparseTag$VH() { return _FILE_ATTRIBUTE_TAG_INFO$ReparseTag$VH_; }

    static final MemoryLayout _FILE_DISPOSITION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("DeleteFileA")
    ).withName("_FILE_DISPOSITION_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_DISPOSITION_INFO$struct$LAYOUT() { return _FILE_DISPOSITION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_DISPOSITION_INFO$DeleteFileA$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _FILE_DISPOSITION_INFO$DeleteFileA$LAYOUT() { return _FILE_DISPOSITION_INFO$DeleteFileA$LAYOUT_; }

    static final VarHandle _FILE_DISPOSITION_INFO$DeleteFileA$VH_ = _FILE_DISPOSITION_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DeleteFileA"));
    public static java.lang.invoke.VarHandle _FILE_DISPOSITION_INFO$DeleteFileA$VH() { return _FILE_DISPOSITION_INFO$DeleteFileA$VH_; }

    static final MemoryLayout _FILE_DISPOSITION_INFO_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Flags")
    ).withName("_FILE_DISPOSITION_INFO_EX");
    public static jdk.incubator.foreign.MemoryLayout _FILE_DISPOSITION_INFO_EX$struct$LAYOUT() { return _FILE_DISPOSITION_INFO_EX$struct$LAYOUT_; }

    static final MemoryLayout _FILE_DISPOSITION_INFO_EX$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_DISPOSITION_INFO_EX$Flags$LAYOUT() { return _FILE_DISPOSITION_INFO_EX$Flags$LAYOUT_; }

    static final VarHandle _FILE_DISPOSITION_INFO_EX$Flags$VH_ = _FILE_DISPOSITION_INFO_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _FILE_DISPOSITION_INFO_EX$Flags$VH() { return _FILE_DISPOSITION_INFO_EX$Flags$VH_; }

    static final MemoryLayout _FILE_ID_BOTH_DIR_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NextEntryOffset"),
        C_INT.withName("FileIndex"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("CreationTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastAccessTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastWriteTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ChangeTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("EndOfFile"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("AllocationSize"),
        C_INT.withName("FileAttributes"),
        C_INT.withName("FileNameLength"),
        C_INT.withName("EaSize"),
        C_BOOL.withName("ShortNameLength"),
        MemoryLayout.ofPaddingBits(8),
        MemoryLayout.ofSequence(12, C_SHORT).withName("ShortName"),
        MemoryLayout.ofPaddingBits(16),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileId"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_FILE_ID_BOTH_DIR_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_BOTH_DIR_INFO$struct$LAYOUT() { return _FILE_ID_BOTH_DIR_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_ID_BOTH_DIR_INFO$NextEntryOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_BOTH_DIR_INFO$NextEntryOffset$LAYOUT() { return _FILE_ID_BOTH_DIR_INFO$NextEntryOffset$LAYOUT_; }

    static final VarHandle _FILE_ID_BOTH_DIR_INFO$NextEntryOffset$VH_ = _FILE_ID_BOTH_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextEntryOffset"));
    public static java.lang.invoke.VarHandle _FILE_ID_BOTH_DIR_INFO$NextEntryOffset$VH() { return _FILE_ID_BOTH_DIR_INFO$NextEntryOffset$VH_; }

    static final MemoryLayout _FILE_ID_BOTH_DIR_INFO$FileIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_BOTH_DIR_INFO$FileIndex$LAYOUT() { return _FILE_ID_BOTH_DIR_INFO$FileIndex$LAYOUT_; }

    static final VarHandle _FILE_ID_BOTH_DIR_INFO$FileIndex$VH_ = _FILE_ID_BOTH_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileIndex"));
    public static java.lang.invoke.VarHandle _FILE_ID_BOTH_DIR_INFO$FileIndex$VH() { return _FILE_ID_BOTH_DIR_INFO$FileIndex$VH_; }

    static final MemoryLayout _FILE_ID_BOTH_DIR_INFO$FileAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_BOTH_DIR_INFO$FileAttributes$LAYOUT() { return _FILE_ID_BOTH_DIR_INFO$FileAttributes$LAYOUT_; }

    static final VarHandle _FILE_ID_BOTH_DIR_INFO$FileAttributes$VH_ = _FILE_ID_BOTH_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    public static java.lang.invoke.VarHandle _FILE_ID_BOTH_DIR_INFO$FileAttributes$VH() { return _FILE_ID_BOTH_DIR_INFO$FileAttributes$VH_; }

    static final MemoryLayout _FILE_ID_BOTH_DIR_INFO$FileNameLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_BOTH_DIR_INFO$FileNameLength$LAYOUT() { return _FILE_ID_BOTH_DIR_INFO$FileNameLength$LAYOUT_; }

    static final VarHandle _FILE_ID_BOTH_DIR_INFO$FileNameLength$VH_ = _FILE_ID_BOTH_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    public static java.lang.invoke.VarHandle _FILE_ID_BOTH_DIR_INFO$FileNameLength$VH() { return _FILE_ID_BOTH_DIR_INFO$FileNameLength$VH_; }

    static final MemoryLayout _FILE_ID_BOTH_DIR_INFO$EaSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_BOTH_DIR_INFO$EaSize$LAYOUT() { return _FILE_ID_BOTH_DIR_INFO$EaSize$LAYOUT_; }

    static final VarHandle _FILE_ID_BOTH_DIR_INFO$EaSize$VH_ = _FILE_ID_BOTH_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EaSize"));
    public static java.lang.invoke.VarHandle _FILE_ID_BOTH_DIR_INFO$EaSize$VH() { return _FILE_ID_BOTH_DIR_INFO$EaSize$VH_; }

    static final MemoryLayout _FILE_ID_BOTH_DIR_INFO$ShortNameLength$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_BOTH_DIR_INFO$ShortNameLength$LAYOUT() { return _FILE_ID_BOTH_DIR_INFO$ShortNameLength$LAYOUT_; }

    static final VarHandle _FILE_ID_BOTH_DIR_INFO$ShortNameLength$VH_ = _FILE_ID_BOTH_DIR_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ShortNameLength"));
    public static java.lang.invoke.VarHandle _FILE_ID_BOTH_DIR_INFO$ShortNameLength$VH() { return _FILE_ID_BOTH_DIR_INFO$ShortNameLength$VH_; }

    static final MemoryLayout _FILE_FULL_DIR_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NextEntryOffset"),
        C_INT.withName("FileIndex"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("CreationTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastAccessTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastWriteTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ChangeTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("EndOfFile"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("AllocationSize"),
        C_INT.withName("FileAttributes"),
        C_INT.withName("FileNameLength"),
        C_INT.withName("EaSize"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_FILE_FULL_DIR_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_FULL_DIR_INFO$struct$LAYOUT() { return _FILE_FULL_DIR_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_FULL_DIR_INFO$NextEntryOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_FULL_DIR_INFO$NextEntryOffset$LAYOUT() { return _FILE_FULL_DIR_INFO$NextEntryOffset$LAYOUT_; }

    static final VarHandle _FILE_FULL_DIR_INFO$NextEntryOffset$VH_ = _FILE_FULL_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextEntryOffset"));
    public static java.lang.invoke.VarHandle _FILE_FULL_DIR_INFO$NextEntryOffset$VH() { return _FILE_FULL_DIR_INFO$NextEntryOffset$VH_; }

    static final MemoryLayout _FILE_FULL_DIR_INFO$FileIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_FULL_DIR_INFO$FileIndex$LAYOUT() { return _FILE_FULL_DIR_INFO$FileIndex$LAYOUT_; }

    static final VarHandle _FILE_FULL_DIR_INFO$FileIndex$VH_ = _FILE_FULL_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileIndex"));
    public static java.lang.invoke.VarHandle _FILE_FULL_DIR_INFO$FileIndex$VH() { return _FILE_FULL_DIR_INFO$FileIndex$VH_; }

    static final MemoryLayout _FILE_FULL_DIR_INFO$FileAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_FULL_DIR_INFO$FileAttributes$LAYOUT() { return _FILE_FULL_DIR_INFO$FileAttributes$LAYOUT_; }

    static final VarHandle _FILE_FULL_DIR_INFO$FileAttributes$VH_ = _FILE_FULL_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    public static java.lang.invoke.VarHandle _FILE_FULL_DIR_INFO$FileAttributes$VH() { return _FILE_FULL_DIR_INFO$FileAttributes$VH_; }

    static final MemoryLayout _FILE_FULL_DIR_INFO$FileNameLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_FULL_DIR_INFO$FileNameLength$LAYOUT() { return _FILE_FULL_DIR_INFO$FileNameLength$LAYOUT_; }

    static final VarHandle _FILE_FULL_DIR_INFO$FileNameLength$VH_ = _FILE_FULL_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    public static java.lang.invoke.VarHandle _FILE_FULL_DIR_INFO$FileNameLength$VH() { return _FILE_FULL_DIR_INFO$FileNameLength$VH_; }

    static final MemoryLayout _FILE_FULL_DIR_INFO$EaSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_FULL_DIR_INFO$EaSize$LAYOUT() { return _FILE_FULL_DIR_INFO$EaSize$LAYOUT_; }

    static final VarHandle _FILE_FULL_DIR_INFO$EaSize$VH_ = _FILE_FULL_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EaSize"));
    public static java.lang.invoke.VarHandle _FILE_FULL_DIR_INFO$EaSize$VH() { return _FILE_FULL_DIR_INFO$EaSize$VH_; }

    public static int IoPriorityHintVeryLow() { return (int)0L; }

    public static int IoPriorityHintLow() { return (int)1L; }

    public static int IoPriorityHintNormal() { return (int)2L; }

    public static int MaximumIoPriorityHintType() { return (int)3L; }

    static final MemoryLayout _FILE_IO_PRIORITY_HINT_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("PriorityHint")
    ).withName("_FILE_IO_PRIORITY_HINT_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_IO_PRIORITY_HINT_INFO$struct$LAYOUT() { return _FILE_IO_PRIORITY_HINT_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_IO_PRIORITY_HINT_INFO$PriorityHint$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_IO_PRIORITY_HINT_INFO$PriorityHint$LAYOUT() { return _FILE_IO_PRIORITY_HINT_INFO$PriorityHint$LAYOUT_; }

    static final VarHandle _FILE_IO_PRIORITY_HINT_INFO$PriorityHint$VH_ = _FILE_IO_PRIORITY_HINT_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PriorityHint"));
    public static java.lang.invoke.VarHandle _FILE_IO_PRIORITY_HINT_INFO$PriorityHint$VH() { return _FILE_IO_PRIORITY_HINT_INFO$PriorityHint$VH_; }

    static final MemoryLayout _FILE_ALIGNMENT_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("AlignmentRequirement")
    ).withName("_FILE_ALIGNMENT_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_ALIGNMENT_INFO$struct$LAYOUT() { return _FILE_ALIGNMENT_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_ALIGNMENT_INFO$AlignmentRequirement$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ALIGNMENT_INFO$AlignmentRequirement$LAYOUT() { return _FILE_ALIGNMENT_INFO$AlignmentRequirement$LAYOUT_; }

    static final VarHandle _FILE_ALIGNMENT_INFO$AlignmentRequirement$VH_ = _FILE_ALIGNMENT_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AlignmentRequirement"));
    public static java.lang.invoke.VarHandle _FILE_ALIGNMENT_INFO$AlignmentRequirement$VH() { return _FILE_ALIGNMENT_INFO$AlignmentRequirement$VH_; }

    static final MemoryLayout _FILE_STORAGE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("LogicalBytesPerSector"),
        C_INT.withName("PhysicalBytesPerSectorForAtomicity"),
        C_INT.withName("PhysicalBytesPerSectorForPerformance"),
        C_INT.withName("FileSystemEffectivePhysicalBytesPerSectorForAtomicity"),
        C_INT.withName("Flags"),
        C_INT.withName("ByteOffsetForSectorAlignment"),
        C_INT.withName("ByteOffsetForPartitionAlignment")
    ).withName("_FILE_STORAGE_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_INFO$struct$LAYOUT() { return _FILE_STORAGE_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_STORAGE_INFO$LogicalBytesPerSector$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_INFO$LogicalBytesPerSector$LAYOUT() { return _FILE_STORAGE_INFO$LogicalBytesPerSector$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_INFO$LogicalBytesPerSector$VH_ = _FILE_STORAGE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogicalBytesPerSector"));
    public static java.lang.invoke.VarHandle _FILE_STORAGE_INFO$LogicalBytesPerSector$VH() { return _FILE_STORAGE_INFO$LogicalBytesPerSector$VH_; }

    static final MemoryLayout _FILE_STORAGE_INFO$PhysicalBytesPerSectorForAtomicity$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_INFO$PhysicalBytesPerSectorForAtomicity$LAYOUT() { return _FILE_STORAGE_INFO$PhysicalBytesPerSectorForAtomicity$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_INFO$PhysicalBytesPerSectorForAtomicity$VH_ = _FILE_STORAGE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PhysicalBytesPerSectorForAtomicity"));
    public static java.lang.invoke.VarHandle _FILE_STORAGE_INFO$PhysicalBytesPerSectorForAtomicity$VH() { return _FILE_STORAGE_INFO$PhysicalBytesPerSectorForAtomicity$VH_; }

    static final MemoryLayout _FILE_STORAGE_INFO$PhysicalBytesPerSectorForPerformance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_INFO$PhysicalBytesPerSectorForPerformance$LAYOUT() { return _FILE_STORAGE_INFO$PhysicalBytesPerSectorForPerformance$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_INFO$PhysicalBytesPerSectorForPerformance$VH_ = _FILE_STORAGE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PhysicalBytesPerSectorForPerformance"));
    public static java.lang.invoke.VarHandle _FILE_STORAGE_INFO$PhysicalBytesPerSectorForPerformance$VH() { return _FILE_STORAGE_INFO$PhysicalBytesPerSectorForPerformance$VH_; }

    static final MemoryLayout _FILE_STORAGE_INFO$FileSystemEffectivePhysicalBytesPerSectorForAtomicity$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_INFO$FileSystemEffectivePhysicalBytesPerSectorForAtomicity$LAYOUT() { return _FILE_STORAGE_INFO$FileSystemEffectivePhysicalBytesPerSectorForAtomicity$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_INFO$FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH_ = _FILE_STORAGE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileSystemEffectivePhysicalBytesPerSectorForAtomicity"));
    public static java.lang.invoke.VarHandle _FILE_STORAGE_INFO$FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH() { return _FILE_STORAGE_INFO$FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH_; }

    static final MemoryLayout _FILE_STORAGE_INFO$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_INFO$Flags$LAYOUT() { return _FILE_STORAGE_INFO$Flags$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_INFO$Flags$VH_ = _FILE_STORAGE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _FILE_STORAGE_INFO$Flags$VH() { return _FILE_STORAGE_INFO$Flags$VH_; }

    static final MemoryLayout _FILE_STORAGE_INFO$ByteOffsetForSectorAlignment$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_INFO$ByteOffsetForSectorAlignment$LAYOUT() { return _FILE_STORAGE_INFO$ByteOffsetForSectorAlignment$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_INFO$ByteOffsetForSectorAlignment$VH_ = _FILE_STORAGE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ByteOffsetForSectorAlignment"));
    public static java.lang.invoke.VarHandle _FILE_STORAGE_INFO$ByteOffsetForSectorAlignment$VH() { return _FILE_STORAGE_INFO$ByteOffsetForSectorAlignment$VH_; }

    static final MemoryLayout _FILE_STORAGE_INFO$ByteOffsetForPartitionAlignment$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_INFO$ByteOffsetForPartitionAlignment$LAYOUT() { return _FILE_STORAGE_INFO$ByteOffsetForPartitionAlignment$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_INFO$ByteOffsetForPartitionAlignment$VH_ = _FILE_STORAGE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ByteOffsetForPartitionAlignment"));
    public static java.lang.invoke.VarHandle _FILE_STORAGE_INFO$ByteOffsetForPartitionAlignment$VH() { return _FILE_STORAGE_INFO$ByteOffsetForPartitionAlignment$VH_; }

    static final MemoryLayout _FILE_ID_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("VolumeSerialNumber"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(16, C_BOOL).withName("Identifier")
        ).withName("FileId")
    ).withName("_FILE_ID_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_INFO$struct$LAYOUT() { return _FILE_ID_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_ID_INFO$VolumeSerialNumber$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_INFO$VolumeSerialNumber$LAYOUT() { return _FILE_ID_INFO$VolumeSerialNumber$LAYOUT_; }

    static final VarHandle _FILE_ID_INFO$VolumeSerialNumber$VH_ = _FILE_ID_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeSerialNumber"));
    public static java.lang.invoke.VarHandle _FILE_ID_INFO$VolumeSerialNumber$VH() { return _FILE_ID_INFO$VolumeSerialNumber$VH_; }

    static final MemoryLayout _FILE_ID_EXTD_DIR_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NextEntryOffset"),
        C_INT.withName("FileIndex"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("CreationTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastAccessTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastWriteTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ChangeTime"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("EndOfFile"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("AllocationSize"),
        C_INT.withName("FileAttributes"),
        C_INT.withName("FileNameLength"),
        C_INT.withName("EaSize"),
        C_INT.withName("ReparsePointTag"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(16, C_BOOL).withName("Identifier")
        ).withName("FileId"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_FILE_ID_EXTD_DIR_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_EXTD_DIR_INFO$struct$LAYOUT() { return _FILE_ID_EXTD_DIR_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_ID_EXTD_DIR_INFO$NextEntryOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_EXTD_DIR_INFO$NextEntryOffset$LAYOUT() { return _FILE_ID_EXTD_DIR_INFO$NextEntryOffset$LAYOUT_; }

    static final VarHandle _FILE_ID_EXTD_DIR_INFO$NextEntryOffset$VH_ = _FILE_ID_EXTD_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextEntryOffset"));
    public static java.lang.invoke.VarHandle _FILE_ID_EXTD_DIR_INFO$NextEntryOffset$VH() { return _FILE_ID_EXTD_DIR_INFO$NextEntryOffset$VH_; }

    static final MemoryLayout _FILE_ID_EXTD_DIR_INFO$FileIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_EXTD_DIR_INFO$FileIndex$LAYOUT() { return _FILE_ID_EXTD_DIR_INFO$FileIndex$LAYOUT_; }

    static final VarHandle _FILE_ID_EXTD_DIR_INFO$FileIndex$VH_ = _FILE_ID_EXTD_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileIndex"));
    public static java.lang.invoke.VarHandle _FILE_ID_EXTD_DIR_INFO$FileIndex$VH() { return _FILE_ID_EXTD_DIR_INFO$FileIndex$VH_; }

    static final MemoryLayout _FILE_ID_EXTD_DIR_INFO$FileAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_EXTD_DIR_INFO$FileAttributes$LAYOUT() { return _FILE_ID_EXTD_DIR_INFO$FileAttributes$LAYOUT_; }

    static final VarHandle _FILE_ID_EXTD_DIR_INFO$FileAttributes$VH_ = _FILE_ID_EXTD_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    public static java.lang.invoke.VarHandle _FILE_ID_EXTD_DIR_INFO$FileAttributes$VH() { return _FILE_ID_EXTD_DIR_INFO$FileAttributes$VH_; }

    static final MemoryLayout _FILE_ID_EXTD_DIR_INFO$FileNameLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_EXTD_DIR_INFO$FileNameLength$LAYOUT() { return _FILE_ID_EXTD_DIR_INFO$FileNameLength$LAYOUT_; }

    static final VarHandle _FILE_ID_EXTD_DIR_INFO$FileNameLength$VH_ = _FILE_ID_EXTD_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    public static java.lang.invoke.VarHandle _FILE_ID_EXTD_DIR_INFO$FileNameLength$VH() { return _FILE_ID_EXTD_DIR_INFO$FileNameLength$VH_; }

    static final MemoryLayout _FILE_ID_EXTD_DIR_INFO$EaSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_EXTD_DIR_INFO$EaSize$LAYOUT() { return _FILE_ID_EXTD_DIR_INFO$EaSize$LAYOUT_; }

    static final VarHandle _FILE_ID_EXTD_DIR_INFO$EaSize$VH_ = _FILE_ID_EXTD_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EaSize"));
    public static java.lang.invoke.VarHandle _FILE_ID_EXTD_DIR_INFO$EaSize$VH() { return _FILE_ID_EXTD_DIR_INFO$EaSize$VH_; }

    static final MemoryLayout _FILE_ID_EXTD_DIR_INFO$ReparsePointTag$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_ID_EXTD_DIR_INFO$ReparsePointTag$LAYOUT() { return _FILE_ID_EXTD_DIR_INFO$ReparsePointTag$LAYOUT_; }

    static final VarHandle _FILE_ID_EXTD_DIR_INFO$ReparsePointTag$VH_ = _FILE_ID_EXTD_DIR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReparsePointTag"));
    public static java.lang.invoke.VarHandle _FILE_ID_EXTD_DIR_INFO$ReparsePointTag$VH() { return _FILE_ID_EXTD_DIR_INFO$ReparsePointTag$VH_; }

    static final MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("StructureVersion"),
        C_SHORT.withName("StructureSize"),
        C_INT.withName("Protocol"),
        C_SHORT.withName("ProtocolMajorVersion"),
        C_SHORT.withName("ProtocolMinorVersion"),
        C_SHORT.withName("ProtocolRevision"),
        C_SHORT.withName("Reserved"),
        C_INT.withName("Flags"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(8, C_INT).withName("Reserved")
        ).withName("GenericReserved"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                MemoryLayout.ofStruct(
                    C_INT.withName("Capabilities")
                ).withName("Server"),
                MemoryLayout.ofStruct(
                    C_INT.withName("Capabilities"),
                    C_INT.withName("CachingFlags")
                ).withName("Share")
            ).withName("Smb2"),
            MemoryLayout.ofSequence(16, C_INT).withName("Reserved")
        ).withName("ProtocolSpecific")
    ).withName("_FILE_REMOTE_PROTOCOL_INFO");
    public static jdk.incubator.foreign.MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT() { return _FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$StructureVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$StructureVersion$LAYOUT() { return _FILE_REMOTE_PROTOCOL_INFO$StructureVersion$LAYOUT_; }

    static final VarHandle _FILE_REMOTE_PROTOCOL_INFO$StructureVersion$VH_ = _FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("StructureVersion"));
    public static java.lang.invoke.VarHandle _FILE_REMOTE_PROTOCOL_INFO$StructureVersion$VH() { return _FILE_REMOTE_PROTOCOL_INFO$StructureVersion$VH_; }

    static final MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$StructureSize$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$StructureSize$LAYOUT() { return _FILE_REMOTE_PROTOCOL_INFO$StructureSize$LAYOUT_; }

    static final VarHandle _FILE_REMOTE_PROTOCOL_INFO$StructureSize$VH_ = _FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("StructureSize"));
    public static java.lang.invoke.VarHandle _FILE_REMOTE_PROTOCOL_INFO$StructureSize$VH() { return _FILE_REMOTE_PROTOCOL_INFO$StructureSize$VH_; }

    static final MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$Protocol$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$Protocol$LAYOUT() { return _FILE_REMOTE_PROTOCOL_INFO$Protocol$LAYOUT_; }

    static final VarHandle _FILE_REMOTE_PROTOCOL_INFO$Protocol$VH_ = _FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Protocol"));
    public static java.lang.invoke.VarHandle _FILE_REMOTE_PROTOCOL_INFO$Protocol$VH() { return _FILE_REMOTE_PROTOCOL_INFO$Protocol$VH_; }

    static final MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$ProtocolMajorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$ProtocolMajorVersion$LAYOUT() { return _FILE_REMOTE_PROTOCOL_INFO$ProtocolMajorVersion$LAYOUT_; }

    static final VarHandle _FILE_REMOTE_PROTOCOL_INFO$ProtocolMajorVersion$VH_ = _FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ProtocolMajorVersion"));
    public static java.lang.invoke.VarHandle _FILE_REMOTE_PROTOCOL_INFO$ProtocolMajorVersion$VH() { return _FILE_REMOTE_PROTOCOL_INFO$ProtocolMajorVersion$VH_; }

    static final MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$ProtocolMinorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$ProtocolMinorVersion$LAYOUT() { return _FILE_REMOTE_PROTOCOL_INFO$ProtocolMinorVersion$LAYOUT_; }

    static final VarHandle _FILE_REMOTE_PROTOCOL_INFO$ProtocolMinorVersion$VH_ = _FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ProtocolMinorVersion"));
    public static java.lang.invoke.VarHandle _FILE_REMOTE_PROTOCOL_INFO$ProtocolMinorVersion$VH() { return _FILE_REMOTE_PROTOCOL_INFO$ProtocolMinorVersion$VH_; }

    static final MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$ProtocolRevision$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$ProtocolRevision$LAYOUT() { return _FILE_REMOTE_PROTOCOL_INFO$ProtocolRevision$LAYOUT_; }

    static final VarHandle _FILE_REMOTE_PROTOCOL_INFO$ProtocolRevision$VH_ = _FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ProtocolRevision"));
    public static java.lang.invoke.VarHandle _FILE_REMOTE_PROTOCOL_INFO$ProtocolRevision$VH() { return _FILE_REMOTE_PROTOCOL_INFO$ProtocolRevision$VH_; }

    static final MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$Reserved$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$Reserved$LAYOUT() { return _FILE_REMOTE_PROTOCOL_INFO$Reserved$LAYOUT_; }

    static final VarHandle _FILE_REMOTE_PROTOCOL_INFO$Reserved$VH_ = _FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _FILE_REMOTE_PROTOCOL_INFO$Reserved$VH() { return _FILE_REMOTE_PROTOCOL_INFO$Reserved$VH_; }

    static final MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FILE_REMOTE_PROTOCOL_INFO$Flags$LAYOUT() { return _FILE_REMOTE_PROTOCOL_INFO$Flags$LAYOUT_; }

    static final VarHandle _FILE_REMOTE_PROTOCOL_INFO$Flags$VH_ = _FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _FILE_REMOTE_PROTOCOL_INFO$Flags$VH() { return _FILE_REMOTE_PROTOCOL_INFO$Flags$VH_; }

    static final MemoryLayout GenericReserved$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(8, C_INT).withName("Reserved")
    );
    public static jdk.incubator.foreign.MemoryLayout GenericReserved$struct$LAYOUT() { return GenericReserved$struct$LAYOUT_; }

    static final MemoryLayout ProtocolSpecific$struct$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("Capabilities")
            ).withName("Server"),
            MemoryLayout.ofStruct(
                C_INT.withName("Capabilities"),
                C_INT.withName("CachingFlags")
            ).withName("Share")
        ).withName("Smb2"),
        MemoryLayout.ofSequence(16, C_INT).withName("Reserved")
    );
    public static jdk.incubator.foreign.MemoryLayout ProtocolSpecific$struct$LAYOUT() { return ProtocolSpecific$struct$LAYOUT_; }

    static final MemoryLayout Smb2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("Capabilities")
        ).withName("Server"),
        MemoryLayout.ofStruct(
            C_INT.withName("Capabilities"),
            C_INT.withName("CachingFlags")
        ).withName("Share")
    );
    public static jdk.incubator.foreign.MemoryLayout Smb2$struct$LAYOUT() { return Smb2$struct$LAYOUT_; }

    static final MemoryLayout Server$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Capabilities")
    );
    public static jdk.incubator.foreign.MemoryLayout Server$struct$LAYOUT() { return Server$struct$LAYOUT_; }

    static final MemoryLayout Server$Capabilities$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Server$Capabilities$LAYOUT() { return Server$Capabilities$LAYOUT_; }

    static final VarHandle Server$Capabilities$VH_ = Server$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Capabilities"));
    public static java.lang.invoke.VarHandle Server$Capabilities$VH() { return Server$Capabilities$VH_; }

    static final MemoryLayout Share$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Capabilities"),
        C_INT.withName("CachingFlags")
    );
    public static jdk.incubator.foreign.MemoryLayout Share$struct$LAYOUT() { return Share$struct$LAYOUT_; }

    static final MemoryLayout Share$Capabilities$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Share$Capabilities$LAYOUT() { return Share$Capabilities$LAYOUT_; }

    static final VarHandle Share$Capabilities$VH_ = Share$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Capabilities"));
    public static java.lang.invoke.VarHandle Share$Capabilities$VH() { return Share$Capabilities$VH_; }

    static final MemoryLayout Share$CachingFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Share$CachingFlags$LAYOUT() { return Share$CachingFlags$LAYOUT_; }

    static final VarHandle Share$CachingFlags$VH_ = Share$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CachingFlags"));
    public static java.lang.invoke.VarHandle Share$CachingFlags$VH() { return Share$CachingFlags$VH_; }

    static final FunctionDescriptor GetFileInformationByHandleEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileInformationByHandleEx$FUNC() { return GetFileInformationByHandleEx$FUNC_; }

    static final MethodHandle GetFileInformationByHandleEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileInformationByHandleEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetFileInformationByHandleEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileInformationByHandleEx$MH() { return GetFileInformationByHandleEx$MH_; }

    public static int FileIdType() { return (int)0L; }

    public static int ObjectIdType() { return (int)1L; }

    public static int ExtendedFileIdType() { return (int)2L; }

    public static int MaximumFileIdType() { return (int)3L; }

    static final MemoryLayout FILE_ID_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwSize"),
        C_INT.withName("Type"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileId"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ObjectId"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(16, C_BOOL).withName("Identifier")
        ).withName("ExtendedFileId")
    ).withName("FILE_ID_DESCRIPTOR");
    public static jdk.incubator.foreign.MemoryLayout FILE_ID_DESCRIPTOR$struct$LAYOUT() { return FILE_ID_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout FILE_ID_DESCRIPTOR$dwSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout FILE_ID_DESCRIPTOR$dwSize$LAYOUT() { return FILE_ID_DESCRIPTOR$dwSize$LAYOUT_; }

    static final VarHandle FILE_ID_DESCRIPTOR$dwSize$VH_ = FILE_ID_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    public static java.lang.invoke.VarHandle FILE_ID_DESCRIPTOR$dwSize$VH() { return FILE_ID_DESCRIPTOR$dwSize$VH_; }

    static final MemoryLayout FILE_ID_DESCRIPTOR$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout FILE_ID_DESCRIPTOR$Type$LAYOUT() { return FILE_ID_DESCRIPTOR$Type$LAYOUT_; }

    static final VarHandle FILE_ID_DESCRIPTOR$Type$VH_ = FILE_ID_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle FILE_ID_DESCRIPTOR$Type$VH() { return FILE_ID_DESCRIPTOR$Type$VH_; }

    static final FunctionDescriptor OpenFileById$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenFileById$FUNC() { return OpenFileById$FUNC_; }

    static final MethodHandle OpenFileById$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenFileById",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        OpenFileById$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenFileById$MH() { return OpenFileById$MH_; }

    static final FunctionDescriptor CreateSymbolicLinkA$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateSymbolicLinkA$FUNC() { return CreateSymbolicLinkA$FUNC_; }

    static final MethodHandle CreateSymbolicLinkA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateSymbolicLinkA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)B",
        CreateSymbolicLinkA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateSymbolicLinkA$MH() { return CreateSymbolicLinkA$MH_; }

    static final FunctionDescriptor CreateSymbolicLinkW$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateSymbolicLinkW$FUNC() { return CreateSymbolicLinkW$FUNC_; }

    static final MethodHandle CreateSymbolicLinkW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateSymbolicLinkW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)B",
        CreateSymbolicLinkW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateSymbolicLinkW$MH() { return CreateSymbolicLinkW$MH_; }

    static final FunctionDescriptor QueryActCtxSettingsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryActCtxSettingsW$FUNC() { return QueryActCtxSettingsW$FUNC_; }

    static final MethodHandle QueryActCtxSettingsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryActCtxSettingsW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        QueryActCtxSettingsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryActCtxSettingsW$MH() { return QueryActCtxSettingsW$MH_; }

    static final FunctionDescriptor CreateSymbolicLinkTransactedA$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateSymbolicLinkTransactedA$FUNC() { return CreateSymbolicLinkTransactedA$FUNC_; }

    static final MethodHandle CreateSymbolicLinkTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateSymbolicLinkTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)B",
        CreateSymbolicLinkTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateSymbolicLinkTransactedA$MH() { return CreateSymbolicLinkTransactedA$MH_; }

    static final FunctionDescriptor CreateSymbolicLinkTransactedW$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateSymbolicLinkTransactedW$FUNC() { return CreateSymbolicLinkTransactedW$FUNC_; }

    static final MethodHandle CreateSymbolicLinkTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateSymbolicLinkTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)B",
        CreateSymbolicLinkTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateSymbolicLinkTransactedW$MH() { return CreateSymbolicLinkTransactedW$MH_; }

    static final FunctionDescriptor ReplacePartitionUnit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReplacePartitionUnit$FUNC() { return ReplacePartitionUnit$FUNC_; }

    static final MethodHandle ReplacePartitionUnit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReplacePartitionUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ReplacePartitionUnit$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReplacePartitionUnit$MH() { return ReplacePartitionUnit$MH_; }

    static final FunctionDescriptor AddSecureMemoryCacheCallback$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddSecureMemoryCacheCallback$FUNC() { return AddSecureMemoryCacheCallback$FUNC_; }

    static final MethodHandle AddSecureMemoryCacheCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddSecureMemoryCacheCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        AddSecureMemoryCacheCallback$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddSecureMemoryCacheCallback$MH() { return AddSecureMemoryCacheCallback$MH_; }

    static final FunctionDescriptor AddSecureMemoryCacheCallback$pfnCallBack$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddSecureMemoryCacheCallback$pfnCallBack$FUNC() { return AddSecureMemoryCacheCallback$pfnCallBack$FUNC_; }

    static final FunctionDescriptor RemoveSecureMemoryCacheCallback$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveSecureMemoryCacheCallback$FUNC() { return RemoveSecureMemoryCacheCallback$FUNC_; }

    static final MethodHandle RemoveSecureMemoryCacheCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveSecureMemoryCacheCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveSecureMemoryCacheCallback$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveSecureMemoryCacheCallback$MH() { return RemoveSecureMemoryCacheCallback$MH_; }

    static final FunctionDescriptor RemoveSecureMemoryCacheCallback$pfnCallBack$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveSecureMemoryCacheCallback$pfnCallBack$FUNC() { return RemoveSecureMemoryCacheCallback$pfnCallBack$FUNC_; }

    static final FunctionDescriptor CopyContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyContext$FUNC() { return CopyContext$FUNC_; }

    static final MethodHandle CopyContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyContext",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CopyContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyContext$MH() { return CopyContext$MH_; }

    static final FunctionDescriptor InitializeContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeContext$FUNC() { return InitializeContext$FUNC_; }

    static final MethodHandle InitializeContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeContext",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        InitializeContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeContext$MH() { return InitializeContext$MH_; }

    static final FunctionDescriptor InitializeContext2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeContext2$FUNC() { return InitializeContext2$FUNC_; }

    static final MethodHandle InitializeContext2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeContext2",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        InitializeContext2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeContext2$MH() { return InitializeContext2$MH_; }

    static final FunctionDescriptor GetEnabledXStateFeatures$FUNC_ = FunctionDescriptor.of(C_LONGLONG);
    public static jdk.incubator.foreign.FunctionDescriptor GetEnabledXStateFeatures$FUNC() { return GetEnabledXStateFeatures$FUNC_; }

    static final MethodHandle GetEnabledXStateFeatures$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnabledXStateFeatures",
        "()J",
        GetEnabledXStateFeatures$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetEnabledXStateFeatures$MH() { return GetEnabledXStateFeatures$MH_; }

    static final FunctionDescriptor GetXStateFeaturesMask$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetXStateFeaturesMask$FUNC() { return GetXStateFeaturesMask$FUNC_; }

    static final MethodHandle GetXStateFeaturesMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetXStateFeaturesMask",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetXStateFeaturesMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetXStateFeaturesMask$MH() { return GetXStateFeaturesMask$MH_; }

    static final FunctionDescriptor LocateXStateFeature$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocateXStateFeature$FUNC() { return LocateXStateFeature$FUNC_; }

    static final MethodHandle LocateXStateFeature$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocateXStateFeature",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LocateXStateFeature$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocateXStateFeature$MH() { return LocateXStateFeature$MH_; }

    static final FunctionDescriptor SetXStateFeaturesMask$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetXStateFeaturesMask$FUNC() { return SetXStateFeaturesMask$FUNC_; }

    static final MethodHandle SetXStateFeaturesMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetXStateFeaturesMask",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        SetXStateFeaturesMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetXStateFeaturesMask$MH() { return SetXStateFeaturesMask$MH_; }

    static final FunctionDescriptor EnableThreadProfiling$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnableThreadProfiling$FUNC() { return EnableThreadProfiling$FUNC_; }

    static final MethodHandle EnableThreadProfiling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnableThreadProfiling",
        "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I",
        EnableThreadProfiling$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnableThreadProfiling$MH() { return EnableThreadProfiling$MH_; }

    static final FunctionDescriptor DisableThreadProfiling$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DisableThreadProfiling$FUNC() { return DisableThreadProfiling$FUNC_; }

    static final MethodHandle DisableThreadProfiling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DisableThreadProfiling",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DisableThreadProfiling$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DisableThreadProfiling$MH() { return DisableThreadProfiling$MH_; }

    static final FunctionDescriptor QueryThreadProfiling$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryThreadProfiling$FUNC() { return QueryThreadProfiling$FUNC_; }

    static final MethodHandle QueryThreadProfiling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryThreadProfiling",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryThreadProfiling$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryThreadProfiling$MH() { return QueryThreadProfiling$MH_; }

    static final FunctionDescriptor ReadThreadProfilingData$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadThreadProfilingData$FUNC() { return ReadThreadProfilingData$FUNC_; }

    static final MethodHandle ReadThreadProfilingData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadThreadProfilingData",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ReadThreadProfilingData$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadThreadProfilingData$MH() { return ReadThreadProfilingData$MH_; }

    static final FunctionDescriptor RaiseCustomSystemEventTrigger$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RaiseCustomSystemEventTrigger$FUNC() { return RaiseCustomSystemEventTrigger$FUNC_; }

    static final MethodHandle RaiseCustomSystemEventTrigger$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RaiseCustomSystemEventTrigger",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RaiseCustomSystemEventTrigger$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RaiseCustomSystemEventTrigger$MH() { return RaiseCustomSystemEventTrigger$MH_; }

    static final MemoryLayout _DRAWPATRECT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("ptPosition"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("ptSize"),
        C_SHORT.withName("wStyle"),
        C_SHORT.withName("wPattern")
    ).withName("_DRAWPATRECT");
    public static jdk.incubator.foreign.MemoryLayout _DRAWPATRECT$struct$LAYOUT() { return _DRAWPATRECT$struct$LAYOUT_; }

    static final MemoryLayout _DRAWPATRECT$wStyle$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _DRAWPATRECT$wStyle$LAYOUT() { return _DRAWPATRECT$wStyle$LAYOUT_; }

    static final VarHandle _DRAWPATRECT$wStyle$VH_ = _DRAWPATRECT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wStyle"));
    public static java.lang.invoke.VarHandle _DRAWPATRECT$wStyle$VH() { return _DRAWPATRECT$wStyle$VH_; }

    static final MemoryLayout _DRAWPATRECT$wPattern$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _DRAWPATRECT$wPattern$LAYOUT() { return _DRAWPATRECT$wPattern$LAYOUT_; }

    static final VarHandle _DRAWPATRECT$wPattern$VH_ = _DRAWPATRECT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wPattern"));
    public static java.lang.invoke.VarHandle _DRAWPATRECT$wPattern$VH() { return _DRAWPATRECT$wPattern$VH_; }

    static final MemoryLayout _PSINJECTDATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("DataBytes"),
        C_SHORT.withName("InjectionPoint"),
        C_SHORT.withName("PageNumber")
    ).withName("_PSINJECTDATA");
    public static jdk.incubator.foreign.MemoryLayout _PSINJECTDATA$struct$LAYOUT() { return _PSINJECTDATA$struct$LAYOUT_; }

    static final MemoryLayout _PSINJECTDATA$DataBytes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PSINJECTDATA$DataBytes$LAYOUT() { return _PSINJECTDATA$DataBytes$LAYOUT_; }

    static final VarHandle _PSINJECTDATA$DataBytes$VH_ = _PSINJECTDATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataBytes"));
    public static java.lang.invoke.VarHandle _PSINJECTDATA$DataBytes$VH() { return _PSINJECTDATA$DataBytes$VH_; }

    static final MemoryLayout _PSINJECTDATA$InjectionPoint$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _PSINJECTDATA$InjectionPoint$LAYOUT() { return _PSINJECTDATA$InjectionPoint$LAYOUT_; }

    static final VarHandle _PSINJECTDATA$InjectionPoint$VH_ = _PSINJECTDATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("InjectionPoint"));
    public static java.lang.invoke.VarHandle _PSINJECTDATA$InjectionPoint$VH() { return _PSINJECTDATA$InjectionPoint$VH_; }

    static final MemoryLayout _PSINJECTDATA$PageNumber$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _PSINJECTDATA$PageNumber$LAYOUT() { return _PSINJECTDATA$PageNumber$LAYOUT_; }

    static final VarHandle _PSINJECTDATA$PageNumber$VH_ = _PSINJECTDATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("PageNumber"));
    public static java.lang.invoke.VarHandle _PSINJECTDATA$PageNumber$VH() { return _PSINJECTDATA$PageNumber$VH_; }

    static final MemoryLayout _PSFEATURE_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("bPageIndependent"),
        C_INT.withName("bSetPageDevice")
    ).withName("_PSFEATURE_OUTPUT");
    public static jdk.incubator.foreign.MemoryLayout _PSFEATURE_OUTPUT$struct$LAYOUT() { return _PSFEATURE_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _PSFEATURE_OUTPUT$bPageIndependent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PSFEATURE_OUTPUT$bPageIndependent$LAYOUT() { return _PSFEATURE_OUTPUT$bPageIndependent$LAYOUT_; }

    static final VarHandle _PSFEATURE_OUTPUT$bPageIndependent$VH_ = _PSFEATURE_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bPageIndependent"));
    public static java.lang.invoke.VarHandle _PSFEATURE_OUTPUT$bPageIndependent$VH() { return _PSFEATURE_OUTPUT$bPageIndependent$VH_; }

    static final MemoryLayout _PSFEATURE_OUTPUT$bSetPageDevice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PSFEATURE_OUTPUT$bSetPageDevice$LAYOUT() { return _PSFEATURE_OUTPUT$bSetPageDevice$LAYOUT_; }

    static final VarHandle _PSFEATURE_OUTPUT$bSetPageDevice$VH_ = _PSFEATURE_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bSetPageDevice"));
    public static java.lang.invoke.VarHandle _PSFEATURE_OUTPUT$bSetPageDevice$VH() { return _PSFEATURE_OUTPUT$bSetPageDevice$VH_; }

    static final MemoryLayout _PSFEATURE_CUSTPAPER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("lOrientation"),
        C_INT.withName("lWidth"),
        C_INT.withName("lHeight"),
        C_INT.withName("lWidthOffset"),
        C_INT.withName("lHeightOffset")
    ).withName("_PSFEATURE_CUSTPAPER");
    public static jdk.incubator.foreign.MemoryLayout _PSFEATURE_CUSTPAPER$struct$LAYOUT() { return _PSFEATURE_CUSTPAPER$struct$LAYOUT_; }

    static final MemoryLayout _PSFEATURE_CUSTPAPER$lOrientation$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PSFEATURE_CUSTPAPER$lOrientation$LAYOUT() { return _PSFEATURE_CUSTPAPER$lOrientation$LAYOUT_; }

    static final VarHandle _PSFEATURE_CUSTPAPER$lOrientation$VH_ = _PSFEATURE_CUSTPAPER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lOrientation"));
    public static java.lang.invoke.VarHandle _PSFEATURE_CUSTPAPER$lOrientation$VH() { return _PSFEATURE_CUSTPAPER$lOrientation$VH_; }

    static final MemoryLayout _PSFEATURE_CUSTPAPER$lWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PSFEATURE_CUSTPAPER$lWidth$LAYOUT() { return _PSFEATURE_CUSTPAPER$lWidth$LAYOUT_; }

    static final VarHandle _PSFEATURE_CUSTPAPER$lWidth$VH_ = _PSFEATURE_CUSTPAPER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lWidth"));
    public static java.lang.invoke.VarHandle _PSFEATURE_CUSTPAPER$lWidth$VH() { return _PSFEATURE_CUSTPAPER$lWidth$VH_; }

    static final MemoryLayout _PSFEATURE_CUSTPAPER$lHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PSFEATURE_CUSTPAPER$lHeight$LAYOUT() { return _PSFEATURE_CUSTPAPER$lHeight$LAYOUT_; }

    static final VarHandle _PSFEATURE_CUSTPAPER$lHeight$VH_ = _PSFEATURE_CUSTPAPER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lHeight"));
    public static java.lang.invoke.VarHandle _PSFEATURE_CUSTPAPER$lHeight$VH() { return _PSFEATURE_CUSTPAPER$lHeight$VH_; }

    static final MemoryLayout _PSFEATURE_CUSTPAPER$lWidthOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PSFEATURE_CUSTPAPER$lWidthOffset$LAYOUT() { return _PSFEATURE_CUSTPAPER$lWidthOffset$LAYOUT_; }

    static final VarHandle _PSFEATURE_CUSTPAPER$lWidthOffset$VH_ = _PSFEATURE_CUSTPAPER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lWidthOffset"));
    public static java.lang.invoke.VarHandle _PSFEATURE_CUSTPAPER$lWidthOffset$VH() { return _PSFEATURE_CUSTPAPER$lWidthOffset$VH_; }

    static final MemoryLayout _PSFEATURE_CUSTPAPER$lHeightOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PSFEATURE_CUSTPAPER$lHeightOffset$LAYOUT() { return _PSFEATURE_CUSTPAPER$lHeightOffset$LAYOUT_; }

    static final VarHandle _PSFEATURE_CUSTPAPER$lHeightOffset$VH_ = _PSFEATURE_CUSTPAPER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lHeightOffset"));
    public static java.lang.invoke.VarHandle _PSFEATURE_CUSTPAPER$lHeightOffset$VH() { return _PSFEATURE_CUSTPAPER$lHeightOffset$VH_; }

    static final MemoryLayout tagXFORM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_FLOAT.withName("eM11"),
        C_FLOAT.withName("eM12"),
        C_FLOAT.withName("eM21"),
        C_FLOAT.withName("eM22"),
        C_FLOAT.withName("eDx"),
        C_FLOAT.withName("eDy")
    ).withName("tagXFORM");
    public static jdk.incubator.foreign.MemoryLayout tagXFORM$struct$LAYOUT() { return tagXFORM$struct$LAYOUT_; }

    static final MemoryLayout tagXFORM$eM11$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout tagXFORM$eM11$LAYOUT() { return tagXFORM$eM11$LAYOUT_; }

    static final VarHandle tagXFORM$eM11$VH_ = tagXFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("eM11"));
    public static java.lang.invoke.VarHandle tagXFORM$eM11$VH() { return tagXFORM$eM11$VH_; }

    static final MemoryLayout tagXFORM$eM12$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout tagXFORM$eM12$LAYOUT() { return tagXFORM$eM12$LAYOUT_; }

    static final VarHandle tagXFORM$eM12$VH_ = tagXFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("eM12"));
    public static java.lang.invoke.VarHandle tagXFORM$eM12$VH() { return tagXFORM$eM12$VH_; }

    static final MemoryLayout tagXFORM$eM21$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout tagXFORM$eM21$LAYOUT() { return tagXFORM$eM21$LAYOUT_; }

    static final VarHandle tagXFORM$eM21$VH_ = tagXFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("eM21"));
    public static java.lang.invoke.VarHandle tagXFORM$eM21$VH() { return tagXFORM$eM21$VH_; }

    static final MemoryLayout tagXFORM$eM22$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout tagXFORM$eM22$LAYOUT() { return tagXFORM$eM22$LAYOUT_; }

    static final VarHandle tagXFORM$eM22$VH_ = tagXFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("eM22"));
    public static java.lang.invoke.VarHandle tagXFORM$eM22$VH() { return tagXFORM$eM22$VH_; }

    static final MemoryLayout tagXFORM$eDx$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout tagXFORM$eDx$LAYOUT() { return tagXFORM$eDx$LAYOUT_; }

    static final VarHandle tagXFORM$eDx$VH_ = tagXFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("eDx"));
    public static java.lang.invoke.VarHandle tagXFORM$eDx$VH() { return tagXFORM$eDx$VH_; }

    static final MemoryLayout tagXFORM$eDy$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout tagXFORM$eDy$LAYOUT() { return tagXFORM$eDy$LAYOUT_; }

    static final VarHandle tagXFORM$eDy$VH_ = tagXFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("eDy"));
    public static java.lang.invoke.VarHandle tagXFORM$eDy$VH() { return tagXFORM$eDy$VH_; }

    static final MemoryLayout tagBITMAP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("bmType"),
        C_INT.withName("bmWidth"),
        C_INT.withName("bmHeight"),
        C_INT.withName("bmWidthBytes"),
        C_SHORT.withName("bmPlanes"),
        C_SHORT.withName("bmBitsPixel"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("bmBits")
    ).withName("tagBITMAP");
    public static jdk.incubator.foreign.MemoryLayout tagBITMAP$struct$LAYOUT() { return tagBITMAP$struct$LAYOUT_; }

    static final MemoryLayout tagBITMAP$bmType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAP$bmType$LAYOUT() { return tagBITMAP$bmType$LAYOUT_; }

    static final VarHandle tagBITMAP$bmType$VH_ = tagBITMAP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bmType"));
    public static java.lang.invoke.VarHandle tagBITMAP$bmType$VH() { return tagBITMAP$bmType$VH_; }

    static final MemoryLayout tagBITMAP$bmWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAP$bmWidth$LAYOUT() { return tagBITMAP$bmWidth$LAYOUT_; }

    static final VarHandle tagBITMAP$bmWidth$VH_ = tagBITMAP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bmWidth"));
    public static java.lang.invoke.VarHandle tagBITMAP$bmWidth$VH() { return tagBITMAP$bmWidth$VH_; }

    static final MemoryLayout tagBITMAP$bmHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAP$bmHeight$LAYOUT() { return tagBITMAP$bmHeight$LAYOUT_; }

    static final VarHandle tagBITMAP$bmHeight$VH_ = tagBITMAP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bmHeight"));
    public static java.lang.invoke.VarHandle tagBITMAP$bmHeight$VH() { return tagBITMAP$bmHeight$VH_; }

    static final MemoryLayout tagBITMAP$bmWidthBytes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAP$bmWidthBytes$LAYOUT() { return tagBITMAP$bmWidthBytes$LAYOUT_; }

    static final VarHandle tagBITMAP$bmWidthBytes$VH_ = tagBITMAP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bmWidthBytes"));
    public static java.lang.invoke.VarHandle tagBITMAP$bmWidthBytes$VH() { return tagBITMAP$bmWidthBytes$VH_; }

    static final MemoryLayout tagBITMAP$bmPlanes$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAP$bmPlanes$LAYOUT() { return tagBITMAP$bmPlanes$LAYOUT_; }

    static final VarHandle tagBITMAP$bmPlanes$VH_ = tagBITMAP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("bmPlanes"));
    public static java.lang.invoke.VarHandle tagBITMAP$bmPlanes$VH() { return tagBITMAP$bmPlanes$VH_; }

    static final MemoryLayout tagBITMAP$bmBitsPixel$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAP$bmBitsPixel$LAYOUT() { return tagBITMAP$bmBitsPixel$LAYOUT_; }

    static final VarHandle tagBITMAP$bmBitsPixel$VH_ = tagBITMAP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("bmBitsPixel"));
    public static java.lang.invoke.VarHandle tagBITMAP$bmBitsPixel$VH() { return tagBITMAP$bmBitsPixel$VH_; }

    static final MemoryLayout tagBITMAP$bmBits$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAP$bmBits$LAYOUT() { return tagBITMAP$bmBits$LAYOUT_; }

    static final VarHandle tagBITMAP$bmBits$VH_ = MemoryHandles.asAddressVarHandle(tagBITMAP$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("bmBits")));
    public static java.lang.invoke.VarHandle tagBITMAP$bmBits$VH() { return tagBITMAP$bmBits$VH_; }

    static final MemoryLayout tagRGBTRIPLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("rgbtBlue"),
        C_BOOL.withName("rgbtGreen"),
        C_BOOL.withName("rgbtRed")
    ).withName("tagRGBTRIPLE");
    public static jdk.incubator.foreign.MemoryLayout tagRGBTRIPLE$struct$LAYOUT() { return tagRGBTRIPLE$struct$LAYOUT_; }

    static final MemoryLayout tagRGBTRIPLE$rgbtBlue$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagRGBTRIPLE$rgbtBlue$LAYOUT() { return tagRGBTRIPLE$rgbtBlue$LAYOUT_; }

    static final VarHandle tagRGBTRIPLE$rgbtBlue$VH_ = tagRGBTRIPLE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("rgbtBlue"));
    public static java.lang.invoke.VarHandle tagRGBTRIPLE$rgbtBlue$VH() { return tagRGBTRIPLE$rgbtBlue$VH_; }

    static final MemoryLayout tagRGBTRIPLE$rgbtGreen$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagRGBTRIPLE$rgbtGreen$LAYOUT() { return tagRGBTRIPLE$rgbtGreen$LAYOUT_; }

    static final VarHandle tagRGBTRIPLE$rgbtGreen$VH_ = tagRGBTRIPLE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("rgbtGreen"));
    public static java.lang.invoke.VarHandle tagRGBTRIPLE$rgbtGreen$VH() { return tagRGBTRIPLE$rgbtGreen$VH_; }

    static final MemoryLayout tagRGBTRIPLE$rgbtRed$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagRGBTRIPLE$rgbtRed$LAYOUT() { return tagRGBTRIPLE$rgbtRed$LAYOUT_; }

    static final VarHandle tagRGBTRIPLE$rgbtRed$VH_ = tagRGBTRIPLE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("rgbtRed"));
    public static java.lang.invoke.VarHandle tagRGBTRIPLE$rgbtRed$VH() { return tagRGBTRIPLE$rgbtRed$VH_; }

    static final MemoryLayout tagRGBQUAD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("rgbBlue"),
        C_BOOL.withName("rgbGreen"),
        C_BOOL.withName("rgbRed"),
        C_BOOL.withName("rgbReserved")
    ).withName("tagRGBQUAD");
    public static jdk.incubator.foreign.MemoryLayout tagRGBQUAD$struct$LAYOUT() { return tagRGBQUAD$struct$LAYOUT_; }

    static final MemoryLayout tagRGBQUAD$rgbBlue$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagRGBQUAD$rgbBlue$LAYOUT() { return tagRGBQUAD$rgbBlue$LAYOUT_; }

    static final VarHandle tagRGBQUAD$rgbBlue$VH_ = tagRGBQUAD$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("rgbBlue"));
    public static java.lang.invoke.VarHandle tagRGBQUAD$rgbBlue$VH() { return tagRGBQUAD$rgbBlue$VH_; }

    static final MemoryLayout tagRGBQUAD$rgbGreen$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagRGBQUAD$rgbGreen$LAYOUT() { return tagRGBQUAD$rgbGreen$LAYOUT_; }

    static final VarHandle tagRGBQUAD$rgbGreen$VH_ = tagRGBQUAD$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("rgbGreen"));
    public static java.lang.invoke.VarHandle tagRGBQUAD$rgbGreen$VH() { return tagRGBQUAD$rgbGreen$VH_; }

    static final MemoryLayout tagRGBQUAD$rgbRed$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagRGBQUAD$rgbRed$LAYOUT() { return tagRGBQUAD$rgbRed$LAYOUT_; }

    static final VarHandle tagRGBQUAD$rgbRed$VH_ = tagRGBQUAD$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("rgbRed"));
    public static java.lang.invoke.VarHandle tagRGBQUAD$rgbRed$VH() { return tagRGBQUAD$rgbRed$VH_; }

    static final MemoryLayout tagRGBQUAD$rgbReserved$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagRGBQUAD$rgbReserved$LAYOUT() { return tagRGBQUAD$rgbReserved$LAYOUT_; }

    static final VarHandle tagRGBQUAD$rgbReserved$VH_ = tagRGBQUAD$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("rgbReserved"));
    public static java.lang.invoke.VarHandle tagRGBQUAD$rgbReserved$VH() { return tagRGBQUAD$rgbReserved$VH_; }

    static final MemoryLayout tagCIEXYZ$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ciexyzX"),
        C_INT.withName("ciexyzY"),
        C_INT.withName("ciexyzZ")
    ).withName("tagCIEXYZ");
    public static jdk.incubator.foreign.MemoryLayout tagCIEXYZ$struct$LAYOUT() { return tagCIEXYZ$struct$LAYOUT_; }

    static final MemoryLayout tagCIEXYZ$ciexyzX$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCIEXYZ$ciexyzX$LAYOUT() { return tagCIEXYZ$ciexyzX$LAYOUT_; }

    static final VarHandle tagCIEXYZ$ciexyzX$VH_ = tagCIEXYZ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ciexyzX"));
    public static java.lang.invoke.VarHandle tagCIEXYZ$ciexyzX$VH() { return tagCIEXYZ$ciexyzX$VH_; }

    static final MemoryLayout tagCIEXYZ$ciexyzY$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCIEXYZ$ciexyzY$LAYOUT() { return tagCIEXYZ$ciexyzY$LAYOUT_; }

    static final VarHandle tagCIEXYZ$ciexyzY$VH_ = tagCIEXYZ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ciexyzY"));
    public static java.lang.invoke.VarHandle tagCIEXYZ$ciexyzY$VH() { return tagCIEXYZ$ciexyzY$VH_; }

    static final MemoryLayout tagCIEXYZ$ciexyzZ$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCIEXYZ$ciexyzZ$LAYOUT() { return tagCIEXYZ$ciexyzZ$LAYOUT_; }

    static final VarHandle tagCIEXYZ$ciexyzZ$VH_ = tagCIEXYZ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ciexyzZ"));
    public static java.lang.invoke.VarHandle tagCIEXYZ$ciexyzZ$VH() { return tagCIEXYZ$ciexyzZ$VH_; }

    static final MemoryLayout tagICEXYZTRIPLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("ciexyzX"),
            C_INT.withName("ciexyzY"),
            C_INT.withName("ciexyzZ")
        ).withName("ciexyzRed"),
        MemoryLayout.ofStruct(
            C_INT.withName("ciexyzX"),
            C_INT.withName("ciexyzY"),
            C_INT.withName("ciexyzZ")
        ).withName("ciexyzGreen"),
        MemoryLayout.ofStruct(
            C_INT.withName("ciexyzX"),
            C_INT.withName("ciexyzY"),
            C_INT.withName("ciexyzZ")
        ).withName("ciexyzBlue")
    ).withName("tagICEXYZTRIPLE");
    public static jdk.incubator.foreign.MemoryLayout tagICEXYZTRIPLE$struct$LAYOUT() { return tagICEXYZTRIPLE$struct$LAYOUT_; }

    static final MemoryLayout tagLOGCOLORSPACEA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("lcsSignature"),
        C_INT.withName("lcsVersion"),
        C_INT.withName("lcsSize"),
        C_INT.withName("lcsCSType"),
        C_INT.withName("lcsIntent"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("ciexyzX"),
                C_INT.withName("ciexyzY"),
                C_INT.withName("ciexyzZ")
            ).withName("ciexyzRed"),
            MemoryLayout.ofStruct(
                C_INT.withName("ciexyzX"),
                C_INT.withName("ciexyzY"),
                C_INT.withName("ciexyzZ")
            ).withName("ciexyzGreen"),
            MemoryLayout.ofStruct(
                C_INT.withName("ciexyzX"),
                C_INT.withName("ciexyzY"),
                C_INT.withName("ciexyzZ")
            ).withName("ciexyzBlue")
        ).withName("lcsEndpoints"),
        C_INT.withName("lcsGammaRed"),
        C_INT.withName("lcsGammaGreen"),
        C_INT.withName("lcsGammaBlue"),
        MemoryLayout.ofSequence(260, C_BOOL).withName("lcsFilename")
    ).withName("tagLOGCOLORSPACEA");
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEA$struct$LAYOUT() { return tagLOGCOLORSPACEA$struct$LAYOUT_; }

    static final MemoryLayout tagLOGCOLORSPACEA$lcsSignature$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEA$lcsSignature$LAYOUT() { return tagLOGCOLORSPACEA$lcsSignature$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEA$lcsSignature$VH_ = tagLOGCOLORSPACEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsSignature"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEA$lcsSignature$VH() { return tagLOGCOLORSPACEA$lcsSignature$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEA$lcsVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEA$lcsVersion$LAYOUT() { return tagLOGCOLORSPACEA$lcsVersion$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEA$lcsVersion$VH_ = tagLOGCOLORSPACEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsVersion"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEA$lcsVersion$VH() { return tagLOGCOLORSPACEA$lcsVersion$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEA$lcsSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEA$lcsSize$LAYOUT() { return tagLOGCOLORSPACEA$lcsSize$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEA$lcsSize$VH_ = tagLOGCOLORSPACEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsSize"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEA$lcsSize$VH() { return tagLOGCOLORSPACEA$lcsSize$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEA$lcsCSType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEA$lcsCSType$LAYOUT() { return tagLOGCOLORSPACEA$lcsCSType$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEA$lcsCSType$VH_ = tagLOGCOLORSPACEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsCSType"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEA$lcsCSType$VH() { return tagLOGCOLORSPACEA$lcsCSType$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEA$lcsIntent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEA$lcsIntent$LAYOUT() { return tagLOGCOLORSPACEA$lcsIntent$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEA$lcsIntent$VH_ = tagLOGCOLORSPACEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsIntent"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEA$lcsIntent$VH() { return tagLOGCOLORSPACEA$lcsIntent$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEA$lcsGammaRed$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEA$lcsGammaRed$LAYOUT() { return tagLOGCOLORSPACEA$lcsGammaRed$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEA$lcsGammaRed$VH_ = tagLOGCOLORSPACEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsGammaRed"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEA$lcsGammaRed$VH() { return tagLOGCOLORSPACEA$lcsGammaRed$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEA$lcsGammaGreen$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEA$lcsGammaGreen$LAYOUT() { return tagLOGCOLORSPACEA$lcsGammaGreen$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEA$lcsGammaGreen$VH_ = tagLOGCOLORSPACEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsGammaGreen"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEA$lcsGammaGreen$VH() { return tagLOGCOLORSPACEA$lcsGammaGreen$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEA$lcsGammaBlue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEA$lcsGammaBlue$LAYOUT() { return tagLOGCOLORSPACEA$lcsGammaBlue$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEA$lcsGammaBlue$VH_ = tagLOGCOLORSPACEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsGammaBlue"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEA$lcsGammaBlue$VH() { return tagLOGCOLORSPACEA$lcsGammaBlue$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("lcsSignature"),
        C_INT.withName("lcsVersion"),
        C_INT.withName("lcsSize"),
        C_INT.withName("lcsCSType"),
        C_INT.withName("lcsIntent"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("ciexyzX"),
                C_INT.withName("ciexyzY"),
                C_INT.withName("ciexyzZ")
            ).withName("ciexyzRed"),
            MemoryLayout.ofStruct(
                C_INT.withName("ciexyzX"),
                C_INT.withName("ciexyzY"),
                C_INT.withName("ciexyzZ")
            ).withName("ciexyzGreen"),
            MemoryLayout.ofStruct(
                C_INT.withName("ciexyzX"),
                C_INT.withName("ciexyzY"),
                C_INT.withName("ciexyzZ")
            ).withName("ciexyzBlue")
        ).withName("lcsEndpoints"),
        C_INT.withName("lcsGammaRed"),
        C_INT.withName("lcsGammaGreen"),
        C_INT.withName("lcsGammaBlue"),
        MemoryLayout.ofSequence(260, C_SHORT).withName("lcsFilename")
    ).withName("tagLOGCOLORSPACEW");
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEW$struct$LAYOUT() { return tagLOGCOLORSPACEW$struct$LAYOUT_; }

    static final MemoryLayout tagLOGCOLORSPACEW$lcsSignature$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEW$lcsSignature$LAYOUT() { return tagLOGCOLORSPACEW$lcsSignature$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEW$lcsSignature$VH_ = tagLOGCOLORSPACEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsSignature"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEW$lcsSignature$VH() { return tagLOGCOLORSPACEW$lcsSignature$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEW$lcsVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEW$lcsVersion$LAYOUT() { return tagLOGCOLORSPACEW$lcsVersion$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEW$lcsVersion$VH_ = tagLOGCOLORSPACEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsVersion"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEW$lcsVersion$VH() { return tagLOGCOLORSPACEW$lcsVersion$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEW$lcsSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEW$lcsSize$LAYOUT() { return tagLOGCOLORSPACEW$lcsSize$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEW$lcsSize$VH_ = tagLOGCOLORSPACEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsSize"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEW$lcsSize$VH() { return tagLOGCOLORSPACEW$lcsSize$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEW$lcsCSType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEW$lcsCSType$LAYOUT() { return tagLOGCOLORSPACEW$lcsCSType$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEW$lcsCSType$VH_ = tagLOGCOLORSPACEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsCSType"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEW$lcsCSType$VH() { return tagLOGCOLORSPACEW$lcsCSType$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEW$lcsIntent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEW$lcsIntent$LAYOUT() { return tagLOGCOLORSPACEW$lcsIntent$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEW$lcsIntent$VH_ = tagLOGCOLORSPACEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsIntent"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEW$lcsIntent$VH() { return tagLOGCOLORSPACEW$lcsIntent$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEW$lcsGammaRed$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEW$lcsGammaRed$LAYOUT() { return tagLOGCOLORSPACEW$lcsGammaRed$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEW$lcsGammaRed$VH_ = tagLOGCOLORSPACEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsGammaRed"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEW$lcsGammaRed$VH() { return tagLOGCOLORSPACEW$lcsGammaRed$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEW$lcsGammaGreen$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEW$lcsGammaGreen$LAYOUT() { return tagLOGCOLORSPACEW$lcsGammaGreen$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEW$lcsGammaGreen$VH_ = tagLOGCOLORSPACEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsGammaGreen"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEW$lcsGammaGreen$VH() { return tagLOGCOLORSPACEW$lcsGammaGreen$VH_; }

    static final MemoryLayout tagLOGCOLORSPACEW$lcsGammaBlue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagLOGCOLORSPACEW$lcsGammaBlue$LAYOUT() { return tagLOGCOLORSPACEW$lcsGammaBlue$LAYOUT_; }

    static final VarHandle tagLOGCOLORSPACEW$lcsGammaBlue$VH_ = tagLOGCOLORSPACEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcsGammaBlue"));
    public static java.lang.invoke.VarHandle tagLOGCOLORSPACEW$lcsGammaBlue$VH() { return tagLOGCOLORSPACEW$lcsGammaBlue$VH_; }

    static final MemoryLayout tagBITMAPCOREHEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("bcSize"),
        C_SHORT.withName("bcWidth"),
        C_SHORT.withName("bcHeight"),
        C_SHORT.withName("bcPlanes"),
        C_SHORT.withName("bcBitCount")
    ).withName("tagBITMAPCOREHEADER");
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPCOREHEADER$struct$LAYOUT() { return tagBITMAPCOREHEADER$struct$LAYOUT_; }

    static final MemoryLayout tagBITMAPCOREHEADER$bcSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPCOREHEADER$bcSize$LAYOUT() { return tagBITMAPCOREHEADER$bcSize$LAYOUT_; }

    static final VarHandle tagBITMAPCOREHEADER$bcSize$VH_ = tagBITMAPCOREHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bcSize"));
    public static java.lang.invoke.VarHandle tagBITMAPCOREHEADER$bcSize$VH() { return tagBITMAPCOREHEADER$bcSize$VH_; }

    static final MemoryLayout tagBITMAPCOREHEADER$bcWidth$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPCOREHEADER$bcWidth$LAYOUT() { return tagBITMAPCOREHEADER$bcWidth$LAYOUT_; }

    static final VarHandle tagBITMAPCOREHEADER$bcWidth$VH_ = tagBITMAPCOREHEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("bcWidth"));
    public static java.lang.invoke.VarHandle tagBITMAPCOREHEADER$bcWidth$VH() { return tagBITMAPCOREHEADER$bcWidth$VH_; }

    static final MemoryLayout tagBITMAPCOREHEADER$bcHeight$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPCOREHEADER$bcHeight$LAYOUT() { return tagBITMAPCOREHEADER$bcHeight$LAYOUT_; }

    static final VarHandle tagBITMAPCOREHEADER$bcHeight$VH_ = tagBITMAPCOREHEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("bcHeight"));
    public static java.lang.invoke.VarHandle tagBITMAPCOREHEADER$bcHeight$VH() { return tagBITMAPCOREHEADER$bcHeight$VH_; }

    static final MemoryLayout tagBITMAPCOREHEADER$bcPlanes$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPCOREHEADER$bcPlanes$LAYOUT() { return tagBITMAPCOREHEADER$bcPlanes$LAYOUT_; }

    static final VarHandle tagBITMAPCOREHEADER$bcPlanes$VH_ = tagBITMAPCOREHEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("bcPlanes"));
    public static java.lang.invoke.VarHandle tagBITMAPCOREHEADER$bcPlanes$VH() { return tagBITMAPCOREHEADER$bcPlanes$VH_; }

    static final MemoryLayout tagBITMAPCOREHEADER$bcBitCount$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPCOREHEADER$bcBitCount$LAYOUT() { return tagBITMAPCOREHEADER$bcBitCount$LAYOUT_; }

    static final VarHandle tagBITMAPCOREHEADER$bcBitCount$VH_ = tagBITMAPCOREHEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("bcBitCount"));
    public static java.lang.invoke.VarHandle tagBITMAPCOREHEADER$bcBitCount$VH() { return tagBITMAPCOREHEADER$bcBitCount$VH_; }

    static final MemoryLayout tagBITMAPINFOHEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("biSize"),
        C_INT.withName("biWidth"),
        C_INT.withName("biHeight"),
        C_SHORT.withName("biPlanes"),
        C_SHORT.withName("biBitCount"),
        C_INT.withName("biCompression"),
        C_INT.withName("biSizeImage"),
        C_INT.withName("biXPelsPerMeter"),
        C_INT.withName("biYPelsPerMeter"),
        C_INT.withName("biClrUsed"),
        C_INT.withName("biClrImportant")
    ).withName("tagBITMAPINFOHEADER");
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPINFOHEADER$struct$LAYOUT() { return tagBITMAPINFOHEADER$struct$LAYOUT_; }

    static final MemoryLayout tagBITMAPINFOHEADER$biSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPINFOHEADER$biSize$LAYOUT() { return tagBITMAPINFOHEADER$biSize$LAYOUT_; }

    static final VarHandle tagBITMAPINFOHEADER$biSize$VH_ = tagBITMAPINFOHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("biSize"));
    public static java.lang.invoke.VarHandle tagBITMAPINFOHEADER$biSize$VH() { return tagBITMAPINFOHEADER$biSize$VH_; }

    static final MemoryLayout tagBITMAPINFOHEADER$biWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPINFOHEADER$biWidth$LAYOUT() { return tagBITMAPINFOHEADER$biWidth$LAYOUT_; }

    static final VarHandle tagBITMAPINFOHEADER$biWidth$VH_ = tagBITMAPINFOHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("biWidth"));
    public static java.lang.invoke.VarHandle tagBITMAPINFOHEADER$biWidth$VH() { return tagBITMAPINFOHEADER$biWidth$VH_; }

    static final MemoryLayout tagBITMAPINFOHEADER$biHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPINFOHEADER$biHeight$LAYOUT() { return tagBITMAPINFOHEADER$biHeight$LAYOUT_; }

    static final VarHandle tagBITMAPINFOHEADER$biHeight$VH_ = tagBITMAPINFOHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("biHeight"));
    public static java.lang.invoke.VarHandle tagBITMAPINFOHEADER$biHeight$VH() { return tagBITMAPINFOHEADER$biHeight$VH_; }

    static final MemoryLayout tagBITMAPINFOHEADER$biPlanes$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPINFOHEADER$biPlanes$LAYOUT() { return tagBITMAPINFOHEADER$biPlanes$LAYOUT_; }

    static final VarHandle tagBITMAPINFOHEADER$biPlanes$VH_ = tagBITMAPINFOHEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("biPlanes"));
    public static java.lang.invoke.VarHandle tagBITMAPINFOHEADER$biPlanes$VH() { return tagBITMAPINFOHEADER$biPlanes$VH_; }

    static final MemoryLayout tagBITMAPINFOHEADER$biBitCount$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagBITMAPINFOHEADER$biBitCount$LAYOUT() { return tagBITMAPINFOHEADER$biBitCount$LAYOUT_; }

    static final VarHandle tagBITMAPINFOHEADER$biBitCount$VH_ = tagBITMAPINFOHEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("biBitCount"));
    public static java.lang.invoke.VarHandle tagBITMAPINFOHEADER$biBitCount$VH() { return tagBITMAPINFOHEADER$biBitCount$VH_; }

}

