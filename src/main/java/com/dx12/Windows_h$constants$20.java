// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$20 extends Windows_h$constants$19 {
    Windows_h$constants$20() {}
    static final MemoryLayout Region$lpLastBlock$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout Region$lpLastBlock$LAYOUT() { return Region$lpLastBlock$LAYOUT_; }

    static final VarHandle Region$lpLastBlock$VH_ = MemoryHandles.asAddressVarHandle(Region$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpLastBlock")));
    public static java.lang.invoke.VarHandle Region$lpLastBlock$VH() { return Region$lpLastBlock$VH_; }

    static final MemoryLayout _REASON_CONTEXT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Version"),
        C_INT.withName("Flags"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_POINTER.withName("LocalizedReasonModule"),
                C_INT.withName("LocalizedReasonId"),
                C_INT.withName("ReasonStringCount"),
                C_POINTER.withName("ReasonStrings")
            ).withName("Detailed"),
            C_POINTER.withName("SimpleReasonString")
        ).withName("Reason")
    ).withName("_REASON_CONTEXT");
    public static jdk.incubator.foreign.MemoryLayout _REASON_CONTEXT$struct$LAYOUT() { return _REASON_CONTEXT$struct$LAYOUT_; }

    static final MemoryLayout _REASON_CONTEXT$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _REASON_CONTEXT$Version$LAYOUT() { return _REASON_CONTEXT$Version$LAYOUT_; }

    static final VarHandle _REASON_CONTEXT$Version$VH_ = _REASON_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _REASON_CONTEXT$Version$VH() { return _REASON_CONTEXT$Version$VH_; }

    static final MemoryLayout _REASON_CONTEXT$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _REASON_CONTEXT$Flags$LAYOUT() { return _REASON_CONTEXT$Flags$LAYOUT_; }

    static final VarHandle _REASON_CONTEXT$Flags$VH_ = _REASON_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _REASON_CONTEXT$Flags$VH() { return _REASON_CONTEXT$Flags$VH_; }

    static final MemoryLayout Reason$struct$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_POINTER.withName("LocalizedReasonModule"),
            C_INT.withName("LocalizedReasonId"),
            C_INT.withName("ReasonStringCount"),
            C_POINTER.withName("ReasonStrings")
        ).withName("Detailed"),
        C_POINTER.withName("SimpleReasonString")
    );
    public static jdk.incubator.foreign.MemoryLayout Reason$struct$LAYOUT() { return Reason$struct$LAYOUT_; }

    static final MemoryLayout Detailed$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("LocalizedReasonModule"),
        C_INT.withName("LocalizedReasonId"),
        C_INT.withName("ReasonStringCount"),
        C_POINTER.withName("ReasonStrings")
    );
    public static jdk.incubator.foreign.MemoryLayout Detailed$struct$LAYOUT() { return Detailed$struct$LAYOUT_; }

    static final MemoryLayout Detailed$LocalizedReasonModule$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout Detailed$LocalizedReasonModule$LAYOUT() { return Detailed$LocalizedReasonModule$LAYOUT_; }

    static final VarHandle Detailed$LocalizedReasonModule$VH_ = MemoryHandles.asAddressVarHandle(Detailed$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LocalizedReasonModule")));
    public static java.lang.invoke.VarHandle Detailed$LocalizedReasonModule$VH() { return Detailed$LocalizedReasonModule$VH_; }

    static final MemoryLayout Detailed$LocalizedReasonId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Detailed$LocalizedReasonId$LAYOUT() { return Detailed$LocalizedReasonId$LAYOUT_; }

    static final VarHandle Detailed$LocalizedReasonId$VH_ = Detailed$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LocalizedReasonId"));
    public static java.lang.invoke.VarHandle Detailed$LocalizedReasonId$VH() { return Detailed$LocalizedReasonId$VH_; }

    static final MemoryLayout Detailed$ReasonStringCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Detailed$ReasonStringCount$LAYOUT() { return Detailed$ReasonStringCount$LAYOUT_; }

    static final VarHandle Detailed$ReasonStringCount$VH_ = Detailed$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReasonStringCount"));
    public static java.lang.invoke.VarHandle Detailed$ReasonStringCount$VH() { return Detailed$ReasonStringCount$VH_; }

    static final MemoryLayout Detailed$ReasonStrings$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout Detailed$ReasonStrings$LAYOUT() { return Detailed$ReasonStrings$LAYOUT_; }

    static final VarHandle Detailed$ReasonStrings$VH_ = MemoryHandles.asAddressVarHandle(Detailed$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReasonStrings")));
    public static java.lang.invoke.VarHandle Detailed$ReasonStrings$VH() { return Detailed$ReasonStrings$VH_; }

    static final MemoryLayout Reason$SimpleReasonString$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout Reason$SimpleReasonString$LAYOUT() { return Reason$SimpleReasonString$LAYOUT_; }

    static final VarHandle Reason$SimpleReasonString$VH_ = MemoryHandles.asAddressVarHandle(Reason$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SimpleReasonString")));
    public static java.lang.invoke.VarHandle Reason$SimpleReasonString$VH() { return Reason$SimpleReasonString$VH_; }

    static final MemoryLayout _EXCEPTION_DEBUG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("ExceptionCode"),
            C_INT.withName("ExceptionFlags"),
            C_POINTER.withName("ExceptionRecord"),
            C_POINTER.withName("ExceptionAddress"),
            C_INT.withName("NumberParameters"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(15, C_LONGLONG).withName("ExceptionInformation")
        ).withName("ExceptionRecord"),
        C_INT.withName("dwFirstChance"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_EXCEPTION_DEBUG_INFO");
    public static jdk.incubator.foreign.MemoryLayout _EXCEPTION_DEBUG_INFO$struct$LAYOUT() { return _EXCEPTION_DEBUG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_DEBUG_INFO$dwFirstChance$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EXCEPTION_DEBUG_INFO$dwFirstChance$LAYOUT() { return _EXCEPTION_DEBUG_INFO$dwFirstChance$LAYOUT_; }

    static final VarHandle _EXCEPTION_DEBUG_INFO$dwFirstChance$VH_ = _EXCEPTION_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFirstChance"));
    public static java.lang.invoke.VarHandle _EXCEPTION_DEBUG_INFO$dwFirstChance$VH() { return _EXCEPTION_DEBUG_INFO$dwFirstChance$VH_; }

    static final MemoryLayout _CREATE_THREAD_DEBUG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("hThread"),
        C_POINTER.withName("lpThreadLocalBase"),
        C_POINTER.withName("lpStartAddress")
    ).withName("_CREATE_THREAD_DEBUG_INFO");
    public static jdk.incubator.foreign.MemoryLayout _CREATE_THREAD_DEBUG_INFO$struct$LAYOUT() { return _CREATE_THREAD_DEBUG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CREATE_THREAD_DEBUG_INFO$hThread$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_THREAD_DEBUG_INFO$hThread$LAYOUT() { return _CREATE_THREAD_DEBUG_INFO$hThread$LAYOUT_; }

    static final VarHandle _CREATE_THREAD_DEBUG_INFO$hThread$VH_ = MemoryHandles.asAddressVarHandle(_CREATE_THREAD_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hThread")));
    public static java.lang.invoke.VarHandle _CREATE_THREAD_DEBUG_INFO$hThread$VH() { return _CREATE_THREAD_DEBUG_INFO$hThread$VH_; }

    static final MemoryLayout _CREATE_THREAD_DEBUG_INFO$lpThreadLocalBase$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_THREAD_DEBUG_INFO$lpThreadLocalBase$LAYOUT() { return _CREATE_THREAD_DEBUG_INFO$lpThreadLocalBase$LAYOUT_; }

    static final VarHandle _CREATE_THREAD_DEBUG_INFO$lpThreadLocalBase$VH_ = MemoryHandles.asAddressVarHandle(_CREATE_THREAD_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpThreadLocalBase")));
    public static java.lang.invoke.VarHandle _CREATE_THREAD_DEBUG_INFO$lpThreadLocalBase$VH() { return _CREATE_THREAD_DEBUG_INFO$lpThreadLocalBase$VH_; }

    static final MemoryLayout _CREATE_THREAD_DEBUG_INFO$lpStartAddress$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_THREAD_DEBUG_INFO$lpStartAddress$LAYOUT() { return _CREATE_THREAD_DEBUG_INFO$lpStartAddress$LAYOUT_; }

    static final VarHandle _CREATE_THREAD_DEBUG_INFO$lpStartAddress$VH_ = MemoryHandles.asAddressVarHandle(_CREATE_THREAD_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpStartAddress")));
    public static java.lang.invoke.VarHandle _CREATE_THREAD_DEBUG_INFO$lpStartAddress$VH() { return _CREATE_THREAD_DEBUG_INFO$lpStartAddress$VH_; }

    static final MemoryLayout _CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("hFile"),
        C_POINTER.withName("hProcess"),
        C_POINTER.withName("hThread"),
        C_POINTER.withName("lpBaseOfImage"),
        C_INT.withName("dwDebugInfoFileOffset"),
        C_INT.withName("nDebugInfoSize"),
        C_POINTER.withName("lpThreadLocalBase"),
        C_POINTER.withName("lpStartAddress"),
        C_POINTER.withName("lpImageName"),
        C_SHORT.withName("fUnicode"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_CREATE_PROCESS_DEBUG_INFO");
    public static jdk.incubator.foreign.MemoryLayout _CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT() { return _CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CREATE_PROCESS_DEBUG_INFO$hFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_PROCESS_DEBUG_INFO$hFile$LAYOUT() { return _CREATE_PROCESS_DEBUG_INFO$hFile$LAYOUT_; }

    static final VarHandle _CREATE_PROCESS_DEBUG_INFO$hFile$VH_ = MemoryHandles.asAddressVarHandle(_CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hFile")));
    public static java.lang.invoke.VarHandle _CREATE_PROCESS_DEBUG_INFO$hFile$VH() { return _CREATE_PROCESS_DEBUG_INFO$hFile$VH_; }

    static final MemoryLayout _CREATE_PROCESS_DEBUG_INFO$hProcess$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_PROCESS_DEBUG_INFO$hProcess$LAYOUT() { return _CREATE_PROCESS_DEBUG_INFO$hProcess$LAYOUT_; }

    static final VarHandle _CREATE_PROCESS_DEBUG_INFO$hProcess$VH_ = MemoryHandles.asAddressVarHandle(_CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hProcess")));
    public static java.lang.invoke.VarHandle _CREATE_PROCESS_DEBUG_INFO$hProcess$VH() { return _CREATE_PROCESS_DEBUG_INFO$hProcess$VH_; }

    static final MemoryLayout _CREATE_PROCESS_DEBUG_INFO$hThread$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_PROCESS_DEBUG_INFO$hThread$LAYOUT() { return _CREATE_PROCESS_DEBUG_INFO$hThread$LAYOUT_; }

    static final VarHandle _CREATE_PROCESS_DEBUG_INFO$hThread$VH_ = MemoryHandles.asAddressVarHandle(_CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hThread")));
    public static java.lang.invoke.VarHandle _CREATE_PROCESS_DEBUG_INFO$hThread$VH() { return _CREATE_PROCESS_DEBUG_INFO$hThread$VH_; }

    static final MemoryLayout _CREATE_PROCESS_DEBUG_INFO$lpBaseOfImage$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_PROCESS_DEBUG_INFO$lpBaseOfImage$LAYOUT() { return _CREATE_PROCESS_DEBUG_INFO$lpBaseOfImage$LAYOUT_; }

    static final VarHandle _CREATE_PROCESS_DEBUG_INFO$lpBaseOfImage$VH_ = MemoryHandles.asAddressVarHandle(_CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpBaseOfImage")));
    public static java.lang.invoke.VarHandle _CREATE_PROCESS_DEBUG_INFO$lpBaseOfImage$VH() { return _CREATE_PROCESS_DEBUG_INFO$lpBaseOfImage$VH_; }

    static final MemoryLayout _CREATE_PROCESS_DEBUG_INFO$dwDebugInfoFileOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_PROCESS_DEBUG_INFO$dwDebugInfoFileOffset$LAYOUT() { return _CREATE_PROCESS_DEBUG_INFO$dwDebugInfoFileOffset$LAYOUT_; }

    static final VarHandle _CREATE_PROCESS_DEBUG_INFO$dwDebugInfoFileOffset$VH_ = _CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDebugInfoFileOffset"));
    public static java.lang.invoke.VarHandle _CREATE_PROCESS_DEBUG_INFO$dwDebugInfoFileOffset$VH() { return _CREATE_PROCESS_DEBUG_INFO$dwDebugInfoFileOffset$VH_; }

    static final MemoryLayout _CREATE_PROCESS_DEBUG_INFO$nDebugInfoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_PROCESS_DEBUG_INFO$nDebugInfoSize$LAYOUT() { return _CREATE_PROCESS_DEBUG_INFO$nDebugInfoSize$LAYOUT_; }

    static final VarHandle _CREATE_PROCESS_DEBUG_INFO$nDebugInfoSize$VH_ = _CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nDebugInfoSize"));
    public static java.lang.invoke.VarHandle _CREATE_PROCESS_DEBUG_INFO$nDebugInfoSize$VH() { return _CREATE_PROCESS_DEBUG_INFO$nDebugInfoSize$VH_; }

    static final MemoryLayout _CREATE_PROCESS_DEBUG_INFO$lpThreadLocalBase$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_PROCESS_DEBUG_INFO$lpThreadLocalBase$LAYOUT() { return _CREATE_PROCESS_DEBUG_INFO$lpThreadLocalBase$LAYOUT_; }

    static final VarHandle _CREATE_PROCESS_DEBUG_INFO$lpThreadLocalBase$VH_ = MemoryHandles.asAddressVarHandle(_CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpThreadLocalBase")));
    public static java.lang.invoke.VarHandle _CREATE_PROCESS_DEBUG_INFO$lpThreadLocalBase$VH() { return _CREATE_PROCESS_DEBUG_INFO$lpThreadLocalBase$VH_; }

    static final MemoryLayout _CREATE_PROCESS_DEBUG_INFO$lpStartAddress$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_PROCESS_DEBUG_INFO$lpStartAddress$LAYOUT() { return _CREATE_PROCESS_DEBUG_INFO$lpStartAddress$LAYOUT_; }

    static final VarHandle _CREATE_PROCESS_DEBUG_INFO$lpStartAddress$VH_ = MemoryHandles.asAddressVarHandle(_CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpStartAddress")));
    public static java.lang.invoke.VarHandle _CREATE_PROCESS_DEBUG_INFO$lpStartAddress$VH() { return _CREATE_PROCESS_DEBUG_INFO$lpStartAddress$VH_; }

    static final MemoryLayout _CREATE_PROCESS_DEBUG_INFO$lpImageName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_PROCESS_DEBUG_INFO$lpImageName$LAYOUT() { return _CREATE_PROCESS_DEBUG_INFO$lpImageName$LAYOUT_; }

    static final VarHandle _CREATE_PROCESS_DEBUG_INFO$lpImageName$VH_ = MemoryHandles.asAddressVarHandle(_CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpImageName")));
    public static java.lang.invoke.VarHandle _CREATE_PROCESS_DEBUG_INFO$lpImageName$VH() { return _CREATE_PROCESS_DEBUG_INFO$lpImageName$VH_; }

    static final MemoryLayout _CREATE_PROCESS_DEBUG_INFO$fUnicode$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _CREATE_PROCESS_DEBUG_INFO$fUnicode$LAYOUT() { return _CREATE_PROCESS_DEBUG_INFO$fUnicode$LAYOUT_; }

    static final VarHandle _CREATE_PROCESS_DEBUG_INFO$fUnicode$VH_ = _CREATE_PROCESS_DEBUG_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("fUnicode"));
    public static java.lang.invoke.VarHandle _CREATE_PROCESS_DEBUG_INFO$fUnicode$VH() { return _CREATE_PROCESS_DEBUG_INFO$fUnicode$VH_; }

    static final MemoryLayout _EXIT_THREAD_DEBUG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwExitCode")
    ).withName("_EXIT_THREAD_DEBUG_INFO");
    public static jdk.incubator.foreign.MemoryLayout _EXIT_THREAD_DEBUG_INFO$struct$LAYOUT() { return _EXIT_THREAD_DEBUG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _EXIT_THREAD_DEBUG_INFO$dwExitCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EXIT_THREAD_DEBUG_INFO$dwExitCode$LAYOUT() { return _EXIT_THREAD_DEBUG_INFO$dwExitCode$LAYOUT_; }

    static final VarHandle _EXIT_THREAD_DEBUG_INFO$dwExitCode$VH_ = _EXIT_THREAD_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwExitCode"));
    public static java.lang.invoke.VarHandle _EXIT_THREAD_DEBUG_INFO$dwExitCode$VH() { return _EXIT_THREAD_DEBUG_INFO$dwExitCode$VH_; }

    static final MemoryLayout _EXIT_PROCESS_DEBUG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwExitCode")
    ).withName("_EXIT_PROCESS_DEBUG_INFO");
    public static jdk.incubator.foreign.MemoryLayout _EXIT_PROCESS_DEBUG_INFO$struct$LAYOUT() { return _EXIT_PROCESS_DEBUG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _EXIT_PROCESS_DEBUG_INFO$dwExitCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EXIT_PROCESS_DEBUG_INFO$dwExitCode$LAYOUT() { return _EXIT_PROCESS_DEBUG_INFO$dwExitCode$LAYOUT_; }

    static final VarHandle _EXIT_PROCESS_DEBUG_INFO$dwExitCode$VH_ = _EXIT_PROCESS_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwExitCode"));
    public static java.lang.invoke.VarHandle _EXIT_PROCESS_DEBUG_INFO$dwExitCode$VH() { return _EXIT_PROCESS_DEBUG_INFO$dwExitCode$VH_; }

    static final MemoryLayout _LOAD_DLL_DEBUG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("hFile"),
        C_POINTER.withName("lpBaseOfDll"),
        C_INT.withName("dwDebugInfoFileOffset"),
        C_INT.withName("nDebugInfoSize"),
        C_POINTER.withName("lpImageName"),
        C_SHORT.withName("fUnicode"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_LOAD_DLL_DEBUG_INFO");
    public static jdk.incubator.foreign.MemoryLayout _LOAD_DLL_DEBUG_INFO$struct$LAYOUT() { return _LOAD_DLL_DEBUG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _LOAD_DLL_DEBUG_INFO$hFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _LOAD_DLL_DEBUG_INFO$hFile$LAYOUT() { return _LOAD_DLL_DEBUG_INFO$hFile$LAYOUT_; }

    static final VarHandle _LOAD_DLL_DEBUG_INFO$hFile$VH_ = MemoryHandles.asAddressVarHandle(_LOAD_DLL_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hFile")));
    public static java.lang.invoke.VarHandle _LOAD_DLL_DEBUG_INFO$hFile$VH() { return _LOAD_DLL_DEBUG_INFO$hFile$VH_; }

    static final MemoryLayout _LOAD_DLL_DEBUG_INFO$lpBaseOfDll$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _LOAD_DLL_DEBUG_INFO$lpBaseOfDll$LAYOUT() { return _LOAD_DLL_DEBUG_INFO$lpBaseOfDll$LAYOUT_; }

    static final VarHandle _LOAD_DLL_DEBUG_INFO$lpBaseOfDll$VH_ = MemoryHandles.asAddressVarHandle(_LOAD_DLL_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpBaseOfDll")));
    public static java.lang.invoke.VarHandle _LOAD_DLL_DEBUG_INFO$lpBaseOfDll$VH() { return _LOAD_DLL_DEBUG_INFO$lpBaseOfDll$VH_; }

    static final MemoryLayout _LOAD_DLL_DEBUG_INFO$dwDebugInfoFileOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _LOAD_DLL_DEBUG_INFO$dwDebugInfoFileOffset$LAYOUT() { return _LOAD_DLL_DEBUG_INFO$dwDebugInfoFileOffset$LAYOUT_; }

    static final VarHandle _LOAD_DLL_DEBUG_INFO$dwDebugInfoFileOffset$VH_ = _LOAD_DLL_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDebugInfoFileOffset"));
    public static java.lang.invoke.VarHandle _LOAD_DLL_DEBUG_INFO$dwDebugInfoFileOffset$VH() { return _LOAD_DLL_DEBUG_INFO$dwDebugInfoFileOffset$VH_; }

    static final MemoryLayout _LOAD_DLL_DEBUG_INFO$nDebugInfoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _LOAD_DLL_DEBUG_INFO$nDebugInfoSize$LAYOUT() { return _LOAD_DLL_DEBUG_INFO$nDebugInfoSize$LAYOUT_; }

    static final VarHandle _LOAD_DLL_DEBUG_INFO$nDebugInfoSize$VH_ = _LOAD_DLL_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nDebugInfoSize"));
    public static java.lang.invoke.VarHandle _LOAD_DLL_DEBUG_INFO$nDebugInfoSize$VH() { return _LOAD_DLL_DEBUG_INFO$nDebugInfoSize$VH_; }

    static final MemoryLayout _LOAD_DLL_DEBUG_INFO$lpImageName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _LOAD_DLL_DEBUG_INFO$lpImageName$LAYOUT() { return _LOAD_DLL_DEBUG_INFO$lpImageName$LAYOUT_; }

    static final VarHandle _LOAD_DLL_DEBUG_INFO$lpImageName$VH_ = MemoryHandles.asAddressVarHandle(_LOAD_DLL_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpImageName")));
    public static java.lang.invoke.VarHandle _LOAD_DLL_DEBUG_INFO$lpImageName$VH() { return _LOAD_DLL_DEBUG_INFO$lpImageName$VH_; }

    static final MemoryLayout _LOAD_DLL_DEBUG_INFO$fUnicode$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _LOAD_DLL_DEBUG_INFO$fUnicode$LAYOUT() { return _LOAD_DLL_DEBUG_INFO$fUnicode$LAYOUT_; }

    static final VarHandle _LOAD_DLL_DEBUG_INFO$fUnicode$VH_ = _LOAD_DLL_DEBUG_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("fUnicode"));
    public static java.lang.invoke.VarHandle _LOAD_DLL_DEBUG_INFO$fUnicode$VH() { return _LOAD_DLL_DEBUG_INFO$fUnicode$VH_; }

    static final MemoryLayout _UNLOAD_DLL_DEBUG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpBaseOfDll")
    ).withName("_UNLOAD_DLL_DEBUG_INFO");
    public static jdk.incubator.foreign.MemoryLayout _UNLOAD_DLL_DEBUG_INFO$struct$LAYOUT() { return _UNLOAD_DLL_DEBUG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _UNLOAD_DLL_DEBUG_INFO$lpBaseOfDll$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _UNLOAD_DLL_DEBUG_INFO$lpBaseOfDll$LAYOUT() { return _UNLOAD_DLL_DEBUG_INFO$lpBaseOfDll$LAYOUT_; }

    static final VarHandle _UNLOAD_DLL_DEBUG_INFO$lpBaseOfDll$VH_ = MemoryHandles.asAddressVarHandle(_UNLOAD_DLL_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpBaseOfDll")));
    public static java.lang.invoke.VarHandle _UNLOAD_DLL_DEBUG_INFO$lpBaseOfDll$VH() { return _UNLOAD_DLL_DEBUG_INFO$lpBaseOfDll$VH_; }

    static final MemoryLayout _OUTPUT_DEBUG_STRING_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpDebugStringData"),
        C_SHORT.withName("fUnicode"),
        C_SHORT.withName("nDebugStringLength"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_OUTPUT_DEBUG_STRING_INFO");
    public static jdk.incubator.foreign.MemoryLayout _OUTPUT_DEBUG_STRING_INFO$struct$LAYOUT() { return _OUTPUT_DEBUG_STRING_INFO$struct$LAYOUT_; }

    static final MemoryLayout _OUTPUT_DEBUG_STRING_INFO$lpDebugStringData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _OUTPUT_DEBUG_STRING_INFO$lpDebugStringData$LAYOUT() { return _OUTPUT_DEBUG_STRING_INFO$lpDebugStringData$LAYOUT_; }

    static final VarHandle _OUTPUT_DEBUG_STRING_INFO$lpDebugStringData$VH_ = MemoryHandles.asAddressVarHandle(_OUTPUT_DEBUG_STRING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDebugStringData")));
    public static java.lang.invoke.VarHandle _OUTPUT_DEBUG_STRING_INFO$lpDebugStringData$VH() { return _OUTPUT_DEBUG_STRING_INFO$lpDebugStringData$VH_; }

    static final MemoryLayout _OUTPUT_DEBUG_STRING_INFO$fUnicode$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OUTPUT_DEBUG_STRING_INFO$fUnicode$LAYOUT() { return _OUTPUT_DEBUG_STRING_INFO$fUnicode$LAYOUT_; }

    static final VarHandle _OUTPUT_DEBUG_STRING_INFO$fUnicode$VH_ = _OUTPUT_DEBUG_STRING_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("fUnicode"));
    public static java.lang.invoke.VarHandle _OUTPUT_DEBUG_STRING_INFO$fUnicode$VH() { return _OUTPUT_DEBUG_STRING_INFO$fUnicode$VH_; }

    static final MemoryLayout _OUTPUT_DEBUG_STRING_INFO$nDebugStringLength$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OUTPUT_DEBUG_STRING_INFO$nDebugStringLength$LAYOUT() { return _OUTPUT_DEBUG_STRING_INFO$nDebugStringLength$LAYOUT_; }

    static final VarHandle _OUTPUT_DEBUG_STRING_INFO$nDebugStringLength$VH_ = _OUTPUT_DEBUG_STRING_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nDebugStringLength"));
    public static java.lang.invoke.VarHandle _OUTPUT_DEBUG_STRING_INFO$nDebugStringLength$VH() { return _OUTPUT_DEBUG_STRING_INFO$nDebugStringLength$VH_; }

    static final MemoryLayout _RIP_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwError"),
        C_INT.withName("dwType")
    ).withName("_RIP_INFO");
    public static jdk.incubator.foreign.MemoryLayout _RIP_INFO$struct$LAYOUT() { return _RIP_INFO$struct$LAYOUT_; }

    static final MemoryLayout _RIP_INFO$dwError$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RIP_INFO$dwError$LAYOUT() { return _RIP_INFO$dwError$LAYOUT_; }

    static final VarHandle _RIP_INFO$dwError$VH_ = _RIP_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwError"));
    public static java.lang.invoke.VarHandle _RIP_INFO$dwError$VH() { return _RIP_INFO$dwError$VH_; }

    static final MemoryLayout _RIP_INFO$dwType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RIP_INFO$dwType$LAYOUT() { return _RIP_INFO$dwType$LAYOUT_; }

    static final VarHandle _RIP_INFO$dwType$VH_ = _RIP_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwType"));
    public static java.lang.invoke.VarHandle _RIP_INFO$dwType$VH() { return _RIP_INFO$dwType$VH_; }

    static final MemoryLayout _DEBUG_EVENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwDebugEventCode"),
        C_INT.withName("dwProcessId"),
        C_INT.withName("dwThreadId"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                MemoryLayout.ofStruct(
                    C_INT.withName("ExceptionCode"),
                    C_INT.withName("ExceptionFlags"),
                    C_POINTER.withName("ExceptionRecord"),
                    C_POINTER.withName("ExceptionAddress"),
                    C_INT.withName("NumberParameters"),
                    MemoryLayout.ofPaddingBits(32),
                    MemoryLayout.ofSequence(15, C_LONGLONG).withName("ExceptionInformation")
                ).withName("ExceptionRecord"),
                C_INT.withName("dwFirstChance"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("Exception"),
            MemoryLayout.ofStruct(
                C_POINTER.withName("hThread"),
                C_POINTER.withName("lpThreadLocalBase"),
                C_POINTER.withName("lpStartAddress")
            ).withName("CreateThread"),
            MemoryLayout.ofStruct(
                C_POINTER.withName("hFile"),
                C_POINTER.withName("hProcess"),
                C_POINTER.withName("hThread"),
                C_POINTER.withName("lpBaseOfImage"),
                C_INT.withName("dwDebugInfoFileOffset"),
                C_INT.withName("nDebugInfoSize"),
                C_POINTER.withName("lpThreadLocalBase"),
                C_POINTER.withName("lpStartAddress"),
                C_POINTER.withName("lpImageName"),
                C_SHORT.withName("fUnicode"),
                MemoryLayout.ofPaddingBits(48)
            ).withName("CreateProcessInfo"),
            MemoryLayout.ofStruct(
                C_INT.withName("dwExitCode")
            ).withName("ExitThread"),
            MemoryLayout.ofStruct(
                C_INT.withName("dwExitCode")
            ).withName("ExitProcess"),
            MemoryLayout.ofStruct(
                C_POINTER.withName("hFile"),
                C_POINTER.withName("lpBaseOfDll"),
                C_INT.withName("dwDebugInfoFileOffset"),
                C_INT.withName("nDebugInfoSize"),
                C_POINTER.withName("lpImageName"),
                C_SHORT.withName("fUnicode"),
                MemoryLayout.ofPaddingBits(48)
            ).withName("LoadDll"),
            MemoryLayout.ofStruct(
                C_POINTER.withName("lpBaseOfDll")
            ).withName("UnloadDll"),
            MemoryLayout.ofStruct(
                C_POINTER.withName("lpDebugStringData"),
                C_SHORT.withName("fUnicode"),
                C_SHORT.withName("nDebugStringLength"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("DebugString"),
            MemoryLayout.ofStruct(
                C_INT.withName("dwError"),
                C_INT.withName("dwType")
            ).withName("RipInfo")
        ).withName("u")
    ).withName("_DEBUG_EVENT");
    public static jdk.incubator.foreign.MemoryLayout _DEBUG_EVENT$struct$LAYOUT() { return _DEBUG_EVENT$struct$LAYOUT_; }

    static final MemoryLayout _DEBUG_EVENT$dwDebugEventCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DEBUG_EVENT$dwDebugEventCode$LAYOUT() { return _DEBUG_EVENT$dwDebugEventCode$LAYOUT_; }

    static final VarHandle _DEBUG_EVENT$dwDebugEventCode$VH_ = _DEBUG_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDebugEventCode"));
    public static java.lang.invoke.VarHandle _DEBUG_EVENT$dwDebugEventCode$VH() { return _DEBUG_EVENT$dwDebugEventCode$VH_; }

    static final MemoryLayout _DEBUG_EVENT$dwProcessId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DEBUG_EVENT$dwProcessId$LAYOUT() { return _DEBUG_EVENT$dwProcessId$LAYOUT_; }

    static final VarHandle _DEBUG_EVENT$dwProcessId$VH_ = _DEBUG_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProcessId"));
    public static java.lang.invoke.VarHandle _DEBUG_EVENT$dwProcessId$VH() { return _DEBUG_EVENT$dwProcessId$VH_; }

    static final MemoryLayout _DEBUG_EVENT$dwThreadId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DEBUG_EVENT$dwThreadId$LAYOUT() { return _DEBUG_EVENT$dwThreadId$LAYOUT_; }

    static final VarHandle _DEBUG_EVENT$dwThreadId$VH_ = _DEBUG_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwThreadId"));
    public static java.lang.invoke.VarHandle _DEBUG_EVENT$dwThreadId$VH() { return _DEBUG_EVENT$dwThreadId$VH_; }

    static final FunctionDescriptor IsApiSetImplemented$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsApiSetImplemented$FUNC() { return IsApiSetImplemented$FUNC_; }

    static final MethodHandle IsApiSetImplemented$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsApiSetImplemented",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsApiSetImplemented$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsApiSetImplemented$MH() { return IsApiSetImplemented$MH_; }

    static final FunctionDescriptor SetEnvironmentStringsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetEnvironmentStringsW$FUNC() { return SetEnvironmentStringsW$FUNC_; }

    static final MethodHandle SetEnvironmentStringsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetEnvironmentStringsW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetEnvironmentStringsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetEnvironmentStringsW$MH() { return SetEnvironmentStringsW$MH_; }

    static final FunctionDescriptor GetStdHandle$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetStdHandle$FUNC() { return GetStdHandle$FUNC_; }

    static final MethodHandle GetStdHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStdHandle",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        GetStdHandle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetStdHandle$MH() { return GetStdHandle$MH_; }

    static final FunctionDescriptor SetStdHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetStdHandle$FUNC() { return SetStdHandle$FUNC_; }

    static final MethodHandle SetStdHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetStdHandle",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        SetStdHandle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetStdHandle$MH() { return SetStdHandle$MH_; }

    static final FunctionDescriptor SetStdHandleEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetStdHandleEx$FUNC() { return SetStdHandleEx$FUNC_; }

    static final MethodHandle SetStdHandleEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetStdHandleEx",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetStdHandleEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetStdHandleEx$MH() { return SetStdHandleEx$MH_; }

    static final FunctionDescriptor GetCommandLineA$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetCommandLineA$FUNC() { return GetCommandLineA$FUNC_; }

    static final MethodHandle GetCommandLineA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommandLineA",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetCommandLineA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCommandLineA$MH() { return GetCommandLineA$MH_; }

    static final FunctionDescriptor GetCommandLineW$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetCommandLineW$FUNC() { return GetCommandLineW$FUNC_; }

    static final MethodHandle GetCommandLineW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommandLineW",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetCommandLineW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCommandLineW$MH() { return GetCommandLineW$MH_; }

    static final FunctionDescriptor GetEnvironmentStrings$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetEnvironmentStrings$FUNC() { return GetEnvironmentStrings$FUNC_; }

    static final MethodHandle GetEnvironmentStrings$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnvironmentStrings",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetEnvironmentStrings$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetEnvironmentStrings$MH() { return GetEnvironmentStrings$MH_; }

    static final FunctionDescriptor GetEnvironmentStringsW$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetEnvironmentStringsW$FUNC() { return GetEnvironmentStringsW$FUNC_; }

    static final MethodHandle GetEnvironmentStringsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnvironmentStringsW",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetEnvironmentStringsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetEnvironmentStringsW$MH() { return GetEnvironmentStringsW$MH_; }

    static final FunctionDescriptor FreeEnvironmentStringsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FreeEnvironmentStringsA$FUNC() { return FreeEnvironmentStringsA$FUNC_; }

    static final MethodHandle FreeEnvironmentStringsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeEnvironmentStringsA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FreeEnvironmentStringsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FreeEnvironmentStringsA$MH() { return FreeEnvironmentStringsA$MH_; }

    static final FunctionDescriptor FreeEnvironmentStringsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FreeEnvironmentStringsW$FUNC() { return FreeEnvironmentStringsW$FUNC_; }

    static final MethodHandle FreeEnvironmentStringsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeEnvironmentStringsW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FreeEnvironmentStringsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FreeEnvironmentStringsW$MH() { return FreeEnvironmentStringsW$MH_; }

    static final FunctionDescriptor GetEnvironmentVariableA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetEnvironmentVariableA$FUNC() { return GetEnvironmentVariableA$FUNC_; }

    static final MethodHandle GetEnvironmentVariableA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnvironmentVariableA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetEnvironmentVariableA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetEnvironmentVariableA$MH() { return GetEnvironmentVariableA$MH_; }

    static final FunctionDescriptor GetEnvironmentVariableW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetEnvironmentVariableW$FUNC() { return GetEnvironmentVariableW$FUNC_; }

    static final MethodHandle GetEnvironmentVariableW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnvironmentVariableW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetEnvironmentVariableW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetEnvironmentVariableW$MH() { return GetEnvironmentVariableW$MH_; }

    static final FunctionDescriptor SetEnvironmentVariableA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetEnvironmentVariableA$FUNC() { return SetEnvironmentVariableA$FUNC_; }

    static final MethodHandle SetEnvironmentVariableA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetEnvironmentVariableA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetEnvironmentVariableA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetEnvironmentVariableA$MH() { return SetEnvironmentVariableA$MH_; }

    static final FunctionDescriptor SetEnvironmentVariableW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetEnvironmentVariableW$FUNC() { return SetEnvironmentVariableW$FUNC_; }

    static final MethodHandle SetEnvironmentVariableW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetEnvironmentVariableW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetEnvironmentVariableW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetEnvironmentVariableW$MH() { return SetEnvironmentVariableW$MH_; }

    static final FunctionDescriptor ExpandEnvironmentStringsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ExpandEnvironmentStringsA$FUNC() { return ExpandEnvironmentStringsA$FUNC_; }

    static final MethodHandle ExpandEnvironmentStringsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExpandEnvironmentStringsA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ExpandEnvironmentStringsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ExpandEnvironmentStringsA$MH() { return ExpandEnvironmentStringsA$MH_; }

    static final FunctionDescriptor ExpandEnvironmentStringsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ExpandEnvironmentStringsW$FUNC() { return ExpandEnvironmentStringsW$FUNC_; }

    static final MethodHandle ExpandEnvironmentStringsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExpandEnvironmentStringsW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ExpandEnvironmentStringsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ExpandEnvironmentStringsW$MH() { return ExpandEnvironmentStringsW$MH_; }

    static final FunctionDescriptor SetCurrentDirectoryA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetCurrentDirectoryA$FUNC() { return SetCurrentDirectoryA$FUNC_; }

    static final MethodHandle SetCurrentDirectoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCurrentDirectoryA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetCurrentDirectoryA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetCurrentDirectoryA$MH() { return SetCurrentDirectoryA$MH_; }

    static final FunctionDescriptor SetCurrentDirectoryW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetCurrentDirectoryW$FUNC() { return SetCurrentDirectoryW$FUNC_; }

    static final MethodHandle SetCurrentDirectoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCurrentDirectoryW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetCurrentDirectoryW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetCurrentDirectoryW$MH() { return SetCurrentDirectoryW$MH_; }

    static final FunctionDescriptor GetCurrentDirectoryA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentDirectoryA$FUNC() { return GetCurrentDirectoryA$FUNC_; }

    static final MethodHandle GetCurrentDirectoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentDirectoryA",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetCurrentDirectoryA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentDirectoryA$MH() { return GetCurrentDirectoryA$MH_; }

    static final FunctionDescriptor GetCurrentDirectoryW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentDirectoryW$FUNC() { return GetCurrentDirectoryW$FUNC_; }

    static final MethodHandle GetCurrentDirectoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentDirectoryW",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetCurrentDirectoryW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentDirectoryW$MH() { return GetCurrentDirectoryW$MH_; }

    static final FunctionDescriptor SearchPathW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SearchPathW$FUNC() { return SearchPathW$FUNC_; }

    static final MethodHandle SearchPathW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SearchPathW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SearchPathW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SearchPathW$MH() { return SearchPathW$MH_; }

    static final FunctionDescriptor SearchPathA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SearchPathA$FUNC() { return SearchPathA$FUNC_; }

    static final MethodHandle SearchPathA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SearchPathA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SearchPathA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SearchPathA$MH() { return SearchPathA$MH_; }

    static final FunctionDescriptor NeedCurrentDirectoryForExePathA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor NeedCurrentDirectoryForExePathA$FUNC() { return NeedCurrentDirectoryForExePathA$FUNC_; }

    static final MethodHandle NeedCurrentDirectoryForExePathA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NeedCurrentDirectoryForExePathA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        NeedCurrentDirectoryForExePathA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle NeedCurrentDirectoryForExePathA$MH() { return NeedCurrentDirectoryForExePathA$MH_; }

    static final FunctionDescriptor NeedCurrentDirectoryForExePathW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor NeedCurrentDirectoryForExePathW$FUNC() { return NeedCurrentDirectoryForExePathW$FUNC_; }

    static final MethodHandle NeedCurrentDirectoryForExePathW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NeedCurrentDirectoryForExePathW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        NeedCurrentDirectoryForExePathW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle NeedCurrentDirectoryForExePathW$MH() { return NeedCurrentDirectoryForExePathW$MH_; }

    static final FunctionDescriptor CompareFileTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CompareFileTime$FUNC() { return CompareFileTime$FUNC_; }

    static final MethodHandle CompareFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CompareFileTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CompareFileTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CompareFileTime$MH() { return CompareFileTime$MH_; }

    static final FunctionDescriptor CreateDirectoryA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDirectoryA$FUNC() { return CreateDirectoryA$FUNC_; }

    static final MethodHandle CreateDirectoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDirectoryA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateDirectoryA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDirectoryA$MH() { return CreateDirectoryA$MH_; }

    static final FunctionDescriptor CreateDirectoryW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDirectoryW$FUNC() { return CreateDirectoryW$FUNC_; }

    static final MethodHandle CreateDirectoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDirectoryW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateDirectoryW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDirectoryW$MH() { return CreateDirectoryW$MH_; }

    static final FunctionDescriptor CreateFileA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFileA$FUNC() { return CreateFileA$FUNC_; }

    static final MethodHandle CreateFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFileA$MH() { return CreateFileA$MH_; }

    static final FunctionDescriptor CreateFileW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFileW$FUNC() { return CreateFileW$FUNC_; }

    static final MethodHandle CreateFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFileW$MH() { return CreateFileW$MH_; }

    static final FunctionDescriptor DefineDosDeviceW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DefineDosDeviceW$FUNC() { return DefineDosDeviceW$FUNC_; }

    static final MethodHandle DefineDosDeviceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DefineDosDeviceW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DefineDosDeviceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DefineDosDeviceW$MH() { return DefineDosDeviceW$MH_; }

    static final FunctionDescriptor DeleteFileA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteFileA$FUNC() { return DeleteFileA$FUNC_; }

    static final MethodHandle DeleteFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteFileA$MH() { return DeleteFileA$MH_; }

    static final FunctionDescriptor DeleteFileW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteFileW$FUNC() { return DeleteFileW$FUNC_; }

    static final MethodHandle DeleteFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteFileW$MH() { return DeleteFileW$MH_; }

    static final FunctionDescriptor DeleteVolumeMountPointW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteVolumeMountPointW$FUNC() { return DeleteVolumeMountPointW$FUNC_; }

    static final MethodHandle DeleteVolumeMountPointW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteVolumeMountPointW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteVolumeMountPointW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteVolumeMountPointW$MH() { return DeleteVolumeMountPointW$MH_; }

    static final FunctionDescriptor FileTimeToLocalFileTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FileTimeToLocalFileTime$FUNC() { return FileTimeToLocalFileTime$FUNC_; }

    static final MethodHandle FileTimeToLocalFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FileTimeToLocalFileTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FileTimeToLocalFileTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FileTimeToLocalFileTime$MH() { return FileTimeToLocalFileTime$MH_; }

    static final FunctionDescriptor FindClose$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindClose$FUNC() { return FindClose$FUNC_; }

    static final MethodHandle FindClose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindClose",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FindClose$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindClose$MH() { return FindClose$MH_; }

    static final FunctionDescriptor FindCloseChangeNotification$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindCloseChangeNotification$FUNC() { return FindCloseChangeNotification$FUNC_; }

    static final MethodHandle FindCloseChangeNotification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindCloseChangeNotification",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FindCloseChangeNotification$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindCloseChangeNotification$MH() { return FindCloseChangeNotification$MH_; }

    static final FunctionDescriptor FindFirstChangeNotificationA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstChangeNotificationA$FUNC() { return FindFirstChangeNotificationA$FUNC_; }

    static final MethodHandle FindFirstChangeNotificationA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstChangeNotificationA",
        "(Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstChangeNotificationA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstChangeNotificationA$MH() { return FindFirstChangeNotificationA$MH_; }

    static final FunctionDescriptor FindFirstChangeNotificationW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstChangeNotificationW$FUNC() { return FindFirstChangeNotificationW$FUNC_; }

    static final MethodHandle FindFirstChangeNotificationW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstChangeNotificationW",
        "(Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstChangeNotificationW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstChangeNotificationW$MH() { return FindFirstChangeNotificationW$MH_; }

    static final FunctionDescriptor FindFirstFileA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstFileA$FUNC() { return FindFirstFileA$FUNC_; }

    static final MethodHandle FindFirstFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstFileA$MH() { return FindFirstFileA$MH_; }

    static final FunctionDescriptor FindFirstFileW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstFileW$FUNC() { return FindFirstFileW$FUNC_; }

    static final MethodHandle FindFirstFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstFileW$MH() { return FindFirstFileW$MH_; }

    static final FunctionDescriptor FindFirstFileExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstFileExA$FUNC() { return FindFirstFileExA$FUNC_; }

    static final MethodHandle FindFirstFileExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstFileExA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstFileExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstFileExA$MH() { return FindFirstFileExA$MH_; }

    static final FunctionDescriptor FindFirstFileExW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstFileExW$FUNC() { return FindFirstFileExW$FUNC_; }

    static final MethodHandle FindFirstFileExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstFileExW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstFileExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstFileExW$MH() { return FindFirstFileExW$MH_; }

    static final FunctionDescriptor FindFirstVolumeW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstVolumeW$FUNC() { return FindFirstVolumeW$FUNC_; }

    static final MethodHandle FindFirstVolumeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstVolumeW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstVolumeW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstVolumeW$MH() { return FindFirstVolumeW$MH_; }

    static final FunctionDescriptor FindNextChangeNotification$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindNextChangeNotification$FUNC() { return FindNextChangeNotification$FUNC_; }

    static final MethodHandle FindNextChangeNotification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindNextChangeNotification",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FindNextChangeNotification$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindNextChangeNotification$MH() { return FindNextChangeNotification$MH_; }

    static final FunctionDescriptor FindNextFileA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindNextFileA$FUNC() { return FindNextFileA$FUNC_; }

    static final MethodHandle FindNextFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindNextFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FindNextFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindNextFileA$MH() { return FindNextFileA$MH_; }

    static final FunctionDescriptor FindNextFileW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindNextFileW$FUNC() { return FindNextFileW$FUNC_; }

    static final MethodHandle FindNextFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindNextFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FindNextFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindNextFileW$MH() { return FindNextFileW$MH_; }

    static final FunctionDescriptor FindNextVolumeW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindNextVolumeW$FUNC() { return FindNextVolumeW$FUNC_; }

    static final MethodHandle FindNextVolumeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindNextVolumeW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        FindNextVolumeW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindNextVolumeW$MH() { return FindNextVolumeW$MH_; }

    static final FunctionDescriptor FindVolumeClose$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindVolumeClose$FUNC() { return FindVolumeClose$FUNC_; }

    static final MethodHandle FindVolumeClose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindVolumeClose",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FindVolumeClose$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindVolumeClose$MH() { return FindVolumeClose$MH_; }

    static final FunctionDescriptor FlushFileBuffers$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FlushFileBuffers$FUNC() { return FlushFileBuffers$FUNC_; }

    static final MethodHandle FlushFileBuffers$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlushFileBuffers",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FlushFileBuffers$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FlushFileBuffers$MH() { return FlushFileBuffers$MH_; }

    static final FunctionDescriptor GetDiskFreeSpaceA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDiskFreeSpaceA$FUNC() { return GetDiskFreeSpaceA$FUNC_; }

    static final MethodHandle GetDiskFreeSpaceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDiskFreeSpaceA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDiskFreeSpaceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDiskFreeSpaceA$MH() { return GetDiskFreeSpaceA$MH_; }

    static final FunctionDescriptor GetDiskFreeSpaceW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDiskFreeSpaceW$FUNC() { return GetDiskFreeSpaceW$FUNC_; }

    static final MethodHandle GetDiskFreeSpaceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDiskFreeSpaceW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDiskFreeSpaceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDiskFreeSpaceW$MH() { return GetDiskFreeSpaceW$MH_; }

    static final FunctionDescriptor GetDiskFreeSpaceExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDiskFreeSpaceExA$FUNC() { return GetDiskFreeSpaceExA$FUNC_; }

    static final MethodHandle GetDiskFreeSpaceExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDiskFreeSpaceExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDiskFreeSpaceExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDiskFreeSpaceExA$MH() { return GetDiskFreeSpaceExA$MH_; }

    static final FunctionDescriptor GetDiskFreeSpaceExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDiskFreeSpaceExW$FUNC() { return GetDiskFreeSpaceExW$FUNC_; }

    static final MethodHandle GetDiskFreeSpaceExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDiskFreeSpaceExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDiskFreeSpaceExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDiskFreeSpaceExW$MH() { return GetDiskFreeSpaceExW$MH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("ActualTotalAllocationUnits"),
        C_LONGLONG.withName("ActualAvailableAllocationUnits"),
        C_LONGLONG.withName("ActualPoolUnavailableAllocationUnits"),
        C_LONGLONG.withName("CallerTotalAllocationUnits"),
        C_LONGLONG.withName("CallerAvailableAllocationUnits"),
        C_LONGLONG.withName("CallerPoolUnavailableAllocationUnits"),
        C_LONGLONG.withName("UsedAllocationUnits"),
        C_LONGLONG.withName("TotalReservedAllocationUnits"),
        C_LONGLONG.withName("VolumeStorageReserveAllocationUnits"),
        C_LONGLONG.withName("AvailableCommittedAllocationUnits"),
        C_LONGLONG.withName("PoolAvailableAllocationUnits"),
        C_INT.withName("SectorsPerAllocationUnit"),
        C_INT.withName("BytesPerSector")
    ).withName("DISK_SPACE_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$struct$LAYOUT() { return DISK_SPACE_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$ActualTotalAllocationUnits$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$ActualTotalAllocationUnits$LAYOUT() { return DISK_SPACE_INFORMATION$ActualTotalAllocationUnits$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$ActualTotalAllocationUnits$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ActualTotalAllocationUnits"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$ActualTotalAllocationUnits$VH() { return DISK_SPACE_INFORMATION$ActualTotalAllocationUnits$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$ActualAvailableAllocationUnits$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$ActualAvailableAllocationUnits$LAYOUT() { return DISK_SPACE_INFORMATION$ActualAvailableAllocationUnits$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$ActualAvailableAllocationUnits$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ActualAvailableAllocationUnits"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$ActualAvailableAllocationUnits$VH() { return DISK_SPACE_INFORMATION$ActualAvailableAllocationUnits$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$ActualPoolUnavailableAllocationUnits$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$ActualPoolUnavailableAllocationUnits$LAYOUT() { return DISK_SPACE_INFORMATION$ActualPoolUnavailableAllocationUnits$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$ActualPoolUnavailableAllocationUnits$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ActualPoolUnavailableAllocationUnits"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$ActualPoolUnavailableAllocationUnits$VH() { return DISK_SPACE_INFORMATION$ActualPoolUnavailableAllocationUnits$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$CallerTotalAllocationUnits$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$CallerTotalAllocationUnits$LAYOUT() { return DISK_SPACE_INFORMATION$CallerTotalAllocationUnits$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$CallerTotalAllocationUnits$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CallerTotalAllocationUnits"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$CallerTotalAllocationUnits$VH() { return DISK_SPACE_INFORMATION$CallerTotalAllocationUnits$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$CallerAvailableAllocationUnits$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$CallerAvailableAllocationUnits$LAYOUT() { return DISK_SPACE_INFORMATION$CallerAvailableAllocationUnits$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$CallerAvailableAllocationUnits$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CallerAvailableAllocationUnits"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$CallerAvailableAllocationUnits$VH() { return DISK_SPACE_INFORMATION$CallerAvailableAllocationUnits$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$CallerPoolUnavailableAllocationUnits$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$CallerPoolUnavailableAllocationUnits$LAYOUT() { return DISK_SPACE_INFORMATION$CallerPoolUnavailableAllocationUnits$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$CallerPoolUnavailableAllocationUnits$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CallerPoolUnavailableAllocationUnits"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$CallerPoolUnavailableAllocationUnits$VH() { return DISK_SPACE_INFORMATION$CallerPoolUnavailableAllocationUnits$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$UsedAllocationUnits$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$UsedAllocationUnits$LAYOUT() { return DISK_SPACE_INFORMATION$UsedAllocationUnits$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$UsedAllocationUnits$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UsedAllocationUnits"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$UsedAllocationUnits$VH() { return DISK_SPACE_INFORMATION$UsedAllocationUnits$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$TotalReservedAllocationUnits$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$TotalReservedAllocationUnits$LAYOUT() { return DISK_SPACE_INFORMATION$TotalReservedAllocationUnits$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$TotalReservedAllocationUnits$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalReservedAllocationUnits"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$TotalReservedAllocationUnits$VH() { return DISK_SPACE_INFORMATION$TotalReservedAllocationUnits$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$VolumeStorageReserveAllocationUnits$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$VolumeStorageReserveAllocationUnits$LAYOUT() { return DISK_SPACE_INFORMATION$VolumeStorageReserveAllocationUnits$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$VolumeStorageReserveAllocationUnits$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeStorageReserveAllocationUnits"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$VolumeStorageReserveAllocationUnits$VH() { return DISK_SPACE_INFORMATION$VolumeStorageReserveAllocationUnits$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$AvailableCommittedAllocationUnits$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$AvailableCommittedAllocationUnits$LAYOUT() { return DISK_SPACE_INFORMATION$AvailableCommittedAllocationUnits$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$AvailableCommittedAllocationUnits$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AvailableCommittedAllocationUnits"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$AvailableCommittedAllocationUnits$VH() { return DISK_SPACE_INFORMATION$AvailableCommittedAllocationUnits$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$PoolAvailableAllocationUnits$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$PoolAvailableAllocationUnits$LAYOUT() { return DISK_SPACE_INFORMATION$PoolAvailableAllocationUnits$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$PoolAvailableAllocationUnits$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PoolAvailableAllocationUnits"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$PoolAvailableAllocationUnits$VH() { return DISK_SPACE_INFORMATION$PoolAvailableAllocationUnits$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$SectorsPerAllocationUnit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$SectorsPerAllocationUnit$LAYOUT() { return DISK_SPACE_INFORMATION$SectorsPerAllocationUnit$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$SectorsPerAllocationUnit$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectorsPerAllocationUnit"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$SectorsPerAllocationUnit$VH() { return DISK_SPACE_INFORMATION$SectorsPerAllocationUnit$VH_; }

    static final MemoryLayout DISK_SPACE_INFORMATION$BytesPerSector$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout DISK_SPACE_INFORMATION$BytesPerSector$LAYOUT() { return DISK_SPACE_INFORMATION$BytesPerSector$LAYOUT_; }

    static final VarHandle DISK_SPACE_INFORMATION$BytesPerSector$VH_ = DISK_SPACE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesPerSector"));
    public static java.lang.invoke.VarHandle DISK_SPACE_INFORMATION$BytesPerSector$VH() { return DISK_SPACE_INFORMATION$BytesPerSector$VH_; }

    static final FunctionDescriptor GetDiskSpaceInformationA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDiskSpaceInformationA$FUNC() { return GetDiskSpaceInformationA$FUNC_; }

    static final MethodHandle GetDiskSpaceInformationA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDiskSpaceInformationA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDiskSpaceInformationA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDiskSpaceInformationA$MH() { return GetDiskSpaceInformationA$MH_; }

    static final FunctionDescriptor GetDiskSpaceInformationW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDiskSpaceInformationW$FUNC() { return GetDiskSpaceInformationW$FUNC_; }

    static final MethodHandle GetDiskSpaceInformationW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDiskSpaceInformationW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDiskSpaceInformationW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDiskSpaceInformationW$MH() { return GetDiskSpaceInformationW$MH_; }

    static final FunctionDescriptor GetDriveTypeA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDriveTypeA$FUNC() { return GetDriveTypeA$FUNC_; }

    static final MethodHandle GetDriveTypeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDriveTypeA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDriveTypeA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDriveTypeA$MH() { return GetDriveTypeA$MH_; }

    static final FunctionDescriptor GetDriveTypeW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDriveTypeW$FUNC() { return GetDriveTypeW$FUNC_; }

    static final MethodHandle GetDriveTypeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDriveTypeW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDriveTypeW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDriveTypeW$MH() { return GetDriveTypeW$MH_; }

    static final MemoryLayout _WIN32_FILE_ATTRIBUTE_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwFileAttributes"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwLowDateTime"),
            C_INT.withName("dwHighDateTime")
        ).withName("ftCreationTime"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwLowDateTime"),
            C_INT.withName("dwHighDateTime")
        ).withName("ftLastAccessTime"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwLowDateTime"),
            C_INT.withName("dwHighDateTime")
        ).withName("ftLastWriteTime"),
        C_INT.withName("nFileSizeHigh"),
        C_INT.withName("nFileSizeLow")
    ).withName("_WIN32_FILE_ATTRIBUTE_DATA");
    public static jdk.incubator.foreign.MemoryLayout _WIN32_FILE_ATTRIBUTE_DATA$struct$LAYOUT() { return _WIN32_FILE_ATTRIBUTE_DATA$struct$LAYOUT_; }

    static final MemoryLayout _WIN32_FILE_ATTRIBUTE_DATA$dwFileAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _WIN32_FILE_ATTRIBUTE_DATA$dwFileAttributes$LAYOUT() { return _WIN32_FILE_ATTRIBUTE_DATA$dwFileAttributes$LAYOUT_; }

    static final VarHandle _WIN32_FILE_ATTRIBUTE_DATA$dwFileAttributes$VH_ = _WIN32_FILE_ATTRIBUTE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileAttributes"));
    public static java.lang.invoke.VarHandle _WIN32_FILE_ATTRIBUTE_DATA$dwFileAttributes$VH() { return _WIN32_FILE_ATTRIBUTE_DATA$dwFileAttributes$VH_; }

    static final MemoryLayout _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeHigh$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeHigh$LAYOUT() { return _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeHigh$LAYOUT_; }

    static final VarHandle _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeHigh$VH_ = _WIN32_FILE_ATTRIBUTE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFileSizeHigh"));
    public static java.lang.invoke.VarHandle _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeHigh$VH() { return _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeHigh$VH_; }

    static final MemoryLayout _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeLow$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeLow$LAYOUT() { return _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeLow$LAYOUT_; }

    static final VarHandle _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeLow$VH_ = _WIN32_FILE_ATTRIBUTE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFileSizeLow"));
    public static java.lang.invoke.VarHandle _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeLow$VH() { return _WIN32_FILE_ATTRIBUTE_DATA$nFileSizeLow$VH_; }

    static final FunctionDescriptor GetFileAttributesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileAttributesA$FUNC() { return GetFileAttributesA$FUNC_; }

    static final MethodHandle GetFileAttributesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileAttributesA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileAttributesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileAttributesA$MH() { return GetFileAttributesA$MH_; }

    static final FunctionDescriptor GetFileAttributesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileAttributesW$FUNC() { return GetFileAttributesW$FUNC_; }

    static final MethodHandle GetFileAttributesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileAttributesW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileAttributesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileAttributesW$MH() { return GetFileAttributesW$MH_; }

    static final FunctionDescriptor GetFileAttributesExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileAttributesExA$FUNC() { return GetFileAttributesExA$FUNC_; }

    static final MethodHandle GetFileAttributesExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileAttributesExA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetFileAttributesExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileAttributesExA$MH() { return GetFileAttributesExA$MH_; }

    static final FunctionDescriptor GetFileAttributesExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileAttributesExW$FUNC() { return GetFileAttributesExW$FUNC_; }

    static final MethodHandle GetFileAttributesExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileAttributesExW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetFileAttributesExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileAttributesExW$MH() { return GetFileAttributesExW$MH_; }

    static final MemoryLayout _BY_HANDLE_FILE_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwFileAttributes"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwLowDateTime"),
            C_INT.withName("dwHighDateTime")
        ).withName("ftCreationTime"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwLowDateTime"),
            C_INT.withName("dwHighDateTime")
        ).withName("ftLastAccessTime"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwLowDateTime"),
            C_INT.withName("dwHighDateTime")
        ).withName("ftLastWriteTime"),
        C_INT.withName("dwVolumeSerialNumber"),
        C_INT.withName("nFileSizeHigh"),
        C_INT.withName("nFileSizeLow"),
        C_INT.withName("nNumberOfLinks"),
        C_INT.withName("nFileIndexHigh"),
        C_INT.withName("nFileIndexLow")
    ).withName("_BY_HANDLE_FILE_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _BY_HANDLE_FILE_INFORMATION$struct$LAYOUT() { return _BY_HANDLE_FILE_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _BY_HANDLE_FILE_INFORMATION$dwFileAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _BY_HANDLE_FILE_INFORMATION$dwFileAttributes$LAYOUT() { return _BY_HANDLE_FILE_INFORMATION$dwFileAttributes$LAYOUT_; }

    static final VarHandle _BY_HANDLE_FILE_INFORMATION$dwFileAttributes$VH_ = _BY_HANDLE_FILE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileAttributes"));
    public static java.lang.invoke.VarHandle _BY_HANDLE_FILE_INFORMATION$dwFileAttributes$VH() { return _BY_HANDLE_FILE_INFORMATION$dwFileAttributes$VH_; }

    static final MemoryLayout _BY_HANDLE_FILE_INFORMATION$dwVolumeSerialNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _BY_HANDLE_FILE_INFORMATION$dwVolumeSerialNumber$LAYOUT() { return _BY_HANDLE_FILE_INFORMATION$dwVolumeSerialNumber$LAYOUT_; }

    static final VarHandle _BY_HANDLE_FILE_INFORMATION$dwVolumeSerialNumber$VH_ = _BY_HANDLE_FILE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVolumeSerialNumber"));
    public static java.lang.invoke.VarHandle _BY_HANDLE_FILE_INFORMATION$dwVolumeSerialNumber$VH() { return _BY_HANDLE_FILE_INFORMATION$dwVolumeSerialNumber$VH_; }

    static final MemoryLayout _BY_HANDLE_FILE_INFORMATION$nFileSizeHigh$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _BY_HANDLE_FILE_INFORMATION$nFileSizeHigh$LAYOUT() { return _BY_HANDLE_FILE_INFORMATION$nFileSizeHigh$LAYOUT_; }

    static final VarHandle _BY_HANDLE_FILE_INFORMATION$nFileSizeHigh$VH_ = _BY_HANDLE_FILE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFileSizeHigh"));
    public static java.lang.invoke.VarHandle _BY_HANDLE_FILE_INFORMATION$nFileSizeHigh$VH() { return _BY_HANDLE_FILE_INFORMATION$nFileSizeHigh$VH_; }

    static final MemoryLayout _BY_HANDLE_FILE_INFORMATION$nFileSizeLow$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _BY_HANDLE_FILE_INFORMATION$nFileSizeLow$LAYOUT() { return _BY_HANDLE_FILE_INFORMATION$nFileSizeLow$LAYOUT_; }

    static final VarHandle _BY_HANDLE_FILE_INFORMATION$nFileSizeLow$VH_ = _BY_HANDLE_FILE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFileSizeLow"));
    public static java.lang.invoke.VarHandle _BY_HANDLE_FILE_INFORMATION$nFileSizeLow$VH() { return _BY_HANDLE_FILE_INFORMATION$nFileSizeLow$VH_; }

    static final MemoryLayout _BY_HANDLE_FILE_INFORMATION$nNumberOfLinks$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _BY_HANDLE_FILE_INFORMATION$nNumberOfLinks$LAYOUT() { return _BY_HANDLE_FILE_INFORMATION$nNumberOfLinks$LAYOUT_; }

    static final VarHandle _BY_HANDLE_FILE_INFORMATION$nNumberOfLinks$VH_ = _BY_HANDLE_FILE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nNumberOfLinks"));
    public static java.lang.invoke.VarHandle _BY_HANDLE_FILE_INFORMATION$nNumberOfLinks$VH() { return _BY_HANDLE_FILE_INFORMATION$nNumberOfLinks$VH_; }

    static final MemoryLayout _BY_HANDLE_FILE_INFORMATION$nFileIndexHigh$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _BY_HANDLE_FILE_INFORMATION$nFileIndexHigh$LAYOUT() { return _BY_HANDLE_FILE_INFORMATION$nFileIndexHigh$LAYOUT_; }

    static final VarHandle _BY_HANDLE_FILE_INFORMATION$nFileIndexHigh$VH_ = _BY_HANDLE_FILE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFileIndexHigh"));
    public static java.lang.invoke.VarHandle _BY_HANDLE_FILE_INFORMATION$nFileIndexHigh$VH() { return _BY_HANDLE_FILE_INFORMATION$nFileIndexHigh$VH_; }

    static final MemoryLayout _BY_HANDLE_FILE_INFORMATION$nFileIndexLow$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _BY_HANDLE_FILE_INFORMATION$nFileIndexLow$LAYOUT() { return _BY_HANDLE_FILE_INFORMATION$nFileIndexLow$LAYOUT_; }

    static final VarHandle _BY_HANDLE_FILE_INFORMATION$nFileIndexLow$VH_ = _BY_HANDLE_FILE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFileIndexLow"));
    public static java.lang.invoke.VarHandle _BY_HANDLE_FILE_INFORMATION$nFileIndexLow$VH() { return _BY_HANDLE_FILE_INFORMATION$nFileIndexLow$VH_; }

    static final FunctionDescriptor GetFileInformationByHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileInformationByHandle$FUNC() { return GetFileInformationByHandle$FUNC_; }

    static final MethodHandle GetFileInformationByHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileInformationByHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileInformationByHandle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileInformationByHandle$MH() { return GetFileInformationByHandle$MH_; }

    static final FunctionDescriptor GetFileSize$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileSize$FUNC() { return GetFileSize$FUNC_; }

    static final MethodHandle GetFileSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileSize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileSize$MH() { return GetFileSize$MH_; }

    static final FunctionDescriptor GetFileSizeEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileSizeEx$FUNC() { return GetFileSizeEx$FUNC_; }

    static final MethodHandle GetFileSizeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileSizeEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileSizeEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileSizeEx$MH() { return GetFileSizeEx$MH_; }

    static final FunctionDescriptor GetFileType$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileType$FUNC() { return GetFileType$FUNC_; }

    static final MethodHandle GetFileType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileType",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileType$MH() { return GetFileType$MH_; }

    static final FunctionDescriptor GetFinalPathNameByHandleA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFinalPathNameByHandleA$FUNC() { return GetFinalPathNameByHandleA$FUNC_; }

    static final MethodHandle GetFinalPathNameByHandleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFinalPathNameByHandleA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        GetFinalPathNameByHandleA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFinalPathNameByHandleA$MH() { return GetFinalPathNameByHandleA$MH_; }

    static final FunctionDescriptor GetFinalPathNameByHandleW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFinalPathNameByHandleW$FUNC() { return GetFinalPathNameByHandleW$FUNC_; }

    static final MethodHandle GetFinalPathNameByHandleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFinalPathNameByHandleW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        GetFinalPathNameByHandleW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFinalPathNameByHandleW$MH() { return GetFinalPathNameByHandleW$MH_; }

    static final FunctionDescriptor GetFileTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileTime$FUNC() { return GetFileTime$FUNC_; }

    static final MethodHandle GetFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileTime$MH() { return GetFileTime$MH_; }

    static final FunctionDescriptor GetFullPathNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFullPathNameW$FUNC() { return GetFullPathNameW$FUNC_; }

    static final MethodHandle GetFullPathNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFullPathNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFullPathNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFullPathNameW$MH() { return GetFullPathNameW$MH_; }

    static final FunctionDescriptor GetFullPathNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFullPathNameA$FUNC() { return GetFullPathNameA$FUNC_; }

    static final MethodHandle GetFullPathNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFullPathNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFullPathNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFullPathNameA$MH() { return GetFullPathNameA$MH_; }

    static final FunctionDescriptor GetLogicalDrives$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetLogicalDrives$FUNC() { return GetLogicalDrives$FUNC_; }

    static final MethodHandle GetLogicalDrives$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLogicalDrives",
        "()I",
        GetLogicalDrives$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLogicalDrives$MH() { return GetLogicalDrives$MH_; }

    static final FunctionDescriptor GetLogicalDriveStringsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLogicalDriveStringsW$FUNC() { return GetLogicalDriveStringsW$FUNC_; }

    static final MethodHandle GetLogicalDriveStringsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLogicalDriveStringsW",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetLogicalDriveStringsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLogicalDriveStringsW$MH() { return GetLogicalDriveStringsW$MH_; }

    static final FunctionDescriptor GetLongPathNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLongPathNameA$FUNC() { return GetLongPathNameA$FUNC_; }

    static final MethodHandle GetLongPathNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLongPathNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetLongPathNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLongPathNameA$MH() { return GetLongPathNameA$MH_; }

    static final FunctionDescriptor GetLongPathNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLongPathNameW$FUNC() { return GetLongPathNameW$FUNC_; }

    static final MethodHandle GetLongPathNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLongPathNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetLongPathNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLongPathNameW$MH() { return GetLongPathNameW$MH_; }

    static final FunctionDescriptor GetShortPathNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetShortPathNameW$FUNC() { return GetShortPathNameW$FUNC_; }

    static final MethodHandle GetShortPathNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetShortPathNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetShortPathNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetShortPathNameW$MH() { return GetShortPathNameW$MH_; }

    static final FunctionDescriptor GetTempFileNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTempFileNameW$FUNC() { return GetTempFileNameW$FUNC_; }

    static final MethodHandle GetTempFileNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTempFileNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTempFileNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTempFileNameW$MH() { return GetTempFileNameW$MH_; }

    static final FunctionDescriptor GetVolumeInformationByHandleW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetVolumeInformationByHandleW$FUNC() { return GetVolumeInformationByHandleW$FUNC_; }

    static final MethodHandle GetVolumeInformationByHandleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVolumeInformationByHandleW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetVolumeInformationByHandleW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVolumeInformationByHandleW$MH() { return GetVolumeInformationByHandleW$MH_; }

    static final FunctionDescriptor GetVolumeInformationW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetVolumeInformationW$FUNC() { return GetVolumeInformationW$FUNC_; }

    static final MethodHandle GetVolumeInformationW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVolumeInformationW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetVolumeInformationW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVolumeInformationW$MH() { return GetVolumeInformationW$MH_; }

    static final FunctionDescriptor GetVolumePathNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetVolumePathNameW$FUNC() { return GetVolumePathNameW$FUNC_; }

    static final MethodHandle GetVolumePathNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVolumePathNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetVolumePathNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVolumePathNameW$MH() { return GetVolumePathNameW$MH_; }

    static final FunctionDescriptor LocalFileTimeToFileTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalFileTimeToFileTime$FUNC() { return LocalFileTimeToFileTime$FUNC_; }

    static final MethodHandle LocalFileTimeToFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalFileTimeToFileTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LocalFileTimeToFileTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalFileTimeToFileTime$MH() { return LocalFileTimeToFileTime$MH_; }

    static final FunctionDescriptor LockFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LockFile$FUNC() { return LockFile$FUNC_; }

    static final MethodHandle LockFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LockFile",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        LockFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LockFile$MH() { return LockFile$MH_; }

    static final FunctionDescriptor LockFileEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LockFileEx$FUNC() { return LockFileEx$FUNC_; }

    static final MethodHandle LockFileEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LockFileEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;)I",
        LockFileEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LockFileEx$MH() { return LockFileEx$MH_; }

    static final FunctionDescriptor QueryDosDeviceW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryDosDeviceW$FUNC() { return QueryDosDeviceW$FUNC_; }

    static final MethodHandle QueryDosDeviceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryDosDeviceW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        QueryDosDeviceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryDosDeviceW$MH() { return QueryDosDeviceW$MH_; }

    static final FunctionDescriptor ReadFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadFile$FUNC() { return ReadFile$FUNC_; }

    static final MethodHandle ReadFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadFile$MH() { return ReadFile$MH_; }

    static final FunctionDescriptor ReadFileEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadFileEx$FUNC() { return ReadFileEx$FUNC_; }

    static final MethodHandle ReadFileEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadFileEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadFileEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadFileEx$MH() { return ReadFileEx$MH_; }

    static final FunctionDescriptor ReadFileEx$lpCompletionRoutine$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadFileEx$lpCompletionRoutine$FUNC() { return ReadFileEx$lpCompletionRoutine$FUNC_; }

    static final FunctionDescriptor ReadFileScatter$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadFileScatter$FUNC() { return ReadFileScatter$FUNC_; }

    static final MethodHandle ReadFileScatter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadFileScatter",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadFileScatter$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadFileScatter$MH() { return ReadFileScatter$MH_; }

    static final FunctionDescriptor RemoveDirectoryA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveDirectoryA$FUNC() { return RemoveDirectoryA$FUNC_; }

    static final MethodHandle RemoveDirectoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveDirectoryA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveDirectoryA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveDirectoryA$MH() { return RemoveDirectoryA$MH_; }

    static final FunctionDescriptor RemoveDirectoryW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveDirectoryW$FUNC() { return RemoveDirectoryW$FUNC_; }

    static final MethodHandle RemoveDirectoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveDirectoryW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveDirectoryW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveDirectoryW$MH() { return RemoveDirectoryW$MH_; }

    static final FunctionDescriptor SetEndOfFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetEndOfFile$FUNC() { return SetEndOfFile$FUNC_; }

    static final MethodHandle SetEndOfFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetEndOfFile",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetEndOfFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetEndOfFile$MH() { return SetEndOfFile$MH_; }

    static final FunctionDescriptor SetFileAttributesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileAttributesA$FUNC() { return SetFileAttributesA$FUNC_; }

    static final MethodHandle SetFileAttributesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileAttributesA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetFileAttributesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileAttributesA$MH() { return SetFileAttributesA$MH_; }

    static final FunctionDescriptor SetFileAttributesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileAttributesW$FUNC() { return SetFileAttributesW$FUNC_; }

    static final MethodHandle SetFileAttributesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileAttributesW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetFileAttributesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileAttributesW$MH() { return SetFileAttributesW$MH_; }

    static final FunctionDescriptor SetFileInformationByHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileInformationByHandle$FUNC() { return SetFileInformationByHandle$FUNC_; }

    static final MethodHandle SetFileInformationByHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileInformationByHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetFileInformationByHandle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileInformationByHandle$MH() { return SetFileInformationByHandle$MH_; }

    static final FunctionDescriptor SetFilePointer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFilePointer$FUNC() { return SetFilePointer$FUNC_; }

    static final MethodHandle SetFilePointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFilePointer",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetFilePointer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFilePointer$MH() { return SetFilePointer$MH_; }

    static final FunctionDescriptor SetFilePointerEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFilePointerEx$FUNC() { return SetFilePointerEx$FUNC_; }

    static final MethodHandle SetFilePointerEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFilePointerEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetFilePointerEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFilePointerEx$MH() { return SetFilePointerEx$MH_; }

    static final FunctionDescriptor SetFileTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileTime$FUNC() { return SetFileTime$FUNC_; }

    static final MethodHandle SetFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetFileTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileTime$MH() { return SetFileTime$MH_; }

    static final FunctionDescriptor SetFileValidData$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileValidData$FUNC() { return SetFileValidData$FUNC_; }

    static final MethodHandle SetFileValidData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileValidData",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        SetFileValidData$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileValidData$MH() { return SetFileValidData$MH_; }

    static final FunctionDescriptor UnlockFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnlockFile$FUNC() { return UnlockFile$FUNC_; }

    static final MethodHandle UnlockFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnlockFile",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        UnlockFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnlockFile$MH() { return UnlockFile$MH_; }

    static final FunctionDescriptor UnlockFileEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnlockFileEx$FUNC() { return UnlockFileEx$FUNC_; }

    static final MethodHandle UnlockFileEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnlockFileEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        UnlockFileEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnlockFileEx$MH() { return UnlockFileEx$MH_; }

    static final FunctionDescriptor WriteFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteFile$FUNC() { return WriteFile$FUNC_; }

    static final MethodHandle WriteFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteFile$MH() { return WriteFile$MH_; }

    static final FunctionDescriptor WriteFileEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteFileEx$FUNC() { return WriteFileEx$FUNC_; }

    static final MethodHandle WriteFileEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteFileEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteFileEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteFileEx$MH() { return WriteFileEx$MH_; }

    static final FunctionDescriptor WriteFileEx$lpCompletionRoutine$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteFileEx$lpCompletionRoutine$FUNC() { return WriteFileEx$lpCompletionRoutine$FUNC_; }

    static final FunctionDescriptor WriteFileGather$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteFileGather$FUNC() { return WriteFileGather$FUNC_; }

    static final MethodHandle WriteFileGather$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteFileGather",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteFileGather$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteFileGather$MH() { return WriteFileGather$MH_; }

    static final FunctionDescriptor GetTempPathW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTempPathW$FUNC() { return GetTempPathW$FUNC_; }

    static final MethodHandle GetTempPathW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTempPathW",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTempPathW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTempPathW$MH() { return GetTempPathW$MH_; }

    static final FunctionDescriptor GetVolumeNameForVolumeMountPointW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetVolumeNameForVolumeMountPointW$FUNC() { return GetVolumeNameForVolumeMountPointW$FUNC_; }

    static final MethodHandle GetVolumeNameForVolumeMountPointW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVolumeNameForVolumeMountPointW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetVolumeNameForVolumeMountPointW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVolumeNameForVolumeMountPointW$MH() { return GetVolumeNameForVolumeMountPointW$MH_; }

    static final FunctionDescriptor GetVolumePathNamesForVolumeNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetVolumePathNamesForVolumeNameW$FUNC() { return GetVolumePathNamesForVolumeNameW$FUNC_; }

    static final MethodHandle GetVolumePathNamesForVolumeNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVolumePathNamesForVolumeNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetVolumePathNamesForVolumeNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVolumePathNamesForVolumeNameW$MH() { return GetVolumePathNamesForVolumeNameW$MH_; }

    static final MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwSize"),
        C_INT.withName("dwFileAttributes"),
        C_INT.withName("dwFileFlags"),
        C_INT.withName("dwSecurityQosFlags"),
        C_POINTER.withName("lpSecurityAttributes"),
        C_POINTER.withName("hTemplateFile")
    ).withName("_CREATEFILE2_EXTENDED_PARAMETERS");
    public static jdk.incubator.foreign.MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$struct$LAYOUT() { return _CREATEFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$dwSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$dwSize$LAYOUT() { return _CREATEFILE2_EXTENDED_PARAMETERS$dwSize$LAYOUT_; }

    static final VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$dwSize$VH_ = _CREATEFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    public static java.lang.invoke.VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$dwSize$VH() { return _CREATEFILE2_EXTENDED_PARAMETERS$dwSize$VH_; }

    static final MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$dwFileAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$dwFileAttributes$LAYOUT() { return _CREATEFILE2_EXTENDED_PARAMETERS$dwFileAttributes$LAYOUT_; }

    static final VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$dwFileAttributes$VH_ = _CREATEFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileAttributes"));
    public static java.lang.invoke.VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$dwFileAttributes$VH() { return _CREATEFILE2_EXTENDED_PARAMETERS$dwFileAttributes$VH_; }

    static final MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$dwFileFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$dwFileFlags$LAYOUT() { return _CREATEFILE2_EXTENDED_PARAMETERS$dwFileFlags$LAYOUT_; }

    static final VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$dwFileFlags$VH_ = _CREATEFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileFlags"));
    public static java.lang.invoke.VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$dwFileFlags$VH() { return _CREATEFILE2_EXTENDED_PARAMETERS$dwFileFlags$VH_; }

    static final MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$dwSecurityQosFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$dwSecurityQosFlags$LAYOUT() { return _CREATEFILE2_EXTENDED_PARAMETERS$dwSecurityQosFlags$LAYOUT_; }

    static final VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$dwSecurityQosFlags$VH_ = _CREATEFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSecurityQosFlags"));
    public static java.lang.invoke.VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$dwSecurityQosFlags$VH() { return _CREATEFILE2_EXTENDED_PARAMETERS$dwSecurityQosFlags$VH_; }

    static final MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$lpSecurityAttributes$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$lpSecurityAttributes$LAYOUT() { return _CREATEFILE2_EXTENDED_PARAMETERS$lpSecurityAttributes$LAYOUT_; }

    static final VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$lpSecurityAttributes$VH_ = MemoryHandles.asAddressVarHandle(_CREATEFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpSecurityAttributes")));
    public static java.lang.invoke.VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$lpSecurityAttributes$VH() { return _CREATEFILE2_EXTENDED_PARAMETERS$lpSecurityAttributes$VH_; }

    static final MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$hTemplateFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CREATEFILE2_EXTENDED_PARAMETERS$hTemplateFile$LAYOUT() { return _CREATEFILE2_EXTENDED_PARAMETERS$hTemplateFile$LAYOUT_; }

    static final VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$hTemplateFile$VH_ = MemoryHandles.asAddressVarHandle(_CREATEFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hTemplateFile")));
    public static java.lang.invoke.VarHandle _CREATEFILE2_EXTENDED_PARAMETERS$hTemplateFile$VH() { return _CREATEFILE2_EXTENDED_PARAMETERS$hTemplateFile$VH_; }

    static final FunctionDescriptor CreateFile2$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFile2$FUNC() { return CreateFile2$FUNC_; }

    static final MethodHandle CreateFile2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFile2",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFile2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFile2$MH() { return CreateFile2$MH_; }

    static final FunctionDescriptor SetFileIoOverlappedRange$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileIoOverlappedRange$FUNC() { return SetFileIoOverlappedRange$FUNC_; }

    static final MethodHandle SetFileIoOverlappedRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileIoOverlappedRange",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetFileIoOverlappedRange$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileIoOverlappedRange$MH() { return SetFileIoOverlappedRange$MH_; }

    static final FunctionDescriptor GetCompressedFileSizeA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCompressedFileSizeA$FUNC() { return GetCompressedFileSizeA$FUNC_; }

    static final MethodHandle GetCompressedFileSizeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCompressedFileSizeA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCompressedFileSizeA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCompressedFileSizeA$MH() { return GetCompressedFileSizeA$MH_; }

    static final FunctionDescriptor GetCompressedFileSizeW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCompressedFileSizeW$FUNC() { return GetCompressedFileSizeW$FUNC_; }

    static final MethodHandle GetCompressedFileSizeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCompressedFileSizeW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCompressedFileSizeW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCompressedFileSizeW$MH() { return GetCompressedFileSizeW$MH_; }

    public static int FindStreamInfoStandard() { return (int)0L; }

    public static int FindStreamInfoMaxInfoLevel() { return (int)1L; }

    static final MemoryLayout _WIN32_FIND_STREAM_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StreamSize"),
        MemoryLayout.ofSequence(296, C_SHORT).withName("cStreamName")
    ).withName("_WIN32_FIND_STREAM_DATA");
    public static jdk.incubator.foreign.MemoryLayout _WIN32_FIND_STREAM_DATA$struct$LAYOUT() { return _WIN32_FIND_STREAM_DATA$struct$LAYOUT_; }

    static final FunctionDescriptor FindFirstStreamW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstStreamW$FUNC() { return FindFirstStreamW$FUNC_; }

    static final MethodHandle FindFirstStreamW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstStreamW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstStreamW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstStreamW$MH() { return FindFirstStreamW$MH_; }

    static final FunctionDescriptor FindNextStreamW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindNextStreamW$FUNC() { return FindNextStreamW$FUNC_; }

    static final MethodHandle FindNextStreamW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindNextStreamW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FindNextStreamW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindNextStreamW$MH() { return FindNextStreamW$MH_; }

    static final FunctionDescriptor AreFileApisANSI$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor AreFileApisANSI$FUNC() { return AreFileApisANSI$FUNC_; }

    static final MethodHandle AreFileApisANSI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AreFileApisANSI",
        "()I",
        AreFileApisANSI$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AreFileApisANSI$MH() { return AreFileApisANSI$MH_; }

    static final FunctionDescriptor GetTempPathA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTempPathA$FUNC() { return GetTempPathA$FUNC_; }

    static final MethodHandle GetTempPathA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTempPathA",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTempPathA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTempPathA$MH() { return GetTempPathA$MH_; }

    static final FunctionDescriptor FindFirstFileNameW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstFileNameW$FUNC() { return FindFirstFileNameW$FUNC_; }

    static final MethodHandle FindFirstFileNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstFileNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstFileNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstFileNameW$MH() { return FindFirstFileNameW$MH_; }

    static final FunctionDescriptor FindNextFileNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindNextFileNameW$FUNC() { return FindNextFileNameW$FUNC_; }

    static final MethodHandle FindNextFileNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindNextFileNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FindNextFileNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindNextFileNameW$MH() { return FindNextFileNameW$MH_; }

    static final FunctionDescriptor GetVolumeInformationA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetVolumeInformationA$FUNC() { return GetVolumeInformationA$FUNC_; }

    static final MethodHandle GetVolumeInformationA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVolumeInformationA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetVolumeInformationA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVolumeInformationA$MH() { return GetVolumeInformationA$MH_; }

    static final FunctionDescriptor GetTempFileNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTempFileNameA$FUNC() { return GetTempFileNameA$FUNC_; }

    static final MethodHandle GetTempFileNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTempFileNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTempFileNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTempFileNameA$MH() { return GetTempFileNameA$MH_; }

    static final FunctionDescriptor SetFileApisToOEM$FUNC_ = FunctionDescriptor.ofVoid();
    public static jdk.incubator.foreign.FunctionDescriptor SetFileApisToOEM$FUNC() { return SetFileApisToOEM$FUNC_; }

    static final MethodHandle SetFileApisToOEM$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileApisToOEM",
        "()V",
        SetFileApisToOEM$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileApisToOEM$MH() { return SetFileApisToOEM$MH_; }

    static final FunctionDescriptor SetFileApisToANSI$FUNC_ = FunctionDescriptor.ofVoid();
    public static jdk.incubator.foreign.FunctionDescriptor SetFileApisToANSI$FUNC() { return SetFileApisToANSI$FUNC_; }

    static final MethodHandle SetFileApisToANSI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileApisToANSI",
        "()V",
        SetFileApisToANSI$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileApisToANSI$MH() { return SetFileApisToANSI$MH_; }

    static final FunctionDescriptor CopyFileFromAppW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFileFromAppW$FUNC() { return CopyFileFromAppW$FUNC_; }

    static final MethodHandle CopyFileFromAppW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyFileFromAppW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CopyFileFromAppW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyFileFromAppW$MH() { return CopyFileFromAppW$MH_; }

    static final FunctionDescriptor CreateDirectoryFromAppW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDirectoryFromAppW$FUNC() { return CreateDirectoryFromAppW$FUNC_; }

    static final MethodHandle CreateDirectoryFromAppW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDirectoryFromAppW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateDirectoryFromAppW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDirectoryFromAppW$MH() { return CreateDirectoryFromAppW$MH_; }

    static final FunctionDescriptor CreateFileFromAppW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFileFromAppW$FUNC() { return CreateFileFromAppW$FUNC_; }

    static final MethodHandle CreateFileFromAppW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileFromAppW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFileFromAppW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFileFromAppW$MH() { return CreateFileFromAppW$MH_; }

    static final FunctionDescriptor CreateFile2FromAppW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFile2FromAppW$FUNC() { return CreateFile2FromAppW$FUNC_; }

    static final MethodHandle CreateFile2FromAppW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFile2FromAppW",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFile2FromAppW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFile2FromAppW$MH() { return CreateFile2FromAppW$MH_; }

    static final FunctionDescriptor DeleteFileFromAppW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteFileFromAppW$FUNC() { return DeleteFileFromAppW$FUNC_; }

    static final MethodHandle DeleteFileFromAppW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteFileFromAppW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteFileFromAppW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteFileFromAppW$MH() { return DeleteFileFromAppW$MH_; }

    static final FunctionDescriptor FindFirstFileExFromAppW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstFileExFromAppW$FUNC() { return FindFirstFileExFromAppW$FUNC_; }

    static final MethodHandle FindFirstFileExFromAppW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstFileExFromAppW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstFileExFromAppW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstFileExFromAppW$MH() { return FindFirstFileExFromAppW$MH_; }

    static final FunctionDescriptor GetFileAttributesExFromAppW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileAttributesExFromAppW$FUNC() { return GetFileAttributesExFromAppW$FUNC_; }

    static final MethodHandle GetFileAttributesExFromAppW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileAttributesExFromAppW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetFileAttributesExFromAppW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileAttributesExFromAppW$MH() { return GetFileAttributesExFromAppW$MH_; }

    static final FunctionDescriptor MoveFileFromAppW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileFromAppW$FUNC() { return MoveFileFromAppW$FUNC_; }

    static final MethodHandle MoveFileFromAppW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MoveFileFromAppW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        MoveFileFromAppW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MoveFileFromAppW$MH() { return MoveFileFromAppW$MH_; }

    static final FunctionDescriptor RemoveDirectoryFromAppW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveDirectoryFromAppW$FUNC() { return RemoveDirectoryFromAppW$FUNC_; }

    static final MethodHandle RemoveDirectoryFromAppW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveDirectoryFromAppW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveDirectoryFromAppW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveDirectoryFromAppW$MH() { return RemoveDirectoryFromAppW$MH_; }

    static final FunctionDescriptor ReplaceFileFromAppW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReplaceFileFromAppW$FUNC() { return ReplaceFileFromAppW$FUNC_; }

    static final MethodHandle ReplaceFileFromAppW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReplaceFileFromAppW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReplaceFileFromAppW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReplaceFileFromAppW$MH() { return ReplaceFileFromAppW$MH_; }

    static final FunctionDescriptor SetFileAttributesFromAppW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileAttributesFromAppW$FUNC() { return SetFileAttributesFromAppW$FUNC_; }

    static final MethodHandle SetFileAttributesFromAppW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileAttributesFromAppW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetFileAttributesFromAppW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileAttributesFromAppW$MH() { return SetFileAttributesFromAppW$MH_; }

    static final FunctionDescriptor IsDebuggerPresent$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor IsDebuggerPresent$FUNC() { return IsDebuggerPresent$FUNC_; }

    static final MethodHandle IsDebuggerPresent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsDebuggerPresent",
        "()I",
        IsDebuggerPresent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsDebuggerPresent$MH() { return IsDebuggerPresent$MH_; }

    static final FunctionDescriptor DebugBreak$FUNC_ = FunctionDescriptor.ofVoid();
    public static jdk.incubator.foreign.FunctionDescriptor DebugBreak$FUNC() { return DebugBreak$FUNC_; }

    static final MethodHandle DebugBreak$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DebugBreak",
        "()V",
        DebugBreak$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DebugBreak$MH() { return DebugBreak$MH_; }

    static final FunctionDescriptor OutputDebugStringA$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OutputDebugStringA$FUNC() { return OutputDebugStringA$FUNC_; }

    static final MethodHandle OutputDebugStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OutputDebugStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        OutputDebugStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OutputDebugStringA$MH() { return OutputDebugStringA$MH_; }

    static final FunctionDescriptor OutputDebugStringW$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OutputDebugStringW$FUNC() { return OutputDebugStringW$FUNC_; }

    static final MethodHandle OutputDebugStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OutputDebugStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        OutputDebugStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OutputDebugStringW$MH() { return OutputDebugStringW$MH_; }

    static final FunctionDescriptor ContinueDebugEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ContinueDebugEvent$FUNC() { return ContinueDebugEvent$FUNC_; }

    static final MethodHandle ContinueDebugEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ContinueDebugEvent",
        "(III)I",
        ContinueDebugEvent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ContinueDebugEvent$MH() { return ContinueDebugEvent$MH_; }

    static final FunctionDescriptor WaitForDebugEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitForDebugEvent$FUNC() { return WaitForDebugEvent$FUNC_; }

    static final MethodHandle WaitForDebugEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitForDebugEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WaitForDebugEvent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitForDebugEvent$MH() { return WaitForDebugEvent$MH_; }

    static final FunctionDescriptor DebugActiveProcess$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DebugActiveProcess$FUNC() { return DebugActiveProcess$FUNC_; }

    static final MethodHandle DebugActiveProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DebugActiveProcess",
        "(I)I",
        DebugActiveProcess$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DebugActiveProcess$MH() { return DebugActiveProcess$MH_; }

    static final FunctionDescriptor DebugActiveProcessStop$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DebugActiveProcessStop$FUNC() { return DebugActiveProcessStop$FUNC_; }

    static final MethodHandle DebugActiveProcessStop$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DebugActiveProcessStop",
        "(I)I",
        DebugActiveProcessStop$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DebugActiveProcessStop$MH() { return DebugActiveProcessStop$MH_; }

    static final FunctionDescriptor CheckRemoteDebuggerPresent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CheckRemoteDebuggerPresent$FUNC() { return CheckRemoteDebuggerPresent$FUNC_; }

    static final MethodHandle CheckRemoteDebuggerPresent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckRemoteDebuggerPresent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CheckRemoteDebuggerPresent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CheckRemoteDebuggerPresent$MH() { return CheckRemoteDebuggerPresent$MH_; }

    static final FunctionDescriptor WaitForDebugEventEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitForDebugEventEx$FUNC() { return WaitForDebugEventEx$FUNC_; }

    static final MethodHandle WaitForDebugEventEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitForDebugEventEx",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WaitForDebugEventEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitForDebugEventEx$MH() { return WaitForDebugEventEx$MH_; }

    static final FunctionDescriptor EncodePointer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EncodePointer$FUNC() { return EncodePointer$FUNC_; }

    static final MethodHandle EncodePointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EncodePointer",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        EncodePointer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EncodePointer$MH() { return EncodePointer$MH_; }

    static final FunctionDescriptor DecodePointer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DecodePointer$FUNC() { return DecodePointer$FUNC_; }

    static final MethodHandle DecodePointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DecodePointer",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        DecodePointer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DecodePointer$MH() { return DecodePointer$MH_; }

    static final FunctionDescriptor EncodeSystemPointer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EncodeSystemPointer$FUNC() { return EncodeSystemPointer$FUNC_; }

    static final MethodHandle EncodeSystemPointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EncodeSystemPointer",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        EncodeSystemPointer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EncodeSystemPointer$MH() { return EncodeSystemPointer$MH_; }

    static final FunctionDescriptor DecodeSystemPointer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DecodeSystemPointer$FUNC() { return DecodeSystemPointer$FUNC_; }

    static final MethodHandle DecodeSystemPointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DecodeSystemPointer",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        DecodeSystemPointer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DecodeSystemPointer$MH() { return DecodeSystemPointer$MH_; }

    static final FunctionDescriptor EncodeRemotePointer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EncodeRemotePointer$FUNC() { return EncodeRemotePointer$FUNC_; }

    static final MethodHandle EncodeRemotePointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EncodeRemotePointer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EncodeRemotePointer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EncodeRemotePointer$MH() { return EncodeRemotePointer$MH_; }

    static final FunctionDescriptor DecodeRemotePointer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DecodeRemotePointer$FUNC() { return DecodeRemotePointer$FUNC_; }

    static final MethodHandle DecodeRemotePointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DecodeRemotePointer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DecodeRemotePointer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DecodeRemotePointer$MH() { return DecodeRemotePointer$MH_; }

    static final FunctionDescriptor Beep$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor Beep$FUNC() { return Beep$FUNC_; }

    static final MethodHandle Beep$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Beep",
        "(II)I",
        Beep$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Beep$MH() { return Beep$MH_; }

    static final FunctionDescriptor CloseHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseHandle$FUNC() { return CloseHandle$FUNC_; }

    static final MethodHandle CloseHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CloseHandle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseHandle$MH() { return CloseHandle$MH_; }

    static final FunctionDescriptor DuplicateHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DuplicateHandle$FUNC() { return DuplicateHandle$FUNC_; }

    static final MethodHandle DuplicateHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DuplicateHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        DuplicateHandle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DuplicateHandle$MH() { return DuplicateHandle$MH_; }

    static final FunctionDescriptor CompareObjectHandles$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CompareObjectHandles$FUNC() { return CompareObjectHandles$FUNC_; }

    static final MethodHandle CompareObjectHandles$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CompareObjectHandles",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CompareObjectHandles$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CompareObjectHandles$MH() { return CompareObjectHandles$MH_; }

    static final FunctionDescriptor GetHandleInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetHandleInformation$FUNC() { return GetHandleInformation$FUNC_; }

    static final MethodHandle GetHandleInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetHandleInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetHandleInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetHandleInformation$MH() { return GetHandleInformation$MH_; }

    static final FunctionDescriptor SetHandleInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetHandleInformation$FUNC() { return SetHandleInformation$FUNC_; }

    static final MethodHandle SetHandleInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetHandleInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetHandleInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetHandleInformation$MH() { return SetHandleInformation$MH_; }

    static final FunctionDescriptor RaiseException$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RaiseException$FUNC() { return RaiseException$FUNC_; }

    static final MethodHandle RaiseException$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RaiseException",
        "(IIILjdk/incubator/foreign/MemoryAddress;)V",
        RaiseException$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RaiseException$MH() { return RaiseException$MH_; }

    static final FunctionDescriptor UnhandledExceptionFilter$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnhandledExceptionFilter$FUNC() { return UnhandledExceptionFilter$FUNC_; }

    static final MethodHandle UnhandledExceptionFilter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnhandledExceptionFilter",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnhandledExceptionFilter$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnhandledExceptionFilter$MH() { return UnhandledExceptionFilter$MH_; }

    static final FunctionDescriptor SetUnhandledExceptionFilter$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetUnhandledExceptionFilter$FUNC() { return SetUnhandledExceptionFilter$FUNC_; }

    static final MethodHandle SetUnhandledExceptionFilter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetUnhandledExceptionFilter",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetUnhandledExceptionFilter$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetUnhandledExceptionFilter$MH() { return SetUnhandledExceptionFilter$MH_; }

    static final FunctionDescriptor SetUnhandledExceptionFilter$lpTopLevelExceptionFilter$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetUnhandledExceptionFilter$lpTopLevelExceptionFilter$FUNC() { return SetUnhandledExceptionFilter$lpTopLevelExceptionFilter$FUNC_; }

    static final FunctionDescriptor GetLastError$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetLastError$FUNC() { return GetLastError$FUNC_; }

    static final MethodHandle GetLastError$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLastError",
        "()I",
        GetLastError$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLastError$MH() { return GetLastError$MH_; }

    static final FunctionDescriptor SetLastError$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetLastError$FUNC() { return SetLastError$FUNC_; }

    static final MethodHandle SetLastError$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetLastError",
        "(I)V",
        SetLastError$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetLastError$MH() { return SetLastError$MH_; }

    static final FunctionDescriptor GetErrorMode$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetErrorMode$FUNC() { return GetErrorMode$FUNC_; }

    static final MethodHandle GetErrorMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetErrorMode",
        "()I",
        GetErrorMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetErrorMode$MH() { return GetErrorMode$MH_; }

    static final FunctionDescriptor SetErrorMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetErrorMode$FUNC() { return SetErrorMode$FUNC_; }

    static final MethodHandle SetErrorMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetErrorMode",
        "(I)I",
        SetErrorMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetErrorMode$MH() { return SetErrorMode$MH_; }

    static final FunctionDescriptor AddVectoredExceptionHandler$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddVectoredExceptionHandler$FUNC() { return AddVectoredExceptionHandler$FUNC_; }

    static final MethodHandle AddVectoredExceptionHandler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddVectoredExceptionHandler",
        "(ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        AddVectoredExceptionHandler$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddVectoredExceptionHandler$MH() { return AddVectoredExceptionHandler$MH_; }

    static final FunctionDescriptor AddVectoredExceptionHandler$Handler$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddVectoredExceptionHandler$Handler$FUNC() { return AddVectoredExceptionHandler$Handler$FUNC_; }

    static final FunctionDescriptor RemoveVectoredExceptionHandler$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveVectoredExceptionHandler$FUNC() { return RemoveVectoredExceptionHandler$FUNC_; }

    static final MethodHandle RemoveVectoredExceptionHandler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveVectoredExceptionHandler",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveVectoredExceptionHandler$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveVectoredExceptionHandler$MH() { return RemoveVectoredExceptionHandler$MH_; }

    static final FunctionDescriptor AddVectoredContinueHandler$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddVectoredContinueHandler$FUNC() { return AddVectoredContinueHandler$FUNC_; }

    static final MethodHandle AddVectoredContinueHandler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddVectoredContinueHandler",
        "(ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        AddVectoredContinueHandler$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddVectoredContinueHandler$MH() { return AddVectoredContinueHandler$MH_; }

    static final FunctionDescriptor AddVectoredContinueHandler$Handler$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddVectoredContinueHandler$Handler$FUNC() { return AddVectoredContinueHandler$Handler$FUNC_; }

    static final FunctionDescriptor RemoveVectoredContinueHandler$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveVectoredContinueHandler$FUNC() { return RemoveVectoredContinueHandler$FUNC_; }

    static final MethodHandle RemoveVectoredContinueHandler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveVectoredContinueHandler",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveVectoredContinueHandler$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveVectoredContinueHandler$MH() { return RemoveVectoredContinueHandler$MH_; }

    static final FunctionDescriptor RaiseFailFastException$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RaiseFailFastException$FUNC() { return RaiseFailFastException$FUNC_; }

    static final MethodHandle RaiseFailFastException$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RaiseFailFastException",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        RaiseFailFastException$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RaiseFailFastException$MH() { return RaiseFailFastException$MH_; }

    static final FunctionDescriptor FatalAppExitA$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FatalAppExitA$FUNC() { return FatalAppExitA$FUNC_; }

    static final MethodHandle FatalAppExitA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FatalAppExitA",
        "(ILjdk/incubator/foreign/MemoryAddress;)V",
        FatalAppExitA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FatalAppExitA$MH() { return FatalAppExitA$MH_; }

    static final FunctionDescriptor FatalAppExitW$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FatalAppExitW$FUNC() { return FatalAppExitW$FUNC_; }

    static final MethodHandle FatalAppExitW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FatalAppExitW",
        "(ILjdk/incubator/foreign/MemoryAddress;)V",
        FatalAppExitW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FatalAppExitW$MH() { return FatalAppExitW$MH_; }

    static final FunctionDescriptor GetThreadErrorMode$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadErrorMode$FUNC() { return GetThreadErrorMode$FUNC_; }

    static final MethodHandle GetThreadErrorMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadErrorMode",
        "()I",
        GetThreadErrorMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadErrorMode$MH() { return GetThreadErrorMode$MH_; }

    static final FunctionDescriptor SetThreadErrorMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadErrorMode$FUNC() { return SetThreadErrorMode$FUNC_; }

    static final MethodHandle SetThreadErrorMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadErrorMode",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        SetThreadErrorMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadErrorMode$MH() { return SetThreadErrorMode$MH_; }

    static final FunctionDescriptor TerminateProcessOnMemoryExhaustion$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor TerminateProcessOnMemoryExhaustion$FUNC() { return TerminateProcessOnMemoryExhaustion$FUNC_; }

    static final MethodHandle TerminateProcessOnMemoryExhaustion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TerminateProcessOnMemoryExhaustion",
        "(J)V",
        TerminateProcessOnMemoryExhaustion$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TerminateProcessOnMemoryExhaustion$MH() { return TerminateProcessOnMemoryExhaustion$MH_; }

    static final FunctionDescriptor FlsAlloc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FlsAlloc$FUNC() { return FlsAlloc$FUNC_; }

    static final MethodHandle FlsAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlsAlloc",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FlsAlloc$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FlsAlloc$MH() { return FlsAlloc$MH_; }

    static final FunctionDescriptor FlsAlloc$lpCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FlsAlloc$lpCallback$FUNC() { return FlsAlloc$lpCallback$FUNC_; }

    static final FunctionDescriptor FlsGetValue$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FlsGetValue$FUNC() { return FlsGetValue$FUNC_; }

    static final MethodHandle FlsGetValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlsGetValue",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        FlsGetValue$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FlsGetValue$MH() { return FlsGetValue$MH_; }

    static final FunctionDescriptor FlsSetValue$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FlsSetValue$FUNC() { return FlsSetValue$FUNC_; }

    static final MethodHandle FlsSetValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlsSetValue",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        FlsSetValue$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FlsSetValue$MH() { return FlsSetValue$MH_; }

    static final FunctionDescriptor FlsFree$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FlsFree$FUNC() { return FlsFree$FUNC_; }

    static final MethodHandle FlsFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlsFree",
        "(I)I",
        FlsFree$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FlsFree$MH() { return FlsFree$MH_; }

    static final FunctionDescriptor IsThreadAFiber$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor IsThreadAFiber$FUNC() { return IsThreadAFiber$FUNC_; }

    static final MethodHandle IsThreadAFiber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsThreadAFiber",
        "()I",
        IsThreadAFiber$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsThreadAFiber$MH() { return IsThreadAFiber$MH_; }

    static final FunctionDescriptor CreatePipe$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePipe$FUNC() { return CreatePipe$FUNC_; }

    static final MethodHandle CreatePipe$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePipe",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CreatePipe$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePipe$MH() { return CreatePipe$MH_; }

    static final FunctionDescriptor ConnectNamedPipe$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ConnectNamedPipe$FUNC() { return ConnectNamedPipe$FUNC_; }

    static final MethodHandle ConnectNamedPipe$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ConnectNamedPipe",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ConnectNamedPipe$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ConnectNamedPipe$MH() { return ConnectNamedPipe$MH_; }

    static final FunctionDescriptor DisconnectNamedPipe$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DisconnectNamedPipe$FUNC() { return DisconnectNamedPipe$FUNC_; }

    static final MethodHandle DisconnectNamedPipe$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DisconnectNamedPipe",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DisconnectNamedPipe$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DisconnectNamedPipe$MH() { return DisconnectNamedPipe$MH_; }

    static final FunctionDescriptor SetNamedPipeHandleState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetNamedPipeHandleState$FUNC() { return SetNamedPipeHandleState$FUNC_; }

    static final MethodHandle SetNamedPipeHandleState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetNamedPipeHandleState",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetNamedPipeHandleState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetNamedPipeHandleState$MH() { return SetNamedPipeHandleState$MH_; }

    static final FunctionDescriptor PeekNamedPipe$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor PeekNamedPipe$FUNC() { return PeekNamedPipe$FUNC_; }

    static final MethodHandle PeekNamedPipe$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PeekNamedPipe",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        PeekNamedPipe$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PeekNamedPipe$MH() { return PeekNamedPipe$MH_; }

    static final FunctionDescriptor TransactNamedPipe$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TransactNamedPipe$FUNC() { return TransactNamedPipe$FUNC_; }

    static final MethodHandle TransactNamedPipe$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TransactNamedPipe",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        TransactNamedPipe$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TransactNamedPipe$MH() { return TransactNamedPipe$MH_; }

    static final FunctionDescriptor CreateNamedPipeW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateNamedPipeW$FUNC() { return CreateNamedPipeW$FUNC_; }

    static final MethodHandle CreateNamedPipeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateNamedPipeW",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIIILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateNamedPipeW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateNamedPipeW$MH() { return CreateNamedPipeW$MH_; }

    static final FunctionDescriptor WaitNamedPipeW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitNamedPipeW$FUNC() { return WaitNamedPipeW$FUNC_; }

    static final MethodHandle WaitNamedPipeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitNamedPipeW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WaitNamedPipeW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitNamedPipeW$MH() { return WaitNamedPipeW$MH_; }

    static final FunctionDescriptor GetNamedPipeClientComputerNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNamedPipeClientComputerNameW$FUNC() { return GetNamedPipeClientComputerNameW$FUNC_; }

    static final MethodHandle GetNamedPipeClientComputerNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNamedPipeClientComputerNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetNamedPipeClientComputerNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNamedPipeClientComputerNameW$MH() { return GetNamedPipeClientComputerNameW$MH_; }

    static final FunctionDescriptor ImpersonateNamedPipeClient$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImpersonateNamedPipeClient$FUNC() { return ImpersonateNamedPipeClient$FUNC_; }

    static final MethodHandle ImpersonateNamedPipeClient$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImpersonateNamedPipeClient",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ImpersonateNamedPipeClient$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImpersonateNamedPipeClient$MH() { return ImpersonateNamedPipeClient$MH_; }

    static final FunctionDescriptor GetNamedPipeInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNamedPipeInfo$FUNC() { return GetNamedPipeInfo$FUNC_; }

    static final MethodHandle GetNamedPipeInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNamedPipeInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNamedPipeInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNamedPipeInfo$MH() { return GetNamedPipeInfo$MH_; }

    static final FunctionDescriptor GetNamedPipeHandleStateW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNamedPipeHandleStateW$FUNC() { return GetNamedPipeHandleStateW$FUNC_; }

    static final MethodHandle GetNamedPipeHandleStateW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNamedPipeHandleStateW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetNamedPipeHandleStateW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNamedPipeHandleStateW$MH() { return GetNamedPipeHandleStateW$MH_; }

    static final FunctionDescriptor CallNamedPipeW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallNamedPipeW$FUNC() { return CallNamedPipeW$FUNC_; }

    static final MethodHandle CallNamedPipeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CallNamedPipeW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CallNamedPipeW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CallNamedPipeW$MH() { return CallNamedPipeW$MH_; }

    static final FunctionDescriptor QueryPerformanceCounter$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryPerformanceCounter$FUNC() { return QueryPerformanceCounter$FUNC_; }

    static final MethodHandle QueryPerformanceCounter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryPerformanceCounter",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryPerformanceCounter$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryPerformanceCounter$MH() { return QueryPerformanceCounter$MH_; }

    static final FunctionDescriptor QueryPerformanceFrequency$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryPerformanceFrequency$FUNC() { return QueryPerformanceFrequency$FUNC_; }

    static final MethodHandle QueryPerformanceFrequency$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryPerformanceFrequency",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryPerformanceFrequency$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryPerformanceFrequency$MH() { return QueryPerformanceFrequency$MH_; }

    static final MemoryLayout _HEAP_SUMMARY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cb"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("cbAllocated"),
        C_LONGLONG.withName("cbCommitted"),
        C_LONGLONG.withName("cbReserved"),
        C_LONGLONG.withName("cbMaxReserve")
    ).withName("_HEAP_SUMMARY");
    public static jdk.incubator.foreign.MemoryLayout _HEAP_SUMMARY$struct$LAYOUT() { return _HEAP_SUMMARY$struct$LAYOUT_; }

    static final MemoryLayout _HEAP_SUMMARY$cb$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _HEAP_SUMMARY$cb$LAYOUT() { return _HEAP_SUMMARY$cb$LAYOUT_; }

    static final VarHandle _HEAP_SUMMARY$cb$VH_ = _HEAP_SUMMARY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cb"));
    public static java.lang.invoke.VarHandle _HEAP_SUMMARY$cb$VH() { return _HEAP_SUMMARY$cb$VH_; }

    static final MemoryLayout _HEAP_SUMMARY$cbAllocated$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _HEAP_SUMMARY$cbAllocated$LAYOUT() { return _HEAP_SUMMARY$cbAllocated$LAYOUT_; }

    static final VarHandle _HEAP_SUMMARY$cbAllocated$VH_ = _HEAP_SUMMARY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("cbAllocated"));
    public static java.lang.invoke.VarHandle _HEAP_SUMMARY$cbAllocated$VH() { return _HEAP_SUMMARY$cbAllocated$VH_; }

    static final MemoryLayout _HEAP_SUMMARY$cbCommitted$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _HEAP_SUMMARY$cbCommitted$LAYOUT() { return _HEAP_SUMMARY$cbCommitted$LAYOUT_; }

    static final VarHandle _HEAP_SUMMARY$cbCommitted$VH_ = _HEAP_SUMMARY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("cbCommitted"));
    public static java.lang.invoke.VarHandle _HEAP_SUMMARY$cbCommitted$VH() { return _HEAP_SUMMARY$cbCommitted$VH_; }

    static final MemoryLayout _HEAP_SUMMARY$cbReserved$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _HEAP_SUMMARY$cbReserved$LAYOUT() { return _HEAP_SUMMARY$cbReserved$LAYOUT_; }

    static final VarHandle _HEAP_SUMMARY$cbReserved$VH_ = _HEAP_SUMMARY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("cbReserved"));
    public static java.lang.invoke.VarHandle _HEAP_SUMMARY$cbReserved$VH() { return _HEAP_SUMMARY$cbReserved$VH_; }

    static final MemoryLayout _HEAP_SUMMARY$cbMaxReserve$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _HEAP_SUMMARY$cbMaxReserve$LAYOUT() { return _HEAP_SUMMARY$cbMaxReserve$LAYOUT_; }

    static final VarHandle _HEAP_SUMMARY$cbMaxReserve$VH_ = _HEAP_SUMMARY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("cbMaxReserve"));
    public static java.lang.invoke.VarHandle _HEAP_SUMMARY$cbMaxReserve$VH() { return _HEAP_SUMMARY$cbMaxReserve$VH_; }

    static final FunctionDescriptor HeapCreate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapCreate$FUNC() { return HeapCreate$FUNC_; }

    static final MethodHandle HeapCreate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapCreate",
        "(IJJ)Ljdk/incubator/foreign/MemoryAddress;",
        HeapCreate$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapCreate$MH() { return HeapCreate$MH_; }

    static final FunctionDescriptor HeapDestroy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapDestroy$FUNC() { return HeapDestroy$FUNC_; }

    static final MethodHandle HeapDestroy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapDestroy",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        HeapDestroy$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapDestroy$MH() { return HeapDestroy$MH_; }

    static final FunctionDescriptor HeapAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapAlloc$FUNC() { return HeapAlloc$FUNC_; }

    static final MethodHandle HeapAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapAlloc",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)Ljdk/incubator/foreign/MemoryAddress;",
        HeapAlloc$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapAlloc$MH() { return HeapAlloc$MH_; }

    static final FunctionDescriptor HeapReAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapReAlloc$FUNC() { return HeapReAlloc$FUNC_; }

    static final MethodHandle HeapReAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapReAlloc",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        HeapReAlloc$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapReAlloc$MH() { return HeapReAlloc$MH_; }

    static final FunctionDescriptor HeapFree$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapFree$FUNC() { return HeapFree$FUNC_; }

    static final MethodHandle HeapFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapFree",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        HeapFree$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapFree$MH() { return HeapFree$MH_; }

    static final FunctionDescriptor HeapSize$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapSize$FUNC() { return HeapSize$FUNC_; }

    static final MethodHandle HeapSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapSize",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)J",
        HeapSize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapSize$MH() { return HeapSize$MH_; }

    static final FunctionDescriptor GetProcessHeap$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessHeap$FUNC() { return GetProcessHeap$FUNC_; }

    static final MethodHandle GetProcessHeap$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessHeap",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetProcessHeap$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessHeap$MH() { return GetProcessHeap$MH_; }

    static final FunctionDescriptor HeapCompact$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapCompact$FUNC() { return HeapCompact$FUNC_; }

    static final MethodHandle HeapCompact$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapCompact",
        "(Ljdk/incubator/foreign/MemoryAddress;I)J",
        HeapCompact$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapCompact$MH() { return HeapCompact$MH_; }

    static final FunctionDescriptor HeapSetInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapSetInformation$FUNC() { return HeapSetInformation$FUNC_; }

    static final MethodHandle HeapSetInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapSetInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;J)I",
        HeapSetInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapSetInformation$MH() { return HeapSetInformation$MH_; }

    static final FunctionDescriptor HeapValidate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapValidate$FUNC() { return HeapValidate$FUNC_; }

    static final MethodHandle HeapValidate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapValidate",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        HeapValidate$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapValidate$MH() { return HeapValidate$MH_; }

    static final FunctionDescriptor HeapSummary$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapSummary$FUNC() { return HeapSummary$FUNC_; }

    static final MethodHandle HeapSummary$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapSummary",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        HeapSummary$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapSummary$MH() { return HeapSummary$MH_; }

    static final FunctionDescriptor GetProcessHeaps$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessHeaps$FUNC() { return GetProcessHeaps$FUNC_; }

    static final MethodHandle GetProcessHeaps$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessHeaps",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetProcessHeaps$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessHeaps$MH() { return GetProcessHeaps$MH_; }

    static final FunctionDescriptor HeapLock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapLock$FUNC() { return HeapLock$FUNC_; }

    static final MethodHandle HeapLock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapLock",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        HeapLock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapLock$MH() { return HeapLock$MH_; }

    static final FunctionDescriptor HeapUnlock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapUnlock$FUNC() { return HeapUnlock$FUNC_; }

    static final MethodHandle HeapUnlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapUnlock",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        HeapUnlock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapUnlock$MH() { return HeapUnlock$MH_; }

    static final FunctionDescriptor HeapWalk$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapWalk$FUNC() { return HeapWalk$FUNC_; }

    static final MethodHandle HeapWalk$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapWalk",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        HeapWalk$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapWalk$MH() { return HeapWalk$MH_; }

    static final FunctionDescriptor HeapQueryInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor HeapQueryInformation$FUNC() { return HeapQueryInformation$FUNC_; }

    static final MethodHandle HeapQueryInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HeapQueryInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        HeapQueryInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HeapQueryInformation$MH() { return HeapQueryInformation$MH_; }

    static final FunctionDescriptor CreateIoCompletionPort$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateIoCompletionPort$FUNC() { return CreateIoCompletionPort$FUNC_; }

    static final MethodHandle CreateIoCompletionPort$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateIoCompletionPort",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)Ljdk/incubator/foreign/MemoryAddress;",
        CreateIoCompletionPort$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateIoCompletionPort$MH() { return CreateIoCompletionPort$MH_; }

    static final FunctionDescriptor GetQueuedCompletionStatus$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetQueuedCompletionStatus$FUNC() { return GetQueuedCompletionStatus$FUNC_; }

    static final MethodHandle GetQueuedCompletionStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetQueuedCompletionStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetQueuedCompletionStatus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetQueuedCompletionStatus$MH() { return GetQueuedCompletionStatus$MH_; }

    static final FunctionDescriptor GetQueuedCompletionStatusEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetQueuedCompletionStatusEx$FUNC() { return GetQueuedCompletionStatusEx$FUNC_; }

    static final MethodHandle GetQueuedCompletionStatusEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetQueuedCompletionStatusEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        GetQueuedCompletionStatusEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetQueuedCompletionStatusEx$MH() { return GetQueuedCompletionStatusEx$MH_; }

    static final FunctionDescriptor PostQueuedCompletionStatus$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor PostQueuedCompletionStatus$FUNC() { return PostQueuedCompletionStatus$FUNC_; }

    static final MethodHandle PostQueuedCompletionStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PostQueuedCompletionStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I",
        PostQueuedCompletionStatus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PostQueuedCompletionStatus$MH() { return PostQueuedCompletionStatus$MH_; }

    static final FunctionDescriptor DeviceIoControl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeviceIoControl$FUNC() { return DeviceIoControl$FUNC_; }

    static final MethodHandle DeviceIoControl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeviceIoControl",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DeviceIoControl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeviceIoControl$MH() { return DeviceIoControl$MH_; }

    static final FunctionDescriptor GetOverlappedResult$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetOverlappedResult$FUNC() { return GetOverlappedResult$FUNC_; }

    static final MethodHandle GetOverlappedResult$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOverlappedResult",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetOverlappedResult$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetOverlappedResult$MH() { return GetOverlappedResult$MH_; }

    static final FunctionDescriptor CancelIoEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CancelIoEx$FUNC() { return CancelIoEx$FUNC_; }

    static final MethodHandle CancelIoEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CancelIoEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CancelIoEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CancelIoEx$MH() { return CancelIoEx$MH_; }

    static final FunctionDescriptor CancelIo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CancelIo$FUNC() { return CancelIo$FUNC_; }

    static final MethodHandle CancelIo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CancelIo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CancelIo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CancelIo$MH() { return CancelIo$MH_; }

    static final FunctionDescriptor GetOverlappedResultEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetOverlappedResultEx$FUNC() { return GetOverlappedResultEx$FUNC_; }

    static final MethodHandle GetOverlappedResultEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOverlappedResultEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        GetOverlappedResultEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetOverlappedResultEx$MH() { return GetOverlappedResultEx$MH_; }

    static final FunctionDescriptor CancelSynchronousIo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CancelSynchronousIo$FUNC() { return CancelSynchronousIo$FUNC_; }

    static final MethodHandle CancelSynchronousIo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CancelSynchronousIo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CancelSynchronousIo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CancelSynchronousIo$MH() { return CancelSynchronousIo$MH_; }

    static final FunctionDescriptor InitializeSRWLock$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeSRWLock$FUNC() { return InitializeSRWLock$FUNC_; }

    static final MethodHandle InitializeSRWLock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeSRWLock",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        InitializeSRWLock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeSRWLock$MH() { return InitializeSRWLock$MH_; }

    static final FunctionDescriptor ReleaseSRWLockExclusive$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReleaseSRWLockExclusive$FUNC() { return ReleaseSRWLockExclusive$FUNC_; }

    static final MethodHandle ReleaseSRWLockExclusive$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReleaseSRWLockExclusive",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        ReleaseSRWLockExclusive$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReleaseSRWLockExclusive$MH() { return ReleaseSRWLockExclusive$MH_; }

    static final FunctionDescriptor ReleaseSRWLockShared$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReleaseSRWLockShared$FUNC() { return ReleaseSRWLockShared$FUNC_; }

    static final MethodHandle ReleaseSRWLockShared$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReleaseSRWLockShared",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        ReleaseSRWLockShared$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReleaseSRWLockShared$MH() { return ReleaseSRWLockShared$MH_; }

    static final FunctionDescriptor AcquireSRWLockExclusive$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AcquireSRWLockExclusive$FUNC() { return AcquireSRWLockExclusive$FUNC_; }

    static final MethodHandle AcquireSRWLockExclusive$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AcquireSRWLockExclusive",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        AcquireSRWLockExclusive$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AcquireSRWLockExclusive$MH() { return AcquireSRWLockExclusive$MH_; }

    static final FunctionDescriptor AcquireSRWLockShared$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AcquireSRWLockShared$FUNC() { return AcquireSRWLockShared$FUNC_; }

    static final MethodHandle AcquireSRWLockShared$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AcquireSRWLockShared",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        AcquireSRWLockShared$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AcquireSRWLockShared$MH() { return AcquireSRWLockShared$MH_; }

    static final FunctionDescriptor TryAcquireSRWLockExclusive$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TryAcquireSRWLockExclusive$FUNC() { return TryAcquireSRWLockExclusive$FUNC_; }

    static final MethodHandle TryAcquireSRWLockExclusive$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TryAcquireSRWLockExclusive",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        TryAcquireSRWLockExclusive$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TryAcquireSRWLockExclusive$MH() { return TryAcquireSRWLockExclusive$MH_; }

    static final FunctionDescriptor TryAcquireSRWLockShared$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TryAcquireSRWLockShared$FUNC() { return TryAcquireSRWLockShared$FUNC_; }

    static final MethodHandle TryAcquireSRWLockShared$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TryAcquireSRWLockShared",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        TryAcquireSRWLockShared$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TryAcquireSRWLockShared$MH() { return TryAcquireSRWLockShared$MH_; }

    static final FunctionDescriptor InitializeCriticalSection$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeCriticalSection$FUNC() { return InitializeCriticalSection$FUNC_; }

    static final MethodHandle InitializeCriticalSection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeCriticalSection",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        InitializeCriticalSection$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeCriticalSection$MH() { return InitializeCriticalSection$MH_; }

    static final FunctionDescriptor EnterCriticalSection$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnterCriticalSection$FUNC() { return EnterCriticalSection$FUNC_; }

    static final MethodHandle EnterCriticalSection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnterCriticalSection",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        EnterCriticalSection$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnterCriticalSection$MH() { return EnterCriticalSection$MH_; }

    static final FunctionDescriptor LeaveCriticalSection$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LeaveCriticalSection$FUNC() { return LeaveCriticalSection$FUNC_; }

    static final MethodHandle LeaveCriticalSection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LeaveCriticalSection",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        LeaveCriticalSection$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LeaveCriticalSection$MH() { return LeaveCriticalSection$MH_; }

    static final FunctionDescriptor InitializeCriticalSectionAndSpinCount$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeCriticalSectionAndSpinCount$FUNC() { return InitializeCriticalSectionAndSpinCount$FUNC_; }

    static final MethodHandle InitializeCriticalSectionAndSpinCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeCriticalSectionAndSpinCount",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        InitializeCriticalSectionAndSpinCount$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeCriticalSectionAndSpinCount$MH() { return InitializeCriticalSectionAndSpinCount$MH_; }

    static final FunctionDescriptor InitializeCriticalSectionEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeCriticalSectionEx$FUNC() { return InitializeCriticalSectionEx$FUNC_; }

    static final MethodHandle InitializeCriticalSectionEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeCriticalSectionEx",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        InitializeCriticalSectionEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeCriticalSectionEx$MH() { return InitializeCriticalSectionEx$MH_; }

    static final FunctionDescriptor SetCriticalSectionSpinCount$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetCriticalSectionSpinCount$FUNC() { return SetCriticalSectionSpinCount$FUNC_; }

    static final MethodHandle SetCriticalSectionSpinCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCriticalSectionSpinCount",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetCriticalSectionSpinCount$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetCriticalSectionSpinCount$MH() { return SetCriticalSectionSpinCount$MH_; }

    static final FunctionDescriptor TryEnterCriticalSection$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TryEnterCriticalSection$FUNC() { return TryEnterCriticalSection$FUNC_; }

    static final MethodHandle TryEnterCriticalSection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TryEnterCriticalSection",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        TryEnterCriticalSection$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TryEnterCriticalSection$MH() { return TryEnterCriticalSection$MH_; }

    static final FunctionDescriptor DeleteCriticalSection$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteCriticalSection$FUNC() { return DeleteCriticalSection$FUNC_; }

    static final MethodHandle DeleteCriticalSection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteCriticalSection",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        DeleteCriticalSection$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteCriticalSection$MH() { return DeleteCriticalSection$MH_; }

    static final FunctionDescriptor InitOnceInitialize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitOnceInitialize$FUNC() { return InitOnceInitialize$FUNC_; }

    static final MethodHandle InitOnceInitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitOnceInitialize",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        InitOnceInitialize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitOnceInitialize$MH() { return InitOnceInitialize$MH_; }

    static final FunctionDescriptor InitOnceExecuteOnce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitOnceExecuteOnce$FUNC() { return InitOnceExecuteOnce$FUNC_; }

    static final MethodHandle InitOnceExecuteOnce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitOnceExecuteOnce",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        InitOnceExecuteOnce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitOnceExecuteOnce$MH() { return InitOnceExecuteOnce$MH_; }

    static final FunctionDescriptor InitOnceExecuteOnce$InitFn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitOnceExecuteOnce$InitFn$FUNC() { return InitOnceExecuteOnce$InitFn$FUNC_; }

    static final FunctionDescriptor InitOnceBeginInitialize$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitOnceBeginInitialize$FUNC() { return InitOnceBeginInitialize$FUNC_; }

    static final MethodHandle InitOnceBeginInitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitOnceBeginInitialize",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        InitOnceBeginInitialize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitOnceBeginInitialize$MH() { return InitOnceBeginInitialize$MH_; }

    static final FunctionDescriptor InitOnceComplete$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitOnceComplete$FUNC() { return InitOnceComplete$FUNC_; }

    static final MethodHandle InitOnceComplete$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitOnceComplete",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        InitOnceComplete$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitOnceComplete$MH() { return InitOnceComplete$MH_; }

    static final FunctionDescriptor InitializeConditionVariable$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeConditionVariable$FUNC() { return InitializeConditionVariable$FUNC_; }

    static final MethodHandle InitializeConditionVariable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeConditionVariable",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        InitializeConditionVariable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeConditionVariable$MH() { return InitializeConditionVariable$MH_; }

    static final FunctionDescriptor WakeConditionVariable$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WakeConditionVariable$FUNC() { return WakeConditionVariable$FUNC_; }

    static final MethodHandle WakeConditionVariable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WakeConditionVariable",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        WakeConditionVariable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WakeConditionVariable$MH() { return WakeConditionVariable$MH_; }

    static final FunctionDescriptor WakeAllConditionVariable$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WakeAllConditionVariable$FUNC() { return WakeAllConditionVariable$FUNC_; }

    static final MethodHandle WakeAllConditionVariable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WakeAllConditionVariable",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        WakeAllConditionVariable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WakeAllConditionVariable$MH() { return WakeAllConditionVariable$MH_; }

    static final FunctionDescriptor SleepConditionVariableCS$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SleepConditionVariableCS$FUNC() { return SleepConditionVariableCS$FUNC_; }

    static final MethodHandle SleepConditionVariableCS$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SleepConditionVariableCS",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SleepConditionVariableCS$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SleepConditionVariableCS$MH() { return SleepConditionVariableCS$MH_; }

    static final FunctionDescriptor SleepConditionVariableSRW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SleepConditionVariableSRW$FUNC() { return SleepConditionVariableSRW$FUNC_; }

    static final MethodHandle SleepConditionVariableSRW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SleepConditionVariableSRW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        SleepConditionVariableSRW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SleepConditionVariableSRW$MH() { return SleepConditionVariableSRW$MH_; }

    static final FunctionDescriptor SetEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetEvent$FUNC() { return SetEvent$FUNC_; }

    static final MethodHandle SetEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetEvent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetEvent$MH() { return SetEvent$MH_; }

    static final FunctionDescriptor ResetEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ResetEvent$FUNC() { return ResetEvent$FUNC_; }

    static final MethodHandle ResetEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ResetEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ResetEvent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ResetEvent$MH() { return ResetEvent$MH_; }

    static final FunctionDescriptor ReleaseSemaphore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReleaseSemaphore$FUNC() { return ReleaseSemaphore$FUNC_; }

    static final MethodHandle ReleaseSemaphore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReleaseSemaphore",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ReleaseSemaphore$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReleaseSemaphore$MH() { return ReleaseSemaphore$MH_; }

    static final FunctionDescriptor ReleaseMutex$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReleaseMutex$FUNC() { return ReleaseMutex$FUNC_; }

    static final MethodHandle ReleaseMutex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReleaseMutex",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ReleaseMutex$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReleaseMutex$MH() { return ReleaseMutex$MH_; }

    static final FunctionDescriptor WaitForSingleObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitForSingleObject$FUNC() { return WaitForSingleObject$FUNC_; }

    static final MethodHandle WaitForSingleObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitForSingleObject",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WaitForSingleObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitForSingleObject$MH() { return WaitForSingleObject$MH_; }

    static final FunctionDescriptor SleepEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SleepEx$FUNC() { return SleepEx$FUNC_; }

    static final MethodHandle SleepEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SleepEx",
        "(II)I",
        SleepEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SleepEx$MH() { return SleepEx$MH_; }

    static final FunctionDescriptor WaitForSingleObjectEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitForSingleObjectEx$FUNC() { return WaitForSingleObjectEx$FUNC_; }

    static final MethodHandle WaitForSingleObjectEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitForSingleObjectEx",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        WaitForSingleObjectEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitForSingleObjectEx$MH() { return WaitForSingleObjectEx$MH_; }

    static final FunctionDescriptor WaitForMultipleObjectsEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitForMultipleObjectsEx$FUNC() { return WaitForMultipleObjectsEx$FUNC_; }

    static final MethodHandle WaitForMultipleObjectsEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitForMultipleObjectsEx",
        "(ILjdk/incubator/foreign/MemoryAddress;III)I",
        WaitForMultipleObjectsEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitForMultipleObjectsEx$MH() { return WaitForMultipleObjectsEx$MH_; }

    static final FunctionDescriptor CreateMutexA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateMutexA$FUNC() { return CreateMutexA$FUNC_; }

    static final MethodHandle CreateMutexA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMutexA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateMutexA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateMutexA$MH() { return CreateMutexA$MH_; }

    static final FunctionDescriptor CreateMutexW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateMutexW$FUNC() { return CreateMutexW$FUNC_; }

    static final MethodHandle CreateMutexW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMutexW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateMutexW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateMutexW$MH() { return CreateMutexW$MH_; }

    static final FunctionDescriptor OpenMutexW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenMutexW$FUNC() { return OpenMutexW$FUNC_; }

    static final MethodHandle OpenMutexW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenMutexW",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenMutexW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenMutexW$MH() { return OpenMutexW$MH_; }

    static final FunctionDescriptor CreateEventA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateEventA$FUNC() { return CreateEventA$FUNC_; }

    static final MethodHandle CreateEventA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateEventA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateEventA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateEventA$MH() { return CreateEventA$MH_; }

    static final FunctionDescriptor CreateEventW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateEventW$FUNC() { return CreateEventW$FUNC_; }

    static final MethodHandle CreateEventW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateEventW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateEventW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateEventW$MH() { return CreateEventW$MH_; }

    static final FunctionDescriptor OpenEventA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenEventA$FUNC() { return OpenEventA$FUNC_; }

    static final MethodHandle OpenEventA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenEventA",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenEventA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenEventA$MH() { return OpenEventA$MH_; }

    static final FunctionDescriptor OpenEventW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenEventW$FUNC() { return OpenEventW$FUNC_; }

    static final MethodHandle OpenEventW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenEventW",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenEventW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenEventW$MH() { return OpenEventW$MH_; }

    static final FunctionDescriptor OpenSemaphoreW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenSemaphoreW$FUNC() { return OpenSemaphoreW$FUNC_; }

    static final MethodHandle OpenSemaphoreW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenSemaphoreW",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenSemaphoreW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenSemaphoreW$MH() { return OpenSemaphoreW$MH_; }

    static final FunctionDescriptor OpenWaitableTimerW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenWaitableTimerW$FUNC() { return OpenWaitableTimerW$FUNC_; }

    static final MethodHandle OpenWaitableTimerW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenWaitableTimerW",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenWaitableTimerW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenWaitableTimerW$MH() { return OpenWaitableTimerW$MH_; }

    static final FunctionDescriptor SetWaitableTimerEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWaitableTimerEx$FUNC() { return SetWaitableTimerEx$FUNC_; }

    static final MethodHandle SetWaitableTimerEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWaitableTimerEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetWaitableTimerEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWaitableTimerEx$MH() { return SetWaitableTimerEx$MH_; }

    static final FunctionDescriptor SetWaitableTimerEx$pfnCompletionRoutine$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWaitableTimerEx$pfnCompletionRoutine$FUNC() { return SetWaitableTimerEx$pfnCompletionRoutine$FUNC_; }

    static final FunctionDescriptor SetWaitableTimer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWaitableTimer$FUNC() { return SetWaitableTimer$FUNC_; }

    static final MethodHandle SetWaitableTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWaitableTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetWaitableTimer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWaitableTimer$MH() { return SetWaitableTimer$MH_; }

    static final FunctionDescriptor SetWaitableTimer$pfnCompletionRoutine$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWaitableTimer$pfnCompletionRoutine$FUNC() { return SetWaitableTimer$pfnCompletionRoutine$FUNC_; }

    static final FunctionDescriptor CancelWaitableTimer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CancelWaitableTimer$FUNC() { return CancelWaitableTimer$FUNC_; }

    static final MethodHandle CancelWaitableTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CancelWaitableTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CancelWaitableTimer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CancelWaitableTimer$MH() { return CancelWaitableTimer$MH_; }

    static final FunctionDescriptor CreateMutexExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateMutexExA$FUNC() { return CreateMutexExA$FUNC_; }

    static final MethodHandle CreateMutexExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMutexExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreateMutexExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateMutexExA$MH() { return CreateMutexExA$MH_; }

    static final FunctionDescriptor CreateMutexExW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateMutexExW$FUNC() { return CreateMutexExW$FUNC_; }

    static final MethodHandle CreateMutexExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMutexExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreateMutexExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateMutexExW$MH() { return CreateMutexExW$MH_; }

    static final FunctionDescriptor CreateEventExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateEventExA$FUNC() { return CreateEventExA$FUNC_; }

    static final MethodHandle CreateEventExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateEventExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreateEventExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateEventExA$MH() { return CreateEventExA$MH_; }

    static final FunctionDescriptor CreateEventExW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateEventExW$FUNC() { return CreateEventExW$FUNC_; }

    static final MethodHandle CreateEventExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateEventExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreateEventExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateEventExW$MH() { return CreateEventExW$MH_; }

    static final FunctionDescriptor CreateSemaphoreExW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateSemaphoreExW$FUNC() { return CreateSemaphoreExW$FUNC_; }

    static final MethodHandle CreateSemaphoreExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateSemaphoreExW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreateSemaphoreExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateSemaphoreExW$MH() { return CreateSemaphoreExW$MH_; }

    static final FunctionDescriptor CreateWaitableTimerExW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateWaitableTimerExW$FUNC() { return CreateWaitableTimerExW$FUNC_; }

    static final MethodHandle CreateWaitableTimerExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateWaitableTimerExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreateWaitableTimerExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateWaitableTimerExW$MH() { return CreateWaitableTimerExW$MH_; }

    static final FunctionDescriptor EnterSynchronizationBarrier$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnterSynchronizationBarrier$FUNC() { return EnterSynchronizationBarrier$FUNC_; }

    static final MethodHandle EnterSynchronizationBarrier$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnterSynchronizationBarrier",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        EnterSynchronizationBarrier$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnterSynchronizationBarrier$MH() { return EnterSynchronizationBarrier$MH_; }

    static final FunctionDescriptor InitializeSynchronizationBarrier$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeSynchronizationBarrier$FUNC() { return InitializeSynchronizationBarrier$FUNC_; }

    static final MethodHandle InitializeSynchronizationBarrier$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeSynchronizationBarrier",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        InitializeSynchronizationBarrier$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeSynchronizationBarrier$MH() { return InitializeSynchronizationBarrier$MH_; }

    static final FunctionDescriptor DeleteSynchronizationBarrier$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteSynchronizationBarrier$FUNC() { return DeleteSynchronizationBarrier$FUNC_; }

    static final MethodHandle DeleteSynchronizationBarrier$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteSynchronizationBarrier",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteSynchronizationBarrier$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteSynchronizationBarrier$MH() { return DeleteSynchronizationBarrier$MH_; }

    static final FunctionDescriptor Sleep$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor Sleep$FUNC() { return Sleep$FUNC_; }

    static final MethodHandle Sleep$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Sleep",
        "(I)V",
        Sleep$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Sleep$MH() { return Sleep$MH_; }

    static final FunctionDescriptor WaitOnAddress$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitOnAddress$FUNC() { return WaitOnAddress$FUNC_; }

    static final MethodHandle WaitOnAddress$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitOnAddress",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        WaitOnAddress$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitOnAddress$MH() { return WaitOnAddress$MH_; }

    static final FunctionDescriptor WakeByAddressSingle$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WakeByAddressSingle$FUNC() { return WakeByAddressSingle$FUNC_; }

    static final MethodHandle WakeByAddressSingle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WakeByAddressSingle",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        WakeByAddressSingle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WakeByAddressSingle$MH() { return WakeByAddressSingle$MH_; }

    static final FunctionDescriptor WakeByAddressAll$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WakeByAddressAll$FUNC() { return WakeByAddressAll$FUNC_; }

    static final MethodHandle WakeByAddressAll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WakeByAddressAll",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        WakeByAddressAll$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WakeByAddressAll$MH() { return WakeByAddressAll$MH_; }

    static final FunctionDescriptor SignalObjectAndWait$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SignalObjectAndWait$FUNC() { return SignalObjectAndWait$FUNC_; }

    static final MethodHandle SignalObjectAndWait$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SignalObjectAndWait",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        SignalObjectAndWait$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SignalObjectAndWait$MH() { return SignalObjectAndWait$MH_; }

    static final FunctionDescriptor WaitForMultipleObjects$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitForMultipleObjects$FUNC() { return WaitForMultipleObjects$FUNC_; }

    static final MethodHandle WaitForMultipleObjects$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitForMultipleObjects",
        "(ILjdk/incubator/foreign/MemoryAddress;II)I",
        WaitForMultipleObjects$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitForMultipleObjects$MH() { return WaitForMultipleObjects$MH_; }

    static final FunctionDescriptor CreateSemaphoreW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateSemaphoreW$FUNC() { return CreateSemaphoreW$FUNC_; }

    static final MethodHandle CreateSemaphoreW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateSemaphoreW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateSemaphoreW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateSemaphoreW$MH() { return CreateSemaphoreW$MH_; }

    static final FunctionDescriptor CreateWaitableTimerW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateWaitableTimerW$FUNC() { return CreateWaitableTimerW$FUNC_; }

    static final MethodHandle CreateWaitableTimerW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateWaitableTimerW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateWaitableTimerW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateWaitableTimerW$MH() { return CreateWaitableTimerW$MH_; }

    static final FunctionDescriptor InitializeSListHead$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeSListHead$FUNC() { return InitializeSListHead$FUNC_; }

    static final MethodHandle InitializeSListHead$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeSListHead",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        InitializeSListHead$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeSListHead$MH() { return InitializeSListHead$MH_; }

    static final FunctionDescriptor InterlockedPopEntrySList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InterlockedPopEntrySList$FUNC() { return InterlockedPopEntrySList$FUNC_; }

    static final MethodHandle InterlockedPopEntrySList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InterlockedPopEntrySList",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        InterlockedPopEntrySList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InterlockedPopEntrySList$MH() { return InterlockedPopEntrySList$MH_; }

    static final FunctionDescriptor InterlockedPushEntrySList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InterlockedPushEntrySList$FUNC() { return InterlockedPushEntrySList$FUNC_; }

    static final MethodHandle InterlockedPushEntrySList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InterlockedPushEntrySList",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        InterlockedPushEntrySList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InterlockedPushEntrySList$MH() { return InterlockedPushEntrySList$MH_; }

    static final FunctionDescriptor InterlockedPushListSListEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor InterlockedPushListSListEx$FUNC() { return InterlockedPushListSListEx$FUNC_; }

    static final MethodHandle InterlockedPushListSListEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InterlockedPushListSListEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        InterlockedPushListSListEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InterlockedPushListSListEx$MH() { return InterlockedPushListSListEx$MH_; }

    static final FunctionDescriptor InterlockedFlushSList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InterlockedFlushSList$FUNC() { return InterlockedFlushSList$FUNC_; }

    static final MethodHandle InterlockedFlushSList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InterlockedFlushSList",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        InterlockedFlushSList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InterlockedFlushSList$MH() { return InterlockedFlushSList$MH_; }

    static final FunctionDescriptor QueryDepthSList$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryDepthSList$FUNC() { return QueryDepthSList$FUNC_; }

    static final MethodHandle QueryDepthSList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryDepthSList",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        QueryDepthSList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryDepthSList$MH() { return QueryDepthSList$MH_; }

    static final MemoryLayout _PROCESS_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("hProcess"),
        C_POINTER.withName("hThread"),
        C_INT.withName("dwProcessId"),
        C_INT.withName("dwThreadId")
    ).withName("_PROCESS_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_INFORMATION$struct$LAYOUT() { return _PROCESS_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_INFORMATION$hProcess$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_INFORMATION$hProcess$LAYOUT() { return _PROCESS_INFORMATION$hProcess$LAYOUT_; }

    static final VarHandle _PROCESS_INFORMATION$hProcess$VH_ = MemoryHandles.asAddressVarHandle(_PROCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hProcess")));
    public static java.lang.invoke.VarHandle _PROCESS_INFORMATION$hProcess$VH() { return _PROCESS_INFORMATION$hProcess$VH_; }

    static final MemoryLayout _PROCESS_INFORMATION$hThread$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_INFORMATION$hThread$LAYOUT() { return _PROCESS_INFORMATION$hThread$LAYOUT_; }

    static final VarHandle _PROCESS_INFORMATION$hThread$VH_ = MemoryHandles.asAddressVarHandle(_PROCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hThread")));
    public static java.lang.invoke.VarHandle _PROCESS_INFORMATION$hThread$VH() { return _PROCESS_INFORMATION$hThread$VH_; }

    static final MemoryLayout _PROCESS_INFORMATION$dwProcessId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_INFORMATION$dwProcessId$LAYOUT() { return _PROCESS_INFORMATION$dwProcessId$LAYOUT_; }

    static final VarHandle _PROCESS_INFORMATION$dwProcessId$VH_ = _PROCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProcessId"));
    public static java.lang.invoke.VarHandle _PROCESS_INFORMATION$dwProcessId$VH() { return _PROCESS_INFORMATION$dwProcessId$VH_; }

    static final MemoryLayout _PROCESS_INFORMATION$dwThreadId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESS_INFORMATION$dwThreadId$LAYOUT() { return _PROCESS_INFORMATION$dwThreadId$LAYOUT_; }

    static final VarHandle _PROCESS_INFORMATION$dwThreadId$VH_ = _PROCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwThreadId"));
    public static java.lang.invoke.VarHandle _PROCESS_INFORMATION$dwThreadId$VH() { return _PROCESS_INFORMATION$dwThreadId$VH_; }

    static final MemoryLayout _STARTUPINFOA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cb"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpReserved"),
        C_POINTER.withName("lpDesktop"),
        C_POINTER.withName("lpTitle"),
        C_INT.withName("dwX"),
        C_INT.withName("dwY"),
        C_INT.withName("dwXSize"),
        C_INT.withName("dwYSize"),
        C_INT.withName("dwXCountChars"),
        C_INT.withName("dwYCountChars"),
        C_INT.withName("dwFillAttribute"),
        C_INT.withName("dwFlags"),
        C_SHORT.withName("wShowWindow"),
        C_SHORT.withName("cbReserved2"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpReserved2"),
        C_POINTER.withName("hStdInput"),
        C_POINTER.withName("hStdOutput"),
        C_POINTER.withName("hStdError")
    ).withName("_STARTUPINFOA");
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$struct$LAYOUT() { return _STARTUPINFOA$struct$LAYOUT_; }

    static final MemoryLayout _STARTUPINFOA$cb$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$cb$LAYOUT() { return _STARTUPINFOA$cb$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$cb$VH_ = _STARTUPINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cb"));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$cb$VH() { return _STARTUPINFOA$cb$VH_; }

    static final MemoryLayout _STARTUPINFOA$lpReserved$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$lpReserved$LAYOUT() { return _STARTUPINFOA$lpReserved$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$lpReserved$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpReserved")));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$lpReserved$VH() { return _STARTUPINFOA$lpReserved$VH_; }

    static final MemoryLayout _STARTUPINFOA$lpDesktop$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$lpDesktop$LAYOUT() { return _STARTUPINFOA$lpDesktop$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$lpDesktop$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDesktop")));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$lpDesktop$VH() { return _STARTUPINFOA$lpDesktop$VH_; }

    static final MemoryLayout _STARTUPINFOA$lpTitle$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOA$lpTitle$LAYOUT() { return _STARTUPINFOA$lpTitle$LAYOUT_; }

    static final VarHandle _STARTUPINFOA$lpTitle$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpTitle")));
    public static java.lang.invoke.VarHandle _STARTUPINFOA$lpTitle$VH() { return _STARTUPINFOA$lpTitle$VH_; }

}

