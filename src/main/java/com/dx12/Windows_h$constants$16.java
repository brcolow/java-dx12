// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$16 extends Windows_h$constants$15 {
    Windows_h$constants$16() {}
    static final MemoryLayout N$struct$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofSequence(8, C_BOOL).withName("ShortName"),
        MemoryLayout.ofStruct(
            C_INT.withName("Short"),
            C_INT.withName("Long")
        ).withName("Name"),
        MemoryLayout.ofSequence(2, C_INT).withName("LongName")
    );
    public static jdk.incubator.foreign.MemoryLayout N$struct$LAYOUT() { return N$struct$LAYOUT_; }

    static final MemoryLayout Name$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Short"),
        C_INT.withName("Long")
    );
    public static jdk.incubator.foreign.MemoryLayout Name$struct$LAYOUT() { return Name$struct$LAYOUT_; }

    static final MemoryLayout Name$Short$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Name$Short$LAYOUT() { return Name$Short$LAYOUT_; }

    static final VarHandle Name$Short$VH_ = Name$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Short"));
    public static java.lang.invoke.VarHandle Name$Short$VH() { return Name$Short$VH_; }

    static final MemoryLayout Name$Long$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Name$Long$LAYOUT() { return Name$Long$LAYOUT_; }

    static final VarHandle Name$Long$VH_ = Name$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Long"));
    public static java.lang.invoke.VarHandle Name$Long$VH() { return Name$Long$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$Value$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$Value$LAYOUT() { return _IMAGE_SYMBOL$Value$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$Value$VH_ = _IMAGE_SYMBOL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Value"));
    public static java.lang.invoke.VarHandle _IMAGE_SYMBOL$Value$VH() { return _IMAGE_SYMBOL$Value$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$SectionNumber$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$SectionNumber$LAYOUT() { return _IMAGE_SYMBOL$SectionNumber$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$SectionNumber$VH_ = _IMAGE_SYMBOL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SectionNumber"));
    public static java.lang.invoke.VarHandle _IMAGE_SYMBOL$SectionNumber$VH() { return _IMAGE_SYMBOL$SectionNumber$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$Type$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$Type$LAYOUT() { return _IMAGE_SYMBOL$Type$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$Type$VH_ = _IMAGE_SYMBOL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _IMAGE_SYMBOL$Type$VH() { return _IMAGE_SYMBOL$Type$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$StorageClass$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$StorageClass$LAYOUT() { return _IMAGE_SYMBOL$StorageClass$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$StorageClass$VH_ = _IMAGE_SYMBOL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StorageClass"));
    public static java.lang.invoke.VarHandle _IMAGE_SYMBOL$StorageClass$VH() { return _IMAGE_SYMBOL$StorageClass$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$NumberOfAuxSymbols$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$NumberOfAuxSymbols$LAYOUT() { return _IMAGE_SYMBOL$NumberOfAuxSymbols$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$NumberOfAuxSymbols$VH_ = _IMAGE_SYMBOL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("NumberOfAuxSymbols"));
    public static java.lang.invoke.VarHandle _IMAGE_SYMBOL$NumberOfAuxSymbols$VH() { return _IMAGE_SYMBOL$NumberOfAuxSymbols$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            MemoryLayout.ofSequence(8, C_BOOL).withName("ShortName"),
            MemoryLayout.ofStruct(
                C_INT.withName("Short"),
                C_INT.withName("Long")
            ).withName("Name"),
            MemoryLayout.ofSequence(2, C_INT).withName("LongName")
        ).withName("N"),
        C_INT.withName("Value"),
        C_INT.withName("SectionNumber"),
        C_SHORT.withName("Type"),
        C_BOOL.withName("StorageClass"),
        C_BOOL.withName("NumberOfAuxSymbols")
    ).withName("_IMAGE_SYMBOL_EX");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$struct$LAYOUT() { return _IMAGE_SYMBOL_EX$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$Value$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$Value$LAYOUT() { return _IMAGE_SYMBOL_EX$Value$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$Value$VH_ = _IMAGE_SYMBOL_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Value"));
    public static java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$Value$VH() { return _IMAGE_SYMBOL_EX$Value$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$SectionNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$SectionNumber$LAYOUT() { return _IMAGE_SYMBOL_EX$SectionNumber$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$SectionNumber$VH_ = _IMAGE_SYMBOL_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectionNumber"));
    public static java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$SectionNumber$VH() { return _IMAGE_SYMBOL_EX$SectionNumber$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$Type$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$Type$LAYOUT() { return _IMAGE_SYMBOL_EX$Type$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$Type$VH_ = _IMAGE_SYMBOL_EX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$Type$VH() { return _IMAGE_SYMBOL_EX$Type$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$StorageClass$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$StorageClass$LAYOUT() { return _IMAGE_SYMBOL_EX$StorageClass$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$StorageClass$VH_ = _IMAGE_SYMBOL_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StorageClass"));
    public static java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$StorageClass$VH() { return _IMAGE_SYMBOL_EX$StorageClass$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$LAYOUT() { return _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$VH_ = _IMAGE_SYMBOL_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("NumberOfAuxSymbols"));
    public static java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$VH() { return _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$VH_; }

    static final MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("bAuxType"),
        C_BOOL.withName("bReserved"),
        C_INT.withName("SymbolTableIndex"),
        MemoryLayout.ofSequence(12, C_BOOL).withName("rgbReserved")
    ).withName("IMAGE_AUX_SYMBOL_TOKEN_DEF");
    public static jdk.incubator.foreign.MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT_; }

    static final MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$LAYOUT() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$LAYOUT_; }

    static final VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$VH_ = IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bAuxType"));
    public static java.lang.invoke.VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$VH() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$VH_; }

    static final MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$LAYOUT() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$LAYOUT_; }

    static final VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$VH_ = IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bReserved"));
    public static java.lang.invoke.VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$VH() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$VH_; }

    static final MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$LAYOUT() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$LAYOUT_; }

    static final VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$VH_ = IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SymbolTableIndex"));
    public static java.lang.invoke.VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$VH() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$struct$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_INT.withName("TagIndex"),
            MemoryLayout.ofUnion(
                MemoryLayout.ofStruct(
                    C_SHORT.withName("Linenumber"),
                    C_SHORT.withName("Size")
                ).withName("LnSz"),
                C_INT.withName("TotalSize")
            ).withName("Misc"),
            MemoryLayout.ofUnion(
                MemoryLayout.ofStruct(
                    C_INT.withName("PointerToLinenumber"),
                    C_INT.withName("PointerToNextFunction")
                ).withName("Function"),
                MemoryLayout.ofStruct(
                    MemoryLayout.ofSequence(4, C_SHORT).withName("Dimension")
                ).withName("Array")
            ).withName("FcnAry"),
            C_SHORT.withName("TvIndex")
        ).withName("Sym"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(18, C_BOOL).withName("Name")
        ).withName("File"),
        MemoryLayout.ofStruct(
            C_INT.withName("Length"),
            C_SHORT.withName("NumberOfRelocations"),
            C_SHORT.withName("NumberOfLinenumbers"),
            C_INT.withName("CheckSum"),
            C_SHORT.withName("Number"),
            C_BOOL.withName("Selection"),
            C_BOOL.withName("bReserved"),
            C_SHORT.withName("HighNumber")
        ).withName("Section"),
        MemoryLayout.ofStruct(
            C_BOOL.withName("bAuxType"),
            C_BOOL.withName("bReserved"),
            C_INT.withName("SymbolTableIndex"),
            MemoryLayout.ofSequence(12, C_BOOL).withName("rgbReserved")
        ).withName("TokenDef"),
        MemoryLayout.ofStruct(
            C_INT.withName("crc"),
            MemoryLayout.ofSequence(14, C_BOOL).withName("rgbReserved")
        ).withName("CRC")
    ).withName("_IMAGE_AUX_SYMBOL");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL$struct$LAYOUT_; }

    static final MemoryLayout Sym$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("TagIndex"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_SHORT.withName("Linenumber"),
                C_SHORT.withName("Size")
            ).withName("LnSz"),
            C_INT.withName("TotalSize")
        ).withName("Misc"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_INT.withName("PointerToLinenumber"),
                C_INT.withName("PointerToNextFunction")
            ).withName("Function"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(4, C_SHORT).withName("Dimension")
            ).withName("Array")
        ).withName("FcnAry"),
        C_SHORT.withName("TvIndex")
    );
    public static jdk.incubator.foreign.MemoryLayout Sym$struct$LAYOUT() { return Sym$struct$LAYOUT_; }

    static final MemoryLayout Sym$TagIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Sym$TagIndex$LAYOUT() { return Sym$TagIndex$LAYOUT_; }

    static final VarHandle Sym$TagIndex$VH_ = Sym$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TagIndex"));
    public static java.lang.invoke.VarHandle Sym$TagIndex$VH() { return Sym$TagIndex$VH_; }

    static final MemoryLayout LnSz$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Linenumber"),
        C_SHORT.withName("Size")
    );
    public static jdk.incubator.foreign.MemoryLayout LnSz$struct$LAYOUT() { return LnSz$struct$LAYOUT_; }

    static final MemoryLayout LnSz$Linenumber$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout LnSz$Linenumber$LAYOUT() { return LnSz$Linenumber$LAYOUT_; }

    static final VarHandle LnSz$Linenumber$VH_ = LnSz$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Linenumber"));
    public static java.lang.invoke.VarHandle LnSz$Linenumber$VH() { return LnSz$Linenumber$VH_; }

    static final MemoryLayout LnSz$Size$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout LnSz$Size$LAYOUT() { return LnSz$Size$LAYOUT_; }

    static final VarHandle LnSz$Size$VH_ = LnSz$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle LnSz$Size$VH() { return LnSz$Size$VH_; }

    static final MemoryLayout Misc$TotalSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Misc$TotalSize$LAYOUT() { return Misc$TotalSize$LAYOUT_; }

    static final VarHandle Misc$TotalSize$VH_ = Misc$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalSize"));
    public static java.lang.invoke.VarHandle Misc$TotalSize$VH() { return Misc$TotalSize$VH_; }

    static final MemoryLayout FcnAry$struct$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_INT.withName("PointerToLinenumber"),
            C_INT.withName("PointerToNextFunction")
        ).withName("Function"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(4, C_SHORT).withName("Dimension")
        ).withName("Array")
    );
    public static jdk.incubator.foreign.MemoryLayout FcnAry$struct$LAYOUT() { return FcnAry$struct$LAYOUT_; }

    static final MemoryLayout Function$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("PointerToLinenumber"),
        C_INT.withName("PointerToNextFunction")
    );
    public static jdk.incubator.foreign.MemoryLayout Function$struct$LAYOUT() { return Function$struct$LAYOUT_; }

    static final MemoryLayout Function$PointerToLinenumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Function$PointerToLinenumber$LAYOUT() { return Function$PointerToLinenumber$LAYOUT_; }

    static final VarHandle Function$PointerToLinenumber$VH_ = Function$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToLinenumber"));
    public static java.lang.invoke.VarHandle Function$PointerToLinenumber$VH() { return Function$PointerToLinenumber$VH_; }

    static final MemoryLayout Function$PointerToNextFunction$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Function$PointerToNextFunction$LAYOUT() { return Function$PointerToNextFunction$LAYOUT_; }

    static final VarHandle Function$PointerToNextFunction$VH_ = Function$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToNextFunction"));
    public static java.lang.invoke.VarHandle Function$PointerToNextFunction$VH() { return Function$PointerToNextFunction$VH_; }

    static final MemoryLayout Array$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(4, C_SHORT).withName("Dimension")
    );
    public static jdk.incubator.foreign.MemoryLayout Array$struct$LAYOUT() { return Array$struct$LAYOUT_; }

    static final MemoryLayout Sym$TvIndex$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout Sym$TvIndex$LAYOUT() { return Sym$TvIndex$LAYOUT_; }

    static final VarHandle Sym$TvIndex$VH_ = Sym$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("TvIndex"));
    public static java.lang.invoke.VarHandle Sym$TvIndex$VH() { return Sym$TvIndex$VH_; }

    static final MemoryLayout File$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(18, C_BOOL).withName("Name")
    );
    public static jdk.incubator.foreign.MemoryLayout File$struct$LAYOUT() { return File$struct$LAYOUT_; }

    static final MemoryLayout Section$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Length"),
        C_SHORT.withName("NumberOfRelocations"),
        C_SHORT.withName("NumberOfLinenumbers"),
        C_INT.withName("CheckSum"),
        C_SHORT.withName("Number"),
        C_BOOL.withName("Selection"),
        C_BOOL.withName("bReserved"),
        C_SHORT.withName("HighNumber")
    );
    public static jdk.incubator.foreign.MemoryLayout Section$struct$LAYOUT() { return Section$struct$LAYOUT_; }

    static final MemoryLayout Section$Length$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Section$Length$LAYOUT() { return Section$Length$LAYOUT_; }

    static final VarHandle Section$Length$VH_ = Section$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    public static java.lang.invoke.VarHandle Section$Length$VH() { return Section$Length$VH_; }

    static final MemoryLayout Section$NumberOfRelocations$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout Section$NumberOfRelocations$LAYOUT() { return Section$NumberOfRelocations$LAYOUT_; }

    static final VarHandle Section$NumberOfRelocations$VH_ = Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfRelocations"));
    public static java.lang.invoke.VarHandle Section$NumberOfRelocations$VH() { return Section$NumberOfRelocations$VH_; }

    static final MemoryLayout Section$NumberOfLinenumbers$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout Section$NumberOfLinenumbers$LAYOUT() { return Section$NumberOfLinenumbers$LAYOUT_; }

    static final VarHandle Section$NumberOfLinenumbers$VH_ = Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfLinenumbers"));
    public static java.lang.invoke.VarHandle Section$NumberOfLinenumbers$VH() { return Section$NumberOfLinenumbers$VH_; }

    static final MemoryLayout Section$CheckSum$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Section$CheckSum$LAYOUT() { return Section$CheckSum$LAYOUT_; }

    static final VarHandle Section$CheckSum$VH_ = Section$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    public static java.lang.invoke.VarHandle Section$CheckSum$VH() { return Section$CheckSum$VH_; }

    static final MemoryLayout Section$Number$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout Section$Number$LAYOUT() { return Section$Number$LAYOUT_; }

    static final VarHandle Section$Number$VH_ = Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Number"));
    public static java.lang.invoke.VarHandle Section$Number$VH() { return Section$Number$VH_; }

    static final MemoryLayout Section$Selection$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout Section$Selection$LAYOUT() { return Section$Selection$LAYOUT_; }

    static final VarHandle Section$Selection$VH_ = Section$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Selection"));
    public static java.lang.invoke.VarHandle Section$Selection$VH() { return Section$Selection$VH_; }

    static final MemoryLayout Section$bReserved$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout Section$bReserved$LAYOUT() { return Section$bReserved$LAYOUT_; }

    static final VarHandle Section$bReserved$VH_ = Section$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bReserved"));
    public static java.lang.invoke.VarHandle Section$bReserved$VH() { return Section$bReserved$VH_; }

    static final MemoryLayout Section$HighNumber$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout Section$HighNumber$LAYOUT() { return Section$HighNumber$LAYOUT_; }

    static final VarHandle Section$HighNumber$VH_ = Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("HighNumber"));
    public static java.lang.invoke.VarHandle Section$HighNumber$VH() { return Section$HighNumber$VH_; }

    static final MemoryLayout CRC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("crc"),
        MemoryLayout.ofSequence(14, C_BOOL).withName("rgbReserved")
    );
    public static jdk.incubator.foreign.MemoryLayout CRC$struct$LAYOUT() { return CRC$struct$LAYOUT_; }

    static final MemoryLayout CRC$crc$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout CRC$crc$LAYOUT() { return CRC$crc$LAYOUT_; }

    static final VarHandle CRC$crc$VH_ = CRC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("crc"));
    public static java.lang.invoke.VarHandle CRC$crc$VH() { return CRC$crc$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$struct$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_INT.withName("WeakDefaultSymIndex"),
            C_INT.withName("WeakSearchType"),
            MemoryLayout.ofSequence(12, C_BOOL).withName("rgbReserved")
        ).withName("Sym"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(20, C_BOOL).withName("Name")
        ).withName("File"),
        MemoryLayout.ofStruct(
            C_INT.withName("Length"),
            C_SHORT.withName("NumberOfRelocations"),
            C_SHORT.withName("NumberOfLinenumbers"),
            C_INT.withName("CheckSum"),
            C_SHORT.withName("Number"),
            C_BOOL.withName("Selection"),
            C_BOOL.withName("bReserved"),
            C_SHORT.withName("HighNumber"),
            MemoryLayout.ofSequence(2, C_BOOL).withName("rgbReserved")
        ).withName("Section"),
        MemoryLayout.ofStruct(
            C_BOOL.withName("bAuxType"),
            C_BOOL.withName("bReserved"),
            C_INT.withName("SymbolTableIndex"),
            MemoryLayout.ofSequence(12, C_BOOL).withName("rgbReserved")
        ).withName("TokenDef"),
        MemoryLayout.ofSequence(2, C_BOOL).withName("rgbReserved"),
        MemoryLayout.ofStruct(
            C_INT.withName("crc"),
            MemoryLayout.ofSequence(16, C_BOOL).withName("rgbReserved")
        ).withName("CRC")
    ).withName("_IMAGE_AUX_SYMBOL_EX");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$struct$LAYOUT_; }

    static final MemoryLayout Sym$WeakDefaultSymIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Sym$WeakDefaultSymIndex$LAYOUT() { return Sym$WeakDefaultSymIndex$LAYOUT_; }

    static final VarHandle Sym$WeakDefaultSymIndex$VH_ = Sym$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WeakDefaultSymIndex"));
    public static java.lang.invoke.VarHandle Sym$WeakDefaultSymIndex$VH() { return Sym$WeakDefaultSymIndex$VH_; }

    static final MemoryLayout Sym$WeakSearchType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Sym$WeakSearchType$LAYOUT() { return Sym$WeakSearchType$LAYOUT_; }

    static final VarHandle Sym$WeakSearchType$VH_ = Sym$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WeakSearchType"));
    public static java.lang.invoke.VarHandle Sym$WeakSearchType$VH() { return Sym$WeakSearchType$VH_; }

    public static int IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF() { return (int)1L; }

    static final MemoryLayout _IMAGE_RELOCATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("VirtualAddress"),
        C_INT.withName("RelocCount"),
        C_INT.withName("SymbolTableIndex"),
        C_SHORT.withName("Type")
    ).withName("_IMAGE_RELOCATION");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RELOCATION$struct$LAYOUT() { return _IMAGE_RELOCATION$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_RELOCATION$VirtualAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RELOCATION$VirtualAddress$LAYOUT() { return _IMAGE_RELOCATION$VirtualAddress$LAYOUT_; }

    static final VarHandle _IMAGE_RELOCATION$VirtualAddress$VH_ = _IMAGE_RELOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_RELOCATION$VirtualAddress$VH() { return _IMAGE_RELOCATION$VirtualAddress$VH_; }

    static final MemoryLayout _IMAGE_RELOCATION$RelocCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RELOCATION$RelocCount$LAYOUT() { return _IMAGE_RELOCATION$RelocCount$LAYOUT_; }

    static final VarHandle _IMAGE_RELOCATION$RelocCount$VH_ = _IMAGE_RELOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RelocCount"));
    public static java.lang.invoke.VarHandle _IMAGE_RELOCATION$RelocCount$VH() { return _IMAGE_RELOCATION$RelocCount$VH_; }

    static final MemoryLayout _IMAGE_RELOCATION$SymbolTableIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RELOCATION$SymbolTableIndex$LAYOUT() { return _IMAGE_RELOCATION$SymbolTableIndex$LAYOUT_; }

    static final VarHandle _IMAGE_RELOCATION$SymbolTableIndex$VH_ = _IMAGE_RELOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SymbolTableIndex"));
    public static java.lang.invoke.VarHandle _IMAGE_RELOCATION$SymbolTableIndex$VH() { return _IMAGE_RELOCATION$SymbolTableIndex$VH_; }

    static final MemoryLayout _IMAGE_RELOCATION$Type$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RELOCATION$Type$LAYOUT() { return _IMAGE_RELOCATION$Type$LAYOUT_; }

    static final VarHandle _IMAGE_RELOCATION$Type$VH_ = _IMAGE_RELOCATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _IMAGE_RELOCATION$Type$VH() { return _IMAGE_RELOCATION$Type$VH_; }

    static final MemoryLayout _IMAGE_LINENUMBER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_INT.withName("SymbolTableIndex"),
            C_INT.withName("VirtualAddress")
        ).withName("Type"),
        C_SHORT.withName("Linenumber")
    ).withName("_IMAGE_LINENUMBER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LINENUMBER$struct$LAYOUT() { return _IMAGE_LINENUMBER$struct$LAYOUT_; }

    static final MemoryLayout Type$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_INT.withName("SymbolTableIndex"),
        C_INT.withName("VirtualAddress")
    );
    public static jdk.incubator.foreign.MemoryLayout Type$struct$LAYOUT() { return Type$struct$LAYOUT_; }

    static final MemoryLayout Type$SymbolTableIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Type$SymbolTableIndex$LAYOUT() { return Type$SymbolTableIndex$LAYOUT_; }

    static final VarHandle Type$SymbolTableIndex$VH_ = Type$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SymbolTableIndex"));
    public static java.lang.invoke.VarHandle Type$SymbolTableIndex$VH() { return Type$SymbolTableIndex$VH_; }

    static final MemoryLayout Type$VirtualAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Type$VirtualAddress$LAYOUT() { return Type$VirtualAddress$LAYOUT_; }

    static final VarHandle Type$VirtualAddress$VH_ = Type$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualAddress"));
    public static java.lang.invoke.VarHandle Type$VirtualAddress$VH() { return Type$VirtualAddress$VH_; }

    static final MemoryLayout _IMAGE_LINENUMBER$Linenumber$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LINENUMBER$Linenumber$LAYOUT() { return _IMAGE_LINENUMBER$Linenumber$LAYOUT_; }

    static final VarHandle _IMAGE_LINENUMBER$Linenumber$VH_ = _IMAGE_LINENUMBER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Linenumber"));
    public static java.lang.invoke.VarHandle _IMAGE_LINENUMBER$Linenumber$VH() { return _IMAGE_LINENUMBER$Linenumber$VH_; }

    static final MemoryLayout _IMAGE_BASE_RELOCATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("VirtualAddress"),
        C_INT.withName("SizeOfBlock")
    ).withName("_IMAGE_BASE_RELOCATION");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_BASE_RELOCATION$struct$LAYOUT() { return _IMAGE_BASE_RELOCATION$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_BASE_RELOCATION$VirtualAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_BASE_RELOCATION$VirtualAddress$LAYOUT() { return _IMAGE_BASE_RELOCATION$VirtualAddress$LAYOUT_; }

    static final VarHandle _IMAGE_BASE_RELOCATION$VirtualAddress$VH_ = _IMAGE_BASE_RELOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_BASE_RELOCATION$VirtualAddress$VH() { return _IMAGE_BASE_RELOCATION$VirtualAddress$VH_; }

    static final MemoryLayout _IMAGE_BASE_RELOCATION$SizeOfBlock$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_BASE_RELOCATION$SizeOfBlock$LAYOUT() { return _IMAGE_BASE_RELOCATION$SizeOfBlock$LAYOUT_; }

    static final VarHandle _IMAGE_BASE_RELOCATION$SizeOfBlock$VH_ = _IMAGE_BASE_RELOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfBlock"));
    public static java.lang.invoke.VarHandle _IMAGE_BASE_RELOCATION$SizeOfBlock$VH() { return _IMAGE_BASE_RELOCATION$SizeOfBlock$VH_; }

    static final MemoryLayout _IMAGE_ARCHIVE_MEMBER_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(16, C_BOOL).withName("Name"),
        MemoryLayout.ofSequence(12, C_BOOL).withName("Date"),
        MemoryLayout.ofSequence(6, C_BOOL).withName("UserID"),
        MemoryLayout.ofSequence(6, C_BOOL).withName("GroupID"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Mode"),
        MemoryLayout.ofSequence(10, C_BOOL).withName("Size"),
        MemoryLayout.ofSequence(2, C_BOOL).withName("EndHeader")
    ).withName("_IMAGE_ARCHIVE_MEMBER_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ARCHIVE_MEMBER_HEADER$struct$LAYOUT() { return _IMAGE_ARCHIVE_MEMBER_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Characteristics"),
        C_INT.withName("TimeDateStamp"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        C_INT.withName("Name"),
        C_INT.withName("Base"),
        C_INT.withName("NumberOfFunctions"),
        C_INT.withName("NumberOfNames"),
        C_INT.withName("AddressOfFunctions"),
        C_INT.withName("AddressOfNames"),
        C_INT.withName("AddressOfNameOrdinals")
    ).withName("_IMAGE_EXPORT_DIRECTORY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$Characteristics$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$Characteristics$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$Characteristics$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    public static java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$Characteristics$VH() { return _IMAGE_EXPORT_DIRECTORY$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$VH() { return _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$MajorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$MajorVersion$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$MajorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$MajorVersion$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$MajorVersion$VH() { return _IMAGE_EXPORT_DIRECTORY$MajorVersion$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$MinorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$MinorVersion$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$MinorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$MinorVersion$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$MinorVersion$VH() { return _IMAGE_EXPORT_DIRECTORY$MinorVersion$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$Name$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$Name$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$Name$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$Name$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Name"));
    public static java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$Name$VH() { return _IMAGE_EXPORT_DIRECTORY$Name$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$Base$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$Base$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$Base$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$Base$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Base"));
    public static java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$Base$VH() { return _IMAGE_EXPORT_DIRECTORY$Base$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfFunctions"));
    public static java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$VH() { return _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$NumberOfNames$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$NumberOfNames$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$NumberOfNames$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$NumberOfNames$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfNames"));
    public static java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$NumberOfNames$VH() { return _IMAGE_EXPORT_DIRECTORY$NumberOfNames$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfFunctions"));
    public static java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$VH() { return _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$AddressOfNames$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$AddressOfNames$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$AddressOfNames$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$AddressOfNames$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfNames"));
    public static java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$AddressOfNames$VH() { return _IMAGE_EXPORT_DIRECTORY$AddressOfNames$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$AddressOfNameOrdinals$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$AddressOfNameOrdinals$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$AddressOfNameOrdinals$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$AddressOfNameOrdinals$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfNameOrdinals"));
    public static java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$AddressOfNameOrdinals$VH() { return _IMAGE_EXPORT_DIRECTORY$AddressOfNameOrdinals$VH_; }

    static final MemoryLayout _IMAGE_IMPORT_BY_NAME$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Hint"),
        MemoryLayout.ofSequence(1, C_BOOL).withName("Name"),
        MemoryLayout.ofPaddingBits(8)
    ).withName("_IMAGE_IMPORT_BY_NAME");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_IMPORT_BY_NAME$struct$LAYOUT() { return _IMAGE_IMPORT_BY_NAME$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_IMPORT_BY_NAME$Hint$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_IMPORT_BY_NAME$Hint$LAYOUT() { return _IMAGE_IMPORT_BY_NAME$Hint$LAYOUT_; }

    static final VarHandle _IMAGE_IMPORT_BY_NAME$Hint$VH_ = _IMAGE_IMPORT_BY_NAME$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Hint"));
    public static java.lang.invoke.VarHandle _IMAGE_IMPORT_BY_NAME$Hint$VH() { return _IMAGE_IMPORT_BY_NAME$Hint$VH_; }

    static final MemoryLayout _IMAGE_THUNK_DATA64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONGLONG.withName("ForwarderString"),
            C_LONGLONG.withName("Function"),
            C_LONGLONG.withName("Ordinal"),
            C_LONGLONG.withName("AddressOfData")
        ).withName("u1")
    ).withName("_IMAGE_THUNK_DATA64");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_THUNK_DATA64$struct$LAYOUT() { return _IMAGE_THUNK_DATA64$struct$LAYOUT_; }

    static final MemoryLayout u1$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_LONGLONG.withName("ForwarderString"),
        C_LONGLONG.withName("Function"),
        C_LONGLONG.withName("Ordinal"),
        C_LONGLONG.withName("AddressOfData")
    );
    public static jdk.incubator.foreign.MemoryLayout u1$struct$LAYOUT() { return u1$struct$LAYOUT_; }

    static final MemoryLayout u1$ForwarderString$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout u1$ForwarderString$LAYOUT() { return u1$ForwarderString$LAYOUT_; }

    static final VarHandle u1$ForwarderString$VH_ = u1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ForwarderString"));
    public static java.lang.invoke.VarHandle u1$ForwarderString$VH() { return u1$ForwarderString$VH_; }

    static final MemoryLayout u1$Function$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout u1$Function$LAYOUT() { return u1$Function$LAYOUT_; }

    static final VarHandle u1$Function$VH_ = u1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Function"));
    public static java.lang.invoke.VarHandle u1$Function$VH() { return u1$Function$VH_; }

    static final MemoryLayout u1$Ordinal$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout u1$Ordinal$LAYOUT() { return u1$Ordinal$LAYOUT_; }

    static final VarHandle u1$Ordinal$VH_ = u1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ordinal"));
    public static java.lang.invoke.VarHandle u1$Ordinal$VH() { return u1$Ordinal$VH_; }

    static final MemoryLayout u1$AddressOfData$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout u1$AddressOfData$LAYOUT() { return u1$AddressOfData$LAYOUT_; }

    static final VarHandle u1$AddressOfData$VH_ = u1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddressOfData"));
    public static java.lang.invoke.VarHandle u1$AddressOfData$VH() { return u1$AddressOfData$VH_; }

    static final MemoryLayout _IMAGE_THUNK_DATA32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_INT.withName("ForwarderString"),
            C_INT.withName("Function"),
            C_INT.withName("Ordinal"),
            C_INT.withName("AddressOfData")
        ).withName("u1")
    ).withName("_IMAGE_THUNK_DATA32");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_THUNK_DATA32$struct$LAYOUT() { return _IMAGE_THUNK_DATA32$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartAddressOfRawData"),
        C_LONGLONG.withName("EndAddressOfRawData"),
        C_LONGLONG.withName("AddressOfIndex"),
        C_LONGLONG.withName("AddressOfCallBacks"),
        C_INT.withName("SizeOfZeroFill"),
        C_INT.withName("Characteristics"),
        C_INT
    ).withName("_IMAGE_TLS_DIRECTORY64");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY64$struct$LAYOUT() { return _IMAGE_TLS_DIRECTORY64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY64$StartAddressOfRawData$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY64$StartAddressOfRawData$LAYOUT() { return _IMAGE_TLS_DIRECTORY64$StartAddressOfRawData$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY64$StartAddressOfRawData$VH_ = _IMAGE_TLS_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartAddressOfRawData"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY64$StartAddressOfRawData$VH() { return _IMAGE_TLS_DIRECTORY64$StartAddressOfRawData$VH_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY64$EndAddressOfRawData$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY64$EndAddressOfRawData$LAYOUT() { return _IMAGE_TLS_DIRECTORY64$EndAddressOfRawData$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY64$EndAddressOfRawData$VH_ = _IMAGE_TLS_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EndAddressOfRawData"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY64$EndAddressOfRawData$VH() { return _IMAGE_TLS_DIRECTORY64$EndAddressOfRawData$VH_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY64$AddressOfIndex$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY64$AddressOfIndex$LAYOUT() { return _IMAGE_TLS_DIRECTORY64$AddressOfIndex$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY64$AddressOfIndex$VH_ = _IMAGE_TLS_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddressOfIndex"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY64$AddressOfIndex$VH() { return _IMAGE_TLS_DIRECTORY64$AddressOfIndex$VH_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY64$AddressOfCallBacks$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY64$AddressOfCallBacks$LAYOUT() { return _IMAGE_TLS_DIRECTORY64$AddressOfCallBacks$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY64$AddressOfCallBacks$VH_ = _IMAGE_TLS_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddressOfCallBacks"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY64$AddressOfCallBacks$VH() { return _IMAGE_TLS_DIRECTORY64$AddressOfCallBacks$VH_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY64$SizeOfZeroFill$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY64$SizeOfZeroFill$LAYOUT() { return _IMAGE_TLS_DIRECTORY64$SizeOfZeroFill$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY64$SizeOfZeroFill$VH_ = _IMAGE_TLS_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfZeroFill"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY64$SizeOfZeroFill$VH() { return _IMAGE_TLS_DIRECTORY64$SizeOfZeroFill$VH_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY64$Characteristics$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY64$Characteristics$LAYOUT() { return _IMAGE_TLS_DIRECTORY64$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY64$Characteristics$VH_ = _IMAGE_TLS_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY64$Characteristics$VH() { return _IMAGE_TLS_DIRECTORY64$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("StartAddressOfRawData"),
        C_INT.withName("EndAddressOfRawData"),
        C_INT.withName("AddressOfIndex"),
        C_INT.withName("AddressOfCallBacks"),
        C_INT.withName("SizeOfZeroFill"),
        C_INT.withName("Characteristics"),
        C_INT
    ).withName("_IMAGE_TLS_DIRECTORY32");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY32$struct$LAYOUT() { return _IMAGE_TLS_DIRECTORY32$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY32$StartAddressOfRawData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY32$StartAddressOfRawData$LAYOUT() { return _IMAGE_TLS_DIRECTORY32$StartAddressOfRawData$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY32$StartAddressOfRawData$VH_ = _IMAGE_TLS_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StartAddressOfRawData"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY32$StartAddressOfRawData$VH() { return _IMAGE_TLS_DIRECTORY32$StartAddressOfRawData$VH_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY32$EndAddressOfRawData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY32$EndAddressOfRawData$LAYOUT() { return _IMAGE_TLS_DIRECTORY32$EndAddressOfRawData$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY32$EndAddressOfRawData$VH_ = _IMAGE_TLS_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndAddressOfRawData"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY32$EndAddressOfRawData$VH() { return _IMAGE_TLS_DIRECTORY32$EndAddressOfRawData$VH_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY32$AddressOfIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY32$AddressOfIndex$LAYOUT() { return _IMAGE_TLS_DIRECTORY32$AddressOfIndex$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY32$AddressOfIndex$VH_ = _IMAGE_TLS_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfIndex"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY32$AddressOfIndex$VH() { return _IMAGE_TLS_DIRECTORY32$AddressOfIndex$VH_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY32$AddressOfCallBacks$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY32$AddressOfCallBacks$LAYOUT() { return _IMAGE_TLS_DIRECTORY32$AddressOfCallBacks$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY32$AddressOfCallBacks$VH_ = _IMAGE_TLS_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfCallBacks"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY32$AddressOfCallBacks$VH() { return _IMAGE_TLS_DIRECTORY32$AddressOfCallBacks$VH_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY32$SizeOfZeroFill$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY32$SizeOfZeroFill$LAYOUT() { return _IMAGE_TLS_DIRECTORY32$SizeOfZeroFill$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY32$SizeOfZeroFill$VH_ = _IMAGE_TLS_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfZeroFill"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY32$SizeOfZeroFill$VH() { return _IMAGE_TLS_DIRECTORY32$SizeOfZeroFill$VH_; }

    static final MemoryLayout _IMAGE_TLS_DIRECTORY32$Characteristics$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_TLS_DIRECTORY32$Characteristics$LAYOUT() { return _IMAGE_TLS_DIRECTORY32$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_TLS_DIRECTORY32$Characteristics$VH_ = _IMAGE_TLS_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    public static java.lang.invoke.VarHandle _IMAGE_TLS_DIRECTORY32$Characteristics$VH() { return _IMAGE_TLS_DIRECTORY32$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Characteristics"),
        C_INT.withName("OriginalFirstThunk"),
        C_INT.withName("TimeDateStamp"),
        C_INT.withName("ForwarderChain"),
        C_INT.withName("Name"),
        C_INT.withName("FirstThunk")
    ).withName("_IMAGE_IMPORT_DESCRIPTOR");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$struct$LAYOUT() { return _IMAGE_IMPORT_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$Characteristics$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$Characteristics$LAYOUT() { return _IMAGE_IMPORT_DESCRIPTOR$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_IMPORT_DESCRIPTOR$Characteristics$VH_ = _IMAGE_IMPORT_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    public static java.lang.invoke.VarHandle _IMAGE_IMPORT_DESCRIPTOR$Characteristics$VH() { return _IMAGE_IMPORT_DESCRIPTOR$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$OriginalFirstThunk$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$OriginalFirstThunk$LAYOUT() { return _IMAGE_IMPORT_DESCRIPTOR$OriginalFirstThunk$LAYOUT_; }

    static final VarHandle _IMAGE_IMPORT_DESCRIPTOR$OriginalFirstThunk$VH_ = _IMAGE_IMPORT_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OriginalFirstThunk"));
    public static java.lang.invoke.VarHandle _IMAGE_IMPORT_DESCRIPTOR$OriginalFirstThunk$VH() { return _IMAGE_IMPORT_DESCRIPTOR$OriginalFirstThunk$VH_; }

    static final MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$TimeDateStamp$LAYOUT() { return _IMAGE_IMPORT_DESCRIPTOR$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_IMPORT_DESCRIPTOR$TimeDateStamp$VH_ = _IMAGE_IMPORT_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_IMPORT_DESCRIPTOR$TimeDateStamp$VH() { return _IMAGE_IMPORT_DESCRIPTOR$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$ForwarderChain$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$ForwarderChain$LAYOUT() { return _IMAGE_IMPORT_DESCRIPTOR$ForwarderChain$LAYOUT_; }

    static final VarHandle _IMAGE_IMPORT_DESCRIPTOR$ForwarderChain$VH_ = _IMAGE_IMPORT_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ForwarderChain"));
    public static java.lang.invoke.VarHandle _IMAGE_IMPORT_DESCRIPTOR$ForwarderChain$VH() { return _IMAGE_IMPORT_DESCRIPTOR$ForwarderChain$VH_; }

    static final MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$Name$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$Name$LAYOUT() { return _IMAGE_IMPORT_DESCRIPTOR$Name$LAYOUT_; }

    static final VarHandle _IMAGE_IMPORT_DESCRIPTOR$Name$VH_ = _IMAGE_IMPORT_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Name"));
    public static java.lang.invoke.VarHandle _IMAGE_IMPORT_DESCRIPTOR$Name$VH() { return _IMAGE_IMPORT_DESCRIPTOR$Name$VH_; }

    static final MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$FirstThunk$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_IMPORT_DESCRIPTOR$FirstThunk$LAYOUT() { return _IMAGE_IMPORT_DESCRIPTOR$FirstThunk$LAYOUT_; }

    static final VarHandle _IMAGE_IMPORT_DESCRIPTOR$FirstThunk$VH_ = _IMAGE_IMPORT_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstThunk"));
    public static java.lang.invoke.VarHandle _IMAGE_IMPORT_DESCRIPTOR$FirstThunk$VH() { return _IMAGE_IMPORT_DESCRIPTOR$FirstThunk$VH_; }

    static final MemoryLayout _IMAGE_BOUND_IMPORT_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("TimeDateStamp"),
        C_SHORT.withName("OffsetModuleName"),
        C_SHORT.withName("NumberOfModuleForwarderRefs")
    ).withName("_IMAGE_BOUND_IMPORT_DESCRIPTOR");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_BOUND_IMPORT_DESCRIPTOR$struct$LAYOUT() { return _IMAGE_BOUND_IMPORT_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_BOUND_IMPORT_DESCRIPTOR$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_BOUND_IMPORT_DESCRIPTOR$TimeDateStamp$LAYOUT() { return _IMAGE_BOUND_IMPORT_DESCRIPTOR$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_BOUND_IMPORT_DESCRIPTOR$TimeDateStamp$VH_ = _IMAGE_BOUND_IMPORT_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_BOUND_IMPORT_DESCRIPTOR$TimeDateStamp$VH() { return _IMAGE_BOUND_IMPORT_DESCRIPTOR$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_BOUND_IMPORT_DESCRIPTOR$OffsetModuleName$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_BOUND_IMPORT_DESCRIPTOR$OffsetModuleName$LAYOUT() { return _IMAGE_BOUND_IMPORT_DESCRIPTOR$OffsetModuleName$LAYOUT_; }

    static final VarHandle _IMAGE_BOUND_IMPORT_DESCRIPTOR$OffsetModuleName$VH_ = _IMAGE_BOUND_IMPORT_DESCRIPTOR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("OffsetModuleName"));
    public static java.lang.invoke.VarHandle _IMAGE_BOUND_IMPORT_DESCRIPTOR$OffsetModuleName$VH() { return _IMAGE_BOUND_IMPORT_DESCRIPTOR$OffsetModuleName$VH_; }

    static final MemoryLayout _IMAGE_BOUND_IMPORT_DESCRIPTOR$NumberOfModuleForwarderRefs$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_BOUND_IMPORT_DESCRIPTOR$NumberOfModuleForwarderRefs$LAYOUT() { return _IMAGE_BOUND_IMPORT_DESCRIPTOR$NumberOfModuleForwarderRefs$LAYOUT_; }

    static final VarHandle _IMAGE_BOUND_IMPORT_DESCRIPTOR$NumberOfModuleForwarderRefs$VH_ = _IMAGE_BOUND_IMPORT_DESCRIPTOR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfModuleForwarderRefs"));
    public static java.lang.invoke.VarHandle _IMAGE_BOUND_IMPORT_DESCRIPTOR$NumberOfModuleForwarderRefs$VH() { return _IMAGE_BOUND_IMPORT_DESCRIPTOR$NumberOfModuleForwarderRefs$VH_; }

    static final MemoryLayout _IMAGE_BOUND_FORWARDER_REF$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("TimeDateStamp"),
        C_SHORT.withName("OffsetModuleName"),
        C_SHORT.withName("Reserved")
    ).withName("_IMAGE_BOUND_FORWARDER_REF");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_BOUND_FORWARDER_REF$struct$LAYOUT() { return _IMAGE_BOUND_FORWARDER_REF$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_BOUND_FORWARDER_REF$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_BOUND_FORWARDER_REF$TimeDateStamp$LAYOUT() { return _IMAGE_BOUND_FORWARDER_REF$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_BOUND_FORWARDER_REF$TimeDateStamp$VH_ = _IMAGE_BOUND_FORWARDER_REF$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_BOUND_FORWARDER_REF$TimeDateStamp$VH() { return _IMAGE_BOUND_FORWARDER_REF$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_BOUND_FORWARDER_REF$OffsetModuleName$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_BOUND_FORWARDER_REF$OffsetModuleName$LAYOUT() { return _IMAGE_BOUND_FORWARDER_REF$OffsetModuleName$LAYOUT_; }

    static final VarHandle _IMAGE_BOUND_FORWARDER_REF$OffsetModuleName$VH_ = _IMAGE_BOUND_FORWARDER_REF$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("OffsetModuleName"));
    public static java.lang.invoke.VarHandle _IMAGE_BOUND_FORWARDER_REF$OffsetModuleName$VH() { return _IMAGE_BOUND_FORWARDER_REF$OffsetModuleName$VH_; }

    static final MemoryLayout _IMAGE_BOUND_FORWARDER_REF$Reserved$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_BOUND_FORWARDER_REF$Reserved$LAYOUT() { return _IMAGE_BOUND_FORWARDER_REF$Reserved$LAYOUT_; }

    static final VarHandle _IMAGE_BOUND_FORWARDER_REF$Reserved$VH_ = _IMAGE_BOUND_FORWARDER_REF$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _IMAGE_BOUND_FORWARDER_REF$Reserved$VH() { return _IMAGE_BOUND_FORWARDER_REF$Reserved$VH_; }

    static final MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_INT.withName("AllAttributes"),
            C_INT
        ).withName("Attributes"),
        C_INT.withName("DllNameRVA"),
        C_INT.withName("ModuleHandleRVA"),
        C_INT.withName("ImportAddressTableRVA"),
        C_INT.withName("ImportNameTableRVA"),
        C_INT.withName("BoundImportAddressTableRVA"),
        C_INT.withName("UnloadInformationTableRVA"),
        C_INT.withName("TimeDateStamp")
    ).withName("_IMAGE_DELAYLOAD_DESCRIPTOR");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$struct$LAYOUT() { return _IMAGE_DELAYLOAD_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout Attributes$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_INT.withName("AllAttributes"),
        C_INT
    );
    public static jdk.incubator.foreign.MemoryLayout Attributes$struct$LAYOUT() { return Attributes$struct$LAYOUT_; }

    static final MemoryLayout Attributes$AllAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Attributes$AllAttributes$LAYOUT() { return Attributes$AllAttributes$LAYOUT_; }

    static final VarHandle Attributes$AllAttributes$VH_ = Attributes$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllAttributes"));
    public static java.lang.invoke.VarHandle Attributes$AllAttributes$VH() { return Attributes$AllAttributes$VH_; }

    static final MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$DllNameRVA$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$DllNameRVA$LAYOUT() { return _IMAGE_DELAYLOAD_DESCRIPTOR$DllNameRVA$LAYOUT_; }

    static final VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$DllNameRVA$VH_ = _IMAGE_DELAYLOAD_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DllNameRVA"));
    public static java.lang.invoke.VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$DllNameRVA$VH() { return _IMAGE_DELAYLOAD_DESCRIPTOR$DllNameRVA$VH_; }

    static final MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$ModuleHandleRVA$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$ModuleHandleRVA$LAYOUT() { return _IMAGE_DELAYLOAD_DESCRIPTOR$ModuleHandleRVA$LAYOUT_; }

    static final VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$ModuleHandleRVA$VH_ = _IMAGE_DELAYLOAD_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ModuleHandleRVA"));
    public static java.lang.invoke.VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$ModuleHandleRVA$VH() { return _IMAGE_DELAYLOAD_DESCRIPTOR$ModuleHandleRVA$VH_; }

    static final MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$ImportAddressTableRVA$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$ImportAddressTableRVA$LAYOUT() { return _IMAGE_DELAYLOAD_DESCRIPTOR$ImportAddressTableRVA$LAYOUT_; }

    static final VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$ImportAddressTableRVA$VH_ = _IMAGE_DELAYLOAD_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportAddressTableRVA"));
    public static java.lang.invoke.VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$ImportAddressTableRVA$VH() { return _IMAGE_DELAYLOAD_DESCRIPTOR$ImportAddressTableRVA$VH_; }

    static final MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$ImportNameTableRVA$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$ImportNameTableRVA$LAYOUT() { return _IMAGE_DELAYLOAD_DESCRIPTOR$ImportNameTableRVA$LAYOUT_; }

    static final VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$ImportNameTableRVA$VH_ = _IMAGE_DELAYLOAD_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportNameTableRVA"));
    public static java.lang.invoke.VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$ImportNameTableRVA$VH() { return _IMAGE_DELAYLOAD_DESCRIPTOR$ImportNameTableRVA$VH_; }

    static final MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$BoundImportAddressTableRVA$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$BoundImportAddressTableRVA$LAYOUT() { return _IMAGE_DELAYLOAD_DESCRIPTOR$BoundImportAddressTableRVA$LAYOUT_; }

    static final VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$BoundImportAddressTableRVA$VH_ = _IMAGE_DELAYLOAD_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BoundImportAddressTableRVA"));
    public static java.lang.invoke.VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$BoundImportAddressTableRVA$VH() { return _IMAGE_DELAYLOAD_DESCRIPTOR$BoundImportAddressTableRVA$VH_; }

    static final MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$UnloadInformationTableRVA$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$UnloadInformationTableRVA$LAYOUT() { return _IMAGE_DELAYLOAD_DESCRIPTOR$UnloadInformationTableRVA$LAYOUT_; }

    static final VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$UnloadInformationTableRVA$VH_ = _IMAGE_DELAYLOAD_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UnloadInformationTableRVA"));
    public static java.lang.invoke.VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$UnloadInformationTableRVA$VH() { return _IMAGE_DELAYLOAD_DESCRIPTOR$UnloadInformationTableRVA$VH_; }

    static final MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DELAYLOAD_DESCRIPTOR$TimeDateStamp$LAYOUT() { return _IMAGE_DELAYLOAD_DESCRIPTOR$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$TimeDateStamp$VH_ = _IMAGE_DELAYLOAD_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_DELAYLOAD_DESCRIPTOR$TimeDateStamp$VH() { return _IMAGE_DELAYLOAD_DESCRIPTOR$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Characteristics"),
        C_INT.withName("TimeDateStamp"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        C_SHORT.withName("NumberOfNamedEntries"),
        C_SHORT.withName("NumberOfIdEntries")
    ).withName("_IMAGE_RESOURCE_DIRECTORY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY$struct$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY$Characteristics$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY$Characteristics$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DIRECTORY$Characteristics$VH_ = _IMAGE_RESOURCE_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DIRECTORY$Characteristics$VH() { return _IMAGE_RESOURCE_DIRECTORY$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY$TimeDateStamp$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DIRECTORY$TimeDateStamp$VH_ = _IMAGE_RESOURCE_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DIRECTORY$TimeDateStamp$VH() { return _IMAGE_RESOURCE_DIRECTORY$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY$MajorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY$MajorVersion$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY$MajorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DIRECTORY$MajorVersion$VH_ = _IMAGE_RESOURCE_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DIRECTORY$MajorVersion$VH() { return _IMAGE_RESOURCE_DIRECTORY$MajorVersion$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY$MinorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY$MinorVersion$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY$MinorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DIRECTORY$MinorVersion$VH_ = _IMAGE_RESOURCE_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DIRECTORY$MinorVersion$VH() { return _IMAGE_RESOURCE_DIRECTORY$MinorVersion$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY$NumberOfNamedEntries$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY$NumberOfNamedEntries$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY$NumberOfNamedEntries$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DIRECTORY$NumberOfNamedEntries$VH_ = _IMAGE_RESOURCE_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfNamedEntries"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DIRECTORY$NumberOfNamedEntries$VH() { return _IMAGE_RESOURCE_DIRECTORY$NumberOfNamedEntries$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY$NumberOfIdEntries$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY$NumberOfIdEntries$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY$NumberOfIdEntries$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DIRECTORY$NumberOfIdEntries$VH_ = _IMAGE_RESOURCE_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfIdEntries"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DIRECTORY$NumberOfIdEntries$VH() { return _IMAGE_RESOURCE_DIRECTORY$NumberOfIdEntries$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT,
        C_INT.withName("Name"),
        C_SHORT.withName("Id"),
        C_INT.withName("OffsetToData"),
        C_INT
    ).withName("_IMAGE_RESOURCE_DIRECTORY_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY_ENTRY$struct$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY_ENTRY$Name$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY_ENTRY$Name$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY_ENTRY$Name$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DIRECTORY_ENTRY$Name$VH_ = _IMAGE_RESOURCE_DIRECTORY_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Name"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DIRECTORY_ENTRY$Name$VH() { return _IMAGE_RESOURCE_DIRECTORY_ENTRY$Name$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY_ENTRY$Id$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY_ENTRY$Id$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY_ENTRY$Id$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DIRECTORY_ENTRY$Id$VH_ = _IMAGE_RESOURCE_DIRECTORY_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Id"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DIRECTORY_ENTRY$Id$VH() { return _IMAGE_RESOURCE_DIRECTORY_ENTRY$Id$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY_ENTRY$OffsetToData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY_ENTRY$OffsetToData$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY_ENTRY$OffsetToData$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DIRECTORY_ENTRY$OffsetToData$VH_ = _IMAGE_RESOURCE_DIRECTORY_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OffsetToData"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DIRECTORY_ENTRY$OffsetToData$VH() { return _IMAGE_RESOURCE_DIRECTORY_ENTRY$OffsetToData$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY_STRING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Length"),
        MemoryLayout.ofSequence(1, C_BOOL).withName("NameString"),
        MemoryLayout.ofPaddingBits(8)
    ).withName("_IMAGE_RESOURCE_DIRECTORY_STRING");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY_STRING$struct$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY_STRING$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIRECTORY_STRING$Length$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIRECTORY_STRING$Length$LAYOUT() { return _IMAGE_RESOURCE_DIRECTORY_STRING$Length$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DIRECTORY_STRING$Length$VH_ = _IMAGE_RESOURCE_DIRECTORY_STRING$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Length"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DIRECTORY_STRING$Length$VH() { return _IMAGE_RESOURCE_DIRECTORY_STRING$Length$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIR_STRING_U$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Length"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("NameString")
    ).withName("_IMAGE_RESOURCE_DIR_STRING_U");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIR_STRING_U$struct$LAYOUT() { return _IMAGE_RESOURCE_DIR_STRING_U$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_RESOURCE_DIR_STRING_U$Length$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DIR_STRING_U$Length$LAYOUT() { return _IMAGE_RESOURCE_DIR_STRING_U$Length$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DIR_STRING_U$Length$VH_ = _IMAGE_RESOURCE_DIR_STRING_U$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Length"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DIR_STRING_U$Length$VH() { return _IMAGE_RESOURCE_DIR_STRING_U$Length$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DATA_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("OffsetToData"),
        C_INT.withName("Size"),
        C_INT.withName("CodePage"),
        C_INT.withName("Reserved")
    ).withName("_IMAGE_RESOURCE_DATA_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DATA_ENTRY$struct$LAYOUT() { return _IMAGE_RESOURCE_DATA_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_RESOURCE_DATA_ENTRY$OffsetToData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DATA_ENTRY$OffsetToData$LAYOUT() { return _IMAGE_RESOURCE_DATA_ENTRY$OffsetToData$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DATA_ENTRY$OffsetToData$VH_ = _IMAGE_RESOURCE_DATA_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OffsetToData"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DATA_ENTRY$OffsetToData$VH() { return _IMAGE_RESOURCE_DATA_ENTRY$OffsetToData$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DATA_ENTRY$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DATA_ENTRY$Size$LAYOUT() { return _IMAGE_RESOURCE_DATA_ENTRY$Size$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DATA_ENTRY$Size$VH_ = _IMAGE_RESOURCE_DATA_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DATA_ENTRY$Size$VH() { return _IMAGE_RESOURCE_DATA_ENTRY$Size$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DATA_ENTRY$CodePage$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DATA_ENTRY$CodePage$LAYOUT() { return _IMAGE_RESOURCE_DATA_ENTRY$CodePage$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DATA_ENTRY$CodePage$VH_ = _IMAGE_RESOURCE_DATA_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CodePage"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DATA_ENTRY$CodePage$VH() { return _IMAGE_RESOURCE_DATA_ENTRY$CodePage$VH_; }

    static final MemoryLayout _IMAGE_RESOURCE_DATA_ENTRY$Reserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RESOURCE_DATA_ENTRY$Reserved$LAYOUT() { return _IMAGE_RESOURCE_DATA_ENTRY$Reserved$LAYOUT_; }

    static final VarHandle _IMAGE_RESOURCE_DATA_ENTRY$Reserved$VH_ = _IMAGE_RESOURCE_DATA_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _IMAGE_RESOURCE_DATA_ENTRY$Reserved$VH() { return _IMAGE_RESOURCE_DATA_ENTRY$Reserved$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Flags"),
        C_SHORT.withName("Catalog"),
        C_INT.withName("CatalogOffset"),
        C_INT.withName("Reserved")
    ).withName("_IMAGE_LOAD_CONFIG_CODE_INTEGRITY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$struct$LAYOUT() { return _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Flags$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Flags$LAYOUT() { return _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Flags$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Flags$VH_ = _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Flags$VH() { return _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Flags$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Catalog$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Catalog$LAYOUT() { return _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Catalog$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Catalog$VH_ = _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Catalog"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Catalog$VH() { return _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Catalog$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$CatalogOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$CatalogOffset$LAYOUT() { return _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$CatalogOffset$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$CatalogOffset$VH_ = _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CatalogOffset"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$CatalogOffset$VH() { return _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$CatalogOffset$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Reserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Reserved$LAYOUT() { return _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Reserved$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Reserved$VH_ = _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Reserved$VH() { return _IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Reserved$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION_TABLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Version"),
        C_INT.withName("Size")
    ).withName("_IMAGE_DYNAMIC_RELOCATION_TABLE");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION_TABLE$struct$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION_TABLE$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION_TABLE$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION_TABLE$Version$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION_TABLE$Version$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION_TABLE$Version$VH_ = _IMAGE_DYNAMIC_RELOCATION_TABLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION_TABLE$Version$VH() { return _IMAGE_DYNAMIC_RELOCATION_TABLE$Version$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION_TABLE$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION_TABLE$Size$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION_TABLE$Size$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION_TABLE$Size$VH_ = _IMAGE_DYNAMIC_RELOCATION_TABLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION_TABLE$Size$VH() { return _IMAGE_DYNAMIC_RELOCATION_TABLE$Size$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Symbol"),
        C_INT.withName("BaseRelocSize")
    ).withName("_IMAGE_DYNAMIC_RELOCATION32");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION32$struct$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION32$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION32$Symbol$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION32$Symbol$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION32$Symbol$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION32$Symbol$VH_ = _IMAGE_DYNAMIC_RELOCATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Symbol"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION32$Symbol$VH() { return _IMAGE_DYNAMIC_RELOCATION32$Symbol$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION32$BaseRelocSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION32$BaseRelocSize$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION32$BaseRelocSize$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION32$BaseRelocSize$VH_ = _IMAGE_DYNAMIC_RELOCATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseRelocSize"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION32$BaseRelocSize$VH() { return _IMAGE_DYNAMIC_RELOCATION32$BaseRelocSize$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Symbol"),
        C_INT.withName("BaseRelocSize")
    ).withName("_IMAGE_DYNAMIC_RELOCATION64");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION64$struct$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION64$Symbol$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION64$Symbol$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION64$Symbol$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION64$Symbol$VH_ = _IMAGE_DYNAMIC_RELOCATION64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Symbol"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION64$Symbol$VH() { return _IMAGE_DYNAMIC_RELOCATION64$Symbol$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION64$BaseRelocSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION64$BaseRelocSize$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION64$BaseRelocSize$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION64$BaseRelocSize$VH_ = _IMAGE_DYNAMIC_RELOCATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseRelocSize"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION64$BaseRelocSize$VH() { return _IMAGE_DYNAMIC_RELOCATION64$BaseRelocSize$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("HeaderSize"),
        C_INT.withName("FixupInfoSize"),
        C_INT.withName("Symbol"),
        C_INT.withName("SymbolGroup"),
        C_INT.withName("Flags")
    ).withName("_IMAGE_DYNAMIC_RELOCATION32_V2");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$struct$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION32_V2$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$HeaderSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$HeaderSize$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION32_V2$HeaderSize$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION32_V2$HeaderSize$VH_ = _IMAGE_DYNAMIC_RELOCATION32_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HeaderSize"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION32_V2$HeaderSize$VH() { return _IMAGE_DYNAMIC_RELOCATION32_V2$HeaderSize$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$FixupInfoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$FixupInfoSize$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION32_V2$FixupInfoSize$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION32_V2$FixupInfoSize$VH_ = _IMAGE_DYNAMIC_RELOCATION32_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FixupInfoSize"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION32_V2$FixupInfoSize$VH() { return _IMAGE_DYNAMIC_RELOCATION32_V2$FixupInfoSize$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$Symbol$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$Symbol$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION32_V2$Symbol$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION32_V2$Symbol$VH_ = _IMAGE_DYNAMIC_RELOCATION32_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Symbol"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION32_V2$Symbol$VH() { return _IMAGE_DYNAMIC_RELOCATION32_V2$Symbol$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$SymbolGroup$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$SymbolGroup$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION32_V2$SymbolGroup$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION32_V2$SymbolGroup$VH_ = _IMAGE_DYNAMIC_RELOCATION32_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SymbolGroup"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION32_V2$SymbolGroup$VH() { return _IMAGE_DYNAMIC_RELOCATION32_V2$SymbolGroup$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION32_V2$Flags$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION32_V2$Flags$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION32_V2$Flags$VH_ = _IMAGE_DYNAMIC_RELOCATION32_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION32_V2$Flags$VH() { return _IMAGE_DYNAMIC_RELOCATION32_V2$Flags$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("HeaderSize"),
        C_INT.withName("FixupInfoSize"),
        C_LONGLONG.withName("Symbol"),
        C_INT.withName("SymbolGroup"),
        C_INT.withName("Flags")
    ).withName("_IMAGE_DYNAMIC_RELOCATION64_V2");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$struct$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION64_V2$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$HeaderSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$HeaderSize$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION64_V2$HeaderSize$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION64_V2$HeaderSize$VH_ = _IMAGE_DYNAMIC_RELOCATION64_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HeaderSize"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION64_V2$HeaderSize$VH() { return _IMAGE_DYNAMIC_RELOCATION64_V2$HeaderSize$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$FixupInfoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$FixupInfoSize$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION64_V2$FixupInfoSize$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION64_V2$FixupInfoSize$VH_ = _IMAGE_DYNAMIC_RELOCATION64_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FixupInfoSize"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION64_V2$FixupInfoSize$VH() { return _IMAGE_DYNAMIC_RELOCATION64_V2$FixupInfoSize$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$Symbol$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$Symbol$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION64_V2$Symbol$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION64_V2$Symbol$VH_ = _IMAGE_DYNAMIC_RELOCATION64_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Symbol"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION64_V2$Symbol$VH() { return _IMAGE_DYNAMIC_RELOCATION64_V2$Symbol$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$SymbolGroup$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$SymbolGroup$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION64_V2$SymbolGroup$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION64_V2$SymbolGroup$VH_ = _IMAGE_DYNAMIC_RELOCATION64_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SymbolGroup"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION64_V2$SymbolGroup$VH() { return _IMAGE_DYNAMIC_RELOCATION64_V2$SymbolGroup$VH_; }

    static final MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DYNAMIC_RELOCATION64_V2$Flags$LAYOUT() { return _IMAGE_DYNAMIC_RELOCATION64_V2$Flags$LAYOUT_; }

    static final VarHandle _IMAGE_DYNAMIC_RELOCATION64_V2$Flags$VH_ = _IMAGE_DYNAMIC_RELOCATION64_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _IMAGE_DYNAMIC_RELOCATION64_V2$Flags$VH() { return _IMAGE_DYNAMIC_RELOCATION64_V2$Flags$VH_; }

    static final MemoryLayout _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("PrologueByteCount")
    ).withName("_IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT() { return _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$PrologueByteCount$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$PrologueByteCount$LAYOUT() { return _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$PrologueByteCount$LAYOUT_; }

    static final VarHandle _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$PrologueByteCount$VH_ = _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PrologueByteCount"));
    public static java.lang.invoke.VarHandle _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$PrologueByteCount$VH() { return _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$PrologueByteCount$VH_; }

    static final MemoryLayout _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("EpilogueCount"),
        C_BOOL.withName("EpilogueByteCount"),
        C_BOOL.withName("BranchDescriptorElementSize"),
        C_SHORT.withName("BranchDescriptorCount")
    ).withName("_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT() { return _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueCount$LAYOUT() { return _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueCount$LAYOUT_; }

    static final VarHandle _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueCount$VH_ = _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EpilogueCount"));
    public static java.lang.invoke.VarHandle _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueCount$VH() { return _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueCount$VH_; }

    static final MemoryLayout _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueByteCount$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueByteCount$LAYOUT() { return _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueByteCount$LAYOUT_; }

    static final VarHandle _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueByteCount$VH_ = _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EpilogueByteCount"));
    public static java.lang.invoke.VarHandle _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueByteCount$VH() { return _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueByteCount$VH_; }

    static final MemoryLayout _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorElementSize$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorElementSize$LAYOUT() { return _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorElementSize$LAYOUT_; }

    static final VarHandle _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorElementSize$VH_ = _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BranchDescriptorElementSize"));
    public static java.lang.invoke.VarHandle _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorElementSize$VH() { return _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorElementSize$VH_; }

    static final MemoryLayout _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorCount$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorCount$LAYOUT() { return _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorCount$LAYOUT_; }

    static final VarHandle _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorCount$VH_ = _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("BranchDescriptorCount"));
    public static java.lang.invoke.VarHandle _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorCount$VH() { return _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorCount$VH_; }

    static final MemoryLayout _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT
    ).withName("_IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION$struct$LAYOUT() { return _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT
    ).withName("_IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION$struct$LAYOUT() { return _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT
    ).withName("_IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION$struct$LAYOUT() { return _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        C_INT.withName("TimeDateStamp"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        C_INT.withName("GlobalFlagsClear"),
        C_INT.withName("GlobalFlagsSet"),
        C_INT.withName("CriticalSectionDefaultTimeout"),
        C_INT.withName("DeCommitFreeBlockThreshold"),
        C_INT.withName("DeCommitTotalFreeThreshold"),
        C_INT.withName("LockPrefixTable"),
        C_INT.withName("MaximumAllocationSize"),
        C_INT.withName("VirtualMemoryThreshold"),
        C_INT.withName("ProcessHeapFlags"),
        C_INT.withName("ProcessAffinityMask"),
        C_SHORT.withName("CSDVersion"),
        C_SHORT.withName("DependentLoadFlags"),
        C_INT.withName("EditList"),
        C_INT.withName("SecurityCookie"),
        C_INT.withName("SEHandlerTable"),
        C_INT.withName("SEHandlerCount"),
        C_INT.withName("GuardCFCheckFunctionPointer"),
        C_INT.withName("GuardCFDispatchFunctionPointer"),
        C_INT.withName("GuardCFFunctionTable"),
        C_INT.withName("GuardCFFunctionCount"),
        C_INT.withName("GuardFlags"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Flags"),
            C_SHORT.withName("Catalog"),
            C_INT.withName("CatalogOffset"),
            C_INT.withName("Reserved")
        ).withName("CodeIntegrity"),
        C_INT.withName("GuardAddressTakenIatEntryTable"),
        C_INT.withName("GuardAddressTakenIatEntryCount"),
        C_INT.withName("GuardLongJumpTargetTable"),
        C_INT.withName("GuardLongJumpTargetCount"),
        C_INT.withName("DynamicValueRelocTable"),
        C_INT.withName("CHPEMetadataPointer"),
        C_INT.withName("GuardRFFailureRoutine"),
        C_INT.withName("GuardRFFailureRoutineFunctionPointer"),
        C_INT.withName("DynamicValueRelocTableOffset"),
        C_SHORT.withName("DynamicValueRelocTableSection"),
        C_SHORT.withName("Reserved2"),
        C_INT.withName("GuardRFVerifyStackPointerFunctionPointer"),
        C_INT.withName("HotPatchTableOffset"),
        C_INT.withName("Reserved3"),
        C_INT.withName("EnclaveConfigurationPointer"),
        C_INT.withName("VolatileMetadataPointer"),
        C_INT.withName("GuardEHContinuationTable"),
        C_INT.withName("GuardEHContinuationCount")
    ).withName("_IMAGE_LOAD_CONFIG_DIRECTORY32");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$Size$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$Size$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$Size$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$Size$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$Size$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$TimeDateStamp$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$TimeDateStamp$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$TimeDateStamp$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$MajorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$MajorVersion$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$MajorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$MajorVersion$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$MajorVersion$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$MajorVersion$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$MinorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$MinorVersion$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$MinorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$MinorVersion$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$MinorVersion$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$MinorVersion$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsClear$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsClear$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsClear$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsClear$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GlobalFlagsClear"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsClear$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsClear$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsSet$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsSet$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsSet$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsSet$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GlobalFlagsSet"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsSet$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsSet$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$CriticalSectionDefaultTimeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$CriticalSectionDefaultTimeout$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$CriticalSectionDefaultTimeout$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$CriticalSectionDefaultTimeout$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CriticalSectionDefaultTimeout"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$CriticalSectionDefaultTimeout$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$CriticalSectionDefaultTimeout$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitFreeBlockThreshold$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitFreeBlockThreshold$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitFreeBlockThreshold$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitFreeBlockThreshold$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeCommitFreeBlockThreshold"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitFreeBlockThreshold$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitFreeBlockThreshold$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitTotalFreeThreshold$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitTotalFreeThreshold$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitTotalFreeThreshold$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitTotalFreeThreshold$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeCommitTotalFreeThreshold"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitTotalFreeThreshold$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitTotalFreeThreshold$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$LockPrefixTable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$LockPrefixTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$LockPrefixTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$LockPrefixTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LockPrefixTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$LockPrefixTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$LockPrefixTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$MaximumAllocationSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$MaximumAllocationSize$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$MaximumAllocationSize$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$MaximumAllocationSize$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaximumAllocationSize"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$MaximumAllocationSize$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$MaximumAllocationSize$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$VirtualMemoryThreshold$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$VirtualMemoryThreshold$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$VirtualMemoryThreshold$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$VirtualMemoryThreshold$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualMemoryThreshold"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$VirtualMemoryThreshold$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$VirtualMemoryThreshold$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessHeapFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessHeapFlags$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessHeapFlags$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessHeapFlags$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ProcessHeapFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessHeapFlags$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessHeapFlags$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessAffinityMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessAffinityMask$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessAffinityMask$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessAffinityMask$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ProcessAffinityMask"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessAffinityMask$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessAffinityMask$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$CSDVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$CSDVersion$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$CSDVersion$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$CSDVersion$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CSDVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$CSDVersion$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$CSDVersion$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DependentLoadFlags$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DependentLoadFlags$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DependentLoadFlags$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DependentLoadFlags$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DependentLoadFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DependentLoadFlags$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DependentLoadFlags$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$EditList$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$EditList$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$EditList$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$EditList$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EditList"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$EditList$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$EditList$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$SecurityCookie$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$SecurityCookie$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$SecurityCookie$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$SecurityCookie$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityCookie"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$SecurityCookie$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$SecurityCookie$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerTable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SEHandlerTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerCount$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerCount$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerCount$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SEHandlerCount"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerCount$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerCount$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFCheckFunctionPointer$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFCheckFunctionPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFCheckFunctionPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFCheckFunctionPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardCFCheckFunctionPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFCheckFunctionPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFCheckFunctionPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFDispatchFunctionPointer$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFDispatchFunctionPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFDispatchFunctionPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFDispatchFunctionPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardCFDispatchFunctionPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFDispatchFunctionPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFDispatchFunctionPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionTable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardCFFunctionTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionCount$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionCount$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionCount$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardCFFunctionCount"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionCount$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionCount$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardFlags$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardFlags$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardFlags$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardFlags$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardFlags$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryTable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardAddressTakenIatEntryTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryCount$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryCount$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryCount$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardAddressTakenIatEntryCount"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryCount$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryCount$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetTable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardLongJumpTargetTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetCount$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetCount$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetCount$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardLongJumpTargetCount"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetCount$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetCount$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DynamicValueRelocTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$CHPEMetadataPointer$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$CHPEMetadataPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$CHPEMetadataPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$CHPEMetadataPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CHPEMetadataPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$CHPEMetadataPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$CHPEMetadataPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutine$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutine$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutine$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutine$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardRFFailureRoutine"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutine$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutine$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutineFunctionPointer$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutineFunctionPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutineFunctionPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutineFunctionPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardRFFailureRoutineFunctionPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutineFunctionPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutineFunctionPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableOffset$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableOffset$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableOffset$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DynamicValueRelocTableOffset"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableOffset$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableOffset$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableSection$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableSection$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableSection$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableSection$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DynamicValueRelocTableSection"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableSection$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableSection$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved2$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved2$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved2$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved2$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved2$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved2$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFVerifyStackPointerFunctionPointer$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFVerifyStackPointerFunctionPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFVerifyStackPointerFunctionPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFVerifyStackPointerFunctionPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardRFVerifyStackPointerFunctionPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFVerifyStackPointerFunctionPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFVerifyStackPointerFunctionPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$HotPatchTableOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$HotPatchTableOffset$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$HotPatchTableOffset$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$HotPatchTableOffset$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HotPatchTableOffset"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$HotPatchTableOffset$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$HotPatchTableOffset$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved3$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved3$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved3$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved3$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved3"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved3$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved3$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$EnclaveConfigurationPointer$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$EnclaveConfigurationPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$EnclaveConfigurationPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$EnclaveConfigurationPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EnclaveConfigurationPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$EnclaveConfigurationPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$EnclaveConfigurationPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$VolatileMetadataPointer$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$VolatileMetadataPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$VolatileMetadataPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$VolatileMetadataPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VolatileMetadataPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$VolatileMetadataPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$VolatileMetadataPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationTable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardEHContinuationTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationCount$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationCount$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationCount$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardEHContinuationCount"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationCount$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationCount$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        C_INT.withName("TimeDateStamp"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        C_INT.withName("GlobalFlagsClear"),
        C_INT.withName("GlobalFlagsSet"),
        C_INT.withName("CriticalSectionDefaultTimeout"),
        C_LONGLONG.withName("DeCommitFreeBlockThreshold"),
        C_LONGLONG.withName("DeCommitTotalFreeThreshold"),
        C_LONGLONG.withName("LockPrefixTable"),
        C_LONGLONG.withName("MaximumAllocationSize"),
        C_LONGLONG.withName("VirtualMemoryThreshold"),
        C_LONGLONG.withName("ProcessAffinityMask"),
        C_INT.withName("ProcessHeapFlags"),
        C_SHORT.withName("CSDVersion"),
        C_SHORT.withName("DependentLoadFlags"),
        C_LONGLONG.withName("EditList"),
        C_LONGLONG.withName("SecurityCookie"),
        C_LONGLONG.withName("SEHandlerTable"),
        C_LONGLONG.withName("SEHandlerCount"),
        C_LONGLONG.withName("GuardCFCheckFunctionPointer"),
        C_LONGLONG.withName("GuardCFDispatchFunctionPointer"),
        C_LONGLONG.withName("GuardCFFunctionTable"),
        C_LONGLONG.withName("GuardCFFunctionCount"),
        C_INT.withName("GuardFlags"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Flags"),
            C_SHORT.withName("Catalog"),
            C_INT.withName("CatalogOffset"),
            C_INT.withName("Reserved")
        ).withName("CodeIntegrity"),
        C_LONGLONG.withName("GuardAddressTakenIatEntryTable"),
        C_LONGLONG.withName("GuardAddressTakenIatEntryCount"),
        C_LONGLONG.withName("GuardLongJumpTargetTable"),
        C_LONGLONG.withName("GuardLongJumpTargetCount"),
        C_LONGLONG.withName("DynamicValueRelocTable"),
        C_LONGLONG.withName("CHPEMetadataPointer"),
        C_LONGLONG.withName("GuardRFFailureRoutine"),
        C_LONGLONG.withName("GuardRFFailureRoutineFunctionPointer"),
        C_INT.withName("DynamicValueRelocTableOffset"),
        C_SHORT.withName("DynamicValueRelocTableSection"),
        C_SHORT.withName("Reserved2"),
        C_LONGLONG.withName("GuardRFVerifyStackPointerFunctionPointer"),
        C_INT.withName("HotPatchTableOffset"),
        C_INT.withName("Reserved3"),
        C_LONGLONG.withName("EnclaveConfigurationPointer"),
        C_LONGLONG.withName("VolatileMetadataPointer"),
        C_LONGLONG.withName("GuardEHContinuationTable"),
        C_LONGLONG.withName("GuardEHContinuationCount")
    ).withName("_IMAGE_LOAD_CONFIG_DIRECTORY64");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$Size$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$Size$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$Size$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$Size$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$Size$VH_; }

}

