// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class d3d12_h$constants$0 {
    d3d12_h$constants$0() {}
    static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {
    });

    public static int __REQUIRED_RPCNDR_H_VERSION__() { return (int)500L; }

    public static int __REQUIRED_RPCSAL_H_VERSION__() { return (int)100L; }

    public static int D3D12_SHADER_COMPONENT_MAPPING_MASK() { return (int)7L; }

    public static int D3D12_SHADER_COMPONENT_MAPPING_SHIFT() { return (int)3L; }

    public static int D3D12_SHADING_RATE_X_AXIS_SHIFT() { return (int)2L; }

    public static int D3D12_SHADING_RATE_VALID_MASK() { return (int)3L; }

    public static int D3D12_COMMAND_LIST_TYPE_DIRECT() { return (int)0L; }

    public static int D3D12_COMMAND_LIST_TYPE_BUNDLE() { return (int)1L; }

    public static int D3D12_COMMAND_LIST_TYPE_COMPUTE() { return (int)2L; }

    public static int D3D12_COMMAND_LIST_TYPE_COPY() { return (int)3L; }

    public static int D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE() { return (int)4L; }

    public static int D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS() { return (int)5L; }

    public static int D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE() { return (int)6L; }

    public static int D3D12_COMMAND_QUEUE_FLAG_NONE() { return (int)0L; }

    public static int D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT() { return (int)1L; }

    public static int D3D12_COMMAND_QUEUE_PRIORITY_NORMAL() { return (int)0L; }

    public static int D3D12_COMMAND_QUEUE_PRIORITY_HIGH() { return (int)100L; }

    public static int D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME() { return (int)10000L; }

    static final MemoryLayout D3D12_COMMAND_QUEUE_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Type"),
        C_INT.withName("Priority"),
        C_INT.withName("Flags"),
        C_INT.withName("NodeMask")
    ).withName("D3D12_COMMAND_QUEUE_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_COMMAND_QUEUE_DESC$struct$LAYOUT() { return D3D12_COMMAND_QUEUE_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_COMMAND_QUEUE_DESC$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_COMMAND_QUEUE_DESC$Type$LAYOUT() { return D3D12_COMMAND_QUEUE_DESC$Type$LAYOUT_; }

    static final VarHandle D3D12_COMMAND_QUEUE_DESC$Type$VH_ = D3D12_COMMAND_QUEUE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle D3D12_COMMAND_QUEUE_DESC$Type$VH() { return D3D12_COMMAND_QUEUE_DESC$Type$VH_; }

    static final MemoryLayout D3D12_COMMAND_QUEUE_DESC$Priority$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_COMMAND_QUEUE_DESC$Priority$LAYOUT() { return D3D12_COMMAND_QUEUE_DESC$Priority$LAYOUT_; }

    static final VarHandle D3D12_COMMAND_QUEUE_DESC$Priority$VH_ = D3D12_COMMAND_QUEUE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Priority"));
    public static java.lang.invoke.VarHandle D3D12_COMMAND_QUEUE_DESC$Priority$VH() { return D3D12_COMMAND_QUEUE_DESC$Priority$VH_; }

    static final MemoryLayout D3D12_COMMAND_QUEUE_DESC$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_COMMAND_QUEUE_DESC$Flags$LAYOUT() { return D3D12_COMMAND_QUEUE_DESC$Flags$LAYOUT_; }

    static final VarHandle D3D12_COMMAND_QUEUE_DESC$Flags$VH_ = D3D12_COMMAND_QUEUE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle D3D12_COMMAND_QUEUE_DESC$Flags$VH() { return D3D12_COMMAND_QUEUE_DESC$Flags$VH_; }

    static final MemoryLayout D3D12_COMMAND_QUEUE_DESC$NodeMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_COMMAND_QUEUE_DESC$NodeMask$LAYOUT() { return D3D12_COMMAND_QUEUE_DESC$NodeMask$LAYOUT_; }

    static final VarHandle D3D12_COMMAND_QUEUE_DESC$NodeMask$VH_ = D3D12_COMMAND_QUEUE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NodeMask"));
    public static java.lang.invoke.VarHandle D3D12_COMMAND_QUEUE_DESC$NodeMask$VH() { return D3D12_COMMAND_QUEUE_DESC$NodeMask$VH_; }

    public static int D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED() { return (int)0L; }

    public static int D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT() { return (int)1L; }

    public static int D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE() { return (int)2L; }

    public static int D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE() { return (int)3L; }

    public static int D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH() { return (int)4L; }

    public static int D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA() { return (int)0L; }

    public static int D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA() { return (int)1L; }

    static final MemoryLayout D3D12_INPUT_ELEMENT_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("SemanticName"),
        C_INT.withName("SemanticIndex"),
        C_INT.withName("Format"),
        C_INT.withName("InputSlot"),
        C_INT.withName("AlignedByteOffset"),
        C_INT.withName("InputSlotClass"),
        C_INT.withName("InstanceDataStepRate")
    ).withName("D3D12_INPUT_ELEMENT_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_INPUT_ELEMENT_DESC$struct$LAYOUT() { return D3D12_INPUT_ELEMENT_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_INPUT_ELEMENT_DESC$SemanticName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_INPUT_ELEMENT_DESC$SemanticName$LAYOUT() { return D3D12_INPUT_ELEMENT_DESC$SemanticName$LAYOUT_; }

    static final VarHandle D3D12_INPUT_ELEMENT_DESC$SemanticName$VH_ = MemoryHandles.asAddressVarHandle(D3D12_INPUT_ELEMENT_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SemanticName")));
    public static java.lang.invoke.VarHandle D3D12_INPUT_ELEMENT_DESC$SemanticName$VH() { return D3D12_INPUT_ELEMENT_DESC$SemanticName$VH_; }

    static final MemoryLayout D3D12_INPUT_ELEMENT_DESC$SemanticIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_INPUT_ELEMENT_DESC$SemanticIndex$LAYOUT() { return D3D12_INPUT_ELEMENT_DESC$SemanticIndex$LAYOUT_; }

    static final VarHandle D3D12_INPUT_ELEMENT_DESC$SemanticIndex$VH_ = D3D12_INPUT_ELEMENT_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SemanticIndex"));
    public static java.lang.invoke.VarHandle D3D12_INPUT_ELEMENT_DESC$SemanticIndex$VH() { return D3D12_INPUT_ELEMENT_DESC$SemanticIndex$VH_; }

    static final MemoryLayout D3D12_INPUT_ELEMENT_DESC$Format$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_INPUT_ELEMENT_DESC$Format$LAYOUT() { return D3D12_INPUT_ELEMENT_DESC$Format$LAYOUT_; }

    static final VarHandle D3D12_INPUT_ELEMENT_DESC$Format$VH_ = D3D12_INPUT_ELEMENT_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Format"));
    public static java.lang.invoke.VarHandle D3D12_INPUT_ELEMENT_DESC$Format$VH() { return D3D12_INPUT_ELEMENT_DESC$Format$VH_; }

    static final MemoryLayout D3D12_INPUT_ELEMENT_DESC$InputSlot$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_INPUT_ELEMENT_DESC$InputSlot$LAYOUT() { return D3D12_INPUT_ELEMENT_DESC$InputSlot$LAYOUT_; }

    static final VarHandle D3D12_INPUT_ELEMENT_DESC$InputSlot$VH_ = D3D12_INPUT_ELEMENT_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InputSlot"));
    public static java.lang.invoke.VarHandle D3D12_INPUT_ELEMENT_DESC$InputSlot$VH() { return D3D12_INPUT_ELEMENT_DESC$InputSlot$VH_; }

    static final MemoryLayout D3D12_INPUT_ELEMENT_DESC$AlignedByteOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_INPUT_ELEMENT_DESC$AlignedByteOffset$LAYOUT() { return D3D12_INPUT_ELEMENT_DESC$AlignedByteOffset$LAYOUT_; }

    static final VarHandle D3D12_INPUT_ELEMENT_DESC$AlignedByteOffset$VH_ = D3D12_INPUT_ELEMENT_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AlignedByteOffset"));
    public static java.lang.invoke.VarHandle D3D12_INPUT_ELEMENT_DESC$AlignedByteOffset$VH() { return D3D12_INPUT_ELEMENT_DESC$AlignedByteOffset$VH_; }

    static final MemoryLayout D3D12_INPUT_ELEMENT_DESC$InputSlotClass$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_INPUT_ELEMENT_DESC$InputSlotClass$LAYOUT() { return D3D12_INPUT_ELEMENT_DESC$InputSlotClass$LAYOUT_; }

    static final VarHandle D3D12_INPUT_ELEMENT_DESC$InputSlotClass$VH_ = D3D12_INPUT_ELEMENT_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InputSlotClass"));
    public static java.lang.invoke.VarHandle D3D12_INPUT_ELEMENT_DESC$InputSlotClass$VH() { return D3D12_INPUT_ELEMENT_DESC$InputSlotClass$VH_; }

    static final MemoryLayout D3D12_INPUT_ELEMENT_DESC$InstanceDataStepRate$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_INPUT_ELEMENT_DESC$InstanceDataStepRate$LAYOUT() { return D3D12_INPUT_ELEMENT_DESC$InstanceDataStepRate$LAYOUT_; }

    static final VarHandle D3D12_INPUT_ELEMENT_DESC$InstanceDataStepRate$VH_ = D3D12_INPUT_ELEMENT_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InstanceDataStepRate"));
    public static java.lang.invoke.VarHandle D3D12_INPUT_ELEMENT_DESC$InstanceDataStepRate$VH() { return D3D12_INPUT_ELEMENT_DESC$InstanceDataStepRate$VH_; }

    public static int D3D12_FILL_MODE_WIREFRAME() { return (int)2L; }

    public static int D3D12_FILL_MODE_SOLID() { return (int)3L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_UNDEFINED() { return (int)0L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_POINTLIST() { return (int)1L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_LINELIST() { return (int)2L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_LINESTRIP() { return (int)3L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST() { return (int)4L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP() { return (int)5L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ() { return (int)10L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ() { return (int)11L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ() { return (int)12L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ() { return (int)13L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST() { return (int)33L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST() { return (int)34L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST() { return (int)35L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST() { return (int)36L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST() { return (int)37L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST() { return (int)38L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST() { return (int)39L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST() { return (int)40L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST() { return (int)41L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST() { return (int)42L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST() { return (int)43L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST() { return (int)44L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST() { return (int)45L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST() { return (int)46L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST() { return (int)47L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST() { return (int)48L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST() { return (int)49L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST() { return (int)50L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST() { return (int)51L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST() { return (int)52L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST() { return (int)53L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST() { return (int)54L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST() { return (int)55L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST() { return (int)56L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST() { return (int)57L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST() { return (int)58L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST() { return (int)59L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST() { return (int)60L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST() { return (int)61L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST() { return (int)62L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST() { return (int)63L; }

    public static int D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST() { return (int)64L; }

    public static int D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED() { return (int)0L; }

    public static int D3D10_PRIMITIVE_TOPOLOGY_POINTLIST() { return (int)1L; }

    public static int D3D10_PRIMITIVE_TOPOLOGY_LINELIST() { return (int)2L; }

    public static int D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP() { return (int)3L; }

    public static int D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST() { return (int)4L; }

    public static int D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP() { return (int)5L; }

    public static int D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ() { return (int)10L; }

    public static int D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ() { return (int)11L; }

    public static int D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ() { return (int)12L; }

    public static int D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ() { return (int)13L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED() { return (int)0L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_POINTLIST() { return (int)1L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_LINELIST() { return (int)2L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP() { return (int)3L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST() { return (int)4L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP() { return (int)5L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ() { return (int)10L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ() { return (int)11L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ() { return (int)12L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ() { return (int)13L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST() { return (int)33L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST() { return (int)34L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST() { return (int)35L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST() { return (int)36L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST() { return (int)37L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST() { return (int)38L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST() { return (int)39L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST() { return (int)40L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST() { return (int)41L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST() { return (int)42L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST() { return (int)43L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST() { return (int)44L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST() { return (int)45L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST() { return (int)46L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST() { return (int)47L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST() { return (int)48L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST() { return (int)49L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST() { return (int)50L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST() { return (int)51L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST() { return (int)52L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST() { return (int)53L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST() { return (int)54L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST() { return (int)55L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST() { return (int)56L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST() { return (int)57L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST() { return (int)58L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST() { return (int)59L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST() { return (int)60L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST() { return (int)61L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST() { return (int)62L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST() { return (int)63L; }

    public static int D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST() { return (int)64L; }

    public static int D3D_PRIMITIVE_UNDEFINED() { return (int)0L; }

    public static int D3D_PRIMITIVE_POINT() { return (int)1L; }

    public static int D3D_PRIMITIVE_LINE() { return (int)2L; }

    public static int D3D_PRIMITIVE_TRIANGLE() { return (int)3L; }

    public static int D3D_PRIMITIVE_LINE_ADJ() { return (int)6L; }

    public static int D3D_PRIMITIVE_TRIANGLE_ADJ() { return (int)7L; }

    public static int D3D_PRIMITIVE_1_CONTROL_POINT_PATCH() { return (int)8L; }

    public static int D3D_PRIMITIVE_2_CONTROL_POINT_PATCH() { return (int)9L; }

    public static int D3D_PRIMITIVE_3_CONTROL_POINT_PATCH() { return (int)10L; }

    public static int D3D_PRIMITIVE_4_CONTROL_POINT_PATCH() { return (int)11L; }

    public static int D3D_PRIMITIVE_5_CONTROL_POINT_PATCH() { return (int)12L; }

    public static int D3D_PRIMITIVE_6_CONTROL_POINT_PATCH() { return (int)13L; }

    public static int D3D_PRIMITIVE_7_CONTROL_POINT_PATCH() { return (int)14L; }

    public static int D3D_PRIMITIVE_8_CONTROL_POINT_PATCH() { return (int)15L; }

    public static int D3D_PRIMITIVE_9_CONTROL_POINT_PATCH() { return (int)16L; }

    public static int D3D_PRIMITIVE_10_CONTROL_POINT_PATCH() { return (int)17L; }

    public static int D3D_PRIMITIVE_11_CONTROL_POINT_PATCH() { return (int)18L; }

    public static int D3D_PRIMITIVE_12_CONTROL_POINT_PATCH() { return (int)19L; }

    public static int D3D_PRIMITIVE_13_CONTROL_POINT_PATCH() { return (int)20L; }

    public static int D3D_PRIMITIVE_14_CONTROL_POINT_PATCH() { return (int)21L; }

    public static int D3D_PRIMITIVE_15_CONTROL_POINT_PATCH() { return (int)22L; }

    public static int D3D_PRIMITIVE_16_CONTROL_POINT_PATCH() { return (int)23L; }

    public static int D3D_PRIMITIVE_17_CONTROL_POINT_PATCH() { return (int)24L; }

    public static int D3D_PRIMITIVE_18_CONTROL_POINT_PATCH() { return (int)25L; }

    public static int D3D_PRIMITIVE_19_CONTROL_POINT_PATCH() { return (int)26L; }

    public static int D3D_PRIMITIVE_20_CONTROL_POINT_PATCH() { return (int)27L; }

    public static int D3D_PRIMITIVE_21_CONTROL_POINT_PATCH() { return (int)28L; }

    public static int D3D_PRIMITIVE_22_CONTROL_POINT_PATCH() { return (int)29L; }

    public static int D3D_PRIMITIVE_23_CONTROL_POINT_PATCH() { return (int)30L; }

    public static int D3D_PRIMITIVE_24_CONTROL_POINT_PATCH() { return (int)31L; }

    public static int D3D_PRIMITIVE_25_CONTROL_POINT_PATCH() { return (int)32L; }

    public static int D3D_PRIMITIVE_26_CONTROL_POINT_PATCH() { return (int)33L; }

    public static int D3D_PRIMITIVE_27_CONTROL_POINT_PATCH() { return (int)34L; }

    public static int D3D_PRIMITIVE_28_CONTROL_POINT_PATCH() { return (int)35L; }

    public static int D3D_PRIMITIVE_29_CONTROL_POINT_PATCH() { return (int)36L; }

    public static int D3D_PRIMITIVE_30_CONTROL_POINT_PATCH() { return (int)37L; }

    public static int D3D_PRIMITIVE_31_CONTROL_POINT_PATCH() { return (int)38L; }

    public static int D3D_PRIMITIVE_32_CONTROL_POINT_PATCH() { return (int)39L; }

    public static int D3D10_PRIMITIVE_UNDEFINED() { return (int)0L; }

    public static int D3D10_PRIMITIVE_POINT() { return (int)1L; }

    public static int D3D10_PRIMITIVE_LINE() { return (int)2L; }

    public static int D3D10_PRIMITIVE_TRIANGLE() { return (int)3L; }

    public static int D3D10_PRIMITIVE_LINE_ADJ() { return (int)6L; }

    public static int D3D10_PRIMITIVE_TRIANGLE_ADJ() { return (int)7L; }

    public static int D3D11_PRIMITIVE_UNDEFINED() { return (int)0L; }

    public static int D3D11_PRIMITIVE_POINT() { return (int)1L; }

    public static int D3D11_PRIMITIVE_LINE() { return (int)2L; }

    public static int D3D11_PRIMITIVE_TRIANGLE() { return (int)3L; }

    public static int D3D11_PRIMITIVE_LINE_ADJ() { return (int)6L; }

    public static int D3D11_PRIMITIVE_TRIANGLE_ADJ() { return (int)7L; }

    public static int D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH() { return (int)8L; }

    public static int D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH() { return (int)9L; }

    public static int D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH() { return (int)10L; }

    public static int D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH() { return (int)11L; }

    public static int D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH() { return (int)12L; }

    public static int D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH() { return (int)13L; }

    public static int D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH() { return (int)14L; }

    public static int D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH() { return (int)15L; }

    public static int D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH() { return (int)16L; }

    public static int D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH() { return (int)17L; }

    public static int D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH() { return (int)18L; }

    public static int D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH() { return (int)19L; }

    public static int D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH() { return (int)20L; }

    public static int D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH() { return (int)21L; }

    public static int D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH() { return (int)22L; }

    public static int D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH() { return (int)23L; }

    public static int D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH() { return (int)24L; }

    public static int D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH() { return (int)25L; }

    public static int D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH() { return (int)26L; }

    public static int D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH() { return (int)27L; }

    public static int D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH() { return (int)28L; }

    public static int D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH() { return (int)29L; }

    public static int D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH() { return (int)30L; }

    public static int D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH() { return (int)31L; }

    public static int D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH() { return (int)32L; }

    public static int D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH() { return (int)33L; }

    public static int D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH() { return (int)34L; }

    public static int D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH() { return (int)35L; }

    public static int D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH() { return (int)36L; }

    public static int D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH() { return (int)37L; }

    public static int D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH() { return (int)38L; }

    public static int D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH() { return (int)39L; }

    public static int D3D12_CULL_MODE_NONE() { return (int)1L; }

    public static int D3D12_CULL_MODE_FRONT() { return (int)2L; }

    public static int D3D12_CULL_MODE_BACK() { return (int)3L; }

    static final MemoryLayout D3D12_SO_DECLARATION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Stream"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("SemanticName"),
        C_INT.withName("SemanticIndex"),
        C_BOOL.withName("StartComponent"),
        C_BOOL.withName("ComponentCount"),
        C_BOOL.withName("OutputSlot"),
        MemoryLayout.ofPaddingBits(8)
    ).withName("D3D12_SO_DECLARATION_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout D3D12_SO_DECLARATION_ENTRY$struct$LAYOUT() { return D3D12_SO_DECLARATION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout D3D12_SO_DECLARATION_ENTRY$Stream$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SO_DECLARATION_ENTRY$Stream$LAYOUT() { return D3D12_SO_DECLARATION_ENTRY$Stream$LAYOUT_; }

    static final VarHandle D3D12_SO_DECLARATION_ENTRY$Stream$VH_ = D3D12_SO_DECLARATION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Stream"));
    public static java.lang.invoke.VarHandle D3D12_SO_DECLARATION_ENTRY$Stream$VH() { return D3D12_SO_DECLARATION_ENTRY$Stream$VH_; }

    static final MemoryLayout D3D12_SO_DECLARATION_ENTRY$SemanticName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SO_DECLARATION_ENTRY$SemanticName$LAYOUT() { return D3D12_SO_DECLARATION_ENTRY$SemanticName$LAYOUT_; }

    static final VarHandle D3D12_SO_DECLARATION_ENTRY$SemanticName$VH_ = MemoryHandles.asAddressVarHandle(D3D12_SO_DECLARATION_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SemanticName")));
    public static java.lang.invoke.VarHandle D3D12_SO_DECLARATION_ENTRY$SemanticName$VH() { return D3D12_SO_DECLARATION_ENTRY$SemanticName$VH_; }

    static final MemoryLayout D3D12_SO_DECLARATION_ENTRY$SemanticIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SO_DECLARATION_ENTRY$SemanticIndex$LAYOUT() { return D3D12_SO_DECLARATION_ENTRY$SemanticIndex$LAYOUT_; }

    static final VarHandle D3D12_SO_DECLARATION_ENTRY$SemanticIndex$VH_ = D3D12_SO_DECLARATION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SemanticIndex"));
    public static java.lang.invoke.VarHandle D3D12_SO_DECLARATION_ENTRY$SemanticIndex$VH() { return D3D12_SO_DECLARATION_ENTRY$SemanticIndex$VH_; }

    static final MemoryLayout D3D12_SO_DECLARATION_ENTRY$StartComponent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SO_DECLARATION_ENTRY$StartComponent$LAYOUT() { return D3D12_SO_DECLARATION_ENTRY$StartComponent$LAYOUT_; }

    static final VarHandle D3D12_SO_DECLARATION_ENTRY$StartComponent$VH_ = D3D12_SO_DECLARATION_ENTRY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StartComponent"));
    public static java.lang.invoke.VarHandle D3D12_SO_DECLARATION_ENTRY$StartComponent$VH() { return D3D12_SO_DECLARATION_ENTRY$StartComponent$VH_; }

    static final MemoryLayout D3D12_SO_DECLARATION_ENTRY$ComponentCount$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SO_DECLARATION_ENTRY$ComponentCount$LAYOUT() { return D3D12_SO_DECLARATION_ENTRY$ComponentCount$LAYOUT_; }

    static final VarHandle D3D12_SO_DECLARATION_ENTRY$ComponentCount$VH_ = D3D12_SO_DECLARATION_ENTRY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ComponentCount"));
    public static java.lang.invoke.VarHandle D3D12_SO_DECLARATION_ENTRY$ComponentCount$VH() { return D3D12_SO_DECLARATION_ENTRY$ComponentCount$VH_; }

    static final MemoryLayout D3D12_SO_DECLARATION_ENTRY$OutputSlot$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SO_DECLARATION_ENTRY$OutputSlot$LAYOUT() { return D3D12_SO_DECLARATION_ENTRY$OutputSlot$LAYOUT_; }

    static final VarHandle D3D12_SO_DECLARATION_ENTRY$OutputSlot$VH_ = D3D12_SO_DECLARATION_ENTRY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("OutputSlot"));
    public static java.lang.invoke.VarHandle D3D12_SO_DECLARATION_ENTRY$OutputSlot$VH() { return D3D12_SO_DECLARATION_ENTRY$OutputSlot$VH_; }

    static final MemoryLayout D3D12_VIEWPORT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_FLOAT.withName("TopLeftX"),
        C_FLOAT.withName("TopLeftY"),
        C_FLOAT.withName("Width"),
        C_FLOAT.withName("Height"),
        C_FLOAT.withName("MinDepth"),
        C_FLOAT.withName("MaxDepth")
    ).withName("D3D12_VIEWPORT");
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEWPORT$struct$LAYOUT() { return D3D12_VIEWPORT$struct$LAYOUT_; }

    static final MemoryLayout D3D12_VIEWPORT$TopLeftX$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEWPORT$TopLeftX$LAYOUT() { return D3D12_VIEWPORT$TopLeftX$LAYOUT_; }

    static final VarHandle D3D12_VIEWPORT$TopLeftX$VH_ = D3D12_VIEWPORT$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("TopLeftX"));
    public static java.lang.invoke.VarHandle D3D12_VIEWPORT$TopLeftX$VH() { return D3D12_VIEWPORT$TopLeftX$VH_; }

    static final MemoryLayout D3D12_VIEWPORT$TopLeftY$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEWPORT$TopLeftY$LAYOUT() { return D3D12_VIEWPORT$TopLeftY$LAYOUT_; }

    static final VarHandle D3D12_VIEWPORT$TopLeftY$VH_ = D3D12_VIEWPORT$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("TopLeftY"));
    public static java.lang.invoke.VarHandle D3D12_VIEWPORT$TopLeftY$VH() { return D3D12_VIEWPORT$TopLeftY$VH_; }

    static final MemoryLayout D3D12_VIEWPORT$Width$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEWPORT$Width$LAYOUT() { return D3D12_VIEWPORT$Width$LAYOUT_; }

    static final VarHandle D3D12_VIEWPORT$Width$VH_ = D3D12_VIEWPORT$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("Width"));
    public static java.lang.invoke.VarHandle D3D12_VIEWPORT$Width$VH() { return D3D12_VIEWPORT$Width$VH_; }

    static final MemoryLayout D3D12_VIEWPORT$Height$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEWPORT$Height$LAYOUT() { return D3D12_VIEWPORT$Height$LAYOUT_; }

    static final VarHandle D3D12_VIEWPORT$Height$VH_ = D3D12_VIEWPORT$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("Height"));
    public static java.lang.invoke.VarHandle D3D12_VIEWPORT$Height$VH() { return D3D12_VIEWPORT$Height$VH_; }

    static final MemoryLayout D3D12_VIEWPORT$MinDepth$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEWPORT$MinDepth$LAYOUT() { return D3D12_VIEWPORT$MinDepth$LAYOUT_; }

    static final VarHandle D3D12_VIEWPORT$MinDepth$VH_ = D3D12_VIEWPORT$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("MinDepth"));
    public static java.lang.invoke.VarHandle D3D12_VIEWPORT$MinDepth$VH() { return D3D12_VIEWPORT$MinDepth$VH_; }

    static final MemoryLayout D3D12_VIEWPORT$MaxDepth$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEWPORT$MaxDepth$LAYOUT() { return D3D12_VIEWPORT$MaxDepth$LAYOUT_; }

    static final VarHandle D3D12_VIEWPORT$MaxDepth$VH_ = D3D12_VIEWPORT$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("MaxDepth"));
    public static java.lang.invoke.VarHandle D3D12_VIEWPORT$MaxDepth$VH() { return D3D12_VIEWPORT$MaxDepth$VH_; }

    static final MemoryLayout D3D12_BOX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("left"),
        C_INT.withName("top"),
        C_INT.withName("front"),
        C_INT.withName("right"),
        C_INT.withName("bottom"),
        C_INT.withName("back")
    ).withName("D3D12_BOX");
    public static jdk.incubator.foreign.MemoryLayout D3D12_BOX$struct$LAYOUT() { return D3D12_BOX$struct$LAYOUT_; }

    static final MemoryLayout D3D12_BOX$left$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BOX$left$LAYOUT() { return D3D12_BOX$left$LAYOUT_; }

    static final VarHandle D3D12_BOX$left$VH_ = D3D12_BOX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("left"));
    public static java.lang.invoke.VarHandle D3D12_BOX$left$VH() { return D3D12_BOX$left$VH_; }

    static final MemoryLayout D3D12_BOX$top$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BOX$top$LAYOUT() { return D3D12_BOX$top$LAYOUT_; }

    static final VarHandle D3D12_BOX$top$VH_ = D3D12_BOX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("top"));
    public static java.lang.invoke.VarHandle D3D12_BOX$top$VH() { return D3D12_BOX$top$VH_; }

    static final MemoryLayout D3D12_BOX$front$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BOX$front$LAYOUT() { return D3D12_BOX$front$LAYOUT_; }

    static final VarHandle D3D12_BOX$front$VH_ = D3D12_BOX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("front"));
    public static java.lang.invoke.VarHandle D3D12_BOX$front$VH() { return D3D12_BOX$front$VH_; }

    static final MemoryLayout D3D12_BOX$right$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BOX$right$LAYOUT() { return D3D12_BOX$right$LAYOUT_; }

    static final VarHandle D3D12_BOX$right$VH_ = D3D12_BOX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("right"));
    public static java.lang.invoke.VarHandle D3D12_BOX$right$VH() { return D3D12_BOX$right$VH_; }

    static final MemoryLayout D3D12_BOX$bottom$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BOX$bottom$LAYOUT() { return D3D12_BOX$bottom$LAYOUT_; }

    static final VarHandle D3D12_BOX$bottom$VH_ = D3D12_BOX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bottom"));
    public static java.lang.invoke.VarHandle D3D12_BOX$bottom$VH() { return D3D12_BOX$bottom$VH_; }

    static final MemoryLayout D3D12_BOX$back$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BOX$back$LAYOUT() { return D3D12_BOX$back$LAYOUT_; }

    static final VarHandle D3D12_BOX$back$VH_ = D3D12_BOX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("back"));
    public static java.lang.invoke.VarHandle D3D12_BOX$back$VH() { return D3D12_BOX$back$VH_; }

    public static int D3D12_COMPARISON_FUNC_NEVER() { return (int)1L; }

    public static int D3D12_COMPARISON_FUNC_LESS() { return (int)2L; }

    public static int D3D12_COMPARISON_FUNC_EQUAL() { return (int)3L; }

    public static int D3D12_COMPARISON_FUNC_LESS_EQUAL() { return (int)4L; }

    public static int D3D12_COMPARISON_FUNC_GREATER() { return (int)5L; }

    public static int D3D12_COMPARISON_FUNC_NOT_EQUAL() { return (int)6L; }

    public static int D3D12_COMPARISON_FUNC_GREATER_EQUAL() { return (int)7L; }

    public static int D3D12_COMPARISON_FUNC_ALWAYS() { return (int)8L; }

    public static int D3D12_DEPTH_WRITE_MASK_ZERO() { return (int)0L; }

    public static int D3D12_DEPTH_WRITE_MASK_ALL() { return (int)1L; }

    public static int D3D12_STENCIL_OP_KEEP() { return (int)1L; }

    public static int D3D12_STENCIL_OP_ZERO() { return (int)2L; }

    public static int D3D12_STENCIL_OP_REPLACE() { return (int)3L; }

    public static int D3D12_STENCIL_OP_INCR_SAT() { return (int)4L; }

    public static int D3D12_STENCIL_OP_DECR_SAT() { return (int)5L; }

    public static int D3D12_STENCIL_OP_INVERT() { return (int)6L; }

    public static int D3D12_STENCIL_OP_INCR() { return (int)7L; }

    public static int D3D12_STENCIL_OP_DECR() { return (int)8L; }

    static final MemoryLayout D3D12_DEPTH_STENCILOP_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("StencilFailOp"),
        C_INT.withName("StencilDepthFailOp"),
        C_INT.withName("StencilPassOp"),
        C_INT.withName("StencilFunc")
    ).withName("D3D12_DEPTH_STENCILOP_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCILOP_DESC$struct$LAYOUT() { return D3D12_DEPTH_STENCILOP_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_DEPTH_STENCILOP_DESC$StencilFailOp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCILOP_DESC$StencilFailOp$LAYOUT() { return D3D12_DEPTH_STENCILOP_DESC$StencilFailOp$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCILOP_DESC$StencilFailOp$VH_ = D3D12_DEPTH_STENCILOP_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StencilFailOp"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCILOP_DESC$StencilFailOp$VH() { return D3D12_DEPTH_STENCILOP_DESC$StencilFailOp$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCILOP_DESC$StencilDepthFailOp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCILOP_DESC$StencilDepthFailOp$LAYOUT() { return D3D12_DEPTH_STENCILOP_DESC$StencilDepthFailOp$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCILOP_DESC$StencilDepthFailOp$VH_ = D3D12_DEPTH_STENCILOP_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StencilDepthFailOp"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCILOP_DESC$StencilDepthFailOp$VH() { return D3D12_DEPTH_STENCILOP_DESC$StencilDepthFailOp$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCILOP_DESC$StencilPassOp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCILOP_DESC$StencilPassOp$LAYOUT() { return D3D12_DEPTH_STENCILOP_DESC$StencilPassOp$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCILOP_DESC$StencilPassOp$VH_ = D3D12_DEPTH_STENCILOP_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StencilPassOp"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCILOP_DESC$StencilPassOp$VH() { return D3D12_DEPTH_STENCILOP_DESC$StencilPassOp$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCILOP_DESC$StencilFunc$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCILOP_DESC$StencilFunc$LAYOUT() { return D3D12_DEPTH_STENCILOP_DESC$StencilFunc$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCILOP_DESC$StencilFunc$VH_ = D3D12_DEPTH_STENCILOP_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StencilFunc"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCILOP_DESC$StencilFunc$VH() { return D3D12_DEPTH_STENCILOP_DESC$StencilFunc$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("DepthEnable"),
        C_INT.withName("DepthWriteMask"),
        C_INT.withName("DepthFunc"),
        C_INT.withName("StencilEnable"),
        C_BOOL.withName("StencilReadMask"),
        C_BOOL.withName("StencilWriteMask"),
        MemoryLayout.ofPaddingBits(16),
        MemoryLayout.ofStruct(
            C_INT.withName("StencilFailOp"),
            C_INT.withName("StencilDepthFailOp"),
            C_INT.withName("StencilPassOp"),
            C_INT.withName("StencilFunc")
        ).withName("FrontFace"),
        MemoryLayout.ofStruct(
            C_INT.withName("StencilFailOp"),
            C_INT.withName("StencilDepthFailOp"),
            C_INT.withName("StencilPassOp"),
            C_INT.withName("StencilFunc")
        ).withName("BackFace")
    ).withName("D3D12_DEPTH_STENCIL_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC$struct$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC$DepthEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC$DepthEnable$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC$DepthEnable$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC$DepthEnable$VH_ = D3D12_DEPTH_STENCIL_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DepthEnable"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC$DepthEnable$VH() { return D3D12_DEPTH_STENCIL_DESC$DepthEnable$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC$DepthWriteMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC$DepthWriteMask$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC$DepthWriteMask$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC$DepthWriteMask$VH_ = D3D12_DEPTH_STENCIL_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DepthWriteMask"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC$DepthWriteMask$VH() { return D3D12_DEPTH_STENCIL_DESC$DepthWriteMask$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC$DepthFunc$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC$DepthFunc$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC$DepthFunc$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC$DepthFunc$VH_ = D3D12_DEPTH_STENCIL_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DepthFunc"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC$DepthFunc$VH() { return D3D12_DEPTH_STENCIL_DESC$DepthFunc$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC$StencilEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC$StencilEnable$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC$StencilEnable$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC$StencilEnable$VH_ = D3D12_DEPTH_STENCIL_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StencilEnable"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC$StencilEnable$VH() { return D3D12_DEPTH_STENCIL_DESC$StencilEnable$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC$StencilReadMask$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC$StencilReadMask$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC$StencilReadMask$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC$StencilReadMask$VH_ = D3D12_DEPTH_STENCIL_DESC$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StencilReadMask"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC$StencilReadMask$VH() { return D3D12_DEPTH_STENCIL_DESC$StencilReadMask$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC$StencilWriteMask$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC$StencilWriteMask$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC$StencilWriteMask$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC$StencilWriteMask$VH_ = D3D12_DEPTH_STENCIL_DESC$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StencilWriteMask"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC$StencilWriteMask$VH() { return D3D12_DEPTH_STENCIL_DESC$StencilWriteMask$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("DepthEnable"),
        C_INT.withName("DepthWriteMask"),
        C_INT.withName("DepthFunc"),
        C_INT.withName("StencilEnable"),
        C_BOOL.withName("StencilReadMask"),
        C_BOOL.withName("StencilWriteMask"),
        MemoryLayout.ofPaddingBits(16),
        MemoryLayout.ofStruct(
            C_INT.withName("StencilFailOp"),
            C_INT.withName("StencilDepthFailOp"),
            C_INT.withName("StencilPassOp"),
            C_INT.withName("StencilFunc")
        ).withName("FrontFace"),
        MemoryLayout.ofStruct(
            C_INT.withName("StencilFailOp"),
            C_INT.withName("StencilDepthFailOp"),
            C_INT.withName("StencilPassOp"),
            C_INT.withName("StencilFunc")
        ).withName("BackFace"),
        C_INT.withName("DepthBoundsTestEnable")
    ).withName("D3D12_DEPTH_STENCIL_DESC1");
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC1$struct$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC1$struct$LAYOUT_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC1$DepthEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC1$DepthEnable$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC1$DepthEnable$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC1$DepthEnable$VH_ = D3D12_DEPTH_STENCIL_DESC1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DepthEnable"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC1$DepthEnable$VH() { return D3D12_DEPTH_STENCIL_DESC1$DepthEnable$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC1$DepthWriteMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC1$DepthWriteMask$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC1$DepthWriteMask$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC1$DepthWriteMask$VH_ = D3D12_DEPTH_STENCIL_DESC1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DepthWriteMask"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC1$DepthWriteMask$VH() { return D3D12_DEPTH_STENCIL_DESC1$DepthWriteMask$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC1$DepthFunc$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC1$DepthFunc$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC1$DepthFunc$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC1$DepthFunc$VH_ = D3D12_DEPTH_STENCIL_DESC1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DepthFunc"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC1$DepthFunc$VH() { return D3D12_DEPTH_STENCIL_DESC1$DepthFunc$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC1$StencilEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC1$StencilEnable$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC1$StencilEnable$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC1$StencilEnable$VH_ = D3D12_DEPTH_STENCIL_DESC1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StencilEnable"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC1$StencilEnable$VH() { return D3D12_DEPTH_STENCIL_DESC1$StencilEnable$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC1$StencilReadMask$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC1$StencilReadMask$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC1$StencilReadMask$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC1$StencilReadMask$VH_ = D3D12_DEPTH_STENCIL_DESC1$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StencilReadMask"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC1$StencilReadMask$VH() { return D3D12_DEPTH_STENCIL_DESC1$StencilReadMask$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC1$StencilWriteMask$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC1$StencilWriteMask$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC1$StencilWriteMask$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC1$StencilWriteMask$VH_ = D3D12_DEPTH_STENCIL_DESC1$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StencilWriteMask"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC1$StencilWriteMask$VH() { return D3D12_DEPTH_STENCIL_DESC1$StencilWriteMask$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_DESC1$DepthBoundsTestEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_DESC1$DepthBoundsTestEnable$LAYOUT() { return D3D12_DEPTH_STENCIL_DESC1$DepthBoundsTestEnable$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_DESC1$DepthBoundsTestEnable$VH_ = D3D12_DEPTH_STENCIL_DESC1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DepthBoundsTestEnable"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_DESC1$DepthBoundsTestEnable$VH() { return D3D12_DEPTH_STENCIL_DESC1$DepthBoundsTestEnable$VH_; }

    public static int D3D12_BLEND_ZERO() { return (int)1L; }

    public static int D3D12_BLEND_ONE() { return (int)2L; }

    public static int D3D12_BLEND_SRC_COLOR() { return (int)3L; }

    public static int D3D12_BLEND_INV_SRC_COLOR() { return (int)4L; }

    public static int D3D12_BLEND_SRC_ALPHA() { return (int)5L; }

    public static int D3D12_BLEND_INV_SRC_ALPHA() { return (int)6L; }

    public static int D3D12_BLEND_DEST_ALPHA() { return (int)7L; }

    public static int D3D12_BLEND_INV_DEST_ALPHA() { return (int)8L; }

    public static int D3D12_BLEND_DEST_COLOR() { return (int)9L; }

    public static int D3D12_BLEND_INV_DEST_COLOR() { return (int)10L; }

    public static int D3D12_BLEND_SRC_ALPHA_SAT() { return (int)11L; }

    public static int D3D12_BLEND_BLEND_FACTOR() { return (int)14L; }

    public static int D3D12_BLEND_INV_BLEND_FACTOR() { return (int)15L; }

    public static int D3D12_BLEND_SRC1_COLOR() { return (int)16L; }

    public static int D3D12_BLEND_INV_SRC1_COLOR() { return (int)17L; }

    public static int D3D12_BLEND_SRC1_ALPHA() { return (int)18L; }

    public static int D3D12_BLEND_INV_SRC1_ALPHA() { return (int)19L; }

    public static int D3D12_BLEND_OP_ADD() { return (int)1L; }

    public static int D3D12_BLEND_OP_SUBTRACT() { return (int)2L; }

    public static int D3D12_BLEND_OP_REV_SUBTRACT() { return (int)3L; }

    public static int D3D12_BLEND_OP_MIN() { return (int)4L; }

    public static int D3D12_BLEND_OP_MAX() { return (int)5L; }

    public static int D3D12_COLOR_WRITE_ENABLE_RED() { return (int)1L; }

    public static int D3D12_COLOR_WRITE_ENABLE_GREEN() { return (int)2L; }

    public static int D3D12_COLOR_WRITE_ENABLE_BLUE() { return (int)4L; }

    public static int D3D12_COLOR_WRITE_ENABLE_ALPHA() { return (int)8L; }

    public static int D3D12_COLOR_WRITE_ENABLE_ALL() { return (int)15L; }

    public static int D3D12_LOGIC_OP_CLEAR() { return (int)0L; }

    public static int D3D12_LOGIC_OP_SET() { return (int)1L; }

    public static int D3D12_LOGIC_OP_COPY() { return (int)2L; }

    public static int D3D12_LOGIC_OP_COPY_INVERTED() { return (int)3L; }

    public static int D3D12_LOGIC_OP_NOOP() { return (int)4L; }

    public static int D3D12_LOGIC_OP_INVERT() { return (int)5L; }

    public static int D3D12_LOGIC_OP_AND() { return (int)6L; }

    public static int D3D12_LOGIC_OP_NAND() { return (int)7L; }

    public static int D3D12_LOGIC_OP_OR() { return (int)8L; }

    public static int D3D12_LOGIC_OP_NOR() { return (int)9L; }

    public static int D3D12_LOGIC_OP_XOR() { return (int)10L; }

    public static int D3D12_LOGIC_OP_EQUIV() { return (int)11L; }

    public static int D3D12_LOGIC_OP_AND_REVERSE() { return (int)12L; }

    public static int D3D12_LOGIC_OP_AND_INVERTED() { return (int)13L; }

    public static int D3D12_LOGIC_OP_OR_REVERSE() { return (int)14L; }

    public static int D3D12_LOGIC_OP_OR_INVERTED() { return (int)15L; }

    static final MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("BlendEnable"),
        C_INT.withName("LogicOpEnable"),
        C_INT.withName("SrcBlend"),
        C_INT.withName("DestBlend"),
        C_INT.withName("BlendOp"),
        C_INT.withName("SrcBlendAlpha"),
        C_INT.withName("DestBlendAlpha"),
        C_INT.withName("BlendOpAlpha"),
        C_INT.withName("LogicOp"),
        C_BOOL.withName("RenderTargetWriteMask"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("D3D12_RENDER_TARGET_BLEND_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT() { return D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$BlendEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$BlendEnable$LAYOUT() { return D3D12_RENDER_TARGET_BLEND_DESC$BlendEnable$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_BLEND_DESC$BlendEnable$VH_ = D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BlendEnable"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_BLEND_DESC$BlendEnable$VH() { return D3D12_RENDER_TARGET_BLEND_DESC$BlendEnable$VH_; }

    static final MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$LogicOpEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$LogicOpEnable$LAYOUT() { return D3D12_RENDER_TARGET_BLEND_DESC$LogicOpEnable$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_BLEND_DESC$LogicOpEnable$VH_ = D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogicOpEnable"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_BLEND_DESC$LogicOpEnable$VH() { return D3D12_RENDER_TARGET_BLEND_DESC$LogicOpEnable$VH_; }

    static final MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$SrcBlend$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$SrcBlend$LAYOUT() { return D3D12_RENDER_TARGET_BLEND_DESC$SrcBlend$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_BLEND_DESC$SrcBlend$VH_ = D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SrcBlend"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_BLEND_DESC$SrcBlend$VH() { return D3D12_RENDER_TARGET_BLEND_DESC$SrcBlend$VH_; }

    static final MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$DestBlend$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$DestBlend$LAYOUT() { return D3D12_RENDER_TARGET_BLEND_DESC$DestBlend$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_BLEND_DESC$DestBlend$VH_ = D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DestBlend"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_BLEND_DESC$DestBlend$VH() { return D3D12_RENDER_TARGET_BLEND_DESC$DestBlend$VH_; }

    static final MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$BlendOp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$BlendOp$LAYOUT() { return D3D12_RENDER_TARGET_BLEND_DESC$BlendOp$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_BLEND_DESC$BlendOp$VH_ = D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BlendOp"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_BLEND_DESC$BlendOp$VH() { return D3D12_RENDER_TARGET_BLEND_DESC$BlendOp$VH_; }

    static final MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$SrcBlendAlpha$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$SrcBlendAlpha$LAYOUT() { return D3D12_RENDER_TARGET_BLEND_DESC$SrcBlendAlpha$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_BLEND_DESC$SrcBlendAlpha$VH_ = D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SrcBlendAlpha"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_BLEND_DESC$SrcBlendAlpha$VH() { return D3D12_RENDER_TARGET_BLEND_DESC$SrcBlendAlpha$VH_; }

    static final MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$DestBlendAlpha$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$DestBlendAlpha$LAYOUT() { return D3D12_RENDER_TARGET_BLEND_DESC$DestBlendAlpha$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_BLEND_DESC$DestBlendAlpha$VH_ = D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DestBlendAlpha"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_BLEND_DESC$DestBlendAlpha$VH() { return D3D12_RENDER_TARGET_BLEND_DESC$DestBlendAlpha$VH_; }

    static final MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$BlendOpAlpha$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$BlendOpAlpha$LAYOUT() { return D3D12_RENDER_TARGET_BLEND_DESC$BlendOpAlpha$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_BLEND_DESC$BlendOpAlpha$VH_ = D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BlendOpAlpha"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_BLEND_DESC$BlendOpAlpha$VH() { return D3D12_RENDER_TARGET_BLEND_DESC$BlendOpAlpha$VH_; }

    static final MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$LogicOp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$LogicOp$LAYOUT() { return D3D12_RENDER_TARGET_BLEND_DESC$LogicOp$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_BLEND_DESC$LogicOp$VH_ = D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogicOp"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_BLEND_DESC$LogicOp$VH() { return D3D12_RENDER_TARGET_BLEND_DESC$LogicOp$VH_; }

    static final MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$RenderTargetWriteMask$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_BLEND_DESC$RenderTargetWriteMask$LAYOUT() { return D3D12_RENDER_TARGET_BLEND_DESC$RenderTargetWriteMask$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_BLEND_DESC$RenderTargetWriteMask$VH_ = D3D12_RENDER_TARGET_BLEND_DESC$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("RenderTargetWriteMask"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_BLEND_DESC$RenderTargetWriteMask$VH() { return D3D12_RENDER_TARGET_BLEND_DESC$RenderTargetWriteMask$VH_; }

    static final MemoryLayout D3D12_BLEND_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("AlphaToCoverageEnable"),
        C_INT.withName("IndependentBlendEnable"),
        MemoryLayout.ofSequence(8, MemoryLayout.ofStruct(
            C_INT.withName("BlendEnable"),
            C_INT.withName("LogicOpEnable"),
            C_INT.withName("SrcBlend"),
            C_INT.withName("DestBlend"),
            C_INT.withName("BlendOp"),
            C_INT.withName("SrcBlendAlpha"),
            C_INT.withName("DestBlendAlpha"),
            C_INT.withName("BlendOpAlpha"),
            C_INT.withName("LogicOp"),
            C_BOOL.withName("RenderTargetWriteMask"),
            MemoryLayout.ofPaddingBits(24)
        ).withName("D3D12_RENDER_TARGET_BLEND_DESC")).withName("RenderTarget")
    ).withName("D3D12_BLEND_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_BLEND_DESC$struct$LAYOUT() { return D3D12_BLEND_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_BLEND_DESC$AlphaToCoverageEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BLEND_DESC$AlphaToCoverageEnable$LAYOUT() { return D3D12_BLEND_DESC$AlphaToCoverageEnable$LAYOUT_; }

    static final VarHandle D3D12_BLEND_DESC$AlphaToCoverageEnable$VH_ = D3D12_BLEND_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AlphaToCoverageEnable"));
    public static java.lang.invoke.VarHandle D3D12_BLEND_DESC$AlphaToCoverageEnable$VH() { return D3D12_BLEND_DESC$AlphaToCoverageEnable$VH_; }

    static final MemoryLayout D3D12_BLEND_DESC$IndependentBlendEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BLEND_DESC$IndependentBlendEnable$LAYOUT() { return D3D12_BLEND_DESC$IndependentBlendEnable$LAYOUT_; }

    static final VarHandle D3D12_BLEND_DESC$IndependentBlendEnable$VH_ = D3D12_BLEND_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IndependentBlendEnable"));
    public static java.lang.invoke.VarHandle D3D12_BLEND_DESC$IndependentBlendEnable$VH() { return D3D12_BLEND_DESC$IndependentBlendEnable$VH_; }

    public static int D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF() { return (int)0L; }

    public static int D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON() { return (int)1L; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("FillMode"),
        C_INT.withName("CullMode"),
        C_INT.withName("FrontCounterClockwise"),
        C_INT.withName("DepthBias"),
        C_FLOAT.withName("DepthBiasClamp"),
        C_FLOAT.withName("SlopeScaledDepthBias"),
        C_INT.withName("DepthClipEnable"),
        C_INT.withName("MultisampleEnable"),
        C_INT.withName("AntialiasedLineEnable"),
        C_INT.withName("ForcedSampleCount"),
        C_INT.withName("ConservativeRaster")
    ).withName("D3D12_RASTERIZER_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$struct$LAYOUT() { return D3D12_RASTERIZER_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$FillMode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$FillMode$LAYOUT() { return D3D12_RASTERIZER_DESC$FillMode$LAYOUT_; }

    static final VarHandle D3D12_RASTERIZER_DESC$FillMode$VH_ = D3D12_RASTERIZER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FillMode"));
    public static java.lang.invoke.VarHandle D3D12_RASTERIZER_DESC$FillMode$VH() { return D3D12_RASTERIZER_DESC$FillMode$VH_; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$CullMode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$CullMode$LAYOUT() { return D3D12_RASTERIZER_DESC$CullMode$LAYOUT_; }

    static final VarHandle D3D12_RASTERIZER_DESC$CullMode$VH_ = D3D12_RASTERIZER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CullMode"));
    public static java.lang.invoke.VarHandle D3D12_RASTERIZER_DESC$CullMode$VH() { return D3D12_RASTERIZER_DESC$CullMode$VH_; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$FrontCounterClockwise$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$FrontCounterClockwise$LAYOUT() { return D3D12_RASTERIZER_DESC$FrontCounterClockwise$LAYOUT_; }

    static final VarHandle D3D12_RASTERIZER_DESC$FrontCounterClockwise$VH_ = D3D12_RASTERIZER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FrontCounterClockwise"));
    public static java.lang.invoke.VarHandle D3D12_RASTERIZER_DESC$FrontCounterClockwise$VH() { return D3D12_RASTERIZER_DESC$FrontCounterClockwise$VH_; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$DepthBias$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$DepthBias$LAYOUT() { return D3D12_RASTERIZER_DESC$DepthBias$LAYOUT_; }

    static final VarHandle D3D12_RASTERIZER_DESC$DepthBias$VH_ = D3D12_RASTERIZER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DepthBias"));
    public static java.lang.invoke.VarHandle D3D12_RASTERIZER_DESC$DepthBias$VH() { return D3D12_RASTERIZER_DESC$DepthBias$VH_; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$DepthBiasClamp$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$DepthBiasClamp$LAYOUT() { return D3D12_RASTERIZER_DESC$DepthBiasClamp$LAYOUT_; }

    static final VarHandle D3D12_RASTERIZER_DESC$DepthBiasClamp$VH_ = D3D12_RASTERIZER_DESC$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("DepthBiasClamp"));
    public static java.lang.invoke.VarHandle D3D12_RASTERIZER_DESC$DepthBiasClamp$VH() { return D3D12_RASTERIZER_DESC$DepthBiasClamp$VH_; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$SlopeScaledDepthBias$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$SlopeScaledDepthBias$LAYOUT() { return D3D12_RASTERIZER_DESC$SlopeScaledDepthBias$LAYOUT_; }

    static final VarHandle D3D12_RASTERIZER_DESC$SlopeScaledDepthBias$VH_ = D3D12_RASTERIZER_DESC$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("SlopeScaledDepthBias"));
    public static java.lang.invoke.VarHandle D3D12_RASTERIZER_DESC$SlopeScaledDepthBias$VH() { return D3D12_RASTERIZER_DESC$SlopeScaledDepthBias$VH_; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$DepthClipEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$DepthClipEnable$LAYOUT() { return D3D12_RASTERIZER_DESC$DepthClipEnable$LAYOUT_; }

    static final VarHandle D3D12_RASTERIZER_DESC$DepthClipEnable$VH_ = D3D12_RASTERIZER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DepthClipEnable"));
    public static java.lang.invoke.VarHandle D3D12_RASTERIZER_DESC$DepthClipEnable$VH() { return D3D12_RASTERIZER_DESC$DepthClipEnable$VH_; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$MultisampleEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$MultisampleEnable$LAYOUT() { return D3D12_RASTERIZER_DESC$MultisampleEnable$LAYOUT_; }

    static final VarHandle D3D12_RASTERIZER_DESC$MultisampleEnable$VH_ = D3D12_RASTERIZER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MultisampleEnable"));
    public static java.lang.invoke.VarHandle D3D12_RASTERIZER_DESC$MultisampleEnable$VH() { return D3D12_RASTERIZER_DESC$MultisampleEnable$VH_; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$AntialiasedLineEnable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$AntialiasedLineEnable$LAYOUT() { return D3D12_RASTERIZER_DESC$AntialiasedLineEnable$LAYOUT_; }

    static final VarHandle D3D12_RASTERIZER_DESC$AntialiasedLineEnable$VH_ = D3D12_RASTERIZER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AntialiasedLineEnable"));
    public static java.lang.invoke.VarHandle D3D12_RASTERIZER_DESC$AntialiasedLineEnable$VH() { return D3D12_RASTERIZER_DESC$AntialiasedLineEnable$VH_; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$ForcedSampleCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$ForcedSampleCount$LAYOUT() { return D3D12_RASTERIZER_DESC$ForcedSampleCount$LAYOUT_; }

    static final VarHandle D3D12_RASTERIZER_DESC$ForcedSampleCount$VH_ = D3D12_RASTERIZER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ForcedSampleCount"));
    public static java.lang.invoke.VarHandle D3D12_RASTERIZER_DESC$ForcedSampleCount$VH() { return D3D12_RASTERIZER_DESC$ForcedSampleCount$VH_; }

    static final MemoryLayout D3D12_RASTERIZER_DESC$ConservativeRaster$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RASTERIZER_DESC$ConservativeRaster$LAYOUT() { return D3D12_RASTERIZER_DESC$ConservativeRaster$LAYOUT_; }

    static final VarHandle D3D12_RASTERIZER_DESC$ConservativeRaster$VH_ = D3D12_RASTERIZER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ConservativeRaster"));
    public static java.lang.invoke.VarHandle D3D12_RASTERIZER_DESC$ConservativeRaster$VH() { return D3D12_RASTERIZER_DESC$ConservativeRaster$VH_; }

    static final MemoryLayout __MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout __MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle __MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec$VH() { return __MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec", __MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment __MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_d3d12_0000_0000_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout __MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle __MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec$VH() { return __MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec", __MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment __MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_d3d12_0000_0000_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_ID3D12Object$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout IID_ID3D12Object$LAYOUT() { return IID_ID3D12Object$LAYOUT_; }

    static final MemorySegment IID_ID3D12Object$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ID3D12Object", IID_ID3D12Object$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment IID_ID3D12Object$SEGMENT() { return IID_ID3D12Object$SEGMENT_; }

    static final MemoryLayout ID3D12ObjectVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetPrivateData"),
        C_POINTER.withName("SetPrivateData"),
        C_POINTER.withName("SetPrivateDataInterface"),
        C_POINTER.withName("SetName")
    ).withName("ID3D12ObjectVtbl");
    public static jdk.incubator.foreign.MemoryLayout ID3D12ObjectVtbl$struct$LAYOUT() { return ID3D12ObjectVtbl$struct$LAYOUT_; }

    static final MemoryLayout ID3D12ObjectVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12ObjectVtbl$QueryInterface$LAYOUT() { return ID3D12ObjectVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ID3D12ObjectVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ID3D12ObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static java.lang.invoke.VarHandle ID3D12ObjectVtbl$QueryInterface$VH() { return ID3D12ObjectVtbl$QueryInterface$VH_; }

    static final MemoryLayout ID3D12ObjectVtbl$AddRef$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12ObjectVtbl$AddRef$LAYOUT() { return ID3D12ObjectVtbl$AddRef$LAYOUT_; }

    static final VarHandle ID3D12ObjectVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ID3D12ObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static java.lang.invoke.VarHandle ID3D12ObjectVtbl$AddRef$VH() { return ID3D12ObjectVtbl$AddRef$VH_; }

    static final MemoryLayout ID3D12ObjectVtbl$Release$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12ObjectVtbl$Release$LAYOUT() { return ID3D12ObjectVtbl$Release$LAYOUT_; }

    static final VarHandle ID3D12ObjectVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ID3D12ObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static java.lang.invoke.VarHandle ID3D12ObjectVtbl$Release$VH() { return ID3D12ObjectVtbl$Release$VH_; }

    static final MemoryLayout ID3D12ObjectVtbl$GetPrivateData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12ObjectVtbl$GetPrivateData$LAYOUT() { return ID3D12ObjectVtbl$GetPrivateData$LAYOUT_; }

    static final VarHandle ID3D12ObjectVtbl$GetPrivateData$VH_ = MemoryHandles.asAddressVarHandle(ID3D12ObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPrivateData")));
    public static java.lang.invoke.VarHandle ID3D12ObjectVtbl$GetPrivateData$VH() { return ID3D12ObjectVtbl$GetPrivateData$VH_; }

    static final MemoryLayout ID3D12ObjectVtbl$SetPrivateData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12ObjectVtbl$SetPrivateData$LAYOUT() { return ID3D12ObjectVtbl$SetPrivateData$LAYOUT_; }

    static final VarHandle ID3D12ObjectVtbl$SetPrivateData$VH_ = MemoryHandles.asAddressVarHandle(ID3D12ObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetPrivateData")));
    public static java.lang.invoke.VarHandle ID3D12ObjectVtbl$SetPrivateData$VH() { return ID3D12ObjectVtbl$SetPrivateData$VH_; }

    static final MemoryLayout ID3D12ObjectVtbl$SetPrivateDataInterface$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12ObjectVtbl$SetPrivateDataInterface$LAYOUT() { return ID3D12ObjectVtbl$SetPrivateDataInterface$LAYOUT_; }

    static final VarHandle ID3D12ObjectVtbl$SetPrivateDataInterface$VH_ = MemoryHandles.asAddressVarHandle(ID3D12ObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetPrivateDataInterface")));
    public static java.lang.invoke.VarHandle ID3D12ObjectVtbl$SetPrivateDataInterface$VH() { return ID3D12ObjectVtbl$SetPrivateDataInterface$VH_; }

    static final MemoryLayout ID3D12ObjectVtbl$SetName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12ObjectVtbl$SetName$LAYOUT() { return ID3D12ObjectVtbl$SetName$LAYOUT_; }

    static final VarHandle ID3D12ObjectVtbl$SetName$VH_ = MemoryHandles.asAddressVarHandle(ID3D12ObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetName")));
    public static java.lang.invoke.VarHandle ID3D12ObjectVtbl$SetName$VH() { return ID3D12ObjectVtbl$SetName$VH_; }

    static final MemoryLayout ID3D12Object$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ID3D12Object");
    public static jdk.incubator.foreign.MemoryLayout ID3D12Object$struct$LAYOUT() { return ID3D12Object$struct$LAYOUT_; }

    static final MemoryLayout ID3D12Object$lpVtbl$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12Object$lpVtbl$LAYOUT() { return ID3D12Object$lpVtbl$LAYOUT_; }

    static final VarHandle ID3D12Object$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ID3D12Object$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    public static java.lang.invoke.VarHandle ID3D12Object$lpVtbl$VH() { return ID3D12Object$lpVtbl$VH_; }

    static final MemoryLayout IID_ID3D12DeviceChild$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout IID_ID3D12DeviceChild$LAYOUT() { return IID_ID3D12DeviceChild$LAYOUT_; }

    static final MemorySegment IID_ID3D12DeviceChild$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ID3D12DeviceChild", IID_ID3D12DeviceChild$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment IID_ID3D12DeviceChild$SEGMENT() { return IID_ID3D12DeviceChild$SEGMENT_; }

    static final MemoryLayout ID3D12DeviceChildVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetPrivateData"),
        C_POINTER.withName("SetPrivateData"),
        C_POINTER.withName("SetPrivateDataInterface"),
        C_POINTER.withName("SetName"),
        C_POINTER.withName("GetDevice")
    ).withName("ID3D12DeviceChildVtbl");
    public static jdk.incubator.foreign.MemoryLayout ID3D12DeviceChildVtbl$struct$LAYOUT() { return ID3D12DeviceChildVtbl$struct$LAYOUT_; }

    static final MemoryLayout ID3D12DeviceChildVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12DeviceChildVtbl$QueryInterface$LAYOUT() { return ID3D12DeviceChildVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ID3D12DeviceChildVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ID3D12DeviceChildVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static java.lang.invoke.VarHandle ID3D12DeviceChildVtbl$QueryInterface$VH() { return ID3D12DeviceChildVtbl$QueryInterface$VH_; }

    static final MemoryLayout ID3D12DeviceChildVtbl$AddRef$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12DeviceChildVtbl$AddRef$LAYOUT() { return ID3D12DeviceChildVtbl$AddRef$LAYOUT_; }

    static final VarHandle ID3D12DeviceChildVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ID3D12DeviceChildVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static java.lang.invoke.VarHandle ID3D12DeviceChildVtbl$AddRef$VH() { return ID3D12DeviceChildVtbl$AddRef$VH_; }

    static final MemoryLayout ID3D12DeviceChildVtbl$Release$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12DeviceChildVtbl$Release$LAYOUT() { return ID3D12DeviceChildVtbl$Release$LAYOUT_; }

    static final VarHandle ID3D12DeviceChildVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ID3D12DeviceChildVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static java.lang.invoke.VarHandle ID3D12DeviceChildVtbl$Release$VH() { return ID3D12DeviceChildVtbl$Release$VH_; }

    static final MemoryLayout ID3D12DeviceChildVtbl$GetPrivateData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12DeviceChildVtbl$GetPrivateData$LAYOUT() { return ID3D12DeviceChildVtbl$GetPrivateData$LAYOUT_; }

    static final VarHandle ID3D12DeviceChildVtbl$GetPrivateData$VH_ = MemoryHandles.asAddressVarHandle(ID3D12DeviceChildVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPrivateData")));
    public static java.lang.invoke.VarHandle ID3D12DeviceChildVtbl$GetPrivateData$VH() { return ID3D12DeviceChildVtbl$GetPrivateData$VH_; }

    static final MemoryLayout ID3D12DeviceChildVtbl$SetPrivateData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12DeviceChildVtbl$SetPrivateData$LAYOUT() { return ID3D12DeviceChildVtbl$SetPrivateData$LAYOUT_; }

    static final VarHandle ID3D12DeviceChildVtbl$SetPrivateData$VH_ = MemoryHandles.asAddressVarHandle(ID3D12DeviceChildVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetPrivateData")));
    public static java.lang.invoke.VarHandle ID3D12DeviceChildVtbl$SetPrivateData$VH() { return ID3D12DeviceChildVtbl$SetPrivateData$VH_; }

    static final MemoryLayout ID3D12DeviceChildVtbl$SetPrivateDataInterface$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12DeviceChildVtbl$SetPrivateDataInterface$LAYOUT() { return ID3D12DeviceChildVtbl$SetPrivateDataInterface$LAYOUT_; }

    static final VarHandle ID3D12DeviceChildVtbl$SetPrivateDataInterface$VH_ = MemoryHandles.asAddressVarHandle(ID3D12DeviceChildVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetPrivateDataInterface")));
    public static java.lang.invoke.VarHandle ID3D12DeviceChildVtbl$SetPrivateDataInterface$VH() { return ID3D12DeviceChildVtbl$SetPrivateDataInterface$VH_; }

    static final MemoryLayout ID3D12DeviceChildVtbl$SetName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12DeviceChildVtbl$SetName$LAYOUT() { return ID3D12DeviceChildVtbl$SetName$LAYOUT_; }

    static final VarHandle ID3D12DeviceChildVtbl$SetName$VH_ = MemoryHandles.asAddressVarHandle(ID3D12DeviceChildVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetName")));
    public static java.lang.invoke.VarHandle ID3D12DeviceChildVtbl$SetName$VH() { return ID3D12DeviceChildVtbl$SetName$VH_; }

    static final MemoryLayout ID3D12DeviceChildVtbl$GetDevice$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12DeviceChildVtbl$GetDevice$LAYOUT() { return ID3D12DeviceChildVtbl$GetDevice$LAYOUT_; }

    static final VarHandle ID3D12DeviceChildVtbl$GetDevice$VH_ = MemoryHandles.asAddressVarHandle(ID3D12DeviceChildVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDevice")));
    public static java.lang.invoke.VarHandle ID3D12DeviceChildVtbl$GetDevice$VH() { return ID3D12DeviceChildVtbl$GetDevice$VH_; }

    static final MemoryLayout ID3D12DeviceChild$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ID3D12DeviceChild");
    public static jdk.incubator.foreign.MemoryLayout ID3D12DeviceChild$struct$LAYOUT() { return ID3D12DeviceChild$struct$LAYOUT_; }

    static final MemoryLayout ID3D12DeviceChild$lpVtbl$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12DeviceChild$lpVtbl$LAYOUT() { return ID3D12DeviceChild$lpVtbl$LAYOUT_; }

    static final VarHandle ID3D12DeviceChild$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ID3D12DeviceChild$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    public static java.lang.invoke.VarHandle ID3D12DeviceChild$lpVtbl$VH() { return ID3D12DeviceChild$lpVtbl$VH_; }

    static final MemoryLayout IID_ID3D12RootSignature$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout IID_ID3D12RootSignature$LAYOUT() { return IID_ID3D12RootSignature$LAYOUT_; }

    static final MemorySegment IID_ID3D12RootSignature$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ID3D12RootSignature", IID_ID3D12RootSignature$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment IID_ID3D12RootSignature$SEGMENT() { return IID_ID3D12RootSignature$SEGMENT_; }

    static final MemoryLayout ID3D12RootSignatureVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetPrivateData"),
        C_POINTER.withName("SetPrivateData"),
        C_POINTER.withName("SetPrivateDataInterface"),
        C_POINTER.withName("SetName"),
        C_POINTER.withName("GetDevice")
    ).withName("ID3D12RootSignatureVtbl");
    public static jdk.incubator.foreign.MemoryLayout ID3D12RootSignatureVtbl$struct$LAYOUT() { return ID3D12RootSignatureVtbl$struct$LAYOUT_; }

    static final MemoryLayout ID3D12RootSignatureVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12RootSignatureVtbl$QueryInterface$LAYOUT() { return ID3D12RootSignatureVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ID3D12RootSignatureVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ID3D12RootSignatureVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static java.lang.invoke.VarHandle ID3D12RootSignatureVtbl$QueryInterface$VH() { return ID3D12RootSignatureVtbl$QueryInterface$VH_; }

    static final MemoryLayout ID3D12RootSignatureVtbl$AddRef$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12RootSignatureVtbl$AddRef$LAYOUT() { return ID3D12RootSignatureVtbl$AddRef$LAYOUT_; }

    static final VarHandle ID3D12RootSignatureVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ID3D12RootSignatureVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static java.lang.invoke.VarHandle ID3D12RootSignatureVtbl$AddRef$VH() { return ID3D12RootSignatureVtbl$AddRef$VH_; }

    static final MemoryLayout ID3D12RootSignatureVtbl$Release$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12RootSignatureVtbl$Release$LAYOUT() { return ID3D12RootSignatureVtbl$Release$LAYOUT_; }

    static final VarHandle ID3D12RootSignatureVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ID3D12RootSignatureVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static java.lang.invoke.VarHandle ID3D12RootSignatureVtbl$Release$VH() { return ID3D12RootSignatureVtbl$Release$VH_; }

    static final MemoryLayout ID3D12RootSignatureVtbl$GetPrivateData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12RootSignatureVtbl$GetPrivateData$LAYOUT() { return ID3D12RootSignatureVtbl$GetPrivateData$LAYOUT_; }

    static final VarHandle ID3D12RootSignatureVtbl$GetPrivateData$VH_ = MemoryHandles.asAddressVarHandle(ID3D12RootSignatureVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPrivateData")));
    public static java.lang.invoke.VarHandle ID3D12RootSignatureVtbl$GetPrivateData$VH() { return ID3D12RootSignatureVtbl$GetPrivateData$VH_; }

    static final MemoryLayout ID3D12RootSignatureVtbl$SetPrivateData$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12RootSignatureVtbl$SetPrivateData$LAYOUT() { return ID3D12RootSignatureVtbl$SetPrivateData$LAYOUT_; }

    static final VarHandle ID3D12RootSignatureVtbl$SetPrivateData$VH_ = MemoryHandles.asAddressVarHandle(ID3D12RootSignatureVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetPrivateData")));
    public static java.lang.invoke.VarHandle ID3D12RootSignatureVtbl$SetPrivateData$VH() { return ID3D12RootSignatureVtbl$SetPrivateData$VH_; }

    static final MemoryLayout ID3D12RootSignatureVtbl$SetPrivateDataInterface$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12RootSignatureVtbl$SetPrivateDataInterface$LAYOUT() { return ID3D12RootSignatureVtbl$SetPrivateDataInterface$LAYOUT_; }

    static final VarHandle ID3D12RootSignatureVtbl$SetPrivateDataInterface$VH_ = MemoryHandles.asAddressVarHandle(ID3D12RootSignatureVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetPrivateDataInterface")));
    public static java.lang.invoke.VarHandle ID3D12RootSignatureVtbl$SetPrivateDataInterface$VH() { return ID3D12RootSignatureVtbl$SetPrivateDataInterface$VH_; }

    static final MemoryLayout ID3D12RootSignatureVtbl$SetName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12RootSignatureVtbl$SetName$LAYOUT() { return ID3D12RootSignatureVtbl$SetName$LAYOUT_; }

    static final VarHandle ID3D12RootSignatureVtbl$SetName$VH_ = MemoryHandles.asAddressVarHandle(ID3D12RootSignatureVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetName")));
    public static java.lang.invoke.VarHandle ID3D12RootSignatureVtbl$SetName$VH() { return ID3D12RootSignatureVtbl$SetName$VH_; }

    static final MemoryLayout ID3D12RootSignatureVtbl$GetDevice$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12RootSignatureVtbl$GetDevice$LAYOUT() { return ID3D12RootSignatureVtbl$GetDevice$LAYOUT_; }

    static final VarHandle ID3D12RootSignatureVtbl$GetDevice$VH_ = MemoryHandles.asAddressVarHandle(ID3D12RootSignatureVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDevice")));
    public static java.lang.invoke.VarHandle ID3D12RootSignatureVtbl$GetDevice$VH() { return ID3D12RootSignatureVtbl$GetDevice$VH_; }

    static final MemoryLayout ID3D12RootSignature$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ID3D12RootSignature");
    public static jdk.incubator.foreign.MemoryLayout ID3D12RootSignature$struct$LAYOUT() { return ID3D12RootSignature$struct$LAYOUT_; }

    static final MemoryLayout ID3D12RootSignature$lpVtbl$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ID3D12RootSignature$lpVtbl$LAYOUT() { return ID3D12RootSignature$lpVtbl$LAYOUT_; }

    static final VarHandle ID3D12RootSignature$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ID3D12RootSignature$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    public static java.lang.invoke.VarHandle ID3D12RootSignature$lpVtbl$VH() { return ID3D12RootSignature$lpVtbl$VH_; }

    static final MemoryLayout D3D12_SHADER_BYTECODE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pShaderBytecode"),
        C_LONGLONG.withName("BytecodeLength")
    ).withName("D3D12_SHADER_BYTECODE");
    public static jdk.incubator.foreign.MemoryLayout D3D12_SHADER_BYTECODE$struct$LAYOUT() { return D3D12_SHADER_BYTECODE$struct$LAYOUT_; }

    static final MemoryLayout D3D12_SHADER_BYTECODE$pShaderBytecode$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SHADER_BYTECODE$pShaderBytecode$LAYOUT() { return D3D12_SHADER_BYTECODE$pShaderBytecode$LAYOUT_; }

    static final VarHandle D3D12_SHADER_BYTECODE$pShaderBytecode$VH_ = MemoryHandles.asAddressVarHandle(D3D12_SHADER_BYTECODE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pShaderBytecode")));
    public static java.lang.invoke.VarHandle D3D12_SHADER_BYTECODE$pShaderBytecode$VH() { return D3D12_SHADER_BYTECODE$pShaderBytecode$VH_; }

    static final MemoryLayout D3D12_SHADER_BYTECODE$BytecodeLength$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SHADER_BYTECODE$BytecodeLength$LAYOUT() { return D3D12_SHADER_BYTECODE$BytecodeLength$LAYOUT_; }

    static final VarHandle D3D12_SHADER_BYTECODE$BytecodeLength$VH_ = D3D12_SHADER_BYTECODE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BytecodeLength"));
    public static java.lang.invoke.VarHandle D3D12_SHADER_BYTECODE$BytecodeLength$VH() { return D3D12_SHADER_BYTECODE$BytecodeLength$VH_; }

    static final MemoryLayout D3D12_STREAM_OUTPUT_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pSODeclaration"),
        C_INT.withName("NumEntries"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pBufferStrides"),
        C_INT.withName("NumStrides"),
        C_INT.withName("RasterizedStream")
    ).withName("D3D12_STREAM_OUTPUT_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_STREAM_OUTPUT_DESC$struct$LAYOUT() { return D3D12_STREAM_OUTPUT_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_STREAM_OUTPUT_DESC$pSODeclaration$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STREAM_OUTPUT_DESC$pSODeclaration$LAYOUT() { return D3D12_STREAM_OUTPUT_DESC$pSODeclaration$LAYOUT_; }

    static final VarHandle D3D12_STREAM_OUTPUT_DESC$pSODeclaration$VH_ = MemoryHandles.asAddressVarHandle(D3D12_STREAM_OUTPUT_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pSODeclaration")));
    public static java.lang.invoke.VarHandle D3D12_STREAM_OUTPUT_DESC$pSODeclaration$VH() { return D3D12_STREAM_OUTPUT_DESC$pSODeclaration$VH_; }

    static final MemoryLayout D3D12_STREAM_OUTPUT_DESC$NumEntries$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STREAM_OUTPUT_DESC$NumEntries$LAYOUT() { return D3D12_STREAM_OUTPUT_DESC$NumEntries$LAYOUT_; }

    static final VarHandle D3D12_STREAM_OUTPUT_DESC$NumEntries$VH_ = D3D12_STREAM_OUTPUT_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumEntries"));
    public static java.lang.invoke.VarHandle D3D12_STREAM_OUTPUT_DESC$NumEntries$VH() { return D3D12_STREAM_OUTPUT_DESC$NumEntries$VH_; }

    static final MemoryLayout D3D12_STREAM_OUTPUT_DESC$pBufferStrides$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STREAM_OUTPUT_DESC$pBufferStrides$LAYOUT() { return D3D12_STREAM_OUTPUT_DESC$pBufferStrides$LAYOUT_; }

    static final VarHandle D3D12_STREAM_OUTPUT_DESC$pBufferStrides$VH_ = MemoryHandles.asAddressVarHandle(D3D12_STREAM_OUTPUT_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pBufferStrides")));
    public static java.lang.invoke.VarHandle D3D12_STREAM_OUTPUT_DESC$pBufferStrides$VH() { return D3D12_STREAM_OUTPUT_DESC$pBufferStrides$VH_; }

    static final MemoryLayout D3D12_STREAM_OUTPUT_DESC$NumStrides$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STREAM_OUTPUT_DESC$NumStrides$LAYOUT() { return D3D12_STREAM_OUTPUT_DESC$NumStrides$LAYOUT_; }

    static final VarHandle D3D12_STREAM_OUTPUT_DESC$NumStrides$VH_ = D3D12_STREAM_OUTPUT_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumStrides"));
    public static java.lang.invoke.VarHandle D3D12_STREAM_OUTPUT_DESC$NumStrides$VH() { return D3D12_STREAM_OUTPUT_DESC$NumStrides$VH_; }

    static final MemoryLayout D3D12_STREAM_OUTPUT_DESC$RasterizedStream$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STREAM_OUTPUT_DESC$RasterizedStream$LAYOUT() { return D3D12_STREAM_OUTPUT_DESC$RasterizedStream$LAYOUT_; }

    static final VarHandle D3D12_STREAM_OUTPUT_DESC$RasterizedStream$VH_ = D3D12_STREAM_OUTPUT_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RasterizedStream"));
    public static java.lang.invoke.VarHandle D3D12_STREAM_OUTPUT_DESC$RasterizedStream$VH() { return D3D12_STREAM_OUTPUT_DESC$RasterizedStream$VH_; }

    static final MemoryLayout D3D12_INPUT_LAYOUT_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pInputElementDescs"),
        C_INT.withName("NumElements"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("D3D12_INPUT_LAYOUT_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_INPUT_LAYOUT_DESC$struct$LAYOUT() { return D3D12_INPUT_LAYOUT_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_INPUT_LAYOUT_DESC$pInputElementDescs$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_INPUT_LAYOUT_DESC$pInputElementDescs$LAYOUT() { return D3D12_INPUT_LAYOUT_DESC$pInputElementDescs$LAYOUT_; }

    static final VarHandle D3D12_INPUT_LAYOUT_DESC$pInputElementDescs$VH_ = MemoryHandles.asAddressVarHandle(D3D12_INPUT_LAYOUT_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pInputElementDescs")));
    public static java.lang.invoke.VarHandle D3D12_INPUT_LAYOUT_DESC$pInputElementDescs$VH() { return D3D12_INPUT_LAYOUT_DESC$pInputElementDescs$VH_; }

    static final MemoryLayout D3D12_INPUT_LAYOUT_DESC$NumElements$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_INPUT_LAYOUT_DESC$NumElements$LAYOUT() { return D3D12_INPUT_LAYOUT_DESC$NumElements$LAYOUT_; }

    static final VarHandle D3D12_INPUT_LAYOUT_DESC$NumElements$VH_ = D3D12_INPUT_LAYOUT_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumElements"));
    public static java.lang.invoke.VarHandle D3D12_INPUT_LAYOUT_DESC$NumElements$VH() { return D3D12_INPUT_LAYOUT_DESC$NumElements$VH_; }

    public static int D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED() { return (int)0L; }

    public static int D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF() { return (int)1L; }

    public static int D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF() { return (int)2L; }

    static final MemoryLayout D3D12_CACHED_PIPELINE_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pCachedBlob"),
        C_LONGLONG.withName("CachedBlobSizeInBytes")
    ).withName("D3D12_CACHED_PIPELINE_STATE");
    public static jdk.incubator.foreign.MemoryLayout D3D12_CACHED_PIPELINE_STATE$struct$LAYOUT() { return D3D12_CACHED_PIPELINE_STATE$struct$LAYOUT_; }

    static final MemoryLayout D3D12_CACHED_PIPELINE_STATE$pCachedBlob$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_CACHED_PIPELINE_STATE$pCachedBlob$LAYOUT() { return D3D12_CACHED_PIPELINE_STATE$pCachedBlob$LAYOUT_; }

    static final VarHandle D3D12_CACHED_PIPELINE_STATE$pCachedBlob$VH_ = MemoryHandles.asAddressVarHandle(D3D12_CACHED_PIPELINE_STATE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pCachedBlob")));
    public static java.lang.invoke.VarHandle D3D12_CACHED_PIPELINE_STATE$pCachedBlob$VH() { return D3D12_CACHED_PIPELINE_STATE$pCachedBlob$VH_; }

    static final MemoryLayout D3D12_CACHED_PIPELINE_STATE$CachedBlobSizeInBytes$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout D3D12_CACHED_PIPELINE_STATE$CachedBlobSizeInBytes$LAYOUT() { return D3D12_CACHED_PIPELINE_STATE$CachedBlobSizeInBytes$LAYOUT_; }

    static final VarHandle D3D12_CACHED_PIPELINE_STATE$CachedBlobSizeInBytes$VH_ = D3D12_CACHED_PIPELINE_STATE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CachedBlobSizeInBytes"));
    public static java.lang.invoke.VarHandle D3D12_CACHED_PIPELINE_STATE$CachedBlobSizeInBytes$VH() { return D3D12_CACHED_PIPELINE_STATE$CachedBlobSizeInBytes$VH_; }

    public static int D3D12_PIPELINE_STATE_FLAG_NONE() { return (int)0L; }

    public static int D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG() { return (int)1L; }

    static final MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pRootSignature"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pShaderBytecode"),
            C_LONGLONG.withName("BytecodeLength")
        ).withName("VS"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pShaderBytecode"),
            C_LONGLONG.withName("BytecodeLength")
        ).withName("PS"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pShaderBytecode"),
            C_LONGLONG.withName("BytecodeLength")
        ).withName("DS"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pShaderBytecode"),
            C_LONGLONG.withName("BytecodeLength")
        ).withName("HS"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pShaderBytecode"),
            C_LONGLONG.withName("BytecodeLength")
        ).withName("GS"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pSODeclaration"),
            C_INT.withName("NumEntries"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pBufferStrides"),
            C_INT.withName("NumStrides"),
            C_INT.withName("RasterizedStream")
        ).withName("StreamOutput"),
        MemoryLayout.ofStruct(
            C_INT.withName("AlphaToCoverageEnable"),
            C_INT.withName("IndependentBlendEnable"),
            MemoryLayout.ofSequence(8, MemoryLayout.ofStruct(
                C_INT.withName("BlendEnable"),
                C_INT.withName("LogicOpEnable"),
                C_INT.withName("SrcBlend"),
                C_INT.withName("DestBlend"),
                C_INT.withName("BlendOp"),
                C_INT.withName("SrcBlendAlpha"),
                C_INT.withName("DestBlendAlpha"),
                C_INT.withName("BlendOpAlpha"),
                C_INT.withName("LogicOp"),
                C_BOOL.withName("RenderTargetWriteMask"),
                MemoryLayout.ofPaddingBits(24)
            ).withName("D3D12_RENDER_TARGET_BLEND_DESC")).withName("RenderTarget")
        ).withName("BlendState"),
        C_INT.withName("SampleMask"),
        MemoryLayout.ofStruct(
            C_INT.withName("FillMode"),
            C_INT.withName("CullMode"),
            C_INT.withName("FrontCounterClockwise"),
            C_INT.withName("DepthBias"),
            C_FLOAT.withName("DepthBiasClamp"),
            C_FLOAT.withName("SlopeScaledDepthBias"),
            C_INT.withName("DepthClipEnable"),
            C_INT.withName("MultisampleEnable"),
            C_INT.withName("AntialiasedLineEnable"),
            C_INT.withName("ForcedSampleCount"),
            C_INT.withName("ConservativeRaster")
        ).withName("RasterizerState"),
        MemoryLayout.ofStruct(
            C_INT.withName("DepthEnable"),
            C_INT.withName("DepthWriteMask"),
            C_INT.withName("DepthFunc"),
            C_INT.withName("StencilEnable"),
            C_BOOL.withName("StencilReadMask"),
            C_BOOL.withName("StencilWriteMask"),
            MemoryLayout.ofPaddingBits(16),
            MemoryLayout.ofStruct(
                C_INT.withName("StencilFailOp"),
                C_INT.withName("StencilDepthFailOp"),
                C_INT.withName("StencilPassOp"),
                C_INT.withName("StencilFunc")
            ).withName("FrontFace"),
            MemoryLayout.ofStruct(
                C_INT.withName("StencilFailOp"),
                C_INT.withName("StencilDepthFailOp"),
                C_INT.withName("StencilPassOp"),
                C_INT.withName("StencilFunc")
            ).withName("BackFace")
        ).withName("DepthStencilState"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pInputElementDescs"),
            C_INT.withName("NumElements"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("InputLayout"),
        C_INT.withName("IBStripCutValue"),
        C_INT.withName("PrimitiveTopologyType"),
        C_INT.withName("NumRenderTargets"),
        MemoryLayout.ofSequence(8, C_INT).withName("RTVFormats"),
        C_INT.withName("DSVFormat"),
        MemoryLayout.ofStruct(
            C_INT.withName("Count"),
            C_INT.withName("Quality")
        ).withName("SampleDesc"),
        C_INT.withName("NodeMask"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pCachedBlob"),
            C_LONGLONG.withName("CachedBlobSizeInBytes")
        ).withName("CachedPSO"),
        C_INT.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("D3D12_GRAPHICS_PIPELINE_STATE_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$struct$LAYOUT() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$pRootSignature$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$pRootSignature$LAYOUT() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$pRootSignature$LAYOUT_; }

    static final VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$pRootSignature$VH_ = MemoryHandles.asAddressVarHandle(D3D12_GRAPHICS_PIPELINE_STATE_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pRootSignature")));
    public static java.lang.invoke.VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$pRootSignature$VH() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$pRootSignature$VH_; }

    static final MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$SampleMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$SampleMask$LAYOUT() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$SampleMask$LAYOUT_; }

    static final VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$SampleMask$VH_ = D3D12_GRAPHICS_PIPELINE_STATE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SampleMask"));
    public static java.lang.invoke.VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$SampleMask$VH() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$SampleMask$VH_; }

    static final MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$IBStripCutValue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$IBStripCutValue$LAYOUT() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$IBStripCutValue$LAYOUT_; }

    static final VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$IBStripCutValue$VH_ = D3D12_GRAPHICS_PIPELINE_STATE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IBStripCutValue"));
    public static java.lang.invoke.VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$IBStripCutValue$VH() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$IBStripCutValue$VH_; }

    static final MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$PrimitiveTopologyType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$PrimitiveTopologyType$LAYOUT() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$PrimitiveTopologyType$LAYOUT_; }

    static final VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$PrimitiveTopologyType$VH_ = D3D12_GRAPHICS_PIPELINE_STATE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrimitiveTopologyType"));
    public static java.lang.invoke.VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$PrimitiveTopologyType$VH() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$PrimitiveTopologyType$VH_; }

    static final MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$NumRenderTargets$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$NumRenderTargets$LAYOUT() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$NumRenderTargets$LAYOUT_; }

    static final VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$NumRenderTargets$VH_ = D3D12_GRAPHICS_PIPELINE_STATE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumRenderTargets"));
    public static java.lang.invoke.VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$NumRenderTargets$VH() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$NumRenderTargets$VH_; }

    static final MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$DSVFormat$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$DSVFormat$LAYOUT() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$DSVFormat$LAYOUT_; }

    static final VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$DSVFormat$VH_ = D3D12_GRAPHICS_PIPELINE_STATE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DSVFormat"));
    public static java.lang.invoke.VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$DSVFormat$VH() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$DSVFormat$VH_; }

    static final MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$NodeMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$NodeMask$LAYOUT() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$NodeMask$LAYOUT_; }

    static final VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$NodeMask$VH_ = D3D12_GRAPHICS_PIPELINE_STATE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NodeMask"));
    public static java.lang.invoke.VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$NodeMask$VH() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$NodeMask$VH_; }

    static final MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_GRAPHICS_PIPELINE_STATE_DESC$Flags$LAYOUT() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$Flags$LAYOUT_; }

    static final VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$Flags$VH_ = D3D12_GRAPHICS_PIPELINE_STATE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle D3D12_GRAPHICS_PIPELINE_STATE_DESC$Flags$VH() { return D3D12_GRAPHICS_PIPELINE_STATE_DESC$Flags$VH_; }

    static final MemoryLayout D3D12_COMPUTE_PIPELINE_STATE_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pRootSignature"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pShaderBytecode"),
            C_LONGLONG.withName("BytecodeLength")
        ).withName("CS"),
        C_INT.withName("NodeMask"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pCachedBlob"),
            C_LONGLONG.withName("CachedBlobSizeInBytes")
        ).withName("CachedPSO"),
        C_INT.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("D3D12_COMPUTE_PIPELINE_STATE_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_COMPUTE_PIPELINE_STATE_DESC$struct$LAYOUT() { return D3D12_COMPUTE_PIPELINE_STATE_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_COMPUTE_PIPELINE_STATE_DESC$pRootSignature$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_COMPUTE_PIPELINE_STATE_DESC$pRootSignature$LAYOUT() { return D3D12_COMPUTE_PIPELINE_STATE_DESC$pRootSignature$LAYOUT_; }

    static final VarHandle D3D12_COMPUTE_PIPELINE_STATE_DESC$pRootSignature$VH_ = MemoryHandles.asAddressVarHandle(D3D12_COMPUTE_PIPELINE_STATE_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pRootSignature")));
    public static java.lang.invoke.VarHandle D3D12_COMPUTE_PIPELINE_STATE_DESC$pRootSignature$VH() { return D3D12_COMPUTE_PIPELINE_STATE_DESC$pRootSignature$VH_; }

    static final MemoryLayout D3D12_COMPUTE_PIPELINE_STATE_DESC$NodeMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_COMPUTE_PIPELINE_STATE_DESC$NodeMask$LAYOUT() { return D3D12_COMPUTE_PIPELINE_STATE_DESC$NodeMask$LAYOUT_; }

    static final VarHandle D3D12_COMPUTE_PIPELINE_STATE_DESC$NodeMask$VH_ = D3D12_COMPUTE_PIPELINE_STATE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NodeMask"));
    public static java.lang.invoke.VarHandle D3D12_COMPUTE_PIPELINE_STATE_DESC$NodeMask$VH() { return D3D12_COMPUTE_PIPELINE_STATE_DESC$NodeMask$VH_; }

    static final MemoryLayout D3D12_COMPUTE_PIPELINE_STATE_DESC$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_COMPUTE_PIPELINE_STATE_DESC$Flags$LAYOUT() { return D3D12_COMPUTE_PIPELINE_STATE_DESC$Flags$LAYOUT_; }

    static final VarHandle D3D12_COMPUTE_PIPELINE_STATE_DESC$Flags$VH_ = D3D12_COMPUTE_PIPELINE_STATE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle D3D12_COMPUTE_PIPELINE_STATE_DESC$Flags$VH() { return D3D12_COMPUTE_PIPELINE_STATE_DESC$Flags$VH_; }

    static final MemoryLayout D3D12_RT_FORMAT_ARRAY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(8, C_INT).withName("RTFormats"),
        C_INT.withName("NumRenderTargets")
    ).withName("D3D12_RT_FORMAT_ARRAY");
    public static jdk.incubator.foreign.MemoryLayout D3D12_RT_FORMAT_ARRAY$struct$LAYOUT() { return D3D12_RT_FORMAT_ARRAY$struct$LAYOUT_; }

    static final MemoryLayout D3D12_RT_FORMAT_ARRAY$NumRenderTargets$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RT_FORMAT_ARRAY$NumRenderTargets$LAYOUT() { return D3D12_RT_FORMAT_ARRAY$NumRenderTargets$LAYOUT_; }

    static final VarHandle D3D12_RT_FORMAT_ARRAY$NumRenderTargets$VH_ = D3D12_RT_FORMAT_ARRAY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumRenderTargets"));
    public static java.lang.invoke.VarHandle D3D12_RT_FORMAT_ARRAY$NumRenderTargets$VH() { return D3D12_RT_FORMAT_ARRAY$NumRenderTargets$VH_; }

    static final MemoryLayout D3D12_PIPELINE_STATE_STREAM_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("SizeInBytes"),
        C_POINTER.withName("pPipelineStateSubobjectStream")
    ).withName("D3D12_PIPELINE_STATE_STREAM_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_PIPELINE_STATE_STREAM_DESC$struct$LAYOUT() { return D3D12_PIPELINE_STATE_STREAM_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_PIPELINE_STATE_STREAM_DESC$SizeInBytes$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout D3D12_PIPELINE_STATE_STREAM_DESC$SizeInBytes$LAYOUT() { return D3D12_PIPELINE_STATE_STREAM_DESC$SizeInBytes$LAYOUT_; }

    static final VarHandle D3D12_PIPELINE_STATE_STREAM_DESC$SizeInBytes$VH_ = D3D12_PIPELINE_STATE_STREAM_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeInBytes"));
    public static java.lang.invoke.VarHandle D3D12_PIPELINE_STATE_STREAM_DESC$SizeInBytes$VH() { return D3D12_PIPELINE_STATE_STREAM_DESC$SizeInBytes$VH_; }

    static final MemoryLayout D3D12_PIPELINE_STATE_STREAM_DESC$pPipelineStateSubobjectStream$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_PIPELINE_STATE_STREAM_DESC$pPipelineStateSubobjectStream$LAYOUT() { return D3D12_PIPELINE_STATE_STREAM_DESC$pPipelineStateSubobjectStream$LAYOUT_; }

    static final VarHandle D3D12_PIPELINE_STATE_STREAM_DESC$pPipelineStateSubobjectStream$VH_ = MemoryHandles.asAddressVarHandle(D3D12_PIPELINE_STATE_STREAM_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pPipelineStateSubobjectStream")));
    public static java.lang.invoke.VarHandle D3D12_PIPELINE_STATE_STREAM_DESC$pPipelineStateSubobjectStream$VH() { return D3D12_PIPELINE_STATE_STREAM_DESC$pPipelineStateSubobjectStream$VH_; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE() { return (int)0L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS() { return (int)1L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS() { return (int)2L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS() { return (int)3L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS() { return (int)4L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS() { return (int)5L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS() { return (int)6L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT() { return (int)7L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND() { return (int)8L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK() { return (int)9L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER() { return (int)10L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL() { return (int)11L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT() { return (int)12L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE() { return (int)13L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY() { return (int)14L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS() { return (int)15L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT() { return (int)16L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC() { return (int)17L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK() { return (int)18L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO() { return (int)19L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS() { return (int)20L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1() { return (int)21L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING() { return (int)22L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS() { return (int)24L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS() { return (int)25L; }

    public static int D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID() { return (int)26L; }

    public static int D3D12_FEATURE_D3D12_OPTIONS() { return (int)0L; }

    public static int D3D12_FEATURE_ARCHITECTURE() { return (int)1L; }

    public static int D3D12_FEATURE_FEATURE_LEVELS() { return (int)2L; }

    public static int D3D12_FEATURE_FORMAT_SUPPORT() { return (int)3L; }

    public static int D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS() { return (int)4L; }

    public static int D3D12_FEATURE_FORMAT_INFO() { return (int)5L; }

    public static int D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT() { return (int)6L; }

    public static int D3D12_FEATURE_SHADER_MODEL() { return (int)7L; }

    public static int D3D12_FEATURE_D3D12_OPTIONS1() { return (int)8L; }

    public static int D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT() { return (int)10L; }

    public static int D3D12_FEATURE_ROOT_SIGNATURE() { return (int)12L; }

    public static int D3D12_FEATURE_ARCHITECTURE1() { return (int)16L; }

    public static int D3D12_FEATURE_D3D12_OPTIONS2() { return (int)18L; }

    public static int D3D12_FEATURE_SHADER_CACHE() { return (int)19L; }

    public static int D3D12_FEATURE_COMMAND_QUEUE_PRIORITY() { return (int)20L; }

    public static int D3D12_FEATURE_D3D12_OPTIONS3() { return (int)21L; }

    public static int D3D12_FEATURE_EXISTING_HEAPS() { return (int)22L; }

    public static int D3D12_FEATURE_D3D12_OPTIONS4() { return (int)23L; }

    public static int D3D12_FEATURE_SERIALIZATION() { return (int)24L; }

    public static int D3D12_FEATURE_CROSS_NODE() { return (int)25L; }

    public static int D3D12_FEATURE_D3D12_OPTIONS5() { return (int)27L; }

    public static int D3D12_FEATURE_D3D12_OPTIONS6() { return (int)30L; }

    public static int D3D12_FEATURE_QUERY_META_COMMAND() { return (int)31L; }

    public static int D3D12_FEATURE_D3D12_OPTIONS7() { return (int)32L; }

    public static int D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT() { return (int)33L; }

    public static int D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES() { return (int)34L; }

    public static int D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE() { return (int)0L; }

    public static int D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT() { return (int)1L; }

    public static int D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT() { return (int)2L; }

    public static int D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED() { return (int)0L; }

    public static int D3D12_TILED_RESOURCES_TIER_1() { return (int)1L; }

    public static int D3D12_TILED_RESOURCES_TIER_2() { return (int)2L; }

    public static int D3D12_TILED_RESOURCES_TIER_3() { return (int)3L; }

    public static int D3D12_TILED_RESOURCES_TIER_4() { return (int)4L; }

    public static int D3D12_RESOURCE_BINDING_TIER_1() { return (int)1L; }

    public static int D3D12_RESOURCE_BINDING_TIER_2() { return (int)2L; }

    public static int D3D12_RESOURCE_BINDING_TIER_3() { return (int)3L; }

    public static int D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED() { return (int)0L; }

    public static int D3D12_CONSERVATIVE_RASTERIZATION_TIER_1() { return (int)1L; }

    public static int D3D12_CONSERVATIVE_RASTERIZATION_TIER_2() { return (int)2L; }

    public static int D3D12_CONSERVATIVE_RASTERIZATION_TIER_3() { return (int)3L; }

    public static int D3D12_FORMAT_SUPPORT1_NONE() { return (int)0L; }

    public static int D3D12_FORMAT_SUPPORT1_BUFFER() { return (int)1L; }

    public static int D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER() { return (int)2L; }

    public static int D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER() { return (int)4L; }

    public static int D3D12_FORMAT_SUPPORT1_SO_BUFFER() { return (int)8L; }

    public static int D3D12_FORMAT_SUPPORT1_TEXTURE1D() { return (int)16L; }

    public static int D3D12_FORMAT_SUPPORT1_TEXTURE2D() { return (int)32L; }

    public static int D3D12_FORMAT_SUPPORT1_TEXTURE3D() { return (int)64L; }

    public static int D3D12_FORMAT_SUPPORT1_TEXTURECUBE() { return (int)128L; }

    public static int D3D12_FORMAT_SUPPORT1_SHADER_LOAD() { return (int)256L; }

    public static int D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE() { return (int)512L; }

    public static int D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON() { return (int)1024L; }

    public static int D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT() { return (int)2048L; }

    public static int D3D12_FORMAT_SUPPORT1_MIP() { return (int)4096L; }

    public static int D3D12_FORMAT_SUPPORT1_RENDER_TARGET() { return (int)16384L; }

    public static int D3D12_FORMAT_SUPPORT1_BLENDABLE() { return (int)32768L; }

    public static int D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL() { return (int)65536L; }

    public static int D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE() { return (int)262144L; }

}

