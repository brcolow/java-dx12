// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$47 extends Windows_h$constants$46 {
    Windows_h$constants$47() {}
    public static int MB_ICONINFORMATION() { return (int)64L; }

    public static int MB_ICONSTOP() { return (int)16L; }

    public static int MB_DEFBUTTON1() { return (int)0L; }

    public static int MB_DEFBUTTON2() { return (int)256L; }

    public static int MB_DEFBUTTON3() { return (int)512L; }

    public static int MB_DEFBUTTON4() { return (int)768L; }

    public static int MB_APPLMODAL() { return (int)0L; }

    public static int MB_SYSTEMMODAL() { return (int)4096L; }

    public static int MB_TASKMODAL() { return (int)8192L; }

    public static int MB_HELP() { return (int)16384L; }

    public static int MB_NOFOCUS() { return (int)32768L; }

    public static int MB_SETFOREGROUND() { return (int)65536L; }

    public static int MB_DEFAULT_DESKTOP_ONLY() { return (int)131072L; }

    public static int MB_TOPMOST() { return (int)262144L; }

    public static int MB_RIGHT() { return (int)524288L; }

    public static int MB_RTLREADING() { return (int)1048576L; }

    public static int MB_SERVICE_NOTIFICATION() { return (int)2097152L; }

    public static int MB_SERVICE_NOTIFICATION_NT3X() { return (int)262144L; }

    public static int MB_TYPEMASK() { return (int)15L; }

    public static int MB_ICONMASK() { return (int)240L; }

    public static int MB_DEFMASK() { return (int)3840L; }

    public static int MB_MODEMASK() { return (int)12288L; }

    public static int MB_MISCMASK() { return (int)49152L; }

    public static int COLOR_DESKTOP() { return (int)1L; }

    public static int COLOR_3DFACE() { return (int)15L; }

    public static int COLOR_3DSHADOW() { return (int)16L; }

    public static int COLOR_3DHIGHLIGHT() { return (int)20L; }

    public static int COLOR_3DHILIGHT() { return (int)20L; }

    public static int COLOR_BTNHILIGHT() { return (int)20L; }

    public static int MF_INSERT() { return (int)0L; }

    public static int MF_CHANGE() { return (int)128L; }

    public static int MF_APPEND() { return (int)256L; }

    public static int MF_DELETE() { return (int)512L; }

    public static int MF_REMOVE() { return (int)4096L; }

    public static int MF_BYCOMMAND() { return (int)0L; }

    public static int MF_BYPOSITION() { return (int)1024L; }

    public static int MF_SEPARATOR() { return (int)2048L; }

    public static int MF_ENABLED() { return (int)0L; }

    public static int MF_GRAYED() { return (int)1L; }

    public static int MF_DISABLED() { return (int)2L; }

    public static int MF_UNCHECKED() { return (int)0L; }

    public static int MF_CHECKED() { return (int)8L; }

    public static int MF_USECHECKBITMAPS() { return (int)512L; }

    public static int MF_STRING() { return (int)0L; }

    public static int MF_BITMAP() { return (int)4L; }

    public static int MF_OWNERDRAW() { return (int)256L; }

    public static int MF_POPUP() { return (int)16L; }

    public static int MF_MENUBARBREAK() { return (int)32L; }

    public static int MF_MENUBREAK() { return (int)64L; }

    public static int MF_UNHILITE() { return (int)0L; }

    public static int MF_HILITE() { return (int)128L; }

    public static int MF_DEFAULT() { return (int)4096L; }

    public static int MF_SYSMENU() { return (int)8192L; }

    public static int MF_HELP() { return (int)16384L; }

    public static int MF_RIGHTJUSTIFY() { return (int)16384L; }

    public static int MF_MOUSESELECT() { return (int)32768L; }

    public static int MF_END() { return (int)128L; }

    public static int MFT_STRING() { return (int)0L; }

    public static int MFT_BITMAP() { return (int)4L; }

    public static int MFT_MENUBARBREAK() { return (int)32L; }

    public static int MFT_MENUBREAK() { return (int)64L; }

    public static int MFT_OWNERDRAW() { return (int)256L; }

    public static int MFT_RADIOCHECK() { return (int)512L; }

    public static int MFT_SEPARATOR() { return (int)2048L; }

    public static int MFT_RIGHTORDER() { return (int)8192L; }

    public static int MFT_RIGHTJUSTIFY() { return (int)16384L; }

    public static int MFS_GRAYED() { return (int)3L; }

    public static int MFS_DISABLED() { return (int)3L; }

    public static int MFS_CHECKED() { return (int)8L; }

    public static int MFS_HILITE() { return (int)128L; }

    public static int MFS_ENABLED() { return (int)0L; }

    public static int MFS_UNCHECKED() { return (int)0L; }

    public static int MFS_UNHILITE() { return (int)0L; }

    public static int MFS_DEFAULT() { return (int)4096L; }

    public static int SC_ICON() { return (int)61472L; }

    public static int SC_ZOOM() { return (int)61488L; }

    static final MemoryAddress IDC_ARROW$ADDR_CONSTANT_ = MemoryAddress.ofLong(32512L);
    public static jdk.incubator.foreign.MemoryAddress IDC_ARROW() { return IDC_ARROW$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_IBEAM$ADDR_CONSTANT_ = MemoryAddress.ofLong(32513L);
    public static jdk.incubator.foreign.MemoryAddress IDC_IBEAM() { return IDC_IBEAM$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_WAIT$ADDR_CONSTANT_ = MemoryAddress.ofLong(32514L);
    public static jdk.incubator.foreign.MemoryAddress IDC_WAIT() { return IDC_WAIT$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_CROSS$ADDR_CONSTANT_ = MemoryAddress.ofLong(32515L);
    public static jdk.incubator.foreign.MemoryAddress IDC_CROSS() { return IDC_CROSS$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_UPARROW$ADDR_CONSTANT_ = MemoryAddress.ofLong(32516L);
    public static jdk.incubator.foreign.MemoryAddress IDC_UPARROW() { return IDC_UPARROW$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_SIZE$ADDR_CONSTANT_ = MemoryAddress.ofLong(32640L);
    public static jdk.incubator.foreign.MemoryAddress IDC_SIZE() { return IDC_SIZE$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_ICON$ADDR_CONSTANT_ = MemoryAddress.ofLong(32641L);
    public static jdk.incubator.foreign.MemoryAddress IDC_ICON() { return IDC_ICON$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_SIZENWSE$ADDR_CONSTANT_ = MemoryAddress.ofLong(32642L);
    public static jdk.incubator.foreign.MemoryAddress IDC_SIZENWSE() { return IDC_SIZENWSE$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_SIZENESW$ADDR_CONSTANT_ = MemoryAddress.ofLong(32643L);
    public static jdk.incubator.foreign.MemoryAddress IDC_SIZENESW() { return IDC_SIZENESW$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_SIZEWE$ADDR_CONSTANT_ = MemoryAddress.ofLong(32644L);
    public static jdk.incubator.foreign.MemoryAddress IDC_SIZEWE() { return IDC_SIZEWE$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_SIZENS$ADDR_CONSTANT_ = MemoryAddress.ofLong(32645L);
    public static jdk.incubator.foreign.MemoryAddress IDC_SIZENS() { return IDC_SIZENS$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_SIZEALL$ADDR_CONSTANT_ = MemoryAddress.ofLong(32646L);
    public static jdk.incubator.foreign.MemoryAddress IDC_SIZEALL() { return IDC_SIZEALL$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_NO$ADDR_CONSTANT_ = MemoryAddress.ofLong(32648L);
    public static jdk.incubator.foreign.MemoryAddress IDC_NO() { return IDC_NO$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_HAND$ADDR_CONSTANT_ = MemoryAddress.ofLong(32649L);
    public static jdk.incubator.foreign.MemoryAddress IDC_HAND() { return IDC_HAND$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_APPSTARTING$ADDR_CONSTANT_ = MemoryAddress.ofLong(32650L);
    public static jdk.incubator.foreign.MemoryAddress IDC_APPSTARTING() { return IDC_APPSTARTING$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_HELP$ADDR_CONSTANT_ = MemoryAddress.ofLong(32651L);
    public static jdk.incubator.foreign.MemoryAddress IDC_HELP() { return IDC_HELP$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_PIN$ADDR_CONSTANT_ = MemoryAddress.ofLong(32671L);
    public static jdk.incubator.foreign.MemoryAddress IDC_PIN() { return IDC_PIN$ADDR_CONSTANT_; }

    static final MemoryAddress IDC_PERSON$ADDR_CONSTANT_ = MemoryAddress.ofLong(32672L);
    public static jdk.incubator.foreign.MemoryAddress IDC_PERSON() { return IDC_PERSON$ADDR_CONSTANT_; }

    static final MemoryAddress IDI_APPLICATION$ADDR_CONSTANT_ = MemoryAddress.ofLong(32512L);
    public static jdk.incubator.foreign.MemoryAddress IDI_APPLICATION() { return IDI_APPLICATION$ADDR_CONSTANT_; }

    static final MemoryAddress IDI_HAND$ADDR_CONSTANT_ = MemoryAddress.ofLong(32513L);
    public static jdk.incubator.foreign.MemoryAddress IDI_HAND() { return IDI_HAND$ADDR_CONSTANT_; }

    static final MemoryAddress IDI_QUESTION$ADDR_CONSTANT_ = MemoryAddress.ofLong(32514L);
    public static jdk.incubator.foreign.MemoryAddress IDI_QUESTION() { return IDI_QUESTION$ADDR_CONSTANT_; }

    static final MemoryAddress IDI_EXCLAMATION$ADDR_CONSTANT_ = MemoryAddress.ofLong(32515L);
    public static jdk.incubator.foreign.MemoryAddress IDI_EXCLAMATION() { return IDI_EXCLAMATION$ADDR_CONSTANT_; }

    static final MemoryAddress IDI_ASTERISK$ADDR_CONSTANT_ = MemoryAddress.ofLong(32516L);
    public static jdk.incubator.foreign.MemoryAddress IDI_ASTERISK() { return IDI_ASTERISK$ADDR_CONSTANT_; }

    static final MemoryAddress IDI_WINLOGO$ADDR_CONSTANT_ = MemoryAddress.ofLong(32517L);
    public static jdk.incubator.foreign.MemoryAddress IDI_WINLOGO() { return IDI_WINLOGO$ADDR_CONSTANT_; }

    static final MemoryAddress IDI_SHIELD$ADDR_CONSTANT_ = MemoryAddress.ofLong(32518L);
    public static jdk.incubator.foreign.MemoryAddress IDI_SHIELD() { return IDI_SHIELD$ADDR_CONSTANT_; }

    static final MemoryAddress IDI_WARNING$ADDR_CONSTANT_ = MemoryAddress.ofLong(32515L);
    public static jdk.incubator.foreign.MemoryAddress IDI_WARNING() { return IDI_WARNING$ADDR_CONSTANT_; }

    static final MemoryAddress IDI_ERROR$ADDR_CONSTANT_ = MemoryAddress.ofLong(32513L);
    public static jdk.incubator.foreign.MemoryAddress IDI_ERROR() { return IDI_ERROR$ADDR_CONSTANT_; }

    static final MemoryAddress IDI_INFORMATION$ADDR_CONSTANT_ = MemoryAddress.ofLong(32516L);
    public static jdk.incubator.foreign.MemoryAddress IDI_INFORMATION() { return IDI_INFORMATION$ADDR_CONSTANT_; }

    public static int ES_LEFT() { return (int)0L; }

    public static int ES_CENTER() { return (int)1L; }

    public static int ES_RIGHT() { return (int)2L; }

    public static int ES_MULTILINE() { return (int)4L; }

    public static int ES_UPPERCASE() { return (int)8L; }

    public static int ES_LOWERCASE() { return (int)16L; }

    public static int ES_PASSWORD() { return (int)32L; }

    public static int ES_AUTOVSCROLL() { return (int)64L; }

    public static int ES_AUTOHSCROLL() { return (int)128L; }

    public static int ES_NOHIDESEL() { return (int)256L; }

    public static int ES_OEMCONVERT() { return (int)1024L; }

    public static int ES_READONLY() { return (int)2048L; }

    public static int ES_WANTRETURN() { return (int)4096L; }

    public static int ES_NUMBER() { return (int)8192L; }

    public static int EM_SETLIMITTEXT() { return (int)197L; }

    public static int BS_PUSHBUTTON() { return (int)0L; }

    public static int BS_DEFPUSHBUTTON() { return (int)1L; }

    public static int BS_CHECKBOX() { return (int)2L; }

    public static int BS_AUTOCHECKBOX() { return (int)3L; }

    public static int BS_RADIOBUTTON() { return (int)4L; }

    public static int BS_3STATE() { return (int)5L; }

    public static int BS_AUTO3STATE() { return (int)6L; }

    public static int BS_GROUPBOX() { return (int)7L; }

    public static int BS_USERBUTTON() { return (int)8L; }

    public static int BS_AUTORADIOBUTTON() { return (int)9L; }

    public static int BS_PUSHBOX() { return (int)10L; }

    public static int BS_OWNERDRAW() { return (int)11L; }

    public static int BS_TYPEMASK() { return (int)15L; }

    public static int BS_LEFTTEXT() { return (int)32L; }

    public static int BS_TEXT() { return (int)0L; }

    public static int BS_ICON() { return (int)64L; }

    public static int BS_BITMAP() { return (int)128L; }

    public static int BS_LEFT() { return (int)256L; }

    public static int BS_RIGHT() { return (int)512L; }

    public static int BS_CENTER() { return (int)768L; }

    public static int BS_TOP() { return (int)1024L; }

    public static int BS_BOTTOM() { return (int)2048L; }

    public static int BS_VCENTER() { return (int)3072L; }

    public static int BS_PUSHLIKE() { return (int)4096L; }

    public static int BS_MULTILINE() { return (int)8192L; }

    public static int BS_NOTIFY() { return (int)16384L; }

    public static int BS_FLAT() { return (int)32768L; }

    public static int BS_RIGHTBUTTON() { return (int)32L; }

    public static int BN_PUSHED() { return (int)2L; }

    public static int BN_UNPUSHED() { return (int)3L; }

    public static int BN_DBLCLK() { return (int)5L; }

    public static int SS_LEFT() { return (int)0L; }

    public static int SS_CENTER() { return (int)1L; }

    public static int SS_RIGHT() { return (int)2L; }

    public static int SS_ICON() { return (int)3L; }

    public static int SS_BLACKRECT() { return (int)4L; }

    public static int SS_GRAYRECT() { return (int)5L; }

    public static int SS_WHITERECT() { return (int)6L; }

    public static int SS_BLACKFRAME() { return (int)7L; }

    public static int SS_GRAYFRAME() { return (int)8L; }

    public static int SS_WHITEFRAME() { return (int)9L; }

    public static int SS_USERITEM() { return (int)10L; }

    public static int SS_SIMPLE() { return (int)11L; }

    public static int SS_LEFTNOWORDWRAP() { return (int)12L; }

    public static int SS_OWNERDRAW() { return (int)13L; }

    public static int SS_BITMAP() { return (int)14L; }

    public static int SS_ENHMETAFILE() { return (int)15L; }

    public static int SS_ETCHEDHORZ() { return (int)16L; }

    public static int SS_ETCHEDVERT() { return (int)17L; }

    public static int SS_ETCHEDFRAME() { return (int)18L; }

    public static int SS_TYPEMASK() { return (int)31L; }

    public static int SS_REALSIZECONTROL() { return (int)64L; }

    public static int SS_NOPREFIX() { return (int)128L; }

    public static int SS_NOTIFY() { return (int)256L; }

    public static int SS_CENTERIMAGE() { return (int)512L; }

    public static int SS_RIGHTJUST() { return (int)1024L; }

    public static int SS_REALSIZEIMAGE() { return (int)2048L; }

    public static int SS_SUNKEN() { return (int)4096L; }

    public static int SS_EDITCONTROL() { return (int)8192L; }

    public static int SS_ENDELLIPSIS() { return (int)16384L; }

    public static int SS_PATHELLIPSIS() { return (int)32768L; }

    public static int SS_WORDELLIPSIS() { return (int)49152L; }

    public static int SS_ELLIPSISMASK() { return (int)49152L; }

    static final MemoryAddress WC_DIALOG$ADDR_CONSTANT_ = MemoryAddress.ofLong(32770L);
    public static jdk.incubator.foreign.MemoryAddress WC_DIALOG() { return WC_DIALOG$ADDR_CONSTANT_; }

    public static long DWLP_DLGPROC() { return 8L; }

    public static long DWLP_USER() { return 16L; }

    public static int DS_ABSALIGN() { return (int)1L; }

    public static int DS_SYSMODAL() { return (int)2L; }

    public static int DS_LOCALEDIT() { return (int)32L; }

    public static int DS_SETFONT() { return (int)64L; }

    public static int DS_MODALFRAME() { return (int)128L; }

    public static int DS_NOIDLEMSG() { return (int)256L; }

    public static int DS_SETFOREGROUND() { return (int)512L; }

    public static int DS_3DLOOK() { return (int)4L; }

    public static int DS_FIXEDSYS() { return (int)8L; }

    public static int DS_NOFAILCREATE() { return (int)16L; }

    public static int DS_CONTROL() { return (int)1024L; }

    public static int DS_CENTER() { return (int)2048L; }

    public static int DS_CENTERMOUSE() { return (int)4096L; }

    public static int DS_CONTEXTHELP() { return (int)8192L; }

    public static int DS_SHELLFONT() { return (int)72L; }

    public static int DM_GETDEFID() { return (int)1024L; }

    public static int DM_SETDEFID() { return (int)1025L; }

    public static int DM_REPOSITION() { return (int)1026L; }

    public static int LB_CTLCODE() { return (int)0L; }

    public static int LB_ERR() { return (int)-1L; }

    public static int LB_ERRSPACE() { return (int)-2L; }

    public static int LBN_ERRSPACE() { return (int)-2L; }

    public static int LBS_NOTIFY() { return (int)1L; }

    public static int LBS_SORT() { return (int)2L; }

    public static int LBS_NOREDRAW() { return (int)4L; }

    public static int LBS_MULTIPLESEL() { return (int)8L; }

    public static int LBS_OWNERDRAWFIXED() { return (int)16L; }

    public static int LBS_OWNERDRAWVARIABLE() { return (int)32L; }

    public static int LBS_HASSTRINGS() { return (int)64L; }

    public static int LBS_USETABSTOPS() { return (int)128L; }

    public static int LBS_NOINTEGRALHEIGHT() { return (int)256L; }

    public static int LBS_MULTICOLUMN() { return (int)512L; }

    public static int LBS_WANTKEYBOARDINPUT() { return (int)1024L; }

    public static int LBS_EXTENDEDSEL() { return (int)2048L; }

    public static int LBS_DISABLENOSCROLL() { return (int)4096L; }

    public static int LBS_NODATA() { return (int)8192L; }

    public static int LBS_NOSEL() { return (int)16384L; }

    public static int LBS_COMBOBOX() { return (int)32768L; }

    public static int LBS_STANDARD() { return (int)10485763L; }

    public static int CB_ERR() { return (int)-1L; }

    public static int CB_ERRSPACE() { return (int)-2L; }

    public static int CBN_ERRSPACE() { return (int)-1L; }

    public static int CBS_SIMPLE() { return (int)1L; }

    public static int CBS_DROPDOWN() { return (int)2L; }

    public static int CBS_DROPDOWNLIST() { return (int)3L; }

    public static int CBS_OWNERDRAWFIXED() { return (int)16L; }

    public static int CBS_OWNERDRAWVARIABLE() { return (int)32L; }

    public static int CBS_AUTOHSCROLL() { return (int)64L; }

    public static int CBS_OEMCONVERT() { return (int)128L; }

    public static int CBS_SORT() { return (int)256L; }

    public static int CBS_HASSTRINGS() { return (int)512L; }

    public static int CBS_NOINTEGRALHEIGHT() { return (int)1024L; }

    public static int CBS_DISABLENOSCROLL() { return (int)2048L; }

    public static int CBS_UPPERCASE() { return (int)8192L; }

    public static int CBS_LOWERCASE() { return (int)16384L; }

    public static int SBS_HORZ() { return (int)0L; }

    public static int SBS_VERT() { return (int)1L; }

    public static int SBS_TOPALIGN() { return (int)2L; }

    public static int SBS_LEFTALIGN() { return (int)2L; }

    public static int SBS_BOTTOMALIGN() { return (int)4L; }

    public static int SBS_RIGHTALIGN() { return (int)4L; }

    public static int SBS_SIZEBOXTOPLEFTALIGN() { return (int)2L; }

    public static int SBS_SIZEBOXBOTTOMRIGHTALIGN() { return (int)4L; }

    public static int SBS_SIZEBOX() { return (int)8L; }

    public static int SBS_SIZEGRIP() { return (int)16L; }

    public static int SIF_ALL() { return (int)23L; }

    public static int HELP_CONTEXT() { return (int)1L; }

    public static int HELP_QUIT() { return (int)2L; }

    public static int HELP_INDEX() { return (int)3L; }

    public static int HELP_CONTENTS() { return (int)3L; }

    public static int HELP_HELPONHELP() { return (int)4L; }

    public static int HELP_SETINDEX() { return (int)5L; }

    public static int HELP_SETCONTENTS() { return (int)5L; }

    public static int HELP_CONTEXTPOPUP() { return (int)8L; }

    public static int HELP_FORCEFILE() { return (int)9L; }

    public static int HELP_KEY() { return (int)257L; }

    public static int HELP_COMMAND() { return (int)258L; }

    public static int HELP_PARTIALKEY() { return (int)261L; }

    public static int HELP_MULTIKEY() { return (int)513L; }

    public static int HELP_SETWINPOS() { return (int)515L; }

    static final MemoryAddress GR_GLOBAL$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2L);
    public static jdk.incubator.foreign.MemoryAddress GR_GLOBAL() { return GR_GLOBAL$ADDR_CONSTANT_; }

    public static int SPI_SCREENSAVERRUNNING() { return (int)97L; }

    public static float TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA() { return 0.0010000000474974513f; }

    public static float TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN() { return 0.8999999761581421f; }

    public static float TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX() { return 0.9990000128746033f; }

    public static float TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE() { return 0.0010000000474974513f; }

    public static float TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA() { return 0.9900000095367432f; }

    public static int MIN_LOGICALDPIOVERRIDE() { return (int)-2L; }

    public static int SPI_GETMENUUNDERLINES() { return (int)4106L; }

    public static int SPI_SETMENUUNDERLINES() { return (int)4107L; }

    public static int SPIF_SENDCHANGE() { return (int)2L; }

    public static int METRICS_USEDEFAULT() { return (int)-1L; }

    public static int ARW_BOTTOMLEFT() { return (int)0L; }

    public static int ARW_BOTTOMRIGHT() { return (int)1L; }

    public static int ARW_TOPLEFT() { return (int)2L; }

    public static int ARW_TOPRIGHT() { return (int)3L; }

    public static int ARW_STARTMASK() { return (int)3L; }

    public static int ARW_STARTRIGHT() { return (int)1L; }

    public static int ARW_STARTTOP() { return (int)2L; }

    public static int ARW_LEFT() { return (int)0L; }

    public static int ARW_RIGHT() { return (int)0L; }

    public static int ARW_UP() { return (int)4L; }

    public static int ARW_DOWN() { return (int)4L; }

    public static int ARW_HIDE() { return (int)8L; }

    public static int DISP_CHANGE_FAILED() { return (int)-1L; }

    public static int DISP_CHANGE_BADMODE() { return (int)-2L; }

    public static int DISP_CHANGE_NOTUPDATED() { return (int)-3L; }

    public static int DISP_CHANGE_BADFLAGS() { return (int)-4L; }

    public static int DISP_CHANGE_BADPARAM() { return (int)-5L; }

    public static int DISP_CHANGE_BADDUALVIEW() { return (int)-6L; }

    public static int ENUM_CURRENT_SETTINGS() { return (int)4294967295L; }

    public static int ENUM_REGISTRY_SETTINGS() { return (int)4294967294L; }

    public static int SKF_RWINLATCHED() { return (int)2147483648L; }

    public static int MKF_MOUSEMODE() { return (int)2147483648L; }

    public static int OBJID_WINDOW() { return (int)0L; }

    public static int OBJID_SYSMENU() { return (int)-1L; }

    public static int OBJID_TITLEBAR() { return (int)-2L; }

    public static int OBJID_MENU() { return (int)-3L; }

    public static int OBJID_CLIENT() { return (int)-4L; }

    public static int OBJID_VSCROLL() { return (int)-5L; }

    public static int OBJID_HSCROLL() { return (int)-6L; }

    public static int OBJID_SIZEGRIP() { return (int)-7L; }

    public static int OBJID_CARET() { return (int)-8L; }

    public static int OBJID_CURSOR() { return (int)-9L; }

    public static int OBJID_ALERT() { return (int)-10L; }

    public static int OBJID_SOUND() { return (int)-11L; }

    public static int OBJID_QUERYCLASSNAMEIDX() { return (int)-12L; }

    public static int OBJID_NATIVEOM() { return (int)-16L; }

    public static int STATE_SYSTEM_INDETERMINATE() { return (int)32L; }

    public static int RI_MOUSE_BUTTON_1_DOWN() { return (int)1L; }

    public static int RI_MOUSE_BUTTON_1_UP() { return (int)2L; }

    public static int RI_MOUSE_BUTTON_2_DOWN() { return (int)4L; }

    public static int RI_MOUSE_BUTTON_2_UP() { return (int)8L; }

    public static int RI_MOUSE_BUTTON_3_DOWN() { return (int)16L; }

    public static int RI_MOUSE_BUTTON_3_UP() { return (int)32L; }

    public static int MSGFLTINFO_NONE() { return (int)0L; }

    public static int MSGFLTINFO_ALREADYALLOWED_FORWND() { return (int)1L; }

    public static int MSGFLTINFO_ALREADYDISALLOWED_FORWND() { return (int)2L; }

    public static int MSGFLTINFO_ALLOWED_HIGHER() { return (int)3L; }

    public static int MSGFLT_RESET() { return (int)0L; }

    public static int MSGFLT_ALLOW() { return (int)1L; }

    public static int MSGFLT_DISALLOW() { return (int)2L; }

    public static int GID_ROLLOVER() { return (int)7L; }

    public static int GC_ROLLOVER() { return (int)1L; }

    public static int LOCALE_NOUSEROVERRIDE() { return (int)2147483648L; }

    public static int LOCALE_SLANGUAGE() { return (int)2L; }

    public static int LOCALE_SLANGDISPLAYNAME() { return (int)111L; }

    public static int LOCALE_SENGLANGUAGE() { return (int)4097L; }

    public static int LOCALE_SNATIVELANGNAME() { return (int)4L; }

    public static int LOCALE_SCOUNTRY() { return (int)6L; }

    public static int LOCALE_SENGCOUNTRY() { return (int)4098L; }

    public static int LOCALE_SNATIVECTRYNAME() { return (int)8L; }

    public static int LOCALE_ICOUNTRY() { return (int)5L; }

    public static int LOCALE_S1159() { return (int)40L; }

    public static int LOCALE_S2359() { return (int)41L; }

    public static int CAL_NOUSEROVERRIDE() { return (int)2147483648L; }

    public static int CAL_USE_CP_ACP() { return (int)1073741824L; }

    public static int CAL_RETURN_NUMBER() { return (int)536870912L; }

    public static int CAL_RETURN_GENITIVE_NAMES() { return (int)268435456L; }

    public static int ENUM_ALL_CALENDARS() { return (int)4294967295L; }

    public static int MUI_UI_FALLBACK() { return (int)48L; }

    public static int GEOID_NOT_AVAILABLE() { return (int)-1L; }

    static final MemoryAddress GEO_NAME_USER_DEFAULT$ADDR_CONSTANT_ = MemoryAddress.ofLong(0L);
    public static jdk.incubator.foreign.MemoryAddress GEO_NAME_USER_DEFAULT() { return GEO_NAME_USER_DEFAULT$ADDR_CONSTANT_; }

    static final MemoryAddress LOCALE_NAME_USER_DEFAULT$ADDR_CONSTANT_ = MemoryAddress.ofLong(0L);
    public static jdk.incubator.foreign.MemoryAddress LOCALE_NAME_USER_DEFAULT() { return LOCALE_NAME_USER_DEFAULT$ADDR_CONSTANT_; }

    static final MemorySegment LOCALE_NAME_INVARIANT$SEGMENT_CONSTANT_ = CSupport.toCString("");
    public static jdk.incubator.foreign.MemorySegment LOCALE_NAME_INVARIANT() { return LOCALE_NAME_INVARIANT$SEGMENT_CONSTANT_; }

    static final MemorySegment LOCALE_NAME_SYSTEM_DEFAULT$SEGMENT_CONSTANT_ = CSupport.toCString("!");
    public static jdk.incubator.foreign.MemorySegment LOCALE_NAME_SYSTEM_DEFAULT() { return LOCALE_NAME_SYSTEM_DEFAULT$SEGMENT_CONSTANT_; }

    public static int ATTACH_PARENT_PROCESS() { return (int)4294967295L; }

    public static int PSEUDOCONSOLE_INHERIT_CURSOR() { return (int)1L; }

    static final MemoryAddress VS_FILE_INFO$ADDR_CONSTANT_ = MemoryAddress.ofLong(16L);
    public static jdk.incubator.foreign.MemoryAddress VS_FILE_INFO() { return VS_FILE_INFO$ADDR_CONSTANT_; }

    public static int VS_FFI_SIGNATURE() { return (int)4277077181L; }

    public static int VS_FFI_STRUCVERSION() { return (int)65536L; }

    public static int VS_FFI_FILEFLAGSMASK() { return (int)63L; }

    public static int VS_FF_DEBUG() { return (int)1L; }

    public static int VS_FF_PRERELEASE() { return (int)2L; }

    public static int VS_FF_PATCHED() { return (int)4L; }

    public static int VS_FF_PRIVATEBUILD() { return (int)8L; }

    public static int VS_FF_INFOINFERRED() { return (int)16L; }

    public static int VS_FF_SPECIALBUILD() { return (int)32L; }

    public static int VOS_UNKNOWN() { return (int)0L; }

    public static int VOS_DOS() { return (int)65536L; }

    public static int VOS_OS216() { return (int)131072L; }

    public static int VOS_OS232() { return (int)196608L; }

    public static int VOS_NT() { return (int)262144L; }

    public static int VOS_WINCE() { return (int)327680L; }

    public static int VOS__BASE() { return (int)0L; }

    public static int VOS__WINDOWS16() { return (int)1L; }

    public static int VOS__PM16() { return (int)2L; }

    public static int VOS__PM32() { return (int)3L; }

    public static int VOS__WINDOWS32() { return (int)4L; }

    public static int VOS_DOS_WINDOWS16() { return (int)65537L; }

    public static int VOS_DOS_WINDOWS32() { return (int)65540L; }

    public static int VOS_OS216_PM16() { return (int)131074L; }

    public static int VOS_OS232_PM32() { return (int)196611L; }

    public static int VOS_NT_WINDOWS32() { return (int)262148L; }

    public static int VFT_UNKNOWN() { return (int)0L; }

    public static int VFT_APP() { return (int)1L; }

    public static int VFT_DLL() { return (int)2L; }

    public static int VFT_DRV() { return (int)3L; }

    public static int VFT_FONT() { return (int)4L; }

    public static int VFT_VXD() { return (int)5L; }

    public static int VFT_STATIC_LIB() { return (int)7L; }

    public static int VFT2_UNKNOWN() { return (int)0L; }

    public static int VFT2_DRV_PRINTER() { return (int)1L; }

    public static int VFT2_DRV_KEYBOARD() { return (int)2L; }

    public static int VFT2_DRV_LANGUAGE() { return (int)3L; }

    public static int VFT2_DRV_DISPLAY() { return (int)4L; }

    public static int VFT2_DRV_MOUSE() { return (int)5L; }

    public static int VFT2_DRV_NETWORK() { return (int)6L; }

    public static int VFT2_DRV_SYSTEM() { return (int)7L; }

    public static int VFT2_DRV_INSTALLABLE() { return (int)8L; }

    public static int VFT2_DRV_SOUND() { return (int)9L; }

    public static int VFT2_DRV_COMM() { return (int)10L; }

    public static int VFT2_DRV_INPUTMETHOD() { return (int)11L; }

    public static int VFT2_DRV_VERSIONED_PRINTER() { return (int)12L; }

    public static int VFT2_FONT_RASTER() { return (int)1L; }

    public static int VFT2_FONT_VECTOR() { return (int)2L; }

    public static int VFT2_FONT_TRUETYPE() { return (int)3L; }

    public static int VIF_TEMPFILE() { return (int)1L; }

    public static int VIF_MISMATCH() { return (int)2L; }

    public static int VIF_SRCOLD() { return (int)4L; }

    public static int VIF_DIFFLANG() { return (int)8L; }

    public static int VIF_DIFFCODEPG() { return (int)16L; }

    public static int VIF_DIFFTYPE() { return (int)32L; }

    public static int VIF_WRITEPROT() { return (int)64L; }

    public static int VIF_FILEINUSE() { return (int)128L; }

    public static int VIF_OUTOFSPACE() { return (int)256L; }

    public static int VIF_ACCESSVIOLATION() { return (int)512L; }

    public static int VIF_SHARINGVIOLATION() { return (int)1024L; }

    public static int VIF_CANNOTCREATE() { return (int)2048L; }

    public static int VIF_CANNOTDELETE() { return (int)4096L; }

    public static int VIF_CANNOTRENAME() { return (int)8192L; }

    public static int VIF_CANNOTDELETECUR() { return (int)16384L; }

    public static int VIF_OUTOFMEMORY() { return (int)32768L; }

    public static int VIF_CANNOTREADSRC() { return (int)65536L; }

    public static int VIF_CANNOTREADDST() { return (int)131072L; }

    public static int VIF_BUFFTOOSMALL() { return (int)262144L; }

    public static int VIF_CANNOTLOADLZ32() { return (int)524288L; }

    public static int VIF_CANNOTLOADCABINET() { return (int)1048576L; }

    public static int RRF_RT_DWORD() { return (int)24L; }

    public static int RRF_RT_QWORD() { return (int)72L; }

    static final MemoryAddress HKEY_CLASSES_ROOT$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2147483648L);
    public static jdk.incubator.foreign.MemoryAddress HKEY_CLASSES_ROOT() { return HKEY_CLASSES_ROOT$ADDR_CONSTANT_; }

    static final MemoryAddress HKEY_CURRENT_USER$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2147483647L);
    public static jdk.incubator.foreign.MemoryAddress HKEY_CURRENT_USER() { return HKEY_CURRENT_USER$ADDR_CONSTANT_; }

    static final MemoryAddress HKEY_LOCAL_MACHINE$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2147483646L);
    public static jdk.incubator.foreign.MemoryAddress HKEY_LOCAL_MACHINE() { return HKEY_LOCAL_MACHINE$ADDR_CONSTANT_; }

    static final MemoryAddress HKEY_USERS$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2147483645L);
    public static jdk.incubator.foreign.MemoryAddress HKEY_USERS() { return HKEY_USERS$ADDR_CONSTANT_; }

    static final MemoryAddress HKEY_PERFORMANCE_DATA$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2147483644L);
    public static jdk.incubator.foreign.MemoryAddress HKEY_PERFORMANCE_DATA() { return HKEY_PERFORMANCE_DATA$ADDR_CONSTANT_; }

    static final MemoryAddress HKEY_PERFORMANCE_TEXT$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2147483568L);
    public static jdk.incubator.foreign.MemoryAddress HKEY_PERFORMANCE_TEXT() { return HKEY_PERFORMANCE_TEXT$ADDR_CONSTANT_; }

    static final MemoryAddress HKEY_PERFORMANCE_NLSTEXT$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2147483552L);
    public static jdk.incubator.foreign.MemoryAddress HKEY_PERFORMANCE_NLSTEXT() { return HKEY_PERFORMANCE_NLSTEXT$ADDR_CONSTANT_; }

    static final MemoryAddress HKEY_CURRENT_CONFIG$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2147483643L);
    public static jdk.incubator.foreign.MemoryAddress HKEY_CURRENT_CONFIG() { return HKEY_CURRENT_CONFIG$ADDR_CONSTANT_; }

    static final MemoryAddress HKEY_DYN_DATA$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2147483642L);
    public static jdk.incubator.foreign.MemoryAddress HKEY_DYN_DATA() { return HKEY_DYN_DATA$ADDR_CONSTANT_; }

    static final MemoryAddress HKEY_CURRENT_USER_LOCAL_SETTINGS$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2147483641L);
    public static jdk.incubator.foreign.MemoryAddress HKEY_CURRENT_USER_LOCAL_SETTINGS() { return HKEY_CURRENT_USER_LOCAL_SETTINGS$ADDR_CONSTANT_; }

    static final MemoryAddress WIN31_CLASS$ADDR_CONSTANT_ = MemoryAddress.ofLong(0L);
    public static jdk.incubator.foreign.MemoryAddress WIN31_CLASS() { return WIN31_CLASS$ADDR_CONSTANT_; }

    public static int SHTDN_REASON_FLAG_PLANNED() { return (int)2147483648L; }

    public static int SHTDN_REASON_UNKNOWN() { return (int)255L; }

    public static int SHTDN_REASON_LEGACY_API() { return (int)2147942400L; }

    public static int SHTDN_REASON_VALID_BIT_MASK() { return (int)3238002687L; }

    public static int PCLEANUI() { return (int)2214592512L; }

    public static int UCLEANUI() { return (int)67108864L; }

    public static int PDIRTYUI() { return (int)2281701376L; }

    public static int UDIRTYUI() { return (int)134217728L; }

    public static int REASON_SWINSTALL() { return (int)196610L; }

    public static int REASON_HWINSTALL() { return (int)65538L; }

    public static int REASON_SERVICEHANG() { return (int)196613L; }

    public static int REASON_UNSTABLE() { return (int)327686L; }

    public static int REASON_SWHWRECONF() { return (int)196612L; }

    public static int REASON_OTHER() { return (int)0L; }

    public static int REASON_UNKNOWN() { return (int)255L; }

    public static int REASON_LEGACY_API() { return (int)2147942400L; }

    public static int REASON_PLANNED_FLAG() { return (int)2147483648L; }

    public static int MAX_SHUTDOWN_TIMEOUT() { return (int)315360000L; }

    public static int WNNC_CRED_MANAGER() { return (int)4294901760L; }

    public static int WNNC_NET_LANMAN() { return (int)131072L; }

    public static int RESOURCETYPE_UNKNOWN() { return (int)4294967295L; }

    public static int RESOURCEUSAGE_ALL() { return (int)19L; }

    public static int RESOURCEUSAGE_RESERVED() { return (int)2147483648L; }

    public static int CONNECT_RESERVED() { return (int)4278190080L; }

    public static int WN_SUCCESS() { return (int)0L; }

    public static int WN_NO_ERROR() { return (int)0L; }

    public static int WN_NOT_SUPPORTED() { return (int)50L; }

    public static int WN_CANCEL() { return (int)1223L; }

    public static int WN_RETRY() { return (int)1237L; }

    public static int WN_NET_ERROR() { return (int)59L; }

    public static int WN_MORE_DATA() { return (int)234L; }

    public static int WN_BAD_POINTER() { return (int)487L; }

    public static int WN_BAD_VALUE() { return (int)87L; }

    public static int WN_BAD_USER() { return (int)2202L; }

    public static int WN_BAD_PASSWORD() { return (int)86L; }

    public static int WN_ACCESS_DENIED() { return (int)5L; }

    public static int WN_FUNCTION_BUSY() { return (int)170L; }

    public static int WN_WINDOWS_ERROR() { return (int)59L; }

    public static int WN_OUT_OF_MEMORY() { return (int)8L; }

    public static int WN_NO_NETWORK() { return (int)1222L; }

    public static int WN_EXTENDED_ERROR() { return (int)1208L; }

    public static int WN_BAD_LEVEL() { return (int)124L; }

    public static int WN_BAD_HANDLE() { return (int)6L; }

    public static int WN_NOT_INITIALIZING() { return (int)1247L; }

    public static int WN_NO_MORE_DEVICES() { return (int)1248L; }

    public static int WN_NOT_CONNECTED() { return (int)2250L; }

    public static int WN_OPEN_FILES() { return (int)2401L; }

    public static int WN_DEVICE_IN_USE() { return (int)2404L; }

    public static int WN_BAD_NETNAME() { return (int)67L; }

    public static int WN_BAD_LOCALNAME() { return (int)1200L; }

    public static int WN_ALREADY_CONNECTED() { return (int)85L; }

    public static int WN_DEVICE_ERROR() { return (int)31L; }

    public static int WN_CONNECTION_CLOSED() { return (int)1201L; }

    public static int WN_NO_NET_OR_BAD_PATH() { return (int)1203L; }

    public static int WN_BAD_PROVIDER() { return (int)1204L; }

    public static int WN_CANNOT_OPEN_PROFILE() { return (int)1205L; }

    public static int WN_BAD_PROFILE() { return (int)1206L; }

    public static int WN_BAD_DEV_TYPE() { return (int)66L; }

    public static int WN_DEVICE_ALREADY_REMEMBERED() { return (int)1202L; }

    public static int WN_CONNECTED_OTHER_PASSWORD() { return (int)2108L; }

    public static int WN_CONNECTED_OTHER_PASSWORD_DEFAULT() { return (int)2109L; }

    public static int WN_NO_MORE_ENTRIES() { return (int)259L; }

    public static int WN_NOT_CONTAINER() { return (int)1207L; }

    public static int WN_NOT_AUTHENTICATED() { return (int)1244L; }

    public static int WN_NOT_LOGGED_ON() { return (int)1245L; }

    public static int WN_NOT_VALIDATED() { return (int)1311L; }

    static final MemorySegment SERVICES_ACTIVE_DATABASEW$SEGMENT_CONSTANT_ = CSupport.toCString("S");
    public static jdk.incubator.foreign.MemorySegment SERVICES_ACTIVE_DATABASEW() { return SERVICES_ACTIVE_DATABASEW$SEGMENT_CONSTANT_; }

    static final MemorySegment SERVICES_FAILED_DATABASEW$SEGMENT_CONSTANT_ = CSupport.toCString("S");
    public static jdk.incubator.foreign.MemorySegment SERVICES_FAILED_DATABASEW() { return SERVICES_FAILED_DATABASEW$SEGMENT_CONSTANT_; }

    static final MemorySegment SERVICES_ACTIVE_DATABASEA$SEGMENT_CONSTANT_ = CSupport.toCString("ServicesActive");
    public static jdk.incubator.foreign.MemorySegment SERVICES_ACTIVE_DATABASEA() { return SERVICES_ACTIVE_DATABASEA$SEGMENT_CONSTANT_; }

    static final MemorySegment SERVICES_FAILED_DATABASEA$SEGMENT_CONSTANT_ = CSupport.toCString("ServicesFailed");
    public static jdk.incubator.foreign.MemorySegment SERVICES_FAILED_DATABASEA() { return SERVICES_FAILED_DATABASEA$SEGMENT_CONSTANT_; }

    public static short SC_GROUP_IDENTIFIERW() { return (short)43L; }

    public static int SC_GROUP_IDENTIFIERA() { return (int)43L; }

    static final MemorySegment SERVICES_ACTIVE_DATABASE$SEGMENT_CONSTANT_ = CSupport.toCString("ServicesActive");
    public static jdk.incubator.foreign.MemorySegment SERVICES_ACTIVE_DATABASE() { return SERVICES_ACTIVE_DATABASE$SEGMENT_CONSTANT_; }

    static final MemorySegment SERVICES_FAILED_DATABASE$SEGMENT_CONSTANT_ = CSupport.toCString("ServicesFailed");
    public static jdk.incubator.foreign.MemorySegment SERVICES_FAILED_DATABASE() { return SERVICES_FAILED_DATABASE$SEGMENT_CONSTANT_; }

    public static int SC_GROUP_IDENTIFIER() { return (int)43L; }

    public static int SERVICE_NO_CHANGE() { return (int)4294967295L; }

    public static int SERVICE_STATE_ALL() { return (int)3L; }

    public static int SC_MANAGER_ALL_ACCESS() { return (int)983103L; }

    public static int SERVICE_ALL_ACCESS() { return (int)983551L; }

    public static int SERVICE_NOTIFY_STATUS_CHANGE() { return (int)2L; }

    public static int SERVICE_STOP_REASON_FLAG_MAX() { return (int)2147483648L; }

    public static int SERVICE_SID_TYPE_RESTRICTED() { return (int)3L; }

    static final MemorySegment SERVICE_TRIGGER_STARTED_ARGUMENT$SEGMENT_CONSTANT_ = CSupport.toCString("T");
    public static jdk.incubator.foreign.MemorySegment SERVICE_TRIGGER_STARTED_ARGUMENT() { return SERVICE_TRIGGER_STARTED_ARGUMENT$SEGMENT_CONSTANT_; }

    static final MemorySegment SC_AGGREGATE_STORAGE_KEY$SEGMENT_CONSTANT_ = CSupport.toCString("S");
    public static jdk.incubator.foreign.MemorySegment SC_AGGREGATE_STORAGE_KEY() { return SC_AGGREGATE_STORAGE_KEY$SEGMENT_CONSTANT_; }

    public static int MDM_MASK_PROTOCOLINFO() { return (int)268369920L; }

    public static int MDM_SHIFT_PROTOCOLINFO() { return (int)16L; }

    public static int MDM_MASK_EXTENDEDINFO() { return (int)268431360L; }

    public static int MDM_SHIFT_EXTENDEDINFO() { return (int)12L; }

    public static int MDM_MASK_HDLCPPP_AUTH() { return (int)56L; }

    public static int MDM_MASK_HDLCPPP_ML() { return (int)192L; }

    public static int MDM_PROTOCOL_HDLCPPP_64K() { return (int)1114112L; }

    public static int MDM_PROTOCOL_HDLCPPP_56K() { return (int)2162688L; }

    public static int MDM_PROTOCOL_HDLCPPP_112K() { return (int)136380416L; }

    public static int MDM_PROTOCOL_HDLCPPP_112K_PAP() { return (int)153157632L; }

    public static int MDM_PROTOCOL_HDLCPPP_112K_CHAP() { return (int)161546240L; }

    public static int MDM_PROTOCOL_HDLCPPP_112K_MSCHAP() { return (int)169934848L; }

    public static int MDM_PROTOCOL_HDLCPPP_128K() { return (int)135331840L; }

    public static int MDM_PROTOCOL_HDLCPPP_128K_PAP() { return (int)152109056L; }

    public static int MDM_PROTOCOL_HDLCPPP_128K_CHAP() { return (int)160497664L; }

    public static int MDM_PROTOCOL_HDLCPPP_128K_MSCHAP() { return (int)168886272L; }

    public static int MDM_MASK_V120_ML() { return (int)192L; }

    public static int MDM_PROTOCOL_V120_64K() { return (int)68485120L; }

    public static int MDM_PROTOCOL_V120_56K() { return (int)69533696L; }

    public static int MDM_PROTOCOL_V120_112K() { return (int)136642560L; }

    public static int MDM_PROTOCOL_V120_128K() { return (int)135593984L; }

    public static int MDM_PROTOCOL_X75_64K() { return (int)1245184L; }

    public static int MDM_PROTOCOL_X75_128K() { return (int)2293760L; }

    public static int MDM_PROTOCOL_X75_T_70() { return (int)3342336L; }

    public static int MDM_PROTOCOL_X75_BTX() { return (int)4390912L; }

    public static int MDM_PROTOCOL_V110_1DOT2K() { return (int)1310720L; }

    public static int MDM_PROTOCOL_V110_2DOT4K() { return (int)2359296L; }

    public static int MDM_PROTOCOL_V110_4DOT8K() { return (int)3407872L; }

    public static int MDM_PROTOCOL_V110_9DOT6K() { return (int)4456448L; }

    public static int MDM_PROTOCOL_V110_12DOT0K() { return (int)5505024L; }

    public static int MDM_PROTOCOL_V110_14DOT4K() { return (int)6553600L; }

    public static int MDM_PROTOCOL_V110_19DOT2K() { return (int)7602176L; }

    public static int MDM_PROTOCOL_V110_28DOT8K() { return (int)8650752L; }

    public static int MDM_PROTOCOL_V110_38DOT4K() { return (int)9699328L; }

    public static int MDM_PROTOCOL_V110_57DOT6K() { return (int)10747904L; }

    public static int MDM_MASK_AUTO_ML() { return (int)192L; }

    public static int MDM_PROTOCOL_AUTO_1CH() { return (int)67502080L; }

    public static int MDM_PROTOCOL_AUTO_2CH() { return (int)134610944L; }

    public static int MDM_PROTOCOL_ANALOG_RLP() { return (int)458752L; }

    public static int MDM_PROTOCOL_ANALOG_NRLP() { return (int)1507328L; }

    public static int MDM_PROTOCOL_ANALOG_V34() { return (int)2555904L; }

    public static int MDM_PROTOCOL_GPRS() { return (int)524288L; }

    public static int MDM_PROTOCOL_PIAFS_INCOMING() { return (int)589824L; }

    public static int MDM_PROTOCOL_PIAFS_OUTGOING() { return (int)1638400L; }

    public static int ISC_SHOWUICOMPOSITIONWINDOW() { return (int)2147483648L; }

    public static int ISC_SHOWUIALL() { return (int)3221225487L; }

    public static int IGP_GETIMEVERSION() { return (int)4294967292L; }

    public static int SCS_SETSTR() { return (int)9L; }

    public static int SCS_CHANGEATTR() { return (int)18L; }

    public static int SCS_CHANGECLAUSE() { return (int)36L; }

    public static int IME_CMODE_CHINESE() { return (int)1L; }

    public static int IME_CMODE_HANGUL() { return (int)1L; }

    public static int IME_CMODE_JAPANESE() { return (int)1L; }

    public static int IME_CMODE_HANGEUL() { return (int)1L; }

    public static int IME_CMODE_RESERVED() { return (int)4026531840L; }

    public static int IMM_ERROR_NODATA() { return (int)-1L; }

    public static int IMM_ERROR_GENERAL() { return (int)-2L; }

    public static int IME_REGWORD_STYLE_USER_FIRST() { return (int)2147483648L; }

    public static int IME_REGWORD_STYLE_USER_LAST() { return (int)4294967295L; }

    public static int IMFS_GRAYED() { return (int)3L; }

    public static int IMFS_DISABLED() { return (int)3L; }

    public static int IMFS_CHECKED() { return (int)8L; }

    public static int IMFS_HILITE() { return (int)128L; }

    public static int IMFS_ENABLED() { return (int)0L; }

    public static int IMFS_UNCHECKED() { return (int)0L; }

    public static int IMFS_UNHILITE() { return (int)0L; }

    public static int IMFS_DEFAULT() { return (int)4096L; }

}

