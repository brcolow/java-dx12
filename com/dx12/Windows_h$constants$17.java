// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$17 extends Windows_h$constants$16 {
    Windows_h$constants$17() {}
    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$TimeDateStamp$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$TimeDateStamp$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$TimeDateStamp$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$MajorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$MajorVersion$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$MajorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$MajorVersion$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$MajorVersion$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$MajorVersion$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$MinorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$MinorVersion$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$MinorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$MinorVersion$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$MinorVersion$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$MinorVersion$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsClear$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsClear$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsClear$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsClear$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GlobalFlagsClear"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsClear$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsClear$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsSet$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsSet$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsSet$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsSet$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GlobalFlagsSet"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsSet$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsSet$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$CriticalSectionDefaultTimeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$CriticalSectionDefaultTimeout$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$CriticalSectionDefaultTimeout$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$CriticalSectionDefaultTimeout$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CriticalSectionDefaultTimeout"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$CriticalSectionDefaultTimeout$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$CriticalSectionDefaultTimeout$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitFreeBlockThreshold$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitFreeBlockThreshold$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitFreeBlockThreshold$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitFreeBlockThreshold$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DeCommitFreeBlockThreshold"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitFreeBlockThreshold$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitFreeBlockThreshold$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitTotalFreeThreshold$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitTotalFreeThreshold$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitTotalFreeThreshold$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitTotalFreeThreshold$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DeCommitTotalFreeThreshold"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitTotalFreeThreshold$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitTotalFreeThreshold$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$LockPrefixTable$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$LockPrefixTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$LockPrefixTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$LockPrefixTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LockPrefixTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$LockPrefixTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$LockPrefixTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$MaximumAllocationSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$MaximumAllocationSize$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$MaximumAllocationSize$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$MaximumAllocationSize$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumAllocationSize"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$MaximumAllocationSize$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$MaximumAllocationSize$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$VirtualMemoryThreshold$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$VirtualMemoryThreshold$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$VirtualMemoryThreshold$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$VirtualMemoryThreshold$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VirtualMemoryThreshold"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$VirtualMemoryThreshold$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$VirtualMemoryThreshold$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessAffinityMask$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessAffinityMask$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessAffinityMask$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessAffinityMask$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessAffinityMask"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessAffinityMask$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessAffinityMask$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessHeapFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessHeapFlags$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessHeapFlags$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessHeapFlags$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ProcessHeapFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessHeapFlags$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessHeapFlags$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$CSDVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$CSDVersion$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$CSDVersion$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$CSDVersion$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CSDVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$CSDVersion$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$CSDVersion$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DependentLoadFlags$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DependentLoadFlags$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DependentLoadFlags$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DependentLoadFlags$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DependentLoadFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DependentLoadFlags$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DependentLoadFlags$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$EditList$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$EditList$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$EditList$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$EditList$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EditList"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$EditList$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$EditList$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$SecurityCookie$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$SecurityCookie$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$SecurityCookie$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$SecurityCookie$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SecurityCookie"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$SecurityCookie$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$SecurityCookie$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerTable$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SEHandlerTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerCount$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerCount$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerCount$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SEHandlerCount"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerCount$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerCount$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFCheckFunctionPointer$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFCheckFunctionPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFCheckFunctionPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFCheckFunctionPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardCFCheckFunctionPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFCheckFunctionPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFCheckFunctionPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFDispatchFunctionPointer$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFDispatchFunctionPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFDispatchFunctionPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFDispatchFunctionPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardCFDispatchFunctionPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFDispatchFunctionPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFDispatchFunctionPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionTable$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardCFFunctionTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionCount$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionCount$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionCount$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardCFFunctionCount"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionCount$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionCount$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardFlags$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardFlags$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardFlags$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GuardFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardFlags$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardFlags$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryTable$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardAddressTakenIatEntryTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryCount$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryCount$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryCount$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardAddressTakenIatEntryCount"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryCount$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryCount$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetTable$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardLongJumpTargetTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetCount$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetCount$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetCount$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardLongJumpTargetCount"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetCount$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetCount$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTable$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DynamicValueRelocTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$CHPEMetadataPointer$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$CHPEMetadataPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$CHPEMetadataPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$CHPEMetadataPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CHPEMetadataPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$CHPEMetadataPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$CHPEMetadataPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutine$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutine$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutine$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutine$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardRFFailureRoutine"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutine$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutine$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutineFunctionPointer$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutineFunctionPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutineFunctionPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutineFunctionPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardRFFailureRoutineFunctionPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutineFunctionPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutineFunctionPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableOffset$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableOffset$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableOffset$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DynamicValueRelocTableOffset"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableOffset$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableOffset$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableSection$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableSection$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableSection$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableSection$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DynamicValueRelocTableSection"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableSection$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableSection$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved2$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved2$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved2$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved2$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved2$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved2$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFVerifyStackPointerFunctionPointer$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFVerifyStackPointerFunctionPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFVerifyStackPointerFunctionPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFVerifyStackPointerFunctionPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardRFVerifyStackPointerFunctionPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFVerifyStackPointerFunctionPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFVerifyStackPointerFunctionPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$HotPatchTableOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$HotPatchTableOffset$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$HotPatchTableOffset$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$HotPatchTableOffset$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HotPatchTableOffset"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$HotPatchTableOffset$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$HotPatchTableOffset$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved3$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved3$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved3$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved3$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved3"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved3$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved3$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$EnclaveConfigurationPointer$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$EnclaveConfigurationPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$EnclaveConfigurationPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$EnclaveConfigurationPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnclaveConfigurationPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$EnclaveConfigurationPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$EnclaveConfigurationPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$VolatileMetadataPointer$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$VolatileMetadataPointer$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$VolatileMetadataPointer$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$VolatileMetadataPointer$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolatileMetadataPointer"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$VolatileMetadataPointer$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$VolatileMetadataPointer$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationTable$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationTable$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationTable$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationTable$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardEHContinuationTable"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationTable$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationTable$VH_; }

    static final MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationCount$LAYOUT() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationCount$LAYOUT_; }

    static final VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationCount$VH_ = _IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GuardEHContinuationCount"));
    public static java.lang.invoke.VarHandle _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationCount$VH() { return _IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationCount$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Version"),
        C_INT.withName("Size"),
        C_INT.withName("SequenceNumber"),
        C_INT.withName("BaseImageList"),
        C_INT.withName("BaseImageCount"),
        C_INT.withName("BufferOffset"),
        C_INT.withName("ExtraPatchSize")
    ).withName("_IMAGE_HOT_PATCH_INFO");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_INFO$struct$LAYOUT() { return _IMAGE_HOT_PATCH_INFO$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_INFO$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_INFO$Version$LAYOUT() { return _IMAGE_HOT_PATCH_INFO$Version$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_INFO$Version$VH_ = _IMAGE_HOT_PATCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_INFO$Version$VH() { return _IMAGE_HOT_PATCH_INFO$Version$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_INFO$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_INFO$Size$LAYOUT() { return _IMAGE_HOT_PATCH_INFO$Size$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_INFO$Size$VH_ = _IMAGE_HOT_PATCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_INFO$Size$VH() { return _IMAGE_HOT_PATCH_INFO$Size$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_INFO$SequenceNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_INFO$SequenceNumber$LAYOUT() { return _IMAGE_HOT_PATCH_INFO$SequenceNumber$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_INFO$SequenceNumber$VH_ = _IMAGE_HOT_PATCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SequenceNumber"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_INFO$SequenceNumber$VH() { return _IMAGE_HOT_PATCH_INFO$SequenceNumber$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_INFO$BaseImageList$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_INFO$BaseImageList$LAYOUT() { return _IMAGE_HOT_PATCH_INFO$BaseImageList$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_INFO$BaseImageList$VH_ = _IMAGE_HOT_PATCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseImageList"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_INFO$BaseImageList$VH() { return _IMAGE_HOT_PATCH_INFO$BaseImageList$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_INFO$BaseImageCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_INFO$BaseImageCount$LAYOUT() { return _IMAGE_HOT_PATCH_INFO$BaseImageCount$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_INFO$BaseImageCount$VH_ = _IMAGE_HOT_PATCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseImageCount"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_INFO$BaseImageCount$VH() { return _IMAGE_HOT_PATCH_INFO$BaseImageCount$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_INFO$BufferOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_INFO$BufferOffset$LAYOUT() { return _IMAGE_HOT_PATCH_INFO$BufferOffset$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_INFO$BufferOffset$VH_ = _IMAGE_HOT_PATCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BufferOffset"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_INFO$BufferOffset$VH() { return _IMAGE_HOT_PATCH_INFO$BufferOffset$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_INFO$ExtraPatchSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_INFO$ExtraPatchSize$LAYOUT() { return _IMAGE_HOT_PATCH_INFO$ExtraPatchSize$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_INFO$ExtraPatchSize$VH_ = _IMAGE_HOT_PATCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExtraPatchSize"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_INFO$ExtraPatchSize$VH() { return _IMAGE_HOT_PATCH_INFO$ExtraPatchSize$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_BASE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("SequenceNumber"),
        C_INT.withName("Flags"),
        C_INT.withName("OriginalTimeDateStamp"),
        C_INT.withName("OriginalCheckSum"),
        C_INT.withName("CodeIntegrityInfo"),
        C_INT.withName("CodeIntegritySize"),
        C_INT.withName("PatchTable"),
        C_INT.withName("BufferOffset")
    ).withName("_IMAGE_HOT_PATCH_BASE");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_BASE$struct$LAYOUT() { return _IMAGE_HOT_PATCH_BASE$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_BASE$SequenceNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_BASE$SequenceNumber$LAYOUT() { return _IMAGE_HOT_PATCH_BASE$SequenceNumber$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_BASE$SequenceNumber$VH_ = _IMAGE_HOT_PATCH_BASE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SequenceNumber"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_BASE$SequenceNumber$VH() { return _IMAGE_HOT_PATCH_BASE$SequenceNumber$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_BASE$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_BASE$Flags$LAYOUT() { return _IMAGE_HOT_PATCH_BASE$Flags$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_BASE$Flags$VH_ = _IMAGE_HOT_PATCH_BASE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_BASE$Flags$VH() { return _IMAGE_HOT_PATCH_BASE$Flags$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_BASE$OriginalTimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_BASE$OriginalTimeDateStamp$LAYOUT() { return _IMAGE_HOT_PATCH_BASE$OriginalTimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_BASE$OriginalTimeDateStamp$VH_ = _IMAGE_HOT_PATCH_BASE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OriginalTimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_BASE$OriginalTimeDateStamp$VH() { return _IMAGE_HOT_PATCH_BASE$OriginalTimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_BASE$OriginalCheckSum$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_BASE$OriginalCheckSum$LAYOUT() { return _IMAGE_HOT_PATCH_BASE$OriginalCheckSum$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_BASE$OriginalCheckSum$VH_ = _IMAGE_HOT_PATCH_BASE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OriginalCheckSum"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_BASE$OriginalCheckSum$VH() { return _IMAGE_HOT_PATCH_BASE$OriginalCheckSum$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_BASE$CodeIntegrityInfo$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_BASE$CodeIntegrityInfo$LAYOUT() { return _IMAGE_HOT_PATCH_BASE$CodeIntegrityInfo$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_BASE$CodeIntegrityInfo$VH_ = _IMAGE_HOT_PATCH_BASE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CodeIntegrityInfo"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_BASE$CodeIntegrityInfo$VH() { return _IMAGE_HOT_PATCH_BASE$CodeIntegrityInfo$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_BASE$CodeIntegritySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_BASE$CodeIntegritySize$LAYOUT() { return _IMAGE_HOT_PATCH_BASE$CodeIntegritySize$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_BASE$CodeIntegritySize$VH_ = _IMAGE_HOT_PATCH_BASE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CodeIntegritySize"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_BASE$CodeIntegritySize$VH() { return _IMAGE_HOT_PATCH_BASE$CodeIntegritySize$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_BASE$PatchTable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_BASE$PatchTable$LAYOUT() { return _IMAGE_HOT_PATCH_BASE$PatchTable$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_BASE$PatchTable$VH_ = _IMAGE_HOT_PATCH_BASE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PatchTable"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_BASE$PatchTable$VH() { return _IMAGE_HOT_PATCH_BASE$PatchTable$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_BASE$BufferOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_BASE$BufferOffset$LAYOUT() { return _IMAGE_HOT_PATCH_BASE$BufferOffset$LAYOUT_; }

    static final VarHandle _IMAGE_HOT_PATCH_BASE$BufferOffset$VH_ = _IMAGE_HOT_PATCH_BASE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BufferOffset"));
    public static java.lang.invoke.VarHandle _IMAGE_HOT_PATCH_BASE$BufferOffset$VH() { return _IMAGE_HOT_PATCH_BASE$BufferOffset$VH_; }

    static final MemoryLayout _IMAGE_HOT_PATCH_HASHES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(32, C_BOOL).withName("SHA256"),
        MemoryLayout.ofSequence(20, C_BOOL).withName("SHA1")
    ).withName("_IMAGE_HOT_PATCH_HASHES");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_HOT_PATCH_HASHES$struct$LAYOUT() { return _IMAGE_HOT_PATCH_HASHES$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_CE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("FuncStart"),
        C_INT
    ).withName("_IMAGE_CE_RUNTIME_FUNCTION_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_CE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT() { return _IMAGE_CE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_CE_RUNTIME_FUNCTION_ENTRY$FuncStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_CE_RUNTIME_FUNCTION_ENTRY$FuncStart$LAYOUT() { return _IMAGE_CE_RUNTIME_FUNCTION_ENTRY$FuncStart$LAYOUT_; }

    static final VarHandle _IMAGE_CE_RUNTIME_FUNCTION_ENTRY$FuncStart$VH_ = _IMAGE_CE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FuncStart"));
    public static java.lang.invoke.VarHandle _IMAGE_CE_RUNTIME_FUNCTION_ENTRY$FuncStart$VH() { return _IMAGE_CE_RUNTIME_FUNCTION_ENTRY$FuncStart$VH_; }

    static final MemoryLayout _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("BeginAddress"),
        C_INT.withName("UnwindData"),
        C_INT
    ).withName("_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT() { return _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT() { return _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_ = _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BeginAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH() { return _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_; }

    static final MemoryLayout _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT() { return _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT_; }

    static final VarHandle _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$UnwindData$VH_ = _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UnwindData"));
    public static java.lang.invoke.VarHandle _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$UnwindData$VH() { return _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$UnwindData$VH_; }

    public static int PdataRefToFullXdata() { return (int)0L; }

    public static int PdataPackedUnwindFunction() { return (int)1L; }

    public static int PdataPackedUnwindFragment() { return (int)2L; }

    public static int PdataCrUnchained() { return (int)0L; }

    public static int PdataCrUnchainedSavedLr() { return (int)1L; }

    public static int PdataCrChained() { return (int)3L; }

    static final MemoryLayout _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("BeginAddress"),
        C_INT.withName("UnwindData"),
        C_INT
    ).withName("_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT() { return _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT() { return _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_ = _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BeginAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH() { return _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_; }

    static final MemoryLayout _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT() { return _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT_; }

    static final VarHandle _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$UnwindData$VH_ = _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UnwindData"));
    public static java.lang.invoke.VarHandle _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$UnwindData$VH() { return _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$UnwindData$VH_; }

    static final MemoryLayout IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_INT.withName("HeaderData"),
        C_INT
    ).withName("IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA");
    public static jdk.incubator.foreign.MemoryLayout IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$struct$LAYOUT() { return IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$struct$LAYOUT_; }

    static final MemoryLayout IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$HeaderData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$HeaderData$LAYOUT() { return IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$HeaderData$LAYOUT_; }

    static final VarHandle IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$HeaderData$VH_ = IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HeaderData"));
    public static java.lang.invoke.VarHandle IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$HeaderData$VH() { return IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$HeaderData$VH_; }

    static final MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("BeginAddress"),
        C_LONGLONG.withName("EndAddress"),
        C_LONGLONG.withName("ExceptionHandler"),
        C_LONGLONG.withName("HandlerData"),
        C_LONGLONG.withName("PrologEndAddress")
    ).withName("_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_ = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BeginAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_; }

    static final MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$EndAddress$VH_ = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EndAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$EndAddress$VH() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$EndAddress$VH_; }

    static final MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH_ = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionHandler"));
    public static java.lang.invoke.VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH_; }

    static final MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$VH_ = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HandlerData"));
    public static java.lang.invoke.VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$VH() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$VH_; }

    static final MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH_ = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PrologEndAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("BeginAddress"),
        C_INT.withName("EndAddress"),
        C_INT.withName("ExceptionHandler"),
        C_INT.withName("HandlerData"),
        C_INT.withName("PrologEndAddress")
    ).withName("_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_ = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BeginAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$VH_ = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$VH() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$VH_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH_ = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionHandler"));
    public static java.lang.invoke.VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$VH_ = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HandlerData"));
    public static java.lang.invoke.VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$VH() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$VH_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH_ = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrologEndAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH_; }

    static final MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("BeginAddress"),
        C_INT.withName("EndAddress"),
        C_INT.withName("UnwindInfoAddress"),
        C_INT.withName("UnwindData")
    ).withName("_IMAGE_RUNTIME_FUNCTION_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_; }

    static final VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_ = _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BeginAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_; }

    static final MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT_; }

    static final VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$VH_ = _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$VH() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$VH_; }

    static final MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$LAYOUT() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$LAYOUT_; }

    static final VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$VH_ = _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UnwindInfoAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$VH() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$VH_; }

    static final MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT_; }

    static final VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$VH_ = _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UnwindData"));
    public static java.lang.invoke.VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$VH() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        C_INT.withName("MinimumRequiredConfigSize"),
        C_INT.withName("PolicyFlags"),
        C_INT.withName("NumberOfImports"),
        C_INT.withName("ImportList"),
        C_INT.withName("ImportEntrySize"),
        MemoryLayout.ofSequence(16, C_BOOL).withName("FamilyID"),
        MemoryLayout.ofSequence(16, C_BOOL).withName("ImageID"),
        C_INT.withName("ImageVersion"),
        C_INT.withName("SecurityVersion"),
        C_INT.withName("EnclaveSize"),
        C_INT.withName("NumberOfThreads"),
        C_INT.withName("EnclaveFlags")
    ).withName("_IMAGE_ENCLAVE_CONFIG32");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$Size$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$Size$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$Size$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$Size$VH() { return _IMAGE_ENCLAVE_CONFIG32$Size$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinimumRequiredConfigSize"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$VH() { return _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PolicyFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$VH() { return _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfImports"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$VH() { return _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImportList$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImportList$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$ImportList$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$ImportList$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportList"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$ImportList$VH() { return _IMAGE_ENCLAVE_CONFIG32$ImportList$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportEntrySize"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$VH() { return _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImageVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImageVersion$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$ImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$ImageVersion$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImageVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$ImageVersion$VH() { return _IMAGE_ENCLAVE_CONFIG32$ImageVersion$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$VH() { return _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EnclaveSize"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$VH() { return _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfThreads"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$VH() { return _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EnclaveFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$VH() { return _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        C_INT.withName("MinimumRequiredConfigSize"),
        C_INT.withName("PolicyFlags"),
        C_INT.withName("NumberOfImports"),
        C_INT.withName("ImportList"),
        C_INT.withName("ImportEntrySize"),
        MemoryLayout.ofSequence(16, C_BOOL).withName("FamilyID"),
        MemoryLayout.ofSequence(16, C_BOOL).withName("ImageID"),
        C_INT.withName("ImageVersion"),
        C_INT.withName("SecurityVersion"),
        C_LONGLONG.withName("EnclaveSize"),
        C_INT.withName("NumberOfThreads"),
        C_INT.withName("EnclaveFlags")
    ).withName("_IMAGE_ENCLAVE_CONFIG64");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$Size$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$Size$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$Size$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$Size$VH() { return _IMAGE_ENCLAVE_CONFIG64$Size$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinimumRequiredConfigSize"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$VH() { return _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PolicyFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$VH() { return _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfImports"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$VH() { return _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImportList$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImportList$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$ImportList$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$ImportList$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportList"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$ImportList$VH() { return _IMAGE_ENCLAVE_CONFIG64$ImportList$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportEntrySize"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$VH() { return _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImageVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImageVersion$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$ImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$ImageVersion$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImageVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$ImageVersion$VH() { return _IMAGE_ENCLAVE_CONFIG64$ImageVersion$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$VH() { return _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnclaveSize"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$VH() { return _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfThreads"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$VH() { return _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EnclaveFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$VH() { return _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MatchType"),
        C_INT.withName("MinimumSecurityVersion"),
        MemoryLayout.ofSequence(32, C_BOOL).withName("UniqueOrAuthorID"),
        MemoryLayout.ofSequence(16, C_BOOL).withName("FamilyID"),
        MemoryLayout.ofSequence(16, C_BOOL).withName("ImageID"),
        C_INT.withName("ImportName"),
        C_INT.withName("Reserved")
    ).withName("_IMAGE_ENCLAVE_IMPORT");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT() { return _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ENCLAVE_IMPORT$MatchType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_IMPORT$MatchType$LAYOUT() { return _IMAGE_ENCLAVE_IMPORT$MatchType$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_IMPORT$MatchType$VH_ = _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MatchType"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_IMPORT$MatchType$VH() { return _IMAGE_ENCLAVE_IMPORT$MatchType$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$LAYOUT() { return _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$VH_ = _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinimumSecurityVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$VH() { return _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_IMPORT$ImportName$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_IMPORT$ImportName$LAYOUT() { return _IMAGE_ENCLAVE_IMPORT$ImportName$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_IMPORT$ImportName$VH_ = _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportName"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_IMPORT$ImportName$VH() { return _IMAGE_ENCLAVE_IMPORT$ImportName$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_IMPORT$Reserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_IMPORT$Reserved$LAYOUT() { return _IMAGE_ENCLAVE_IMPORT$Reserved$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_IMPORT$Reserved$VH_ = _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _IMAGE_ENCLAVE_IMPORT$Reserved$VH() { return _IMAGE_ENCLAVE_IMPORT$Reserved$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Characteristics"),
        C_INT.withName("TimeDateStamp"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        C_INT.withName("Type"),
        C_INT.withName("SizeOfData"),
        C_INT.withName("AddressOfRawData"),
        C_INT.withName("PointerToRawData")
    ).withName("_IMAGE_DEBUG_DIRECTORY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$Characteristics$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$Characteristics$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$Characteristics$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    public static java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$Characteristics$VH() { return _IMAGE_DEBUG_DIRECTORY$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$VH() { return _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$MajorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$MajorVersion$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$MajorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$MajorVersion$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$MajorVersion$VH() { return _IMAGE_DEBUG_DIRECTORY$MajorVersion$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$MinorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$MinorVersion$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$MinorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$MinorVersion$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$MinorVersion$VH() { return _IMAGE_DEBUG_DIRECTORY$MinorVersion$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$Type$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$Type$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$Type$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$Type$VH() { return _IMAGE_DEBUG_DIRECTORY$Type$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$SizeOfData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$SizeOfData$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$SizeOfData$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$SizeOfData$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfData"));
    public static java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$SizeOfData$VH() { return _IMAGE_DEBUG_DIRECTORY$SizeOfData$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfRawData"));
    public static java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$VH() { return _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$PointerToRawData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$PointerToRawData$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$PointerToRawData$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$PointerToRawData$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToRawData"));
    public static java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$PointerToRawData$VH() { return _IMAGE_DEBUG_DIRECTORY$PointerToRawData$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NumberOfSymbols"),
        C_INT.withName("LvaToFirstSymbol"),
        C_INT.withName("NumberOfLinenumbers"),
        C_INT.withName("LvaToFirstLinenumber"),
        C_INT.withName("RvaToFirstByteOfCode"),
        C_INT.withName("RvaToLastByteOfCode"),
        C_INT.withName("RvaToFirstByteOfData"),
        C_INT.withName("RvaToLastByteOfData")
    ).withName("_IMAGE_COFF_SYMBOLS_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfSymbols"));
    public static java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LvaToFirstSymbol"));
    public static java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfLinenumbers"));
    public static java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LvaToFirstLinenumber"));
    public static java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RvaToFirstByteOfCode"));
    public static java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RvaToLastByteOfCode"));
    public static java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RvaToFirstByteOfData"));
    public static java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RvaToLastByteOfData"));
    public static java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$VH_; }

    static final MemoryLayout _FPO_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ulOffStart"),
        C_INT.withName("cbProcSize"),
        C_INT.withName("cdwLocals"),
        C_SHORT.withName("cdwParams"),
        C_SHORT
    ).withName("_FPO_DATA");
    public static jdk.incubator.foreign.MemoryLayout _FPO_DATA$struct$LAYOUT() { return _FPO_DATA$struct$LAYOUT_; }

    static final MemoryLayout _FPO_DATA$ulOffStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FPO_DATA$ulOffStart$LAYOUT() { return _FPO_DATA$ulOffStart$LAYOUT_; }

    static final VarHandle _FPO_DATA$ulOffStart$VH_ = _FPO_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulOffStart"));
    public static java.lang.invoke.VarHandle _FPO_DATA$ulOffStart$VH() { return _FPO_DATA$ulOffStart$VH_; }

    static final MemoryLayout _FPO_DATA$cbProcSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FPO_DATA$cbProcSize$LAYOUT() { return _FPO_DATA$cbProcSize$LAYOUT_; }

    static final VarHandle _FPO_DATA$cbProcSize$VH_ = _FPO_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbProcSize"));
    public static java.lang.invoke.VarHandle _FPO_DATA$cbProcSize$VH() { return _FPO_DATA$cbProcSize$VH_; }

    static final MemoryLayout _FPO_DATA$cdwLocals$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _FPO_DATA$cdwLocals$LAYOUT() { return _FPO_DATA$cdwLocals$LAYOUT_; }

    static final VarHandle _FPO_DATA$cdwLocals$VH_ = _FPO_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cdwLocals"));
    public static java.lang.invoke.VarHandle _FPO_DATA$cdwLocals$VH() { return _FPO_DATA$cdwLocals$VH_; }

    static final MemoryLayout _FPO_DATA$cdwParams$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _FPO_DATA$cdwParams$LAYOUT() { return _FPO_DATA$cdwParams$LAYOUT_; }

    static final VarHandle _FPO_DATA$cdwParams$VH_ = _FPO_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cdwParams"));
    public static java.lang.invoke.VarHandle _FPO_DATA$cdwParams$VH() { return _FPO_DATA$cdwParams$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_MISC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("DataType"),
        C_INT.withName("Length"),
        C_BOOL.withName("Unicode"),
        MemoryLayout.ofSequence(3, C_BOOL).withName("Reserved"),
        MemoryLayout.ofSequence(1, C_BOOL).withName("Data"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_IMAGE_DEBUG_MISC");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_MISC$struct$LAYOUT() { return _IMAGE_DEBUG_MISC$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DEBUG_MISC$DataType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_MISC$DataType$LAYOUT() { return _IMAGE_DEBUG_MISC$DataType$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_MISC$DataType$VH_ = _IMAGE_DEBUG_MISC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataType"));
    public static java.lang.invoke.VarHandle _IMAGE_DEBUG_MISC$DataType$VH() { return _IMAGE_DEBUG_MISC$DataType$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_MISC$Length$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_MISC$Length$LAYOUT() { return _IMAGE_DEBUG_MISC$Length$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_MISC$Length$VH_ = _IMAGE_DEBUG_MISC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    public static java.lang.invoke.VarHandle _IMAGE_DEBUG_MISC$Length$VH() { return _IMAGE_DEBUG_MISC$Length$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_MISC$Unicode$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_MISC$Unicode$LAYOUT() { return _IMAGE_DEBUG_MISC$Unicode$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_MISC$Unicode$VH_ = _IMAGE_DEBUG_MISC$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Unicode"));
    public static java.lang.invoke.VarHandle _IMAGE_DEBUG_MISC$Unicode$VH() { return _IMAGE_DEBUG_MISC$Unicode$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("StartingAddress"),
        C_INT.withName("EndingAddress"),
        C_INT.withName("EndOfPrologue")
    ).withName("_IMAGE_FUNCTION_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY$struct$LAYOUT() { return _IMAGE_FUNCTION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY$StartingAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY$StartingAddress$LAYOUT() { return _IMAGE_FUNCTION_ENTRY$StartingAddress$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY$StartingAddress$VH_ = _IMAGE_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StartingAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY$StartingAddress$VH() { return _IMAGE_FUNCTION_ENTRY$StartingAddress$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY$EndingAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY$EndingAddress$LAYOUT() { return _IMAGE_FUNCTION_ENTRY$EndingAddress$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY$EndingAddress$VH_ = _IMAGE_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndingAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY$EndingAddress$VH() { return _IMAGE_FUNCTION_ENTRY$EndingAddress$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY$EndOfPrologue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY$EndOfPrologue$LAYOUT() { return _IMAGE_FUNCTION_ENTRY$EndOfPrologue$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY$EndOfPrologue$VH_ = _IMAGE_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndOfPrologue"));
    public static java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY$EndOfPrologue$VH() { return _IMAGE_FUNCTION_ENTRY$EndOfPrologue$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartingAddress"),
        C_LONGLONG.withName("EndingAddress"),
        C_LONGLONG.withName("EndOfPrologue"),
        C_LONGLONG.withName("UnwindInfoAddress")
    ).withName("_IMAGE_FUNCTION_ENTRY64");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT() { return _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY64$StartingAddress$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY64$StartingAddress$LAYOUT() { return _IMAGE_FUNCTION_ENTRY64$StartingAddress$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY64$StartingAddress$VH_ = _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartingAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY64$StartingAddress$VH() { return _IMAGE_FUNCTION_ENTRY64$StartingAddress$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY64$EndingAddress$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY64$EndingAddress$LAYOUT() { return _IMAGE_FUNCTION_ENTRY64$EndingAddress$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY64$EndingAddress$VH_ = _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EndingAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY64$EndingAddress$VH() { return _IMAGE_FUNCTION_ENTRY64$EndingAddress$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$LAYOUT() { return _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$VH_ = _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EndOfPrologue"));
    public static java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$VH() { return _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$LAYOUT() { return _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$VH_ = _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UnwindInfoAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$VH() { return _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Signature"),
        C_SHORT.withName("Flags"),
        C_SHORT.withName("Machine"),
        C_SHORT.withName("Characteristics"),
        C_INT.withName("TimeDateStamp"),
        C_INT.withName("CheckSum"),
        C_INT.withName("ImageBase"),
        C_INT.withName("SizeOfImage"),
        C_INT.withName("NumberOfSections"),
        C_INT.withName("ExportedNamesSize"),
        C_INT.withName("DebugDirectorySize"),
        C_INT.withName("SectionAlignment"),
        MemoryLayout.ofSequence(2, C_INT).withName("Reserved")
    ).withName("_IMAGE_SEPARATE_DEBUG_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Signature$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Signature$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$Signature$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Signature$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Signature"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Signature$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$Signature$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Flags$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Flags$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$Flags$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Flags$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Flags$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$Flags$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Machine$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Machine$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$Machine$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Machine$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Machine$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$Machine$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfImage"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfSections"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExportedNamesSize"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DebugDirectorySize"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectionAlignment"));
    public static java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Signature"),
        C_SHORT.withName("Flags"),
        C_INT.withName("Size"),
        C_SHORT.withName("Machine"),
        C_SHORT.withName("Characteristics"),
        C_INT.withName("TimeDateStamp"),
        C_INT.withName("CheckSum"),
        C_INT.withName("SizeOfImage"),
        C_LONGLONG.withName("ImageBase")
    ).withName("_NON_PAGED_DEBUG_INFO");
    public static jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$struct$LAYOUT() { return _NON_PAGED_DEBUG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$Signature$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$Signature$LAYOUT() { return _NON_PAGED_DEBUG_INFO$Signature$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$Signature$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Signature"));
    public static java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$Signature$VH() { return _NON_PAGED_DEBUG_INFO$Signature$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$Flags$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$Flags$LAYOUT() { return _NON_PAGED_DEBUG_INFO$Flags$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$Flags$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$Flags$VH() { return _NON_PAGED_DEBUG_INFO$Flags$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$Size$LAYOUT() { return _NON_PAGED_DEBUG_INFO$Size$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$Size$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$Size$VH() { return _NON_PAGED_DEBUG_INFO$Size$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$Machine$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$Machine$LAYOUT() { return _NON_PAGED_DEBUG_INFO$Machine$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$Machine$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    public static java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$Machine$VH() { return _NON_PAGED_DEBUG_INFO$Machine$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$Characteristics$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$Characteristics$LAYOUT() { return _NON_PAGED_DEBUG_INFO$Characteristics$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$Characteristics$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    public static java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$Characteristics$VH() { return _NON_PAGED_DEBUG_INFO$Characteristics$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$TimeDateStamp$LAYOUT() { return _NON_PAGED_DEBUG_INFO$TimeDateStamp$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$TimeDateStamp$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$TimeDateStamp$VH() { return _NON_PAGED_DEBUG_INFO$TimeDateStamp$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$CheckSum$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$CheckSum$LAYOUT() { return _NON_PAGED_DEBUG_INFO$CheckSum$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$CheckSum$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    public static java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$CheckSum$VH() { return _NON_PAGED_DEBUG_INFO$CheckSum$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$SizeOfImage$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$SizeOfImage$LAYOUT() { return _NON_PAGED_DEBUG_INFO$SizeOfImage$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$SizeOfImage$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfImage"));
    public static java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$SizeOfImage$VH() { return _NON_PAGED_DEBUG_INFO$SizeOfImage$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$ImageBase$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$ImageBase$LAYOUT() { return _NON_PAGED_DEBUG_INFO$ImageBase$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$ImageBase$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    public static java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$ImageBase$VH() { return _NON_PAGED_DEBUG_INFO$ImageBase$VH_; }

    static final MemoryLayout _ImageArchitectureHeader$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT,
        C_INT.withName("FirstEntryRVA")
    ).withName("_ImageArchitectureHeader");
    public static jdk.incubator.foreign.MemoryLayout _ImageArchitectureHeader$struct$LAYOUT() { return _ImageArchitectureHeader$struct$LAYOUT_; }

    static final MemoryLayout _ImageArchitectureHeader$FirstEntryRVA$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ImageArchitectureHeader$FirstEntryRVA$LAYOUT() { return _ImageArchitectureHeader$FirstEntryRVA$LAYOUT_; }

    static final VarHandle _ImageArchitectureHeader$FirstEntryRVA$VH_ = _ImageArchitectureHeader$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstEntryRVA"));
    public static java.lang.invoke.VarHandle _ImageArchitectureHeader$FirstEntryRVA$VH() { return _ImageArchitectureHeader$FirstEntryRVA$VH_; }

    static final MemoryLayout _ImageArchitectureEntry$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("FixupInstRVA"),
        C_INT.withName("NewInst")
    ).withName("_ImageArchitectureEntry");
    public static jdk.incubator.foreign.MemoryLayout _ImageArchitectureEntry$struct$LAYOUT() { return _ImageArchitectureEntry$struct$LAYOUT_; }

    static final MemoryLayout _ImageArchitectureEntry$FixupInstRVA$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ImageArchitectureEntry$FixupInstRVA$LAYOUT() { return _ImageArchitectureEntry$FixupInstRVA$LAYOUT_; }

    static final VarHandle _ImageArchitectureEntry$FixupInstRVA$VH_ = _ImageArchitectureEntry$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FixupInstRVA"));
    public static java.lang.invoke.VarHandle _ImageArchitectureEntry$FixupInstRVA$VH() { return _ImageArchitectureEntry$FixupInstRVA$VH_; }

    static final MemoryLayout _ImageArchitectureEntry$NewInst$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ImageArchitectureEntry$NewInst$LAYOUT() { return _ImageArchitectureEntry$NewInst$LAYOUT_; }

    static final VarHandle _ImageArchitectureEntry$NewInst$VH_ = _ImageArchitectureEntry$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NewInst"));
    public static java.lang.invoke.VarHandle _ImageArchitectureEntry$NewInst$VH() { return _ImageArchitectureEntry$NewInst$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Sig1"),
        C_SHORT.withName("Sig2"),
        C_SHORT.withName("Version"),
        C_SHORT.withName("Machine"),
        C_INT.withName("TimeDateStamp"),
        C_INT.withName("SizeOfData"),
        C_SHORT.withName("Ordinal"),
        C_SHORT.withName("Hint"),
        C_SHORT
    ).withName("IMPORT_OBJECT_HEADER");
    public static jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$struct$LAYOUT() { return IMPORT_OBJECT_HEADER$struct$LAYOUT_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Sig1$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Sig1$LAYOUT() { return IMPORT_OBJECT_HEADER$Sig1$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Sig1$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig1"));
    public static java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Sig1$VH() { return IMPORT_OBJECT_HEADER$Sig1$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Sig2$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Sig2$LAYOUT() { return IMPORT_OBJECT_HEADER$Sig2$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Sig2$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig2"));
    public static java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Sig2$VH() { return IMPORT_OBJECT_HEADER$Sig2$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Version$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Version$LAYOUT() { return IMPORT_OBJECT_HEADER$Version$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Version$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Version$VH() { return IMPORT_OBJECT_HEADER$Version$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Machine$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Machine$LAYOUT() { return IMPORT_OBJECT_HEADER$Machine$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Machine$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    public static java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Machine$VH() { return IMPORT_OBJECT_HEADER$Machine$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$TimeDateStamp$LAYOUT() { return IMPORT_OBJECT_HEADER$TimeDateStamp$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$TimeDateStamp$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$TimeDateStamp$VH() { return IMPORT_OBJECT_HEADER$TimeDateStamp$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$SizeOfData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$SizeOfData$LAYOUT() { return IMPORT_OBJECT_HEADER$SizeOfData$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$SizeOfData$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfData"));
    public static java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$SizeOfData$VH() { return IMPORT_OBJECT_HEADER$SizeOfData$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Ordinal$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Ordinal$LAYOUT() { return IMPORT_OBJECT_HEADER$Ordinal$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Ordinal$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Ordinal"));
    public static java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Ordinal$VH() { return IMPORT_OBJECT_HEADER$Ordinal$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Hint$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Hint$LAYOUT() { return IMPORT_OBJECT_HEADER$Hint$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Hint$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Hint"));
    public static java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Hint$VH() { return IMPORT_OBJECT_HEADER$Hint$VH_; }

    public static int IMPORT_OBJECT_CODE() { return (int)0L; }

    public static int IMPORT_OBJECT_DATA() { return (int)1L; }

    public static int IMPORT_OBJECT_CONST() { return (int)2L; }

    public static int IMPORT_OBJECT_ORDINAL() { return (int)0L; }

    public static int IMPORT_OBJECT_NAME() { return (int)1L; }

    public static int IMPORT_OBJECT_NAME_NO_PREFIX() { return (int)2L; }

    public static int IMPORT_OBJECT_NAME_UNDECORATE() { return (int)3L; }

    public static int IMPORT_OBJECT_NAME_EXPORTAS() { return (int)4L; }

    public static int COMIMAGE_FLAGS_ILONLY() { return (int)1L; }

    public static int COMIMAGE_FLAGS_32BITREQUIRED() { return (int)2L; }

    public static int COMIMAGE_FLAGS_IL_LIBRARY() { return (int)4L; }

    public static int COMIMAGE_FLAGS_STRONGNAMESIGNED() { return (int)8L; }

    public static int COMIMAGE_FLAGS_NATIVE_ENTRYPOINT() { return (int)16L; }

    public static int COMIMAGE_FLAGS_TRACKDEBUGDATA() { return (int)65536L; }

    public static int COMIMAGE_FLAGS_32BITPREFERRED() { return (int)131072L; }

    public static int COR_VERSION_MAJOR_V2() { return (int)2L; }

    public static int COR_VERSION_MAJOR() { return (int)2L; }

    public static int COR_VERSION_MINOR() { return (int)5L; }

    public static int COR_DELETED_NAME_LENGTH() { return (int)8L; }

    public static int COR_VTABLEGAP_NAME_LENGTH() { return (int)8L; }

    public static int NATIVE_TYPE_MAX_CB() { return (int)1L; }

    public static int COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE() { return (int)255L; }

    public static int IMAGE_COR_MIH_METHODRVA() { return (int)1L; }

    public static int IMAGE_COR_MIH_EHRVA() { return (int)2L; }

    public static int IMAGE_COR_MIH_BASICBLOCK() { return (int)8L; }

    public static int COR_VTABLE_32BIT() { return (int)1L; }

    public static int COR_VTABLE_64BIT() { return (int)2L; }

    public static int COR_VTABLE_FROM_UNMANAGED() { return (int)4L; }

    public static int COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN() { return (int)8L; }

    public static int COR_VTABLE_CALL_MOST_DERIVED() { return (int)16L; }

    public static int IMAGE_COR_EATJ_THUNK_SIZE() { return (int)32L; }

    public static int MAX_CLASS_NAME() { return (int)1024L; }

    public static int MAX_PACKAGE_NAME() { return (int)1024L; }

    static final MemoryLayout IMAGE_COR20_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cb"),
        C_SHORT.withName("MajorRuntimeVersion"),
        C_SHORT.withName("MinorRuntimeVersion"),
        MemoryLayout.ofStruct(
            C_INT.withName("VirtualAddress"),
            C_INT.withName("Size")
        ).withName("MetaData"),
        C_INT.withName("Flags"),
        C_INT.withName("EntryPointToken"),
        C_INT.withName("EntryPointRVA"),
        MemoryLayout.ofStruct(
            C_INT.withName("VirtualAddress"),
            C_INT.withName("Size")
        ).withName("Resources"),
        MemoryLayout.ofStruct(
            C_INT.withName("VirtualAddress"),
            C_INT.withName("Size")
        ).withName("StrongNameSignature"),
        MemoryLayout.ofStruct(
            C_INT.withName("VirtualAddress"),
            C_INT.withName("Size")
        ).withName("CodeManagerTable"),
        MemoryLayout.ofStruct(
            C_INT.withName("VirtualAddress"),
            C_INT.withName("Size")
        ).withName("VTableFixups"),
        MemoryLayout.ofStruct(
            C_INT.withName("VirtualAddress"),
            C_INT.withName("Size")
        ).withName("ExportAddressTableJumps"),
        MemoryLayout.ofStruct(
            C_INT.withName("VirtualAddress"),
            C_INT.withName("Size")
        ).withName("ManagedNativeHeader")
    ).withName("IMAGE_COR20_HEADER");
    public static jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$struct$LAYOUT() { return IMAGE_COR20_HEADER$struct$LAYOUT_; }

    static final MemoryLayout IMAGE_COR20_HEADER$cb$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$cb$LAYOUT() { return IMAGE_COR20_HEADER$cb$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$cb$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cb"));
    public static java.lang.invoke.VarHandle IMAGE_COR20_HEADER$cb$VH() { return IMAGE_COR20_HEADER$cb$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$MajorRuntimeVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$MajorRuntimeVersion$LAYOUT() { return IMAGE_COR20_HEADER$MajorRuntimeVersion$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$MajorRuntimeVersion$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorRuntimeVersion"));
    public static java.lang.invoke.VarHandle IMAGE_COR20_HEADER$MajorRuntimeVersion$VH() { return IMAGE_COR20_HEADER$MajorRuntimeVersion$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$MinorRuntimeVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$MinorRuntimeVersion$LAYOUT() { return IMAGE_COR20_HEADER$MinorRuntimeVersion$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$MinorRuntimeVersion$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorRuntimeVersion"));
    public static java.lang.invoke.VarHandle IMAGE_COR20_HEADER$MinorRuntimeVersion$VH() { return IMAGE_COR20_HEADER$MinorRuntimeVersion$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$Flags$LAYOUT() { return IMAGE_COR20_HEADER$Flags$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$Flags$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle IMAGE_COR20_HEADER$Flags$VH() { return IMAGE_COR20_HEADER$Flags$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$EntryPointToken$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$EntryPointToken$LAYOUT() { return IMAGE_COR20_HEADER$EntryPointToken$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$EntryPointToken$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EntryPointToken"));
    public static java.lang.invoke.VarHandle IMAGE_COR20_HEADER$EntryPointToken$VH() { return IMAGE_COR20_HEADER$EntryPointToken$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$EntryPointRVA$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$EntryPointRVA$LAYOUT() { return IMAGE_COR20_HEADER$EntryPointRVA$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$EntryPointRVA$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EntryPointRVA"));
    public static java.lang.invoke.VarHandle IMAGE_COR20_HEADER$EntryPointRVA$VH() { return IMAGE_COR20_HEADER$EntryPointRVA$VH_; }

    static final FunctionDescriptor RtlCaptureStackBackTrace$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlCaptureStackBackTrace$FUNC() { return RtlCaptureStackBackTrace$FUNC_; }

    static final MethodHandle RtlCaptureStackBackTrace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCaptureStackBackTrace",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)S",
        RtlCaptureStackBackTrace$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlCaptureStackBackTrace$MH() { return RtlCaptureStackBackTrace$MH_; }

    static final FunctionDescriptor RtlCaptureContext$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlCaptureContext$FUNC() { return RtlCaptureContext$FUNC_; }

    static final MethodHandle RtlCaptureContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCaptureContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlCaptureContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlCaptureContext$MH() { return RtlCaptureContext$MH_; }

    static final FunctionDescriptor RtlCaptureContext2$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlCaptureContext2$FUNC() { return RtlCaptureContext2$FUNC_; }

    static final MethodHandle RtlCaptureContext2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCaptureContext2",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlCaptureContext2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlCaptureContext2$MH() { return RtlCaptureContext2$MH_; }

    static final FunctionDescriptor RtlUnwind$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlUnwind$FUNC() { return RtlUnwind$FUNC_; }

    static final MethodHandle RtlUnwind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlUnwind",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlUnwind$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlUnwind$MH() { return RtlUnwind$MH_; }

    static final FunctionDescriptor RtlAddFunctionTable$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlAddFunctionTable$FUNC() { return RtlAddFunctionTable$FUNC_; }

    static final MethodHandle RtlAddFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlAddFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)B",
        RtlAddFunctionTable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlAddFunctionTable$MH() { return RtlAddFunctionTable$MH_; }

    static final FunctionDescriptor RtlDeleteFunctionTable$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlDeleteFunctionTable$FUNC() { return RtlDeleteFunctionTable$FUNC_; }

    static final MethodHandle RtlDeleteFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlDeleteFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        RtlDeleteFunctionTable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlDeleteFunctionTable$MH() { return RtlDeleteFunctionTable$MH_; }

    static final FunctionDescriptor RtlInstallFunctionTableCallback$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlInstallFunctionTableCallback$FUNC() { return RtlInstallFunctionTableCallback$FUNC_; }

    static final MethodHandle RtlInstallFunctionTableCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInstallFunctionTableCallback",
        "(JJILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)B",
        RtlInstallFunctionTableCallback$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlInstallFunctionTableCallback$MH() { return RtlInstallFunctionTableCallback$MH_; }

    static final FunctionDescriptor RtlInstallFunctionTableCallback$Callback$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlInstallFunctionTableCallback$Callback$FUNC() { return RtlInstallFunctionTableCallback$Callback$FUNC_; }

    static final FunctionDescriptor RtlAddGrowableFunctionTable$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlAddGrowableFunctionTable$FUNC() { return RtlAddGrowableFunctionTable$FUNC_; }

    static final MethodHandle RtlAddGrowableFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlAddGrowableFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIJJ)I",
        RtlAddGrowableFunctionTable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlAddGrowableFunctionTable$MH() { return RtlAddGrowableFunctionTable$MH_; }

    static final FunctionDescriptor RtlGrowFunctionTable$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlGrowFunctionTable$FUNC() { return RtlGrowFunctionTable$FUNC_; }

    static final MethodHandle RtlGrowFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGrowFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        RtlGrowFunctionTable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlGrowFunctionTable$MH() { return RtlGrowFunctionTable$MH_; }

    static final FunctionDescriptor RtlDeleteGrowableFunctionTable$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlDeleteGrowableFunctionTable$FUNC() { return RtlDeleteGrowableFunctionTable$FUNC_; }

    static final MethodHandle RtlDeleteGrowableFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlDeleteGrowableFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlDeleteGrowableFunctionTable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlDeleteGrowableFunctionTable$MH() { return RtlDeleteGrowableFunctionTable$MH_; }

    static final FunctionDescriptor RtlLookupFunctionEntry$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlLookupFunctionEntry$FUNC() { return RtlLookupFunctionEntry$FUNC_; }

    static final MethodHandle RtlLookupFunctionEntry$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlLookupFunctionEntry",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlLookupFunctionEntry$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlLookupFunctionEntry$MH() { return RtlLookupFunctionEntry$MH_; }

    static final FunctionDescriptor RtlRestoreContext$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlRestoreContext$FUNC() { return RtlRestoreContext$FUNC_; }

    static final MethodHandle RtlRestoreContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlRestoreContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlRestoreContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlRestoreContext$MH() { return RtlRestoreContext$MH_; }

    static final FunctionDescriptor RtlUnwindEx$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlUnwindEx$FUNC() { return RtlUnwindEx$FUNC_; }

    static final MethodHandle RtlUnwindEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlUnwindEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlUnwindEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlUnwindEx$MH() { return RtlUnwindEx$MH_; }

    static final FunctionDescriptor RtlVirtualUnwind$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlVirtualUnwind$FUNC() { return RtlVirtualUnwind$FUNC_; }

    static final MethodHandle RtlVirtualUnwind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlVirtualUnwind",
        "(IJJLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlVirtualUnwind$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlVirtualUnwind$MH() { return RtlVirtualUnwind$MH_; }

    static final FunctionDescriptor RtlRaiseException$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlRaiseException$FUNC() { return RtlRaiseException$FUNC_; }

    static final MethodHandle RtlRaiseException$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlRaiseException",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlRaiseException$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlRaiseException$MH() { return RtlRaiseException$MH_; }

    static final FunctionDescriptor RtlPcToFileHeader$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlPcToFileHeader$FUNC() { return RtlPcToFileHeader$FUNC_; }

    static final MethodHandle RtlPcToFileHeader$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlPcToFileHeader",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlPcToFileHeader$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlPcToFileHeader$MH() { return RtlPcToFileHeader$MH_; }

    static final FunctionDescriptor RtlCompareMemory$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlCompareMemory$FUNC() { return RtlCompareMemory$FUNC_; }

    static final MethodHandle RtlCompareMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCompareMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        RtlCompareMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlCompareMemory$MH() { return RtlCompareMemory$MH_; }

    static final MemoryLayout _SLIST_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Next"),
        MemoryLayout.ofPaddingBits(64)
    ).withName("_SLIST_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _SLIST_ENTRY$struct$LAYOUT() { return _SLIST_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _SLIST_ENTRY$Next$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SLIST_ENTRY$Next$LAYOUT() { return _SLIST_ENTRY$Next$LAYOUT_; }

    static final VarHandle _SLIST_ENTRY$Next$VH_ = MemoryHandles.asAddressVarHandle(_SLIST_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    public static java.lang.invoke.VarHandle _SLIST_ENTRY$Next$VH() { return _SLIST_ENTRY$Next$VH_; }

    static final MemoryLayout _SLIST_HEADER$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_LONGLONG.withName("Alignment"),
        C_LONGLONG.withName("Region"),
        MemoryLayout.ofStruct(
            C_LONGLONG,
            C_LONGLONG
        ).withName("HeaderX64")
    ).withName("_SLIST_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _SLIST_HEADER$struct$LAYOUT() { return _SLIST_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _SLIST_HEADER$Alignment$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _SLIST_HEADER$Alignment$LAYOUT() { return _SLIST_HEADER$Alignment$LAYOUT_; }

    static final VarHandle _SLIST_HEADER$Alignment$VH_ = _SLIST_HEADER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Alignment"));
    public static java.lang.invoke.VarHandle _SLIST_HEADER$Alignment$VH() { return _SLIST_HEADER$Alignment$VH_; }

    static final MemoryLayout _SLIST_HEADER$Region$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _SLIST_HEADER$Region$LAYOUT() { return _SLIST_HEADER$Region$LAYOUT_; }

    static final VarHandle _SLIST_HEADER$Region$VH_ = _SLIST_HEADER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Region"));
    public static java.lang.invoke.VarHandle _SLIST_HEADER$Region$VH() { return _SLIST_HEADER$Region$VH_; }

    static final MemoryLayout HeaderX64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.MemoryLayout HeaderX64$struct$LAYOUT() { return HeaderX64$struct$LAYOUT_; }

    static final FunctionDescriptor RtlInitializeSListHead$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlInitializeSListHead$FUNC() { return RtlInitializeSListHead$FUNC_; }

    static final MethodHandle RtlInitializeSListHead$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInitializeSListHead",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlInitializeSListHead$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlInitializeSListHead$MH() { return RtlInitializeSListHead$MH_; }

    static final FunctionDescriptor RtlFirstEntrySList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlFirstEntrySList$FUNC() { return RtlFirstEntrySList$FUNC_; }

    static final MethodHandle RtlFirstEntrySList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFirstEntrySList",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlFirstEntrySList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlFirstEntrySList$MH() { return RtlFirstEntrySList$MH_; }

    static final FunctionDescriptor RtlInterlockedPopEntrySList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlInterlockedPopEntrySList$FUNC() { return RtlInterlockedPopEntrySList$FUNC_; }

    static final MethodHandle RtlInterlockedPopEntrySList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedPopEntrySList",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedPopEntrySList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlInterlockedPopEntrySList$MH() { return RtlInterlockedPopEntrySList$MH_; }

    static final FunctionDescriptor RtlInterlockedPushEntrySList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlInterlockedPushEntrySList$FUNC() { return RtlInterlockedPushEntrySList$FUNC_; }

    static final MethodHandle RtlInterlockedPushEntrySList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedPushEntrySList",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedPushEntrySList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlInterlockedPushEntrySList$MH() { return RtlInterlockedPushEntrySList$MH_; }

    static final FunctionDescriptor RtlInterlockedPushListSListEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlInterlockedPushListSListEx$FUNC() { return RtlInterlockedPushListSListEx$FUNC_; }

    static final MethodHandle RtlInterlockedPushListSListEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedPushListSListEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedPushListSListEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlInterlockedPushListSListEx$MH() { return RtlInterlockedPushListSListEx$MH_; }

    static final FunctionDescriptor RtlInterlockedFlushSList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlInterlockedFlushSList$FUNC() { return RtlInterlockedFlushSList$FUNC_; }

    static final MethodHandle RtlInterlockedFlushSList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedFlushSList",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedFlushSList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlInterlockedFlushSList$MH() { return RtlInterlockedFlushSList$MH_; }

    static final FunctionDescriptor RtlQueryDepthSList$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlQueryDepthSList$FUNC() { return RtlQueryDepthSList$FUNC_; }

    static final MethodHandle RtlQueryDepthSList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlQueryDepthSList",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        RtlQueryDepthSList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlQueryDepthSList$MH() { return RtlQueryDepthSList$MH_; }

    static final FunctionDescriptor RtlGetReturnAddressHijackTarget$FUNC_ = FunctionDescriptor.of(C_LONGLONG);
    public static jdk.incubator.foreign.FunctionDescriptor RtlGetReturnAddressHijackTarget$FUNC() { return RtlGetReturnAddressHijackTarget$FUNC_; }

    static final MethodHandle RtlGetReturnAddressHijackTarget$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGetReturnAddressHijackTarget",
        "()J",
        RtlGetReturnAddressHijackTarget$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlGetReturnAddressHijackTarget$MH() { return RtlGetReturnAddressHijackTarget$MH_; }

    static final MemoryLayout _RTL_RUN_ONCE$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("Ptr")
    ).withName("_RTL_RUN_ONCE");
    public static jdk.incubator.foreign.MemoryLayout _RTL_RUN_ONCE$struct$LAYOUT() { return _RTL_RUN_ONCE$struct$LAYOUT_; }

    static final MemoryLayout _RTL_RUN_ONCE$Ptr$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _RTL_RUN_ONCE$Ptr$LAYOUT() { return _RTL_RUN_ONCE$Ptr$LAYOUT_; }

    static final VarHandle _RTL_RUN_ONCE$Ptr$VH_ = MemoryHandles.asAddressVarHandle(_RTL_RUN_ONCE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ptr")));
    public static java.lang.invoke.VarHandle _RTL_RUN_ONCE$Ptr$VH() { return _RTL_RUN_ONCE$Ptr$VH_; }

    static final MemoryLayout _RTL_BARRIER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Reserved1"),
        C_INT.withName("Reserved2"),
        MemoryLayout.ofSequence(2, C_LONGLONG).withName("Reserved3"),
        C_INT.withName("Reserved4"),
        C_INT.withName("Reserved5")
    ).withName("_RTL_BARRIER");
    public static jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$struct$LAYOUT() { return _RTL_BARRIER$struct$LAYOUT_; }

    static final MemoryLayout _RTL_BARRIER$Reserved1$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved1$LAYOUT() { return _RTL_BARRIER$Reserved1$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved1$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    public static java.lang.invoke.VarHandle _RTL_BARRIER$Reserved1$VH() { return _RTL_BARRIER$Reserved1$VH_; }

}

