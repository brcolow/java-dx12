// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$23 extends Windows_h$constants$22 {
    Windows_h$constants$23() {}
    static final FunctionDescriptor CreateMailslotA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateMailslotA$FUNC() { return CreateMailslotA$FUNC_; }

    static final MethodHandle CreateMailslotA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMailslotA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateMailslotA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateMailslotA$MH() { return CreateMailslotA$MH_; }

    static final FunctionDescriptor CreateMailslotW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateMailslotW$FUNC() { return CreateMailslotW$FUNC_; }

    static final MethodHandle CreateMailslotW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMailslotW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateMailslotW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateMailslotW$MH() { return CreateMailslotW$MH_; }

    static final FunctionDescriptor GetMailslotInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetMailslotInfo$FUNC() { return GetMailslotInfo$FUNC_; }

    static final MethodHandle GetMailslotInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMailslotInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetMailslotInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMailslotInfo$MH() { return GetMailslotInfo$MH_; }

    static final FunctionDescriptor SetMailslotInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetMailslotInfo$FUNC() { return SetMailslotInfo$FUNC_; }

    static final MethodHandle SetMailslotInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMailslotInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetMailslotInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetMailslotInfo$MH() { return SetMailslotInfo$MH_; }

    static final FunctionDescriptor EncryptFileA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EncryptFileA$FUNC() { return EncryptFileA$FUNC_; }

    static final MethodHandle EncryptFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EncryptFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        EncryptFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EncryptFileA$MH() { return EncryptFileA$MH_; }

    static final FunctionDescriptor EncryptFileW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EncryptFileW$FUNC() { return EncryptFileW$FUNC_; }

    static final MethodHandle EncryptFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EncryptFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        EncryptFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EncryptFileW$MH() { return EncryptFileW$MH_; }

    static final FunctionDescriptor DecryptFileA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DecryptFileA$FUNC() { return DecryptFileA$FUNC_; }

    static final MethodHandle DecryptFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DecryptFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        DecryptFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DecryptFileA$MH() { return DecryptFileA$MH_; }

    static final FunctionDescriptor DecryptFileW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DecryptFileW$FUNC() { return DecryptFileW$FUNC_; }

    static final MethodHandle DecryptFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DecryptFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        DecryptFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DecryptFileW$MH() { return DecryptFileW$MH_; }

    static final FunctionDescriptor FileEncryptionStatusA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FileEncryptionStatusA$FUNC() { return FileEncryptionStatusA$FUNC_; }

    static final MethodHandle FileEncryptionStatusA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FileEncryptionStatusA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FileEncryptionStatusA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FileEncryptionStatusA$MH() { return FileEncryptionStatusA$MH_; }

    static final FunctionDescriptor FileEncryptionStatusW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FileEncryptionStatusW$FUNC() { return FileEncryptionStatusW$FUNC_; }

    static final MethodHandle FileEncryptionStatusW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FileEncryptionStatusW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FileEncryptionStatusW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FileEncryptionStatusW$MH() { return FileEncryptionStatusW$MH_; }

    static final FunctionDescriptor OpenEncryptedFileRawA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenEncryptedFileRawA$FUNC() { return OpenEncryptedFileRawA$FUNC_; }

    static final MethodHandle OpenEncryptedFileRawA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenEncryptedFileRawA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        OpenEncryptedFileRawA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenEncryptedFileRawA$MH() { return OpenEncryptedFileRawA$MH_; }

    static final FunctionDescriptor OpenEncryptedFileRawW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenEncryptedFileRawW$FUNC() { return OpenEncryptedFileRawW$FUNC_; }

    static final MethodHandle OpenEncryptedFileRawW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenEncryptedFileRawW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        OpenEncryptedFileRawW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenEncryptedFileRawW$MH() { return OpenEncryptedFileRawW$MH_; }

    static final FunctionDescriptor ReadEncryptedFileRaw$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadEncryptedFileRaw$FUNC() { return ReadEncryptedFileRaw$FUNC_; }

    static final MethodHandle ReadEncryptedFileRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadEncryptedFileRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadEncryptedFileRaw$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadEncryptedFileRaw$MH() { return ReadEncryptedFileRaw$MH_; }

    static final FunctionDescriptor ReadEncryptedFileRaw$pfExportCallback$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadEncryptedFileRaw$pfExportCallback$FUNC() { return ReadEncryptedFileRaw$pfExportCallback$FUNC_; }

    static final FunctionDescriptor WriteEncryptedFileRaw$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteEncryptedFileRaw$FUNC() { return WriteEncryptedFileRaw$FUNC_; }

    static final MethodHandle WriteEncryptedFileRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteEncryptedFileRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteEncryptedFileRaw$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteEncryptedFileRaw$MH() { return WriteEncryptedFileRaw$MH_; }

    static final FunctionDescriptor WriteEncryptedFileRaw$pfImportCallback$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteEncryptedFileRaw$pfImportCallback$FUNC() { return WriteEncryptedFileRaw$pfImportCallback$FUNC_; }

    static final FunctionDescriptor CloseEncryptedFileRaw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseEncryptedFileRaw$FUNC() { return CloseEncryptedFileRaw$FUNC_; }

    static final MethodHandle CloseEncryptedFileRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseEncryptedFileRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CloseEncryptedFileRaw$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseEncryptedFileRaw$MH() { return CloseEncryptedFileRaw$MH_; }

    static final FunctionDescriptor lstrcmpA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrcmpA$FUNC() { return lstrcmpA$FUNC_; }

    static final MethodHandle lstrcmpA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrcmpA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        lstrcmpA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrcmpA$MH() { return lstrcmpA$MH_; }

    static final FunctionDescriptor lstrcmpW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrcmpW$FUNC() { return lstrcmpW$FUNC_; }

    static final MethodHandle lstrcmpW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrcmpW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        lstrcmpW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrcmpW$MH() { return lstrcmpW$MH_; }

    static final FunctionDescriptor lstrcmpiA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrcmpiA$FUNC() { return lstrcmpiA$FUNC_; }

    static final MethodHandle lstrcmpiA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrcmpiA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        lstrcmpiA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrcmpiA$MH() { return lstrcmpiA$MH_; }

    static final FunctionDescriptor lstrcmpiW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrcmpiW$FUNC() { return lstrcmpiW$FUNC_; }

    static final MethodHandle lstrcmpiW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrcmpiW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        lstrcmpiW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrcmpiW$MH() { return lstrcmpiW$MH_; }

    static final FunctionDescriptor lstrcpynA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrcpynA$FUNC() { return lstrcpynA$FUNC_; }

    static final MethodHandle lstrcpynA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrcpynA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        lstrcpynA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrcpynA$MH() { return lstrcpynA$MH_; }

    static final FunctionDescriptor lstrcpynW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrcpynW$FUNC() { return lstrcpynW$FUNC_; }

    static final MethodHandle lstrcpynW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrcpynW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        lstrcpynW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrcpynW$MH() { return lstrcpynW$MH_; }

    static final FunctionDescriptor lstrcpyA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrcpyA$FUNC() { return lstrcpyA$FUNC_; }

    static final MethodHandle lstrcpyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrcpyA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        lstrcpyA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrcpyA$MH() { return lstrcpyA$MH_; }

    static final FunctionDescriptor lstrcpyW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrcpyW$FUNC() { return lstrcpyW$FUNC_; }

    static final MethodHandle lstrcpyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrcpyW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        lstrcpyW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrcpyW$MH() { return lstrcpyW$MH_; }

    static final FunctionDescriptor lstrcatA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrcatA$FUNC() { return lstrcatA$FUNC_; }

    static final MethodHandle lstrcatA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrcatA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        lstrcatA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrcatA$MH() { return lstrcatA$MH_; }

    static final FunctionDescriptor lstrcatW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrcatW$FUNC() { return lstrcatW$FUNC_; }

    static final MethodHandle lstrcatW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrcatW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        lstrcatW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrcatW$MH() { return lstrcatW$MH_; }

    static final FunctionDescriptor lstrlenA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrlenA$FUNC() { return lstrlenA$FUNC_; }

    static final MethodHandle lstrlenA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrlenA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        lstrlenA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrlenA$MH() { return lstrlenA$MH_; }

    static final FunctionDescriptor lstrlenW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor lstrlenW$FUNC() { return lstrlenW$FUNC_; }

    static final MethodHandle lstrlenW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstrlenW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        lstrlenW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle lstrlenW$MH() { return lstrlenW$MH_; }

    static final FunctionDescriptor OpenFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenFile$FUNC() { return OpenFile$FUNC_; }

    static final MethodHandle OpenFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        OpenFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenFile$MH() { return OpenFile$MH_; }

    static final FunctionDescriptor _lopen$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor _lopen$FUNC() { return _lopen$FUNC_; }

    static final MethodHandle _lopen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_lopen",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _lopen$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle _lopen$MH() { return _lopen$MH_; }

    static final FunctionDescriptor _lcreat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor _lcreat$FUNC() { return _lcreat$FUNC_; }

    static final MethodHandle _lcreat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_lcreat",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _lcreat$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle _lcreat$MH() { return _lcreat$MH_; }

    static final FunctionDescriptor _lread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor _lread$FUNC() { return _lread$FUNC_; }

    static final MethodHandle _lread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_lread",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        _lread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle _lread$MH() { return _lread$MH_; }

    static final FunctionDescriptor _lwrite$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor _lwrite$FUNC() { return _lwrite$FUNC_; }

    static final MethodHandle _lwrite$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_lwrite",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        _lwrite$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle _lwrite$MH() { return _lwrite$MH_; }

    static final FunctionDescriptor _hread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor _hread$FUNC() { return _hread$FUNC_; }

    static final MethodHandle _hread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_hread",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        _hread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle _hread$MH() { return _hread$MH_; }

    static final FunctionDescriptor _hwrite$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor _hwrite$FUNC() { return _hwrite$FUNC_; }

    static final MethodHandle _hwrite$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_hwrite",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        _hwrite$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle _hwrite$MH() { return _hwrite$MH_; }

    static final FunctionDescriptor _lclose$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor _lclose$FUNC() { return _lclose$FUNC_; }

    static final MethodHandle _lclose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_lclose",
        "(I)I",
        _lclose$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle _lclose$MH() { return _lclose$MH_; }

    static final FunctionDescriptor _llseek$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor _llseek$FUNC() { return _llseek$FUNC_; }

    static final MethodHandle _llseek$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_llseek",
        "(III)I",
        _llseek$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle _llseek$MH() { return _llseek$MH_; }

    static final FunctionDescriptor IsTextUnicode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsTextUnicode$FUNC() { return IsTextUnicode$FUNC_; }

    static final MethodHandle IsTextUnicode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsTextUnicode",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IsTextUnicode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsTextUnicode$MH() { return IsTextUnicode$MH_; }

    static final FunctionDescriptor BackupRead$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BackupRead$FUNC() { return BackupRead$FUNC_; }

    static final MethodHandle BackupRead$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BackupRead",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        BackupRead$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BackupRead$MH() { return BackupRead$MH_; }

    static final FunctionDescriptor BackupSeek$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BackupSeek$FUNC() { return BackupSeek$FUNC_; }

    static final MethodHandle BackupSeek$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BackupSeek",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BackupSeek$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BackupSeek$MH() { return BackupSeek$MH_; }

    static final FunctionDescriptor BackupWrite$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BackupWrite$FUNC() { return BackupWrite$FUNC_; }

    static final MethodHandle BackupWrite$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BackupWrite",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        BackupWrite$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BackupWrite$MH() { return BackupWrite$MH_; }

    static final MemoryLayout _WIN32_STREAM_ID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwStreamId"),
        C_INT.withName("dwStreamAttributes"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Size"),
        C_INT.withName("dwStreamNameSize"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("cStreamName"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_WIN32_STREAM_ID");
    public static jdk.incubator.foreign.MemoryLayout _WIN32_STREAM_ID$struct$LAYOUT() { return _WIN32_STREAM_ID$struct$LAYOUT_; }

    static final MemoryLayout _WIN32_STREAM_ID$dwStreamId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _WIN32_STREAM_ID$dwStreamId$LAYOUT() { return _WIN32_STREAM_ID$dwStreamId$LAYOUT_; }

    static final VarHandle _WIN32_STREAM_ID$dwStreamId$VH_ = _WIN32_STREAM_ID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStreamId"));
    public static java.lang.invoke.VarHandle _WIN32_STREAM_ID$dwStreamId$VH() { return _WIN32_STREAM_ID$dwStreamId$VH_; }

    static final MemoryLayout _WIN32_STREAM_ID$dwStreamAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _WIN32_STREAM_ID$dwStreamAttributes$LAYOUT() { return _WIN32_STREAM_ID$dwStreamAttributes$LAYOUT_; }

    static final VarHandle _WIN32_STREAM_ID$dwStreamAttributes$VH_ = _WIN32_STREAM_ID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStreamAttributes"));
    public static java.lang.invoke.VarHandle _WIN32_STREAM_ID$dwStreamAttributes$VH() { return _WIN32_STREAM_ID$dwStreamAttributes$VH_; }

    static final MemoryLayout _WIN32_STREAM_ID$dwStreamNameSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _WIN32_STREAM_ID$dwStreamNameSize$LAYOUT() { return _WIN32_STREAM_ID$dwStreamNameSize$LAYOUT_; }

    static final VarHandle _WIN32_STREAM_ID$dwStreamNameSize$VH_ = _WIN32_STREAM_ID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStreamNameSize"));
    public static java.lang.invoke.VarHandle _WIN32_STREAM_ID$dwStreamNameSize$VH() { return _WIN32_STREAM_ID$dwStreamNameSize$VH_; }

    static final MemoryLayout _STARTUPINFOEXA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("cb"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("lpReserved"),
            C_POINTER.withName("lpDesktop"),
            C_POINTER.withName("lpTitle"),
            C_INT.withName("dwX"),
            C_INT.withName("dwY"),
            C_INT.withName("dwXSize"),
            C_INT.withName("dwYSize"),
            C_INT.withName("dwXCountChars"),
            C_INT.withName("dwYCountChars"),
            C_INT.withName("dwFillAttribute"),
            C_INT.withName("dwFlags"),
            C_SHORT.withName("wShowWindow"),
            C_SHORT.withName("cbReserved2"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("lpReserved2"),
            C_POINTER.withName("hStdInput"),
            C_POINTER.withName("hStdOutput"),
            C_POINTER.withName("hStdError")
        ).withName("StartupInfo"),
        C_POINTER.withName("lpAttributeList")
    ).withName("_STARTUPINFOEXA");
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOEXA$struct$LAYOUT() { return _STARTUPINFOEXA$struct$LAYOUT_; }

    static final MemoryLayout _STARTUPINFOEXA$lpAttributeList$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOEXA$lpAttributeList$LAYOUT() { return _STARTUPINFOEXA$lpAttributeList$LAYOUT_; }

    static final VarHandle _STARTUPINFOEXA$lpAttributeList$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOEXA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAttributeList")));
    public static java.lang.invoke.VarHandle _STARTUPINFOEXA$lpAttributeList$VH() { return _STARTUPINFOEXA$lpAttributeList$VH_; }

    static final MemoryLayout _STARTUPINFOEXW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("cb"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("lpReserved"),
            C_POINTER.withName("lpDesktop"),
            C_POINTER.withName("lpTitle"),
            C_INT.withName("dwX"),
            C_INT.withName("dwY"),
            C_INT.withName("dwXSize"),
            C_INT.withName("dwYSize"),
            C_INT.withName("dwXCountChars"),
            C_INT.withName("dwYCountChars"),
            C_INT.withName("dwFillAttribute"),
            C_INT.withName("dwFlags"),
            C_SHORT.withName("wShowWindow"),
            C_SHORT.withName("cbReserved2"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("lpReserved2"),
            C_POINTER.withName("hStdInput"),
            C_POINTER.withName("hStdOutput"),
            C_POINTER.withName("hStdError")
        ).withName("StartupInfo"),
        C_POINTER.withName("lpAttributeList")
    ).withName("_STARTUPINFOEXW");
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOEXW$struct$LAYOUT() { return _STARTUPINFOEXW$struct$LAYOUT_; }

    static final MemoryLayout _STARTUPINFOEXW$lpAttributeList$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _STARTUPINFOEXW$lpAttributeList$LAYOUT() { return _STARTUPINFOEXW$lpAttributeList$LAYOUT_; }

    static final VarHandle _STARTUPINFOEXW$lpAttributeList$VH_ = MemoryHandles.asAddressVarHandle(_STARTUPINFOEXW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAttributeList")));
    public static java.lang.invoke.VarHandle _STARTUPINFOEXW$lpAttributeList$VH() { return _STARTUPINFOEXW$lpAttributeList$VH_; }

    static final FunctionDescriptor OpenMutexA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenMutexA$FUNC() { return OpenMutexA$FUNC_; }

    static final MethodHandle OpenMutexA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenMutexA",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenMutexA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenMutexA$MH() { return OpenMutexA$MH_; }

    static final FunctionDescriptor CreateSemaphoreA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateSemaphoreA$FUNC() { return CreateSemaphoreA$FUNC_; }

    static final MethodHandle CreateSemaphoreA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateSemaphoreA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateSemaphoreA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateSemaphoreA$MH() { return CreateSemaphoreA$MH_; }

    static final FunctionDescriptor OpenSemaphoreA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenSemaphoreA$FUNC() { return OpenSemaphoreA$FUNC_; }

    static final MethodHandle OpenSemaphoreA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenSemaphoreA",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenSemaphoreA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenSemaphoreA$MH() { return OpenSemaphoreA$MH_; }

    static final FunctionDescriptor CreateWaitableTimerA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateWaitableTimerA$FUNC() { return CreateWaitableTimerA$FUNC_; }

    static final MethodHandle CreateWaitableTimerA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateWaitableTimerA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateWaitableTimerA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateWaitableTimerA$MH() { return CreateWaitableTimerA$MH_; }

    static final FunctionDescriptor OpenWaitableTimerA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenWaitableTimerA$FUNC() { return OpenWaitableTimerA$FUNC_; }

    static final MethodHandle OpenWaitableTimerA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenWaitableTimerA",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenWaitableTimerA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenWaitableTimerA$MH() { return OpenWaitableTimerA$MH_; }

    static final FunctionDescriptor CreateSemaphoreExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateSemaphoreExA$FUNC() { return CreateSemaphoreExA$FUNC_; }

    static final MethodHandle CreateSemaphoreExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateSemaphoreExA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreateSemaphoreExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateSemaphoreExA$MH() { return CreateSemaphoreExA$MH_; }

    static final FunctionDescriptor CreateWaitableTimerExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateWaitableTimerExA$FUNC() { return CreateWaitableTimerExA$FUNC_; }

    static final MethodHandle CreateWaitableTimerExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateWaitableTimerExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreateWaitableTimerExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateWaitableTimerExA$MH() { return CreateWaitableTimerExA$MH_; }

    static final FunctionDescriptor CreateFileMappingA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFileMappingA$FUNC() { return CreateFileMappingA$FUNC_; }

    static final MethodHandle CreateFileMappingA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileMappingA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFileMappingA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFileMappingA$MH() { return CreateFileMappingA$MH_; }

    static final FunctionDescriptor CreateFileMappingNumaA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFileMappingNumaA$FUNC() { return CreateFileMappingNumaA$FUNC_; }

    static final MethodHandle CreateFileMappingNumaA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileMappingNumaA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFileMappingNumaA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFileMappingNumaA$MH() { return CreateFileMappingNumaA$MH_; }

    static final FunctionDescriptor OpenFileMappingA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenFileMappingA$FUNC() { return OpenFileMappingA$FUNC_; }

    static final MethodHandle OpenFileMappingA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenFileMappingA",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenFileMappingA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenFileMappingA$MH() { return OpenFileMappingA$MH_; }

    static final FunctionDescriptor GetLogicalDriveStringsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLogicalDriveStringsA$FUNC() { return GetLogicalDriveStringsA$FUNC_; }

    static final MethodHandle GetLogicalDriveStringsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLogicalDriveStringsA",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetLogicalDriveStringsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLogicalDriveStringsA$MH() { return GetLogicalDriveStringsA$MH_; }

    static final FunctionDescriptor LoadPackagedLibrary$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadPackagedLibrary$FUNC() { return LoadPackagedLibrary$FUNC_; }

    static final MethodHandle LoadPackagedLibrary$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadPackagedLibrary",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        LoadPackagedLibrary$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadPackagedLibrary$MH() { return LoadPackagedLibrary$MH_; }

    static final FunctionDescriptor QueryFullProcessImageNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryFullProcessImageNameA$FUNC() { return QueryFullProcessImageNameA$FUNC_; }

    static final MethodHandle QueryFullProcessImageNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryFullProcessImageNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryFullProcessImageNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryFullProcessImageNameA$MH() { return QueryFullProcessImageNameA$MH_; }

    static final FunctionDescriptor QueryFullProcessImageNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryFullProcessImageNameW$FUNC() { return QueryFullProcessImageNameW$FUNC_; }

    static final MethodHandle QueryFullProcessImageNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryFullProcessImageNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryFullProcessImageNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryFullProcessImageNameW$MH() { return QueryFullProcessImageNameW$MH_; }

    public static int ProcThreadAttributeParentProcess() { return (int)0L; }

    public static int ProcThreadAttributeHandleList() { return (int)2L; }

    public static int ProcThreadAttributeGroupAffinity() { return (int)3L; }

    public static int ProcThreadAttributePreferredNode() { return (int)4L; }

    public static int ProcThreadAttributeIdealProcessor() { return (int)5L; }

    public static int ProcThreadAttributeUmsThread() { return (int)6L; }

    public static int ProcThreadAttributeMitigationPolicy() { return (int)7L; }

    public static int ProcThreadAttributeSecurityCapabilities() { return (int)9L; }

    public static int ProcThreadAttributeProtectionLevel() { return (int)11L; }

    public static int ProcThreadAttributeJobList() { return (int)13L; }

    public static int ProcThreadAttributeChildProcessPolicy() { return (int)14L; }

    public static int ProcThreadAttributeAllApplicationPackagesPolicy() { return (int)15L; }

    public static int ProcThreadAttributeWin32kFilter() { return (int)16L; }

    public static int ProcThreadAttributeSafeOpenPromptOriginClaim() { return (int)17L; }

    public static int ProcThreadAttributeDesktopAppPolicy() { return (int)18L; }

    public static int ProcThreadAttributePseudoConsole() { return (int)22L; }

    static final FunctionDescriptor GetStartupInfoA$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetStartupInfoA$FUNC() { return GetStartupInfoA$FUNC_; }

    static final MethodHandle GetStartupInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStartupInfoA",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GetStartupInfoA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetStartupInfoA$MH() { return GetStartupInfoA$MH_; }

    static final FunctionDescriptor GetFirmwareEnvironmentVariableA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFirmwareEnvironmentVariableA$FUNC() { return GetFirmwareEnvironmentVariableA$FUNC_; }

    static final MethodHandle GetFirmwareEnvironmentVariableA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFirmwareEnvironmentVariableA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetFirmwareEnvironmentVariableA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFirmwareEnvironmentVariableA$MH() { return GetFirmwareEnvironmentVariableA$MH_; }

    static final FunctionDescriptor GetFirmwareEnvironmentVariableW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFirmwareEnvironmentVariableW$FUNC() { return GetFirmwareEnvironmentVariableW$FUNC_; }

    static final MethodHandle GetFirmwareEnvironmentVariableW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFirmwareEnvironmentVariableW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetFirmwareEnvironmentVariableW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFirmwareEnvironmentVariableW$MH() { return GetFirmwareEnvironmentVariableW$MH_; }

    static final FunctionDescriptor GetFirmwareEnvironmentVariableExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFirmwareEnvironmentVariableExA$FUNC() { return GetFirmwareEnvironmentVariableExA$FUNC_; }

    static final MethodHandle GetFirmwareEnvironmentVariableExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFirmwareEnvironmentVariableExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetFirmwareEnvironmentVariableExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFirmwareEnvironmentVariableExA$MH() { return GetFirmwareEnvironmentVariableExA$MH_; }

    static final FunctionDescriptor GetFirmwareEnvironmentVariableExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFirmwareEnvironmentVariableExW$FUNC() { return GetFirmwareEnvironmentVariableExW$FUNC_; }

    static final MethodHandle GetFirmwareEnvironmentVariableExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFirmwareEnvironmentVariableExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetFirmwareEnvironmentVariableExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFirmwareEnvironmentVariableExW$MH() { return GetFirmwareEnvironmentVariableExW$MH_; }

    static final FunctionDescriptor SetFirmwareEnvironmentVariableA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFirmwareEnvironmentVariableA$FUNC() { return SetFirmwareEnvironmentVariableA$FUNC_; }

    static final MethodHandle SetFirmwareEnvironmentVariableA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFirmwareEnvironmentVariableA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetFirmwareEnvironmentVariableA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFirmwareEnvironmentVariableA$MH() { return SetFirmwareEnvironmentVariableA$MH_; }

    static final FunctionDescriptor SetFirmwareEnvironmentVariableW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFirmwareEnvironmentVariableW$FUNC() { return SetFirmwareEnvironmentVariableW$FUNC_; }

    static final MethodHandle SetFirmwareEnvironmentVariableW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFirmwareEnvironmentVariableW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetFirmwareEnvironmentVariableW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFirmwareEnvironmentVariableW$MH() { return SetFirmwareEnvironmentVariableW$MH_; }

    static final FunctionDescriptor SetFirmwareEnvironmentVariableExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFirmwareEnvironmentVariableExA$FUNC() { return SetFirmwareEnvironmentVariableExA$FUNC_; }

    static final MethodHandle SetFirmwareEnvironmentVariableExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFirmwareEnvironmentVariableExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetFirmwareEnvironmentVariableExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFirmwareEnvironmentVariableExA$MH() { return SetFirmwareEnvironmentVariableExA$MH_; }

    static final FunctionDescriptor SetFirmwareEnvironmentVariableExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFirmwareEnvironmentVariableExW$FUNC() { return SetFirmwareEnvironmentVariableExW$FUNC_; }

    static final MethodHandle SetFirmwareEnvironmentVariableExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFirmwareEnvironmentVariableExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetFirmwareEnvironmentVariableExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFirmwareEnvironmentVariableExW$MH() { return SetFirmwareEnvironmentVariableExW$MH_; }

    static final FunctionDescriptor GetFirmwareType$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFirmwareType$FUNC() { return GetFirmwareType$FUNC_; }

    static final MethodHandle GetFirmwareType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFirmwareType",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFirmwareType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFirmwareType$MH() { return GetFirmwareType$MH_; }

    static final FunctionDescriptor IsNativeVhdBoot$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsNativeVhdBoot$FUNC() { return IsNativeVhdBoot$FUNC_; }

    static final MethodHandle IsNativeVhdBoot$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsNativeVhdBoot",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsNativeVhdBoot$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsNativeVhdBoot$MH() { return IsNativeVhdBoot$MH_; }

    static final FunctionDescriptor FindResourceA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindResourceA$FUNC() { return FindResourceA$FUNC_; }

    static final MethodHandle FindResourceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindResourceA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindResourceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindResourceA$MH() { return FindResourceA$MH_; }

    static final FunctionDescriptor FindResourceExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindResourceExA$FUNC() { return FindResourceExA$FUNC_; }

    static final MethodHandle FindResourceExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindResourceExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;S)Ljdk/incubator/foreign/MemoryAddress;",
        FindResourceExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindResourceExA$MH() { return FindResourceExA$MH_; }

    static final FunctionDescriptor EnumResourceTypesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceTypesA$FUNC() { return EnumResourceTypesA$FUNC_; }

    static final MethodHandle EnumResourceTypesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceTypesA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumResourceTypesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceTypesA$MH() { return EnumResourceTypesA$MH_; }

    static final FunctionDescriptor EnumResourceTypesA$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceTypesA$lpEnumFunc$FUNC() { return EnumResourceTypesA$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumResourceTypesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceTypesW$FUNC() { return EnumResourceTypesW$FUNC_; }

    static final MethodHandle EnumResourceTypesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceTypesW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumResourceTypesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceTypesW$MH() { return EnumResourceTypesW$MH_; }

    static final FunctionDescriptor EnumResourceTypesW$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceTypesW$lpEnumFunc$FUNC() { return EnumResourceTypesW$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumResourceNamesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceNamesA$FUNC() { return EnumResourceNamesA$FUNC_; }

    static final MethodHandle EnumResourceNamesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceNamesA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumResourceNamesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceNamesA$MH() { return EnumResourceNamesA$MH_; }

    static final FunctionDescriptor EnumResourceNamesA$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceNamesA$lpEnumFunc$FUNC() { return EnumResourceNamesA$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumResourceLanguagesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceLanguagesA$FUNC() { return EnumResourceLanguagesA$FUNC_; }

    static final MethodHandle EnumResourceLanguagesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceLanguagesA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumResourceLanguagesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceLanguagesA$MH() { return EnumResourceLanguagesA$MH_; }

    static final FunctionDescriptor EnumResourceLanguagesA$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_SHORT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceLanguagesA$lpEnumFunc$FUNC() { return EnumResourceLanguagesA$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumResourceLanguagesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceLanguagesW$FUNC() { return EnumResourceLanguagesW$FUNC_; }

    static final MethodHandle EnumResourceLanguagesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceLanguagesW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumResourceLanguagesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceLanguagesW$MH() { return EnumResourceLanguagesW$MH_; }

    static final FunctionDescriptor EnumResourceLanguagesW$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_SHORT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceLanguagesW$lpEnumFunc$FUNC() { return EnumResourceLanguagesW$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor BeginUpdateResourceA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor BeginUpdateResourceA$FUNC() { return BeginUpdateResourceA$FUNC_; }

    static final MethodHandle BeginUpdateResourceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BeginUpdateResourceA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        BeginUpdateResourceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BeginUpdateResourceA$MH() { return BeginUpdateResourceA$MH_; }

    static final FunctionDescriptor BeginUpdateResourceW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor BeginUpdateResourceW$FUNC() { return BeginUpdateResourceW$FUNC_; }

    static final MethodHandle BeginUpdateResourceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BeginUpdateResourceW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        BeginUpdateResourceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BeginUpdateResourceW$MH() { return BeginUpdateResourceW$MH_; }

    static final FunctionDescriptor UpdateResourceA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_SHORT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor UpdateResourceA$FUNC() { return UpdateResourceA$FUNC_; }

    static final MethodHandle UpdateResourceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UpdateResourceA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;I)I",
        UpdateResourceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UpdateResourceA$MH() { return UpdateResourceA$MH_; }

    static final FunctionDescriptor UpdateResourceW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_SHORT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor UpdateResourceW$FUNC() { return UpdateResourceW$FUNC_; }

    static final MethodHandle UpdateResourceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UpdateResourceW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;I)I",
        UpdateResourceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UpdateResourceW$MH() { return UpdateResourceW$MH_; }

    static final FunctionDescriptor EndUpdateResourceA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EndUpdateResourceA$FUNC() { return EndUpdateResourceA$FUNC_; }

    static final MethodHandle EndUpdateResourceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EndUpdateResourceA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        EndUpdateResourceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EndUpdateResourceA$MH() { return EndUpdateResourceA$MH_; }

    static final FunctionDescriptor EndUpdateResourceW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EndUpdateResourceW$FUNC() { return EndUpdateResourceW$FUNC_; }

    static final MethodHandle EndUpdateResourceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EndUpdateResourceW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        EndUpdateResourceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EndUpdateResourceW$MH() { return EndUpdateResourceW$MH_; }

    static final FunctionDescriptor GlobalAddAtomA$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalAddAtomA$FUNC() { return GlobalAddAtomA$FUNC_; }

    static final MethodHandle GlobalAddAtomA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalAddAtomA",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        GlobalAddAtomA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalAddAtomA$MH() { return GlobalAddAtomA$MH_; }

    static final FunctionDescriptor GlobalAddAtomW$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalAddAtomW$FUNC() { return GlobalAddAtomW$FUNC_; }

    static final MethodHandle GlobalAddAtomW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalAddAtomW",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        GlobalAddAtomW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalAddAtomW$MH() { return GlobalAddAtomW$MH_; }

    static final FunctionDescriptor GlobalAddAtomExA$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalAddAtomExA$FUNC() { return GlobalAddAtomExA$FUNC_; }

    static final MethodHandle GlobalAddAtomExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalAddAtomExA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)S",
        GlobalAddAtomExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalAddAtomExA$MH() { return GlobalAddAtomExA$MH_; }

    static final FunctionDescriptor GlobalAddAtomExW$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalAddAtomExW$FUNC() { return GlobalAddAtomExW$FUNC_; }

    static final MethodHandle GlobalAddAtomExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalAddAtomExW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)S",
        GlobalAddAtomExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalAddAtomExW$MH() { return GlobalAddAtomExW$MH_; }

    static final FunctionDescriptor GlobalFindAtomA$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalFindAtomA$FUNC() { return GlobalFindAtomA$FUNC_; }

    static final MethodHandle GlobalFindAtomA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalFindAtomA",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        GlobalFindAtomA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalFindAtomA$MH() { return GlobalFindAtomA$MH_; }

    static final FunctionDescriptor GlobalFindAtomW$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalFindAtomW$FUNC() { return GlobalFindAtomW$FUNC_; }

    static final MethodHandle GlobalFindAtomW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalFindAtomW",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        GlobalFindAtomW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalFindAtomW$MH() { return GlobalFindAtomW$MH_; }

    static final FunctionDescriptor GlobalGetAtomNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalGetAtomNameA$FUNC() { return GlobalGetAtomNameA$FUNC_; }

    static final MethodHandle GlobalGetAtomNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalGetAtomNameA",
        "(SLjdk/incubator/foreign/MemoryAddress;I)I",
        GlobalGetAtomNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalGetAtomNameA$MH() { return GlobalGetAtomNameA$MH_; }

    static final FunctionDescriptor GlobalGetAtomNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalGetAtomNameW$FUNC() { return GlobalGetAtomNameW$FUNC_; }

    static final MethodHandle GlobalGetAtomNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalGetAtomNameW",
        "(SLjdk/incubator/foreign/MemoryAddress;I)I",
        GlobalGetAtomNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalGetAtomNameW$MH() { return GlobalGetAtomNameW$MH_; }

    static final FunctionDescriptor AddAtomA$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAtomA$FUNC() { return AddAtomA$FUNC_; }

    static final MethodHandle AddAtomA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAtomA",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        AddAtomA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAtomA$MH() { return AddAtomA$MH_; }

    static final FunctionDescriptor AddAtomW$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAtomW$FUNC() { return AddAtomW$FUNC_; }

    static final MethodHandle AddAtomW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAtomW",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        AddAtomW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAtomW$MH() { return AddAtomW$MH_; }

    static final FunctionDescriptor FindAtomA$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindAtomA$FUNC() { return FindAtomA$FUNC_; }

    static final MethodHandle FindAtomA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindAtomA",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        FindAtomA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindAtomA$MH() { return FindAtomA$MH_; }

    static final FunctionDescriptor FindAtomW$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindAtomW$FUNC() { return FindAtomW$FUNC_; }

    static final MethodHandle FindAtomW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindAtomW",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        FindAtomW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindAtomW$MH() { return FindAtomW$MH_; }

    static final FunctionDescriptor GetAtomNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetAtomNameA$FUNC() { return GetAtomNameA$FUNC_; }

    static final MethodHandle GetAtomNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAtomNameA",
        "(SLjdk/incubator/foreign/MemoryAddress;I)I",
        GetAtomNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetAtomNameA$MH() { return GetAtomNameA$MH_; }

    static final FunctionDescriptor GetAtomNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetAtomNameW$FUNC() { return GetAtomNameW$FUNC_; }

    static final MethodHandle GetAtomNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAtomNameW",
        "(SLjdk/incubator/foreign/MemoryAddress;I)I",
        GetAtomNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetAtomNameW$MH() { return GetAtomNameW$MH_; }

    static final FunctionDescriptor GetProfileIntA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProfileIntA$FUNC() { return GetProfileIntA$FUNC_; }

    static final MethodHandle GetProfileIntA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProfileIntA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetProfileIntA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProfileIntA$MH() { return GetProfileIntA$MH_; }

    static final FunctionDescriptor GetProfileIntW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProfileIntW$FUNC() { return GetProfileIntW$FUNC_; }

    static final MethodHandle GetProfileIntW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProfileIntW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetProfileIntW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProfileIntW$MH() { return GetProfileIntW$MH_; }

    static final FunctionDescriptor GetProfileStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProfileStringA$FUNC() { return GetProfileStringA$FUNC_; }

    static final MethodHandle GetProfileStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProfileStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetProfileStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProfileStringA$MH() { return GetProfileStringA$MH_; }

    static final FunctionDescriptor GetProfileStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProfileStringW$FUNC() { return GetProfileStringW$FUNC_; }

    static final MethodHandle GetProfileStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProfileStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetProfileStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProfileStringW$MH() { return GetProfileStringW$MH_; }

    static final FunctionDescriptor WriteProfileStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteProfileStringA$FUNC() { return WriteProfileStringA$FUNC_; }

    static final MethodHandle WriteProfileStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteProfileStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteProfileStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteProfileStringA$MH() { return WriteProfileStringA$MH_; }

    static final FunctionDescriptor WriteProfileStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteProfileStringW$FUNC() { return WriteProfileStringW$FUNC_; }

    static final MethodHandle WriteProfileStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteProfileStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteProfileStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteProfileStringW$MH() { return WriteProfileStringW$MH_; }

    static final FunctionDescriptor GetProfileSectionA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProfileSectionA$FUNC() { return GetProfileSectionA$FUNC_; }

    static final MethodHandle GetProfileSectionA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProfileSectionA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetProfileSectionA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProfileSectionA$MH() { return GetProfileSectionA$MH_; }

    static final FunctionDescriptor GetProfileSectionW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProfileSectionW$FUNC() { return GetProfileSectionW$FUNC_; }

    static final MethodHandle GetProfileSectionW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProfileSectionW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetProfileSectionW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProfileSectionW$MH() { return GetProfileSectionW$MH_; }

    static final FunctionDescriptor WriteProfileSectionA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteProfileSectionA$FUNC() { return WriteProfileSectionA$FUNC_; }

    static final MethodHandle WriteProfileSectionA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteProfileSectionA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteProfileSectionA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteProfileSectionA$MH() { return WriteProfileSectionA$MH_; }

    static final FunctionDescriptor WriteProfileSectionW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteProfileSectionW$FUNC() { return WriteProfileSectionW$FUNC_; }

    static final MethodHandle WriteProfileSectionW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteProfileSectionW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteProfileSectionW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteProfileSectionW$MH() { return WriteProfileSectionW$MH_; }

    static final FunctionDescriptor GetPrivateProfileIntA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPrivateProfileIntA$FUNC() { return GetPrivateProfileIntA$FUNC_; }

    static final MethodHandle GetPrivateProfileIntA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPrivateProfileIntA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPrivateProfileIntA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPrivateProfileIntA$MH() { return GetPrivateProfileIntA$MH_; }

    static final FunctionDescriptor GetPrivateProfileIntW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPrivateProfileIntW$FUNC() { return GetPrivateProfileIntW$FUNC_; }

    static final MethodHandle GetPrivateProfileIntW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPrivateProfileIntW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPrivateProfileIntW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPrivateProfileIntW$MH() { return GetPrivateProfileIntW$MH_; }

    static final FunctionDescriptor GetPrivateProfileStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPrivateProfileStringA$FUNC() { return GetPrivateProfileStringA$FUNC_; }

    static final MethodHandle GetPrivateProfileStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPrivateProfileStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPrivateProfileStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPrivateProfileStringA$MH() { return GetPrivateProfileStringA$MH_; }

    static final FunctionDescriptor GetPrivateProfileStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPrivateProfileStringW$FUNC() { return GetPrivateProfileStringW$FUNC_; }

    static final MethodHandle GetPrivateProfileStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPrivateProfileStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPrivateProfileStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPrivateProfileStringW$MH() { return GetPrivateProfileStringW$MH_; }

    static final FunctionDescriptor WritePrivateProfileStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WritePrivateProfileStringA$FUNC() { return WritePrivateProfileStringA$FUNC_; }

    static final MethodHandle WritePrivateProfileStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WritePrivateProfileStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WritePrivateProfileStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WritePrivateProfileStringA$MH() { return WritePrivateProfileStringA$MH_; }

    static final FunctionDescriptor WritePrivateProfileStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WritePrivateProfileStringW$FUNC() { return WritePrivateProfileStringW$FUNC_; }

    static final MethodHandle WritePrivateProfileStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WritePrivateProfileStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WritePrivateProfileStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WritePrivateProfileStringW$MH() { return WritePrivateProfileStringW$MH_; }

    static final FunctionDescriptor GetPrivateProfileSectionA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPrivateProfileSectionA$FUNC() { return GetPrivateProfileSectionA$FUNC_; }

    static final MethodHandle GetPrivateProfileSectionA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPrivateProfileSectionA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPrivateProfileSectionA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPrivateProfileSectionA$MH() { return GetPrivateProfileSectionA$MH_; }

    static final FunctionDescriptor GetPrivateProfileSectionW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPrivateProfileSectionW$FUNC() { return GetPrivateProfileSectionW$FUNC_; }

    static final MethodHandle GetPrivateProfileSectionW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPrivateProfileSectionW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPrivateProfileSectionW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPrivateProfileSectionW$MH() { return GetPrivateProfileSectionW$MH_; }

    static final FunctionDescriptor WritePrivateProfileSectionA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WritePrivateProfileSectionA$FUNC() { return WritePrivateProfileSectionA$FUNC_; }

    static final MethodHandle WritePrivateProfileSectionA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WritePrivateProfileSectionA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WritePrivateProfileSectionA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WritePrivateProfileSectionA$MH() { return WritePrivateProfileSectionA$MH_; }

    static final FunctionDescriptor WritePrivateProfileSectionW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WritePrivateProfileSectionW$FUNC() { return WritePrivateProfileSectionW$FUNC_; }

    static final MethodHandle WritePrivateProfileSectionW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WritePrivateProfileSectionW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WritePrivateProfileSectionW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WritePrivateProfileSectionW$MH() { return WritePrivateProfileSectionW$MH_; }

    static final FunctionDescriptor GetPrivateProfileSectionNamesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPrivateProfileSectionNamesA$FUNC() { return GetPrivateProfileSectionNamesA$FUNC_; }

    static final MethodHandle GetPrivateProfileSectionNamesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPrivateProfileSectionNamesA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPrivateProfileSectionNamesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPrivateProfileSectionNamesA$MH() { return GetPrivateProfileSectionNamesA$MH_; }

    static final FunctionDescriptor GetPrivateProfileSectionNamesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPrivateProfileSectionNamesW$FUNC() { return GetPrivateProfileSectionNamesW$FUNC_; }

    static final MethodHandle GetPrivateProfileSectionNamesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPrivateProfileSectionNamesW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPrivateProfileSectionNamesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPrivateProfileSectionNamesW$MH() { return GetPrivateProfileSectionNamesW$MH_; }

    static final FunctionDescriptor GetPrivateProfileStructA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPrivateProfileStructA$FUNC() { return GetPrivateProfileStructA$FUNC_; }

    static final MethodHandle GetPrivateProfileStructA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPrivateProfileStructA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPrivateProfileStructA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPrivateProfileStructA$MH() { return GetPrivateProfileStructA$MH_; }

    static final FunctionDescriptor GetPrivateProfileStructW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPrivateProfileStructW$FUNC() { return GetPrivateProfileStructW$FUNC_; }

    static final MethodHandle GetPrivateProfileStructW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPrivateProfileStructW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPrivateProfileStructW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPrivateProfileStructW$MH() { return GetPrivateProfileStructW$MH_; }

    static final FunctionDescriptor WritePrivateProfileStructA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WritePrivateProfileStructA$FUNC() { return WritePrivateProfileStructA$FUNC_; }

    static final MethodHandle WritePrivateProfileStructA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WritePrivateProfileStructA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        WritePrivateProfileStructA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WritePrivateProfileStructA$MH() { return WritePrivateProfileStructA$MH_; }

    static final FunctionDescriptor WritePrivateProfileStructW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WritePrivateProfileStructW$FUNC() { return WritePrivateProfileStructW$FUNC_; }

    static final MethodHandle WritePrivateProfileStructW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WritePrivateProfileStructW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        WritePrivateProfileStructW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WritePrivateProfileStructW$MH() { return WritePrivateProfileStructW$MH_; }

    static final FunctionDescriptor Wow64EnableWow64FsRedirection$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor Wow64EnableWow64FsRedirection$FUNC() { return Wow64EnableWow64FsRedirection$FUNC_; }

    static final MethodHandle Wow64EnableWow64FsRedirection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Wow64EnableWow64FsRedirection",
        "(B)B",
        Wow64EnableWow64FsRedirection$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Wow64EnableWow64FsRedirection$MH() { return Wow64EnableWow64FsRedirection$MH_; }

    static final FunctionDescriptor SetDllDirectoryA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDllDirectoryA$FUNC() { return SetDllDirectoryA$FUNC_; }

    static final MethodHandle SetDllDirectoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDllDirectoryA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetDllDirectoryA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDllDirectoryA$MH() { return SetDllDirectoryA$MH_; }

    static final FunctionDescriptor SetDllDirectoryW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDllDirectoryW$FUNC() { return SetDllDirectoryW$FUNC_; }

    static final MethodHandle SetDllDirectoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDllDirectoryW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetDllDirectoryW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDllDirectoryW$MH() { return SetDllDirectoryW$MH_; }

    static final FunctionDescriptor GetDllDirectoryA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDllDirectoryA$FUNC() { return GetDllDirectoryA$FUNC_; }

    static final MethodHandle GetDllDirectoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDllDirectoryA",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetDllDirectoryA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDllDirectoryA$MH() { return GetDllDirectoryA$MH_; }

    static final FunctionDescriptor GetDllDirectoryW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDllDirectoryW$FUNC() { return GetDllDirectoryW$FUNC_; }

    static final MethodHandle GetDllDirectoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDllDirectoryW",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetDllDirectoryW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDllDirectoryW$MH() { return GetDllDirectoryW$MH_; }

    static final FunctionDescriptor SetSearchPathMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSearchPathMode$FUNC() { return SetSearchPathMode$FUNC_; }

    static final MethodHandle SetSearchPathMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSearchPathMode",
        "(I)I",
        SetSearchPathMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSearchPathMode$MH() { return SetSearchPathMode$MH_; }

    static final FunctionDescriptor CreateDirectoryExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDirectoryExA$FUNC() { return CreateDirectoryExA$FUNC_; }

    static final MethodHandle CreateDirectoryExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDirectoryExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateDirectoryExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDirectoryExA$MH() { return CreateDirectoryExA$MH_; }

    static final FunctionDescriptor CreateDirectoryExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDirectoryExW$FUNC() { return CreateDirectoryExW$FUNC_; }

    static final MethodHandle CreateDirectoryExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDirectoryExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateDirectoryExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDirectoryExW$MH() { return CreateDirectoryExW$MH_; }

    static final FunctionDescriptor CreateDirectoryTransactedA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDirectoryTransactedA$FUNC() { return CreateDirectoryTransactedA$FUNC_; }

    static final MethodHandle CreateDirectoryTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDirectoryTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateDirectoryTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDirectoryTransactedA$MH() { return CreateDirectoryTransactedA$MH_; }

    static final FunctionDescriptor CreateDirectoryTransactedW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDirectoryTransactedW$FUNC() { return CreateDirectoryTransactedW$FUNC_; }

    static final MethodHandle CreateDirectoryTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDirectoryTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateDirectoryTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDirectoryTransactedW$MH() { return CreateDirectoryTransactedW$MH_; }

    static final FunctionDescriptor RemoveDirectoryTransactedA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveDirectoryTransactedA$FUNC() { return RemoveDirectoryTransactedA$FUNC_; }

    static final MethodHandle RemoveDirectoryTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveDirectoryTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveDirectoryTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveDirectoryTransactedA$MH() { return RemoveDirectoryTransactedA$MH_; }

    static final FunctionDescriptor RemoveDirectoryTransactedW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveDirectoryTransactedW$FUNC() { return RemoveDirectoryTransactedW$FUNC_; }

    static final MethodHandle RemoveDirectoryTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveDirectoryTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveDirectoryTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveDirectoryTransactedW$MH() { return RemoveDirectoryTransactedW$MH_; }

    static final FunctionDescriptor GetFullPathNameTransactedA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFullPathNameTransactedA$FUNC() { return GetFullPathNameTransactedA$FUNC_; }

    static final MethodHandle GetFullPathNameTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFullPathNameTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFullPathNameTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFullPathNameTransactedA$MH() { return GetFullPathNameTransactedA$MH_; }

    static final FunctionDescriptor GetFullPathNameTransactedW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFullPathNameTransactedW$FUNC() { return GetFullPathNameTransactedW$FUNC_; }

    static final MethodHandle GetFullPathNameTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFullPathNameTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFullPathNameTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFullPathNameTransactedW$MH() { return GetFullPathNameTransactedW$MH_; }

    static final FunctionDescriptor DefineDosDeviceA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DefineDosDeviceA$FUNC() { return DefineDosDeviceA$FUNC_; }

    static final MethodHandle DefineDosDeviceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DefineDosDeviceA",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DefineDosDeviceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DefineDosDeviceA$MH() { return DefineDosDeviceA$MH_; }

    static final FunctionDescriptor QueryDosDeviceA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryDosDeviceA$FUNC() { return QueryDosDeviceA$FUNC_; }

    static final MethodHandle QueryDosDeviceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryDosDeviceA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        QueryDosDeviceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryDosDeviceA$MH() { return QueryDosDeviceA$MH_; }

    static final FunctionDescriptor CreateFileTransactedA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFileTransactedA$FUNC() { return CreateFileTransactedA$FUNC_; }

    static final MethodHandle CreateFileTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFileTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFileTransactedA$MH() { return CreateFileTransactedA$MH_; }

    static final FunctionDescriptor CreateFileTransactedW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFileTransactedW$FUNC() { return CreateFileTransactedW$FUNC_; }

    static final MethodHandle CreateFileTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFileTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFileTransactedW$MH() { return CreateFileTransactedW$MH_; }

    static final FunctionDescriptor ReOpenFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReOpenFile$FUNC() { return ReOpenFile$FUNC_; }

    static final MethodHandle ReOpenFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReOpenFile",
        "(Ljdk/incubator/foreign/MemoryAddress;III)Ljdk/incubator/foreign/MemoryAddress;",
        ReOpenFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReOpenFile$MH() { return ReOpenFile$MH_; }

    static final FunctionDescriptor SetFileAttributesTransactedA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileAttributesTransactedA$FUNC() { return SetFileAttributesTransactedA$FUNC_; }

    static final MethodHandle SetFileAttributesTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileAttributesTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetFileAttributesTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileAttributesTransactedA$MH() { return SetFileAttributesTransactedA$MH_; }

    static final FunctionDescriptor SetFileAttributesTransactedW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileAttributesTransactedW$FUNC() { return SetFileAttributesTransactedW$FUNC_; }

    static final MethodHandle SetFileAttributesTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileAttributesTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetFileAttributesTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileAttributesTransactedW$MH() { return SetFileAttributesTransactedW$MH_; }

    static final FunctionDescriptor GetFileAttributesTransactedA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileAttributesTransactedA$FUNC() { return GetFileAttributesTransactedA$FUNC_; }

    static final MethodHandle GetFileAttributesTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileAttributesTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileAttributesTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileAttributesTransactedA$MH() { return GetFileAttributesTransactedA$MH_; }

    static final FunctionDescriptor GetFileAttributesTransactedW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileAttributesTransactedW$FUNC() { return GetFileAttributesTransactedW$FUNC_; }

    static final MethodHandle GetFileAttributesTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileAttributesTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileAttributesTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileAttributesTransactedW$MH() { return GetFileAttributesTransactedW$MH_; }

    static final FunctionDescriptor GetCompressedFileSizeTransactedA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCompressedFileSizeTransactedA$FUNC() { return GetCompressedFileSizeTransactedA$FUNC_; }

    static final MethodHandle GetCompressedFileSizeTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCompressedFileSizeTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCompressedFileSizeTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCompressedFileSizeTransactedA$MH() { return GetCompressedFileSizeTransactedA$MH_; }

    static final FunctionDescriptor GetCompressedFileSizeTransactedW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCompressedFileSizeTransactedW$FUNC() { return GetCompressedFileSizeTransactedW$FUNC_; }

    static final MethodHandle GetCompressedFileSizeTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCompressedFileSizeTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCompressedFileSizeTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCompressedFileSizeTransactedW$MH() { return GetCompressedFileSizeTransactedW$MH_; }

    static final FunctionDescriptor DeleteFileTransactedA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteFileTransactedA$FUNC() { return DeleteFileTransactedA$FUNC_; }

    static final MethodHandle DeleteFileTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteFileTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteFileTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteFileTransactedA$MH() { return DeleteFileTransactedA$MH_; }

    static final FunctionDescriptor DeleteFileTransactedW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteFileTransactedW$FUNC() { return DeleteFileTransactedW$FUNC_; }

    static final MethodHandle DeleteFileTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteFileTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteFileTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteFileTransactedW$MH() { return DeleteFileTransactedW$MH_; }

    static final FunctionDescriptor CheckNameLegalDOS8Dot3A$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CheckNameLegalDOS8Dot3A$FUNC() { return CheckNameLegalDOS8Dot3A$FUNC_; }

    static final MethodHandle CheckNameLegalDOS8Dot3A$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckNameLegalDOS8Dot3A",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CheckNameLegalDOS8Dot3A$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CheckNameLegalDOS8Dot3A$MH() { return CheckNameLegalDOS8Dot3A$MH_; }

    static final FunctionDescriptor CheckNameLegalDOS8Dot3W$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CheckNameLegalDOS8Dot3W$FUNC() { return CheckNameLegalDOS8Dot3W$FUNC_; }

    static final MethodHandle CheckNameLegalDOS8Dot3W$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckNameLegalDOS8Dot3W",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CheckNameLegalDOS8Dot3W$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CheckNameLegalDOS8Dot3W$MH() { return CheckNameLegalDOS8Dot3W$MH_; }

    static final FunctionDescriptor FindFirstFileTransactedA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstFileTransactedA$FUNC() { return FindFirstFileTransactedA$FUNC_; }

    static final MethodHandle FindFirstFileTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstFileTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstFileTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstFileTransactedA$MH() { return FindFirstFileTransactedA$MH_; }

    static final FunctionDescriptor FindFirstFileTransactedW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstFileTransactedW$FUNC() { return FindFirstFileTransactedW$FUNC_; }

    static final MethodHandle FindFirstFileTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstFileTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstFileTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstFileTransactedW$MH() { return FindFirstFileTransactedW$MH_; }

    static final FunctionDescriptor CopyFileA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFileA$FUNC() { return CopyFileA$FUNC_; }

    static final MethodHandle CopyFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CopyFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyFileA$MH() { return CopyFileA$MH_; }

    static final FunctionDescriptor CopyFileW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFileW$FUNC() { return CopyFileW$FUNC_; }

    static final MethodHandle CopyFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CopyFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyFileW$MH() { return CopyFileW$MH_; }

    static final FunctionDescriptor CopyFileExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFileExA$FUNC() { return CopyFileExA$FUNC_; }

    static final MethodHandle CopyFileExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyFileExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CopyFileExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyFileExA$MH() { return CopyFileExA$MH_; }

    static final FunctionDescriptor CopyFileExA$lpProgressRoutine$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFileExA$lpProgressRoutine$FUNC() { return CopyFileExA$lpProgressRoutine$FUNC_; }

    static final FunctionDescriptor CopyFileExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFileExW$FUNC() { return CopyFileExW$FUNC_; }

    static final MethodHandle CopyFileExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyFileExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CopyFileExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyFileExW$MH() { return CopyFileExW$MH_; }

    static final FunctionDescriptor CopyFileExW$lpProgressRoutine$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFileExW$lpProgressRoutine$FUNC() { return CopyFileExW$lpProgressRoutine$FUNC_; }

    static final FunctionDescriptor CopyFileTransactedA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFileTransactedA$FUNC() { return CopyFileTransactedA$FUNC_; }

    static final MethodHandle CopyFileTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyFileTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CopyFileTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyFileTransactedA$MH() { return CopyFileTransactedA$MH_; }

    static final FunctionDescriptor CopyFileTransactedA$lpProgressRoutine$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFileTransactedA$lpProgressRoutine$FUNC() { return CopyFileTransactedA$lpProgressRoutine$FUNC_; }

    static final FunctionDescriptor CopyFileTransactedW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFileTransactedW$FUNC() { return CopyFileTransactedW$FUNC_; }

    static final MethodHandle CopyFileTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyFileTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CopyFileTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyFileTransactedW$MH() { return CopyFileTransactedW$MH_; }

    static final FunctionDescriptor CopyFileTransactedW$lpProgressRoutine$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFileTransactedW$lpProgressRoutine$FUNC() { return CopyFileTransactedW$lpProgressRoutine$FUNC_; }

    public static int COPYFILE2_CALLBACK_NONE() { return (int)0L; }

    public static int COPYFILE2_CALLBACK_CHUNK_STARTED() { return (int)1L; }

    public static int COPYFILE2_CALLBACK_CHUNK_FINISHED() { return (int)2L; }

    public static int COPYFILE2_CALLBACK_STREAM_STARTED() { return (int)3L; }

    public static int COPYFILE2_CALLBACK_STREAM_FINISHED() { return (int)4L; }

    public static int COPYFILE2_CALLBACK_POLL_CONTINUE() { return (int)5L; }

    public static int COPYFILE2_CALLBACK_ERROR() { return (int)6L; }

    public static int COPYFILE2_CALLBACK_MAX() { return (int)7L; }

    public static int COPYFILE2_PROGRESS_CONTINUE() { return (int)0L; }

    public static int COPYFILE2_PROGRESS_CANCEL() { return (int)1L; }

    public static int COPYFILE2_PROGRESS_STOP() { return (int)2L; }

    public static int COPYFILE2_PROGRESS_QUIET() { return (int)3L; }

    public static int COPYFILE2_PROGRESS_PAUSE() { return (int)4L; }

    public static int COPYFILE2_PHASE_NONE() { return (int)0L; }

    public static int COPYFILE2_PHASE_PREPARE_SOURCE() { return (int)1L; }

    public static int COPYFILE2_PHASE_PREPARE_DEST() { return (int)2L; }

    public static int COPYFILE2_PHASE_READ_SOURCE() { return (int)3L; }

    public static int COPYFILE2_PHASE_WRITE_DESTINATION() { return (int)4L; }

    public static int COPYFILE2_PHASE_SERVER_COPY() { return (int)5L; }

    public static int COPYFILE2_PHASE_NAMEGRAFT_COPY() { return (int)6L; }

    public static int COPYFILE2_PHASE_MAX() { return (int)7L; }

    static final MemoryLayout COPYFILE2_MESSAGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Type"),
        C_INT.withName("dwPadding"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_INT.withName("dwStreamNumber"),
                C_INT.withName("dwReserved"),
                C_POINTER.withName("hSourceFile"),
                C_POINTER.withName("hDestinationFile"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliChunkSize"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliTotalFileSize")
            ).withName("ChunkStarted"),
            MemoryLayout.ofStruct(
                C_INT.withName("dwStreamNumber"),
                C_INT.withName("dwFlags"),
                C_POINTER.withName("hSourceFile"),
                C_POINTER.withName("hDestinationFile"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliChunkSize"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            ).withName("ChunkFinished"),
            MemoryLayout.ofStruct(
                C_INT.withName("dwStreamNumber"),
                C_INT.withName("dwReserved"),
                C_POINTER.withName("hSourceFile"),
                C_POINTER.withName("hDestinationFile"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliTotalFileSize")
            ).withName("StreamStarted"),
            MemoryLayout.ofStruct(
                C_INT.withName("dwStreamNumber"),
                C_INT.withName("dwReserved"),
                C_POINTER.withName("hSourceFile"),
                C_POINTER.withName("hDestinationFile"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            ).withName("StreamFinished"),
            MemoryLayout.ofStruct(
                C_INT.withName("dwReserved")
            ).withName("PollContinue"),
            MemoryLayout.ofStruct(
                C_INT.withName("CopyPhase"),
                C_INT.withName("dwStreamNumber"),
                C_INT.withName("hrFailure"),
                C_INT.withName("dwReserved"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.ofUnion(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_INT.withName("LowPart"),
                        C_INT.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            ).withName("Error")
        ).withName("Info")
    ).withName("COPYFILE2_MESSAGE");
    public static jdk.incubator.foreign.MemoryLayout COPYFILE2_MESSAGE$struct$LAYOUT() { return COPYFILE2_MESSAGE$struct$LAYOUT_; }

    static final MemoryLayout COPYFILE2_MESSAGE$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout COPYFILE2_MESSAGE$Type$LAYOUT() { return COPYFILE2_MESSAGE$Type$LAYOUT_; }

    static final VarHandle COPYFILE2_MESSAGE$Type$VH_ = COPYFILE2_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle COPYFILE2_MESSAGE$Type$VH() { return COPYFILE2_MESSAGE$Type$VH_; }

    static final MemoryLayout COPYFILE2_MESSAGE$dwPadding$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout COPYFILE2_MESSAGE$dwPadding$LAYOUT() { return COPYFILE2_MESSAGE$dwPadding$LAYOUT_; }

    static final VarHandle COPYFILE2_MESSAGE$dwPadding$VH_ = COPYFILE2_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPadding"));
    public static java.lang.invoke.VarHandle COPYFILE2_MESSAGE$dwPadding$VH() { return COPYFILE2_MESSAGE$dwPadding$VH_; }

    static final MemoryLayout Info$struct$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_INT.withName("dwStreamNumber"),
            C_INT.withName("dwReserved"),
            C_POINTER.withName("hSourceFile"),
            C_POINTER.withName("hDestinationFile"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliChunkNumber"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliChunkSize"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliStreamSize"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliTotalFileSize")
        ).withName("ChunkStarted"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwStreamNumber"),
            C_INT.withName("dwFlags"),
            C_POINTER.withName("hSourceFile"),
            C_POINTER.withName("hDestinationFile"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliChunkNumber"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliChunkSize"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliStreamSize"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliStreamBytesTransferred"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliTotalFileSize"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliTotalBytesTransferred")
        ).withName("ChunkFinished"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwStreamNumber"),
            C_INT.withName("dwReserved"),
            C_POINTER.withName("hSourceFile"),
            C_POINTER.withName("hDestinationFile"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliStreamSize"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliTotalFileSize")
        ).withName("StreamStarted"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwStreamNumber"),
            C_INT.withName("dwReserved"),
            C_POINTER.withName("hSourceFile"),
            C_POINTER.withName("hDestinationFile"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliStreamSize"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliStreamBytesTransferred"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliTotalFileSize"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliTotalBytesTransferred")
        ).withName("StreamFinished"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwReserved")
        ).withName("PollContinue"),
        MemoryLayout.ofStruct(
            C_INT.withName("CopyPhase"),
            C_INT.withName("dwStreamNumber"),
            C_INT.withName("hrFailure"),
            C_INT.withName("dwReserved"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliChunkNumber"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliStreamSize"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliStreamBytesTransferred"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliTotalFileSize"),
            MemoryLayout.ofUnion(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_INT.withName("LowPart"),
                    C_INT.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("uliTotalBytesTransferred")
        ).withName("Error")
    );
    public static jdk.incubator.foreign.MemoryLayout Info$struct$LAYOUT() { return Info$struct$LAYOUT_; }

    static final MemoryLayout ChunkStarted$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwStreamNumber"),
        C_INT.withName("dwReserved"),
        C_POINTER.withName("hSourceFile"),
        C_POINTER.withName("hDestinationFile"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliChunkNumber"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliChunkSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliStreamSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliTotalFileSize")
    );
    public static jdk.incubator.foreign.MemoryLayout ChunkStarted$struct$LAYOUT() { return ChunkStarted$struct$LAYOUT_; }

    static final MemoryLayout ChunkStarted$dwStreamNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ChunkStarted$dwStreamNumber$LAYOUT() { return ChunkStarted$dwStreamNumber$LAYOUT_; }

    static final VarHandle ChunkStarted$dwStreamNumber$VH_ = ChunkStarted$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStreamNumber"));
    public static java.lang.invoke.VarHandle ChunkStarted$dwStreamNumber$VH() { return ChunkStarted$dwStreamNumber$VH_; }

    static final MemoryLayout ChunkStarted$dwReserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ChunkStarted$dwReserved$LAYOUT() { return ChunkStarted$dwReserved$LAYOUT_; }

    static final VarHandle ChunkStarted$dwReserved$VH_ = ChunkStarted$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved"));
    public static java.lang.invoke.VarHandle ChunkStarted$dwReserved$VH() { return ChunkStarted$dwReserved$VH_; }

    static final MemoryLayout ChunkStarted$hSourceFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ChunkStarted$hSourceFile$LAYOUT() { return ChunkStarted$hSourceFile$LAYOUT_; }

    static final VarHandle ChunkStarted$hSourceFile$VH_ = MemoryHandles.asAddressVarHandle(ChunkStarted$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hSourceFile")));
    public static java.lang.invoke.VarHandle ChunkStarted$hSourceFile$VH() { return ChunkStarted$hSourceFile$VH_; }

    static final MemoryLayout ChunkStarted$hDestinationFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ChunkStarted$hDestinationFile$LAYOUT() { return ChunkStarted$hDestinationFile$LAYOUT_; }

    static final VarHandle ChunkStarted$hDestinationFile$VH_ = MemoryHandles.asAddressVarHandle(ChunkStarted$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hDestinationFile")));
    public static java.lang.invoke.VarHandle ChunkStarted$hDestinationFile$VH() { return ChunkStarted$hDestinationFile$VH_; }

    static final MemoryLayout ChunkFinished$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwStreamNumber"),
        C_INT.withName("dwFlags"),
        C_POINTER.withName("hSourceFile"),
        C_POINTER.withName("hDestinationFile"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliChunkNumber"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliChunkSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliStreamSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliStreamBytesTransferred"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliTotalFileSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliTotalBytesTransferred")
    );
    public static jdk.incubator.foreign.MemoryLayout ChunkFinished$struct$LAYOUT() { return ChunkFinished$struct$LAYOUT_; }

    static final MemoryLayout ChunkFinished$dwStreamNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ChunkFinished$dwStreamNumber$LAYOUT() { return ChunkFinished$dwStreamNumber$LAYOUT_; }

    static final VarHandle ChunkFinished$dwStreamNumber$VH_ = ChunkFinished$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStreamNumber"));
    public static java.lang.invoke.VarHandle ChunkFinished$dwStreamNumber$VH() { return ChunkFinished$dwStreamNumber$VH_; }

    static final MemoryLayout ChunkFinished$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ChunkFinished$dwFlags$LAYOUT() { return ChunkFinished$dwFlags$LAYOUT_; }

    static final VarHandle ChunkFinished$dwFlags$VH_ = ChunkFinished$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle ChunkFinished$dwFlags$VH() { return ChunkFinished$dwFlags$VH_; }

    static final MemoryLayout ChunkFinished$hSourceFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ChunkFinished$hSourceFile$LAYOUT() { return ChunkFinished$hSourceFile$LAYOUT_; }

    static final VarHandle ChunkFinished$hSourceFile$VH_ = MemoryHandles.asAddressVarHandle(ChunkFinished$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hSourceFile")));
    public static java.lang.invoke.VarHandle ChunkFinished$hSourceFile$VH() { return ChunkFinished$hSourceFile$VH_; }

    static final MemoryLayout ChunkFinished$hDestinationFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ChunkFinished$hDestinationFile$LAYOUT() { return ChunkFinished$hDestinationFile$LAYOUT_; }

    static final VarHandle ChunkFinished$hDestinationFile$VH_ = MemoryHandles.asAddressVarHandle(ChunkFinished$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hDestinationFile")));
    public static java.lang.invoke.VarHandle ChunkFinished$hDestinationFile$VH() { return ChunkFinished$hDestinationFile$VH_; }

    static final MemoryLayout StreamStarted$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwStreamNumber"),
        C_INT.withName("dwReserved"),
        C_POINTER.withName("hSourceFile"),
        C_POINTER.withName("hDestinationFile"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliStreamSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliTotalFileSize")
    );
    public static jdk.incubator.foreign.MemoryLayout StreamStarted$struct$LAYOUT() { return StreamStarted$struct$LAYOUT_; }

    static final MemoryLayout StreamStarted$dwStreamNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout StreamStarted$dwStreamNumber$LAYOUT() { return StreamStarted$dwStreamNumber$LAYOUT_; }

    static final VarHandle StreamStarted$dwStreamNumber$VH_ = StreamStarted$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStreamNumber"));
    public static java.lang.invoke.VarHandle StreamStarted$dwStreamNumber$VH() { return StreamStarted$dwStreamNumber$VH_; }

    static final MemoryLayout StreamStarted$dwReserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout StreamStarted$dwReserved$LAYOUT() { return StreamStarted$dwReserved$LAYOUT_; }

    static final VarHandle StreamStarted$dwReserved$VH_ = StreamStarted$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved"));
    public static java.lang.invoke.VarHandle StreamStarted$dwReserved$VH() { return StreamStarted$dwReserved$VH_; }

    static final MemoryLayout StreamStarted$hSourceFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout StreamStarted$hSourceFile$LAYOUT() { return StreamStarted$hSourceFile$LAYOUT_; }

    static final VarHandle StreamStarted$hSourceFile$VH_ = MemoryHandles.asAddressVarHandle(StreamStarted$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hSourceFile")));
    public static java.lang.invoke.VarHandle StreamStarted$hSourceFile$VH() { return StreamStarted$hSourceFile$VH_; }

    static final MemoryLayout StreamStarted$hDestinationFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout StreamStarted$hDestinationFile$LAYOUT() { return StreamStarted$hDestinationFile$LAYOUT_; }

    static final VarHandle StreamStarted$hDestinationFile$VH_ = MemoryHandles.asAddressVarHandle(StreamStarted$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hDestinationFile")));
    public static java.lang.invoke.VarHandle StreamStarted$hDestinationFile$VH() { return StreamStarted$hDestinationFile$VH_; }

    static final MemoryLayout StreamFinished$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwStreamNumber"),
        C_INT.withName("dwReserved"),
        C_POINTER.withName("hSourceFile"),
        C_POINTER.withName("hDestinationFile"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliStreamSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliStreamBytesTransferred"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliTotalFileSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliTotalBytesTransferred")
    );
    public static jdk.incubator.foreign.MemoryLayout StreamFinished$struct$LAYOUT() { return StreamFinished$struct$LAYOUT_; }

    static final MemoryLayout StreamFinished$dwStreamNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout StreamFinished$dwStreamNumber$LAYOUT() { return StreamFinished$dwStreamNumber$LAYOUT_; }

    static final VarHandle StreamFinished$dwStreamNumber$VH_ = StreamFinished$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStreamNumber"));
    public static java.lang.invoke.VarHandle StreamFinished$dwStreamNumber$VH() { return StreamFinished$dwStreamNumber$VH_; }

    static final MemoryLayout StreamFinished$dwReserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout StreamFinished$dwReserved$LAYOUT() { return StreamFinished$dwReserved$LAYOUT_; }

    static final VarHandle StreamFinished$dwReserved$VH_ = StreamFinished$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved"));
    public static java.lang.invoke.VarHandle StreamFinished$dwReserved$VH() { return StreamFinished$dwReserved$VH_; }

    static final MemoryLayout StreamFinished$hSourceFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout StreamFinished$hSourceFile$LAYOUT() { return StreamFinished$hSourceFile$LAYOUT_; }

    static final VarHandle StreamFinished$hSourceFile$VH_ = MemoryHandles.asAddressVarHandle(StreamFinished$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hSourceFile")));
    public static java.lang.invoke.VarHandle StreamFinished$hSourceFile$VH() { return StreamFinished$hSourceFile$VH_; }

    static final MemoryLayout StreamFinished$hDestinationFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout StreamFinished$hDestinationFile$LAYOUT() { return StreamFinished$hDestinationFile$LAYOUT_; }

    static final VarHandle StreamFinished$hDestinationFile$VH_ = MemoryHandles.asAddressVarHandle(StreamFinished$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hDestinationFile")));
    public static java.lang.invoke.VarHandle StreamFinished$hDestinationFile$VH() { return StreamFinished$hDestinationFile$VH_; }

    static final MemoryLayout PollContinue$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwReserved")
    );
    public static jdk.incubator.foreign.MemoryLayout PollContinue$struct$LAYOUT() { return PollContinue$struct$LAYOUT_; }

    static final MemoryLayout PollContinue$dwReserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PollContinue$dwReserved$LAYOUT() { return PollContinue$dwReserved$LAYOUT_; }

    static final VarHandle PollContinue$dwReserved$VH_ = PollContinue$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved"));
    public static java.lang.invoke.VarHandle PollContinue$dwReserved$VH() { return PollContinue$dwReserved$VH_; }

    static final MemoryLayout Error$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("CopyPhase"),
        C_INT.withName("dwStreamNumber"),
        C_INT.withName("hrFailure"),
        C_INT.withName("dwReserved"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliChunkNumber"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliStreamSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliStreamBytesTransferred"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliTotalFileSize"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("uliTotalBytesTransferred")
    );
    public static jdk.incubator.foreign.MemoryLayout Error$struct$LAYOUT() { return Error$struct$LAYOUT_; }

    static final MemoryLayout Error$CopyPhase$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Error$CopyPhase$LAYOUT() { return Error$CopyPhase$LAYOUT_; }

    static final VarHandle Error$CopyPhase$VH_ = Error$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CopyPhase"));
    public static java.lang.invoke.VarHandle Error$CopyPhase$VH() { return Error$CopyPhase$VH_; }

    static final MemoryLayout Error$dwStreamNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Error$dwStreamNumber$LAYOUT() { return Error$dwStreamNumber$LAYOUT_; }

    static final VarHandle Error$dwStreamNumber$VH_ = Error$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStreamNumber"));
    public static java.lang.invoke.VarHandle Error$dwStreamNumber$VH() { return Error$dwStreamNumber$VH_; }

    static final MemoryLayout Error$hrFailure$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Error$hrFailure$LAYOUT() { return Error$hrFailure$LAYOUT_; }

    static final VarHandle Error$hrFailure$VH_ = Error$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("hrFailure"));
    public static java.lang.invoke.VarHandle Error$hrFailure$VH() { return Error$hrFailure$VH_; }

    static final MemoryLayout Error$dwReserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Error$dwReserved$LAYOUT() { return Error$dwReserved$LAYOUT_; }

    static final VarHandle Error$dwReserved$VH_ = Error$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved"));
    public static java.lang.invoke.VarHandle Error$dwReserved$VH() { return Error$dwReserved$VH_; }

    static final MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwSize"),
        C_INT.withName("dwCopyFlags"),
        C_POINTER.withName("pfCancel"),
        C_POINTER.withName("pProgressRoutine"),
        C_POINTER.withName("pvCallbackContext")
    ).withName("COPYFILE2_EXTENDED_PARAMETERS");
    public static jdk.incubator.foreign.MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$struct$LAYOUT() { return COPYFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$dwSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$dwSize$LAYOUT() { return COPYFILE2_EXTENDED_PARAMETERS$dwSize$LAYOUT_; }

    static final VarHandle COPYFILE2_EXTENDED_PARAMETERS$dwSize$VH_ = COPYFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    public static java.lang.invoke.VarHandle COPYFILE2_EXTENDED_PARAMETERS$dwSize$VH() { return COPYFILE2_EXTENDED_PARAMETERS$dwSize$VH_; }

    static final MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$dwCopyFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$dwCopyFlags$LAYOUT() { return COPYFILE2_EXTENDED_PARAMETERS$dwCopyFlags$LAYOUT_; }

    static final VarHandle COPYFILE2_EXTENDED_PARAMETERS$dwCopyFlags$VH_ = COPYFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCopyFlags"));
    public static java.lang.invoke.VarHandle COPYFILE2_EXTENDED_PARAMETERS$dwCopyFlags$VH() { return COPYFILE2_EXTENDED_PARAMETERS$dwCopyFlags$VH_; }

    static final MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$pfCancel$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$pfCancel$LAYOUT() { return COPYFILE2_EXTENDED_PARAMETERS$pfCancel$LAYOUT_; }

    static final VarHandle COPYFILE2_EXTENDED_PARAMETERS$pfCancel$VH_ = MemoryHandles.asAddressVarHandle(COPYFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfCancel")));
    public static java.lang.invoke.VarHandle COPYFILE2_EXTENDED_PARAMETERS$pfCancel$VH() { return COPYFILE2_EXTENDED_PARAMETERS$pfCancel$VH_; }

    static final MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$pProgressRoutine$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$pProgressRoutine$LAYOUT() { return COPYFILE2_EXTENDED_PARAMETERS$pProgressRoutine$LAYOUT_; }

    static final VarHandle COPYFILE2_EXTENDED_PARAMETERS$pProgressRoutine$VH_ = MemoryHandles.asAddressVarHandle(COPYFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pProgressRoutine")));
    public static java.lang.invoke.VarHandle COPYFILE2_EXTENDED_PARAMETERS$pProgressRoutine$VH() { return COPYFILE2_EXTENDED_PARAMETERS$pProgressRoutine$VH_; }

    static final MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$pvCallbackContext$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout COPYFILE2_EXTENDED_PARAMETERS$pvCallbackContext$LAYOUT() { return COPYFILE2_EXTENDED_PARAMETERS$pvCallbackContext$LAYOUT_; }

    static final VarHandle COPYFILE2_EXTENDED_PARAMETERS$pvCallbackContext$VH_ = MemoryHandles.asAddressVarHandle(COPYFILE2_EXTENDED_PARAMETERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvCallbackContext")));
    public static java.lang.invoke.VarHandle COPYFILE2_EXTENDED_PARAMETERS$pvCallbackContext$VH() { return COPYFILE2_EXTENDED_PARAMETERS$pvCallbackContext$VH_; }

    static final FunctionDescriptor CopyFile2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyFile2$FUNC() { return CopyFile2$FUNC_; }

    static final MethodHandle CopyFile2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyFile2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CopyFile2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyFile2$MH() { return CopyFile2$MH_; }

    static final FunctionDescriptor MoveFileA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileA$FUNC() { return MoveFileA$FUNC_; }

    static final MethodHandle MoveFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MoveFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        MoveFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MoveFileA$MH() { return MoveFileA$MH_; }

    static final FunctionDescriptor MoveFileW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileW$FUNC() { return MoveFileW$FUNC_; }

    static final MethodHandle MoveFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MoveFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        MoveFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MoveFileW$MH() { return MoveFileW$MH_; }

    static final FunctionDescriptor MoveFileExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileExA$FUNC() { return MoveFileExA$FUNC_; }

    static final MethodHandle MoveFileExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MoveFileExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        MoveFileExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MoveFileExA$MH() { return MoveFileExA$MH_; }

    static final FunctionDescriptor MoveFileExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileExW$FUNC() { return MoveFileExW$FUNC_; }

    static final MethodHandle MoveFileExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MoveFileExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        MoveFileExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MoveFileExW$MH() { return MoveFileExW$MH_; }

    static final FunctionDescriptor MoveFileWithProgressA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileWithProgressA$FUNC() { return MoveFileWithProgressA$FUNC_; }

    static final MethodHandle MoveFileWithProgressA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MoveFileWithProgressA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        MoveFileWithProgressA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MoveFileWithProgressA$MH() { return MoveFileWithProgressA$MH_; }

    static final FunctionDescriptor MoveFileWithProgressA$lpProgressRoutine$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileWithProgressA$lpProgressRoutine$FUNC() { return MoveFileWithProgressA$lpProgressRoutine$FUNC_; }

    static final FunctionDescriptor MoveFileWithProgressW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileWithProgressW$FUNC() { return MoveFileWithProgressW$FUNC_; }

    static final MethodHandle MoveFileWithProgressW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MoveFileWithProgressW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        MoveFileWithProgressW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MoveFileWithProgressW$MH() { return MoveFileWithProgressW$MH_; }

    static final FunctionDescriptor MoveFileWithProgressW$lpProgressRoutine$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileWithProgressW$lpProgressRoutine$FUNC() { return MoveFileWithProgressW$lpProgressRoutine$FUNC_; }

    static final FunctionDescriptor MoveFileTransactedA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileTransactedA$FUNC() { return MoveFileTransactedA$FUNC_; }

    static final MethodHandle MoveFileTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MoveFileTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        MoveFileTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MoveFileTransactedA$MH() { return MoveFileTransactedA$MH_; }

    static final FunctionDescriptor MoveFileTransactedA$lpProgressRoutine$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileTransactedA$lpProgressRoutine$FUNC() { return MoveFileTransactedA$lpProgressRoutine$FUNC_; }

    static final FunctionDescriptor MoveFileTransactedW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileTransactedW$FUNC() { return MoveFileTransactedW$FUNC_; }

    static final MethodHandle MoveFileTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MoveFileTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        MoveFileTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MoveFileTransactedW$MH() { return MoveFileTransactedW$MH_; }

    static final FunctionDescriptor MoveFileTransactedW$lpProgressRoutine$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MoveFileTransactedW$lpProgressRoutine$FUNC() { return MoveFileTransactedW$lpProgressRoutine$FUNC_; }

    static final FunctionDescriptor ReplaceFileA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReplaceFileA$FUNC() { return ReplaceFileA$FUNC_; }

    static final MethodHandle ReplaceFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReplaceFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReplaceFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReplaceFileA$MH() { return ReplaceFileA$MH_; }

    static final FunctionDescriptor ReplaceFileW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReplaceFileW$FUNC() { return ReplaceFileW$FUNC_; }

    static final MethodHandle ReplaceFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReplaceFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReplaceFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReplaceFileW$MH() { return ReplaceFileW$MH_; }

    static final FunctionDescriptor CreateHardLinkA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateHardLinkA$FUNC() { return CreateHardLinkA$FUNC_; }

    static final MethodHandle CreateHardLinkA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateHardLinkA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateHardLinkA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateHardLinkA$MH() { return CreateHardLinkA$MH_; }

    static final FunctionDescriptor CreateHardLinkW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateHardLinkW$FUNC() { return CreateHardLinkW$FUNC_; }

    static final MethodHandle CreateHardLinkW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateHardLinkW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateHardLinkW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateHardLinkW$MH() { return CreateHardLinkW$MH_; }

    static final FunctionDescriptor CreateHardLinkTransactedA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateHardLinkTransactedA$FUNC() { return CreateHardLinkTransactedA$FUNC_; }

    static final MethodHandle CreateHardLinkTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateHardLinkTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateHardLinkTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateHardLinkTransactedA$MH() { return CreateHardLinkTransactedA$MH_; }

    static final FunctionDescriptor CreateHardLinkTransactedW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateHardLinkTransactedW$FUNC() { return CreateHardLinkTransactedW$FUNC_; }

    static final MethodHandle CreateHardLinkTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateHardLinkTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateHardLinkTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateHardLinkTransactedW$MH() { return CreateHardLinkTransactedW$MH_; }

    static final FunctionDescriptor FindFirstStreamTransactedW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstStreamTransactedW$FUNC() { return FindFirstStreamTransactedW$FUNC_; }

    static final MethodHandle FindFirstStreamTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstStreamTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstStreamTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstStreamTransactedW$MH() { return FindFirstStreamTransactedW$MH_; }

    static final FunctionDescriptor FindFirstFileNameTransactedW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstFileNameTransactedW$FUNC() { return FindFirstFileNameTransactedW$FUNC_; }

    static final MethodHandle FindFirstFileNameTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstFileNameTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstFileNameTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstFileNameTransactedW$MH() { return FindFirstFileNameTransactedW$MH_; }

    static final FunctionDescriptor CreateNamedPipeA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateNamedPipeA$FUNC() { return CreateNamedPipeA$FUNC_; }

    static final MethodHandle CreateNamedPipeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateNamedPipeA",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIIILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateNamedPipeA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateNamedPipeA$MH() { return CreateNamedPipeA$MH_; }

    static final FunctionDescriptor GetNamedPipeHandleStateA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNamedPipeHandleStateA$FUNC() { return GetNamedPipeHandleStateA$FUNC_; }

    static final MethodHandle GetNamedPipeHandleStateA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNamedPipeHandleStateA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetNamedPipeHandleStateA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNamedPipeHandleStateA$MH() { return GetNamedPipeHandleStateA$MH_; }

    static final FunctionDescriptor CallNamedPipeA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallNamedPipeA$FUNC() { return CallNamedPipeA$FUNC_; }

    static final MethodHandle CallNamedPipeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CallNamedPipeA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CallNamedPipeA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CallNamedPipeA$MH() { return CallNamedPipeA$MH_; }

    static final FunctionDescriptor WaitNamedPipeA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitNamedPipeA$FUNC() { return WaitNamedPipeA$FUNC_; }

    static final MethodHandle WaitNamedPipeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitNamedPipeA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WaitNamedPipeA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitNamedPipeA$MH() { return WaitNamedPipeA$MH_; }

    static final FunctionDescriptor GetNamedPipeClientComputerNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNamedPipeClientComputerNameA$FUNC() { return GetNamedPipeClientComputerNameA$FUNC_; }

    static final MethodHandle GetNamedPipeClientComputerNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNamedPipeClientComputerNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetNamedPipeClientComputerNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNamedPipeClientComputerNameA$MH() { return GetNamedPipeClientComputerNameA$MH_; }

    static final FunctionDescriptor GetNamedPipeClientProcessId$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNamedPipeClientProcessId$FUNC() { return GetNamedPipeClientProcessId$FUNC_; }

    static final MethodHandle GetNamedPipeClientProcessId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNamedPipeClientProcessId",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNamedPipeClientProcessId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNamedPipeClientProcessId$MH() { return GetNamedPipeClientProcessId$MH_; }

    static final FunctionDescriptor GetNamedPipeClientSessionId$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNamedPipeClientSessionId$FUNC() { return GetNamedPipeClientSessionId$FUNC_; }

    static final MethodHandle GetNamedPipeClientSessionId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNamedPipeClientSessionId",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNamedPipeClientSessionId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNamedPipeClientSessionId$MH() { return GetNamedPipeClientSessionId$MH_; }

    static final FunctionDescriptor GetNamedPipeServerProcessId$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNamedPipeServerProcessId$FUNC() { return GetNamedPipeServerProcessId$FUNC_; }

    static final MethodHandle GetNamedPipeServerProcessId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNamedPipeServerProcessId",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNamedPipeServerProcessId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNamedPipeServerProcessId$MH() { return GetNamedPipeServerProcessId$MH_; }

    static final FunctionDescriptor GetNamedPipeServerSessionId$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNamedPipeServerSessionId$FUNC() { return GetNamedPipeServerSessionId$FUNC_; }

    static final MethodHandle GetNamedPipeServerSessionId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNamedPipeServerSessionId",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNamedPipeServerSessionId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNamedPipeServerSessionId$MH() { return GetNamedPipeServerSessionId$MH_; }

    static final FunctionDescriptor SetVolumeLabelA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetVolumeLabelA$FUNC() { return SetVolumeLabelA$FUNC_; }

    static final MethodHandle SetVolumeLabelA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetVolumeLabelA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetVolumeLabelA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetVolumeLabelA$MH() { return SetVolumeLabelA$MH_; }

    static final FunctionDescriptor SetVolumeLabelW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetVolumeLabelW$FUNC() { return SetVolumeLabelW$FUNC_; }

    static final MethodHandle SetVolumeLabelW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetVolumeLabelW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetVolumeLabelW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetVolumeLabelW$MH() { return SetVolumeLabelW$MH_; }

    static final FunctionDescriptor SetFileBandwidthReservation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileBandwidthReservation$FUNC() { return SetFileBandwidthReservation$FUNC_; }

    static final MethodHandle SetFileBandwidthReservation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileBandwidthReservation",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetFileBandwidthReservation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileBandwidthReservation$MH() { return SetFileBandwidthReservation$MH_; }

    static final FunctionDescriptor GetFileBandwidthReservation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileBandwidthReservation$FUNC() { return GetFileBandwidthReservation$FUNC_; }

    static final MethodHandle GetFileBandwidthReservation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileBandwidthReservation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileBandwidthReservation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileBandwidthReservation$MH() { return GetFileBandwidthReservation$MH_; }

    static final FunctionDescriptor ClearEventLogA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ClearEventLogA$FUNC() { return ClearEventLogA$FUNC_; }

    static final MethodHandle ClearEventLogA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClearEventLogA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ClearEventLogA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ClearEventLogA$MH() { return ClearEventLogA$MH_; }

    static final FunctionDescriptor ClearEventLogW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ClearEventLogW$FUNC() { return ClearEventLogW$FUNC_; }

    static final MethodHandle ClearEventLogW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClearEventLogW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ClearEventLogW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ClearEventLogW$MH() { return ClearEventLogW$MH_; }

    static final FunctionDescriptor BackupEventLogA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BackupEventLogA$FUNC() { return BackupEventLogA$FUNC_; }

    static final MethodHandle BackupEventLogA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BackupEventLogA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BackupEventLogA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BackupEventLogA$MH() { return BackupEventLogA$MH_; }

    static final FunctionDescriptor BackupEventLogW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BackupEventLogW$FUNC() { return BackupEventLogW$FUNC_; }

    static final MethodHandle BackupEventLogW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BackupEventLogW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BackupEventLogW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BackupEventLogW$MH() { return BackupEventLogW$MH_; }

    static final FunctionDescriptor CloseEventLog$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseEventLog$FUNC() { return CloseEventLog$FUNC_; }

    static final MethodHandle CloseEventLog$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseEventLog",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CloseEventLog$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseEventLog$MH() { return CloseEventLog$MH_; }

    static final FunctionDescriptor DeregisterEventSource$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeregisterEventSource$FUNC() { return DeregisterEventSource$FUNC_; }

    static final MethodHandle DeregisterEventSource$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeregisterEventSource",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeregisterEventSource$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeregisterEventSource$MH() { return DeregisterEventSource$MH_; }

    static final FunctionDescriptor NotifyChangeEventLog$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor NotifyChangeEventLog$FUNC() { return NotifyChangeEventLog$FUNC_; }

    static final MethodHandle NotifyChangeEventLog$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NotifyChangeEventLog",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NotifyChangeEventLog$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle NotifyChangeEventLog$MH() { return NotifyChangeEventLog$MH_; }

    static final FunctionDescriptor GetNumberOfEventLogRecords$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumberOfEventLogRecords$FUNC() { return GetNumberOfEventLogRecords$FUNC_; }

    static final MethodHandle GetNumberOfEventLogRecords$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumberOfEventLogRecords",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNumberOfEventLogRecords$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumberOfEventLogRecords$MH() { return GetNumberOfEventLogRecords$MH_; }

    static final FunctionDescriptor GetOldestEventLogRecord$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetOldestEventLogRecord$FUNC() { return GetOldestEventLogRecord$FUNC_; }

    static final MethodHandle GetOldestEventLogRecord$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOldestEventLogRecord",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetOldestEventLogRecord$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetOldestEventLogRecord$MH() { return GetOldestEventLogRecord$MH_; }

    static final FunctionDescriptor OpenEventLogA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenEventLogA$FUNC() { return OpenEventLogA$FUNC_; }

    static final MethodHandle OpenEventLogA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenEventLogA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenEventLogA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenEventLogA$MH() { return OpenEventLogA$MH_; }

    static final FunctionDescriptor OpenEventLogW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenEventLogW$FUNC() { return OpenEventLogW$FUNC_; }

    static final MethodHandle OpenEventLogW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenEventLogW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenEventLogW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenEventLogW$MH() { return OpenEventLogW$MH_; }

    static final FunctionDescriptor RegisterEventSourceA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterEventSourceA$FUNC() { return RegisterEventSourceA$FUNC_; }

    static final MethodHandle RegisterEventSourceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterEventSourceA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RegisterEventSourceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterEventSourceA$MH() { return RegisterEventSourceA$MH_; }

    static final FunctionDescriptor RegisterEventSourceW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterEventSourceW$FUNC() { return RegisterEventSourceW$FUNC_; }

    static final MethodHandle RegisterEventSourceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterEventSourceW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RegisterEventSourceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterEventSourceW$MH() { return RegisterEventSourceW$MH_; }

    static final FunctionDescriptor OpenBackupEventLogA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenBackupEventLogA$FUNC() { return OpenBackupEventLogA$FUNC_; }

    static final MethodHandle OpenBackupEventLogA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenBackupEventLogA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenBackupEventLogA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenBackupEventLogA$MH() { return OpenBackupEventLogA$MH_; }

    static final FunctionDescriptor OpenBackupEventLogW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenBackupEventLogW$FUNC() { return OpenBackupEventLogW$FUNC_; }

    static final MethodHandle OpenBackupEventLogW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenBackupEventLogW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenBackupEventLogW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenBackupEventLogW$MH() { return OpenBackupEventLogW$MH_; }

    static final FunctionDescriptor ReadEventLogA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadEventLogA$FUNC() { return ReadEventLogA$FUNC_; }

    static final MethodHandle ReadEventLogA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadEventLogA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadEventLogA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadEventLogA$MH() { return ReadEventLogA$MH_; }

    static final FunctionDescriptor ReadEventLogW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadEventLogW$FUNC() { return ReadEventLogW$FUNC_; }

    static final MethodHandle ReadEventLogW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadEventLogW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadEventLogW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadEventLogW$MH() { return ReadEventLogW$MH_; }

    static final FunctionDescriptor ReportEventA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT,
        C_SHORT,
        C_INT,
        C_POINTER,
        C_SHORT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReportEventA$FUNC() { return ReportEventA$FUNC_; }

    static final MethodHandle ReportEventA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReportEventA",
        "(Ljdk/incubator/foreign/MemoryAddress;SSILjdk/incubator/foreign/MemoryAddress;SILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReportEventA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReportEventA$MH() { return ReportEventA$MH_; }

    static final FunctionDescriptor ReportEventW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT,
        C_SHORT,
        C_INT,
        C_POINTER,
        C_SHORT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReportEventW$FUNC() { return ReportEventW$FUNC_; }

    static final MethodHandle ReportEventW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReportEventW",
        "(Ljdk/incubator/foreign/MemoryAddress;SSILjdk/incubator/foreign/MemoryAddress;SILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReportEventW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReportEventW$MH() { return ReportEventW$MH_; }

    static final MemoryLayout _EVENTLOG_FULL_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwFull")
    ).withName("_EVENTLOG_FULL_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOG_FULL_INFORMATION$struct$LAYOUT() { return _EVENTLOG_FULL_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _EVENTLOG_FULL_INFORMATION$dwFull$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOG_FULL_INFORMATION$dwFull$LAYOUT() { return _EVENTLOG_FULL_INFORMATION$dwFull$LAYOUT_; }

    static final VarHandle _EVENTLOG_FULL_INFORMATION$dwFull$VH_ = _EVENTLOG_FULL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFull"));
    public static java.lang.invoke.VarHandle _EVENTLOG_FULL_INFORMATION$dwFull$VH() { return _EVENTLOG_FULL_INFORMATION$dwFull$VH_; }

    static final FunctionDescriptor GetEventLogInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetEventLogInformation$FUNC() { return GetEventLogInformation$FUNC_; }

    static final MethodHandle GetEventLogInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEventLogInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetEventLogInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetEventLogInformation$MH() { return GetEventLogInformation$MH_; }

    static final MemoryLayout _OPERATION_START_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Version"),
        C_INT.withName("OperationId"),
        C_INT.withName("Flags")
    ).withName("_OPERATION_START_PARAMETERS");
    public static jdk.incubator.foreign.MemoryLayout _OPERATION_START_PARAMETERS$struct$LAYOUT() { return _OPERATION_START_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _OPERATION_START_PARAMETERS$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OPERATION_START_PARAMETERS$Version$LAYOUT() { return _OPERATION_START_PARAMETERS$Version$LAYOUT_; }

    static final VarHandle _OPERATION_START_PARAMETERS$Version$VH_ = _OPERATION_START_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _OPERATION_START_PARAMETERS$Version$VH() { return _OPERATION_START_PARAMETERS$Version$VH_; }

    static final MemoryLayout _OPERATION_START_PARAMETERS$OperationId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OPERATION_START_PARAMETERS$OperationId$LAYOUT() { return _OPERATION_START_PARAMETERS$OperationId$LAYOUT_; }

    static final VarHandle _OPERATION_START_PARAMETERS$OperationId$VH_ = _OPERATION_START_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OperationId"));
    public static java.lang.invoke.VarHandle _OPERATION_START_PARAMETERS$OperationId$VH() { return _OPERATION_START_PARAMETERS$OperationId$VH_; }

    static final MemoryLayout _OPERATION_START_PARAMETERS$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OPERATION_START_PARAMETERS$Flags$LAYOUT() { return _OPERATION_START_PARAMETERS$Flags$LAYOUT_; }

    static final VarHandle _OPERATION_START_PARAMETERS$Flags$VH_ = _OPERATION_START_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _OPERATION_START_PARAMETERS$Flags$VH() { return _OPERATION_START_PARAMETERS$Flags$VH_; }

    static final MemoryLayout _OPERATION_END_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Version"),
        C_INT.withName("OperationId"),
        C_INT.withName("Flags")
    ).withName("_OPERATION_END_PARAMETERS");
    public static jdk.incubator.foreign.MemoryLayout _OPERATION_END_PARAMETERS$struct$LAYOUT() { return _OPERATION_END_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _OPERATION_END_PARAMETERS$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OPERATION_END_PARAMETERS$Version$LAYOUT() { return _OPERATION_END_PARAMETERS$Version$LAYOUT_; }

    static final VarHandle _OPERATION_END_PARAMETERS$Version$VH_ = _OPERATION_END_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _OPERATION_END_PARAMETERS$Version$VH() { return _OPERATION_END_PARAMETERS$Version$VH_; }

    static final MemoryLayout _OPERATION_END_PARAMETERS$OperationId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OPERATION_END_PARAMETERS$OperationId$LAYOUT() { return _OPERATION_END_PARAMETERS$OperationId$LAYOUT_; }

    static final VarHandle _OPERATION_END_PARAMETERS$OperationId$VH_ = _OPERATION_END_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OperationId"));
    public static java.lang.invoke.VarHandle _OPERATION_END_PARAMETERS$OperationId$VH() { return _OPERATION_END_PARAMETERS$OperationId$VH_; }

    static final MemoryLayout _OPERATION_END_PARAMETERS$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OPERATION_END_PARAMETERS$Flags$LAYOUT() { return _OPERATION_END_PARAMETERS$Flags$LAYOUT_; }

    static final VarHandle _OPERATION_END_PARAMETERS$Flags$VH_ = _OPERATION_END_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _OPERATION_END_PARAMETERS$Flags$VH() { return _OPERATION_END_PARAMETERS$Flags$VH_; }

    static final FunctionDescriptor OperationStart$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OperationStart$FUNC() { return OperationStart$FUNC_; }

    static final MethodHandle OperationStart$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OperationStart",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OperationStart$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OperationStart$MH() { return OperationStart$MH_; }

    static final FunctionDescriptor OperationEnd$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OperationEnd$FUNC() { return OperationEnd$FUNC_; }

    static final MethodHandle OperationEnd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OperationEnd",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OperationEnd$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OperationEnd$MH() { return OperationEnd$MH_; }

    static final FunctionDescriptor AccessCheckAndAuditAlarmA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AccessCheckAndAuditAlarmA$FUNC() { return AccessCheckAndAuditAlarmA$FUNC_; }

    static final MethodHandle AccessCheckAndAuditAlarmA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AccessCheckAndAuditAlarmA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AccessCheckAndAuditAlarmA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AccessCheckAndAuditAlarmA$MH() { return AccessCheckAndAuditAlarmA$MH_; }

    static final FunctionDescriptor AccessCheckByTypeAndAuditAlarmA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AccessCheckByTypeAndAuditAlarmA$FUNC() { return AccessCheckByTypeAndAuditAlarmA$FUNC_; }

    static final MethodHandle AccessCheckByTypeAndAuditAlarmA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AccessCheckByTypeAndAuditAlarmA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AccessCheckByTypeAndAuditAlarmA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AccessCheckByTypeAndAuditAlarmA$MH() { return AccessCheckByTypeAndAuditAlarmA$MH_; }

    static final FunctionDescriptor AccessCheckByTypeResultListAndAuditAlarmA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AccessCheckByTypeResultListAndAuditAlarmA$FUNC() { return AccessCheckByTypeResultListAndAuditAlarmA$FUNC_; }

    static final MethodHandle AccessCheckByTypeResultListAndAuditAlarmA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AccessCheckByTypeResultListAndAuditAlarmA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AccessCheckByTypeResultListAndAuditAlarmA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AccessCheckByTypeResultListAndAuditAlarmA$MH() { return AccessCheckByTypeResultListAndAuditAlarmA$MH_; }

    static final FunctionDescriptor AccessCheckByTypeResultListAndAuditAlarmByHandleA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AccessCheckByTypeResultListAndAuditAlarmByHandleA$FUNC() { return AccessCheckByTypeResultListAndAuditAlarmByHandleA$FUNC_; }

    static final MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AccessCheckByTypeResultListAndAuditAlarmByHandleA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AccessCheckByTypeResultListAndAuditAlarmByHandleA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH() { return AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH_; }

    static final FunctionDescriptor ObjectOpenAuditAlarmA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ObjectOpenAuditAlarmA$FUNC() { return ObjectOpenAuditAlarmA$FUNC_; }

    static final MethodHandle ObjectOpenAuditAlarmA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ObjectOpenAuditAlarmA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        ObjectOpenAuditAlarmA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ObjectOpenAuditAlarmA$MH() { return ObjectOpenAuditAlarmA$MH_; }

    static final FunctionDescriptor ObjectPrivilegeAuditAlarmA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ObjectPrivilegeAuditAlarmA$FUNC() { return ObjectPrivilegeAuditAlarmA$FUNC_; }

    static final MethodHandle ObjectPrivilegeAuditAlarmA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ObjectPrivilegeAuditAlarmA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        ObjectPrivilegeAuditAlarmA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ObjectPrivilegeAuditAlarmA$MH() { return ObjectPrivilegeAuditAlarmA$MH_; }

    static final FunctionDescriptor ObjectCloseAuditAlarmA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ObjectCloseAuditAlarmA$FUNC() { return ObjectCloseAuditAlarmA$FUNC_; }

    static final MethodHandle ObjectCloseAuditAlarmA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ObjectCloseAuditAlarmA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ObjectCloseAuditAlarmA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ObjectCloseAuditAlarmA$MH() { return ObjectCloseAuditAlarmA$MH_; }

    static final FunctionDescriptor ObjectDeleteAuditAlarmA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ObjectDeleteAuditAlarmA$FUNC() { return ObjectDeleteAuditAlarmA$FUNC_; }

    static final MethodHandle ObjectDeleteAuditAlarmA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ObjectDeleteAuditAlarmA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ObjectDeleteAuditAlarmA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ObjectDeleteAuditAlarmA$MH() { return ObjectDeleteAuditAlarmA$MH_; }

    static final FunctionDescriptor PrivilegedServiceAuditAlarmA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PrivilegedServiceAuditAlarmA$FUNC() { return PrivilegedServiceAuditAlarmA$FUNC_; }

    static final MethodHandle PrivilegedServiceAuditAlarmA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PrivilegedServiceAuditAlarmA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PrivilegedServiceAuditAlarmA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PrivilegedServiceAuditAlarmA$MH() { return PrivilegedServiceAuditAlarmA$MH_; }

    static final FunctionDescriptor AddConditionalAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_BOOL,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddConditionalAce$FUNC() { return AddConditionalAce$FUNC_; }

    static final MethodHandle AddConditionalAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddConditionalAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IIBILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AddConditionalAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddConditionalAce$MH() { return AddConditionalAce$MH_; }

    static final FunctionDescriptor SetFileSecurityA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileSecurityA$FUNC() { return SetFileSecurityA$FUNC_; }

    static final MethodHandle SetFileSecurityA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileSecurityA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetFileSecurityA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileSecurityA$MH() { return SetFileSecurityA$MH_; }

    static final FunctionDescriptor GetFileSecurityA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileSecurityA$FUNC() { return GetFileSecurityA$FUNC_; }

    static final MethodHandle GetFileSecurityA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileSecurityA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetFileSecurityA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileSecurityA$MH() { return GetFileSecurityA$MH_; }

    static final FunctionDescriptor ReadDirectoryChangesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadDirectoryChangesW$FUNC() { return ReadDirectoryChangesW$FUNC_; }

    static final MethodHandle ReadDirectoryChangesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadDirectoryChangesW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadDirectoryChangesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadDirectoryChangesW$MH() { return ReadDirectoryChangesW$MH_; }

    static final FunctionDescriptor ReadDirectoryChangesW$lpCompletionRoutine$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadDirectoryChangesW$lpCompletionRoutine$FUNC() { return ReadDirectoryChangesW$lpCompletionRoutine$FUNC_; }

    static final FunctionDescriptor ReadDirectoryChangesExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadDirectoryChangesExW$FUNC() { return ReadDirectoryChangesExW$FUNC_; }

    static final MethodHandle ReadDirectoryChangesExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadDirectoryChangesExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ReadDirectoryChangesExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ReadDirectoryChangesExW$MH() { return ReadDirectoryChangesExW$MH_; }

    static final FunctionDescriptor ReadDirectoryChangesExW$lpCompletionRoutine$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ReadDirectoryChangesExW$lpCompletionRoutine$FUNC() { return ReadDirectoryChangesExW$lpCompletionRoutine$FUNC_; }

    static final FunctionDescriptor MapViewOfFileExNuma$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapViewOfFileExNuma$FUNC() { return MapViewOfFileExNuma$FUNC_; }

    static final MethodHandle MapViewOfFileExNuma$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapViewOfFileExNuma",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIJLjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        MapViewOfFileExNuma$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapViewOfFileExNuma$MH() { return MapViewOfFileExNuma$MH_; }

    static final FunctionDescriptor IsBadReadPtr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsBadReadPtr$FUNC() { return IsBadReadPtr$FUNC_; }

    static final MethodHandle IsBadReadPtr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsBadReadPtr",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        IsBadReadPtr$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsBadReadPtr$MH() { return IsBadReadPtr$MH_; }

    static final FunctionDescriptor IsBadWritePtr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsBadWritePtr$FUNC() { return IsBadWritePtr$FUNC_; }

    static final MethodHandle IsBadWritePtr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsBadWritePtr",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        IsBadWritePtr$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsBadWritePtr$MH() { return IsBadWritePtr$MH_; }

    static final FunctionDescriptor IsBadHugeReadPtr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsBadHugeReadPtr$FUNC() { return IsBadHugeReadPtr$FUNC_; }

    static final MethodHandle IsBadHugeReadPtr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsBadHugeReadPtr",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        IsBadHugeReadPtr$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsBadHugeReadPtr$MH() { return IsBadHugeReadPtr$MH_; }

    static final FunctionDescriptor IsBadHugeWritePtr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsBadHugeWritePtr$FUNC() { return IsBadHugeWritePtr$FUNC_; }

    static final MethodHandle IsBadHugeWritePtr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsBadHugeWritePtr",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        IsBadHugeWritePtr$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsBadHugeWritePtr$MH() { return IsBadHugeWritePtr$MH_; }

    static final FunctionDescriptor IsBadCodePtr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsBadCodePtr$FUNC() { return IsBadCodePtr$FUNC_; }

    static final MethodHandle IsBadCodePtr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsBadCodePtr",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsBadCodePtr$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsBadCodePtr$MH() { return IsBadCodePtr$MH_; }

    static final FunctionDescriptor IsBadCodePtr$lpfn$FUNC_ = FunctionDescriptor.of(C_LONGLONG);
    public static jdk.incubator.foreign.FunctionDescriptor IsBadCodePtr$lpfn$FUNC() { return IsBadCodePtr$lpfn$FUNC_; }

    static final FunctionDescriptor IsBadStringPtrA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsBadStringPtrA$FUNC() { return IsBadStringPtrA$FUNC_; }

    static final MethodHandle IsBadStringPtrA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsBadStringPtrA",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        IsBadStringPtrA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsBadStringPtrA$MH() { return IsBadStringPtrA$MH_; }

    static final FunctionDescriptor IsBadStringPtrW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsBadStringPtrW$FUNC() { return IsBadStringPtrW$FUNC_; }

    static final MethodHandle IsBadStringPtrW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsBadStringPtrW",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        IsBadStringPtrW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsBadStringPtrW$MH() { return IsBadStringPtrW$MH_; }

    static final FunctionDescriptor LookupAccountSidA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupAccountSidA$FUNC() { return LookupAccountSidA$FUNC_; }

    static final MethodHandle LookupAccountSidA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupAccountSidA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupAccountSidA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupAccountSidA$MH() { return LookupAccountSidA$MH_; }

    static final FunctionDescriptor LookupAccountSidW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupAccountSidW$FUNC() { return LookupAccountSidW$FUNC_; }

    static final MethodHandle LookupAccountSidW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupAccountSidW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupAccountSidW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupAccountSidW$MH() { return LookupAccountSidW$MH_; }

    static final FunctionDescriptor LookupAccountNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupAccountNameA$FUNC() { return LookupAccountNameA$FUNC_; }

    static final MethodHandle LookupAccountNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupAccountNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupAccountNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupAccountNameA$MH() { return LookupAccountNameA$MH_; }

    static final FunctionDescriptor LookupAccountNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupAccountNameW$FUNC() { return LookupAccountNameW$FUNC_; }

    static final MethodHandle LookupAccountNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupAccountNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupAccountNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupAccountNameW$MH() { return LookupAccountNameW$MH_; }

    static final FunctionDescriptor LookupAccountNameLocalA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupAccountNameLocalA$FUNC() { return LookupAccountNameLocalA$FUNC_; }

    static final MethodHandle LookupAccountNameLocalA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupAccountNameLocalA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupAccountNameLocalA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupAccountNameLocalA$MH() { return LookupAccountNameLocalA$MH_; }

    static final FunctionDescriptor LookupAccountNameLocalW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupAccountNameLocalW$FUNC() { return LookupAccountNameLocalW$FUNC_; }

    static final MethodHandle LookupAccountNameLocalW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupAccountNameLocalW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupAccountNameLocalW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupAccountNameLocalW$MH() { return LookupAccountNameLocalW$MH_; }

    static final FunctionDescriptor LookupAccountSidLocalA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupAccountSidLocalA$FUNC() { return LookupAccountSidLocalA$FUNC_; }

    static final MethodHandle LookupAccountSidLocalA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupAccountSidLocalA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupAccountSidLocalA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupAccountSidLocalA$MH() { return LookupAccountSidLocalA$MH_; }

    static final FunctionDescriptor LookupAccountSidLocalW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupAccountSidLocalW$FUNC() { return LookupAccountSidLocalW$FUNC_; }

    static final MethodHandle LookupAccountSidLocalW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupAccountSidLocalW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupAccountSidLocalW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupAccountSidLocalW$MH() { return LookupAccountSidLocalW$MH_; }

    static final FunctionDescriptor LookupPrivilegeValueA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupPrivilegeValueA$FUNC() { return LookupPrivilegeValueA$FUNC_; }

    static final MethodHandle LookupPrivilegeValueA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupPrivilegeValueA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupPrivilegeValueA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupPrivilegeValueA$MH() { return LookupPrivilegeValueA$MH_; }

    static final FunctionDescriptor LookupPrivilegeValueW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupPrivilegeValueW$FUNC() { return LookupPrivilegeValueW$FUNC_; }

    static final MethodHandle LookupPrivilegeValueW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupPrivilegeValueW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupPrivilegeValueW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupPrivilegeValueW$MH() { return LookupPrivilegeValueW$MH_; }

    static final FunctionDescriptor LookupPrivilegeNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupPrivilegeNameA$FUNC() { return LookupPrivilegeNameA$FUNC_; }

    static final MethodHandle LookupPrivilegeNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupPrivilegeNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupPrivilegeNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupPrivilegeNameA$MH() { return LookupPrivilegeNameA$MH_; }

    static final FunctionDescriptor LookupPrivilegeNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupPrivilegeNameW$FUNC() { return LookupPrivilegeNameW$FUNC_; }

    static final MethodHandle LookupPrivilegeNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupPrivilegeNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupPrivilegeNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupPrivilegeNameW$MH() { return LookupPrivilegeNameW$MH_; }

    static final FunctionDescriptor LookupPrivilegeDisplayNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupPrivilegeDisplayNameA$FUNC() { return LookupPrivilegeDisplayNameA$FUNC_; }

    static final MethodHandle LookupPrivilegeDisplayNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupPrivilegeDisplayNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupPrivilegeDisplayNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupPrivilegeDisplayNameA$MH() { return LookupPrivilegeDisplayNameA$MH_; }

    static final FunctionDescriptor LookupPrivilegeDisplayNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupPrivilegeDisplayNameW$FUNC() { return LookupPrivilegeDisplayNameW$FUNC_; }

    static final MethodHandle LookupPrivilegeDisplayNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupPrivilegeDisplayNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LookupPrivilegeDisplayNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupPrivilegeDisplayNameW$MH() { return LookupPrivilegeDisplayNameW$MH_; }

    static final FunctionDescriptor BuildCommDCBA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BuildCommDCBA$FUNC() { return BuildCommDCBA$FUNC_; }

    static final MethodHandle BuildCommDCBA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BuildCommDCBA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BuildCommDCBA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BuildCommDCBA$MH() { return BuildCommDCBA$MH_; }

    static final FunctionDescriptor BuildCommDCBW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BuildCommDCBW$FUNC() { return BuildCommDCBW$FUNC_; }

    static final MethodHandle BuildCommDCBW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BuildCommDCBW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BuildCommDCBW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BuildCommDCBW$MH() { return BuildCommDCBW$MH_; }

    static final FunctionDescriptor BuildCommDCBAndTimeoutsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BuildCommDCBAndTimeoutsA$FUNC() { return BuildCommDCBAndTimeoutsA$FUNC_; }

    static final MethodHandle BuildCommDCBAndTimeoutsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BuildCommDCBAndTimeoutsA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BuildCommDCBAndTimeoutsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BuildCommDCBAndTimeoutsA$MH() { return BuildCommDCBAndTimeoutsA$MH_; }

    static final FunctionDescriptor BuildCommDCBAndTimeoutsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BuildCommDCBAndTimeoutsW$FUNC() { return BuildCommDCBAndTimeoutsW$FUNC_; }

    static final MethodHandle BuildCommDCBAndTimeoutsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BuildCommDCBAndTimeoutsW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BuildCommDCBAndTimeoutsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BuildCommDCBAndTimeoutsW$MH() { return BuildCommDCBAndTimeoutsW$MH_; }

    static final FunctionDescriptor CommConfigDialogA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CommConfigDialogA$FUNC() { return CommConfigDialogA$FUNC_; }

    static final MethodHandle CommConfigDialogA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CommConfigDialogA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CommConfigDialogA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CommConfigDialogA$MH() { return CommConfigDialogA$MH_; }

    static final FunctionDescriptor CommConfigDialogW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CommConfigDialogW$FUNC() { return CommConfigDialogW$FUNC_; }

    static final MethodHandle CommConfigDialogW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CommConfigDialogW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CommConfigDialogW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CommConfigDialogW$MH() { return CommConfigDialogW$MH_; }

    static final FunctionDescriptor GetDefaultCommConfigA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDefaultCommConfigA$FUNC() { return GetDefaultCommConfigA$FUNC_; }

    static final MethodHandle GetDefaultCommConfigA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDefaultCommConfigA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDefaultCommConfigA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDefaultCommConfigA$MH() { return GetDefaultCommConfigA$MH_; }

    static final FunctionDescriptor GetDefaultCommConfigW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDefaultCommConfigW$FUNC() { return GetDefaultCommConfigW$FUNC_; }

    static final MethodHandle GetDefaultCommConfigW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDefaultCommConfigW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDefaultCommConfigW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDefaultCommConfigW$MH() { return GetDefaultCommConfigW$MH_; }

    static final FunctionDescriptor SetDefaultCommConfigA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDefaultCommConfigA$FUNC() { return SetDefaultCommConfigA$FUNC_; }

    static final MethodHandle SetDefaultCommConfigA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDefaultCommConfigA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetDefaultCommConfigA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDefaultCommConfigA$MH() { return SetDefaultCommConfigA$MH_; }

    static final FunctionDescriptor SetDefaultCommConfigW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDefaultCommConfigW$FUNC() { return SetDefaultCommConfigW$FUNC_; }

    static final MethodHandle SetDefaultCommConfigW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDefaultCommConfigW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetDefaultCommConfigW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDefaultCommConfigW$MH() { return SetDefaultCommConfigW$MH_; }

    static final FunctionDescriptor GetComputerNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetComputerNameA$FUNC() { return GetComputerNameA$FUNC_; }

    static final MethodHandle GetComputerNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetComputerNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetComputerNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetComputerNameA$MH() { return GetComputerNameA$MH_; }

    static final FunctionDescriptor GetComputerNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetComputerNameW$FUNC() { return GetComputerNameW$FUNC_; }

    static final MethodHandle GetComputerNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetComputerNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetComputerNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetComputerNameW$MH() { return GetComputerNameW$MH_; }

    static final FunctionDescriptor DnsHostnameToComputerNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DnsHostnameToComputerNameA$FUNC() { return DnsHostnameToComputerNameA$FUNC_; }

    static final MethodHandle DnsHostnameToComputerNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DnsHostnameToComputerNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DnsHostnameToComputerNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DnsHostnameToComputerNameA$MH() { return DnsHostnameToComputerNameA$MH_; }

    static final FunctionDescriptor DnsHostnameToComputerNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DnsHostnameToComputerNameW$FUNC() { return DnsHostnameToComputerNameW$FUNC_; }

    static final MethodHandle DnsHostnameToComputerNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DnsHostnameToComputerNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DnsHostnameToComputerNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DnsHostnameToComputerNameW$MH() { return DnsHostnameToComputerNameW$MH_; }

    static final FunctionDescriptor GetUserNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetUserNameA$FUNC() { return GetUserNameA$FUNC_; }

    static final MethodHandle GetUserNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUserNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetUserNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUserNameA$MH() { return GetUserNameA$MH_; }

    static final FunctionDescriptor GetUserNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetUserNameW$FUNC() { return GetUserNameW$FUNC_; }

    static final MethodHandle GetUserNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUserNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetUserNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUserNameW$MH() { return GetUserNameW$MH_; }

    static final FunctionDescriptor LogonUserA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LogonUserA$FUNC() { return LogonUserA$FUNC_; }

    static final MethodHandle LogonUserA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LogonUserA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        LogonUserA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LogonUserA$MH() { return LogonUserA$MH_; }

    static final FunctionDescriptor LogonUserW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LogonUserW$FUNC() { return LogonUserW$FUNC_; }

    static final MethodHandle LogonUserW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LogonUserW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        LogonUserW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LogonUserW$MH() { return LogonUserW$MH_; }

    static final FunctionDescriptor LogonUserExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LogonUserExA$FUNC() { return LogonUserExA$FUNC_; }

    static final MethodHandle LogonUserExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LogonUserExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LogonUserExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LogonUserExA$MH() { return LogonUserExA$MH_; }

    static final FunctionDescriptor LogonUserExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LogonUserExW$FUNC() { return LogonUserExW$FUNC_; }

    static final MethodHandle LogonUserExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LogonUserExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LogonUserExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LogonUserExW$MH() { return LogonUserExW$MH_; }

    static final FunctionDescriptor CreateProcessWithLogonW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateProcessWithLogonW$FUNC() { return CreateProcessWithLogonW$FUNC_; }

    static final MethodHandle CreateProcessWithLogonW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateProcessWithLogonW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateProcessWithLogonW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateProcessWithLogonW$MH() { return CreateProcessWithLogonW$MH_; }

    static final FunctionDescriptor CreateProcessWithTokenW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateProcessWithTokenW$FUNC() { return CreateProcessWithTokenW$FUNC_; }

    static final MethodHandle CreateProcessWithTokenW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateProcessWithTokenW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateProcessWithTokenW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateProcessWithTokenW$MH() { return CreateProcessWithTokenW$MH_; }

    static final FunctionDescriptor IsTokenUntrusted$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsTokenUntrusted$FUNC() { return IsTokenUntrusted$FUNC_; }

    static final MethodHandle IsTokenUntrusted$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsTokenUntrusted",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsTokenUntrusted$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsTokenUntrusted$MH() { return IsTokenUntrusted$MH_; }

    static final FunctionDescriptor RegisterWaitForSingleObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterWaitForSingleObject$FUNC() { return RegisterWaitForSingleObject$FUNC_; }

    static final MethodHandle RegisterWaitForSingleObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterWaitForSingleObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        RegisterWaitForSingleObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterWaitForSingleObject$MH() { return RegisterWaitForSingleObject$MH_; }

    static final FunctionDescriptor RegisterWaitForSingleObject$Callback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterWaitForSingleObject$Callback$FUNC() { return RegisterWaitForSingleObject$Callback$FUNC_; }

    static final FunctionDescriptor UnregisterWait$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnregisterWait$FUNC() { return UnregisterWait$FUNC_; }

    static final MethodHandle UnregisterWait$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterWait",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnregisterWait$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnregisterWait$MH() { return UnregisterWait$MH_; }

    static final FunctionDescriptor BindIoCompletionCallback$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor BindIoCompletionCallback$FUNC() { return BindIoCompletionCallback$FUNC_; }

    static final MethodHandle BindIoCompletionCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BindIoCompletionCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        BindIoCompletionCallback$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BindIoCompletionCallback$MH() { return BindIoCompletionCallback$MH_; }

    static final FunctionDescriptor BindIoCompletionCallback$Function$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor BindIoCompletionCallback$Function$FUNC() { return BindIoCompletionCallback$Function$FUNC_; }

    static final FunctionDescriptor SetTimerQueueTimer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetTimerQueueTimer$FUNC() { return SetTimerQueueTimer$FUNC_; }

    static final MethodHandle SetTimerQueueTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetTimerQueueTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)Ljdk/incubator/foreign/MemoryAddress;",
        SetTimerQueueTimer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetTimerQueueTimer$MH() { return SetTimerQueueTimer$MH_; }

    static final FunctionDescriptor SetTimerQueueTimer$Callback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetTimerQueueTimer$Callback$FUNC() { return SetTimerQueueTimer$Callback$FUNC_; }

    static final FunctionDescriptor CancelTimerQueueTimer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CancelTimerQueueTimer$FUNC() { return CancelTimerQueueTimer$FUNC_; }

    static final MethodHandle CancelTimerQueueTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CancelTimerQueueTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CancelTimerQueueTimer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CancelTimerQueueTimer$MH() { return CancelTimerQueueTimer$MH_; }

    static final FunctionDescriptor DeleteTimerQueue$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteTimerQueue$FUNC() { return DeleteTimerQueue$FUNC_; }

    static final MethodHandle DeleteTimerQueue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteTimerQueue",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteTimerQueue$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteTimerQueue$MH() { return DeleteTimerQueue$MH_; }

    static final FunctionDescriptor InitializeThreadpoolEnvironment$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeThreadpoolEnvironment$FUNC() { return InitializeThreadpoolEnvironment$FUNC_; }

    static final MethodHandle InitializeThreadpoolEnvironment$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeThreadpoolEnvironment",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        InitializeThreadpoolEnvironment$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeThreadpoolEnvironment$MH() { return InitializeThreadpoolEnvironment$MH_; }

    static final FunctionDescriptor SetThreadpoolCallbackPool$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolCallbackPool$FUNC() { return SetThreadpoolCallbackPool$FUNC_; }

    static final MethodHandle SetThreadpoolCallbackPool$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolCallbackPool",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        SetThreadpoolCallbackPool$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolCallbackPool$MH() { return SetThreadpoolCallbackPool$MH_; }

    static final FunctionDescriptor SetThreadpoolCallbackCleanupGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolCallbackCleanupGroup$FUNC() { return SetThreadpoolCallbackCleanupGroup$FUNC_; }

    static final MethodHandle SetThreadpoolCallbackCleanupGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolCallbackCleanupGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        SetThreadpoolCallbackCleanupGroup$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolCallbackCleanupGroup$MH() { return SetThreadpoolCallbackCleanupGroup$MH_; }

    static final FunctionDescriptor SetThreadpoolCallbackCleanupGroup$pfng$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolCallbackCleanupGroup$pfng$FUNC() { return SetThreadpoolCallbackCleanupGroup$pfng$FUNC_; }

    static final FunctionDescriptor SetThreadpoolCallbackRunsLong$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolCallbackRunsLong$FUNC() { return SetThreadpoolCallbackRunsLong$FUNC_; }

    static final MethodHandle SetThreadpoolCallbackRunsLong$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolCallbackRunsLong",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        SetThreadpoolCallbackRunsLong$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolCallbackRunsLong$MH() { return SetThreadpoolCallbackRunsLong$MH_; }

    static final FunctionDescriptor SetThreadpoolCallbackLibrary$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolCallbackLibrary$FUNC() { return SetThreadpoolCallbackLibrary$FUNC_; }

    static final MethodHandle SetThreadpoolCallbackLibrary$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolCallbackLibrary",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        SetThreadpoolCallbackLibrary$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolCallbackLibrary$MH() { return SetThreadpoolCallbackLibrary$MH_; }

    static final FunctionDescriptor SetThreadpoolCallbackPriority$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolCallbackPriority$FUNC() { return SetThreadpoolCallbackPriority$FUNC_; }

    static final MethodHandle SetThreadpoolCallbackPriority$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolCallbackPriority",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        SetThreadpoolCallbackPriority$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolCallbackPriority$MH() { return SetThreadpoolCallbackPriority$MH_; }

    static final FunctionDescriptor DestroyThreadpoolEnvironment$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DestroyThreadpoolEnvironment$FUNC() { return DestroyThreadpoolEnvironment$FUNC_; }

    static final MethodHandle DestroyThreadpoolEnvironment$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DestroyThreadpoolEnvironment",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        DestroyThreadpoolEnvironment$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DestroyThreadpoolEnvironment$MH() { return DestroyThreadpoolEnvironment$MH_; }

    static final FunctionDescriptor SetThreadpoolCallbackPersistent$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadpoolCallbackPersistent$FUNC() { return SetThreadpoolCallbackPersistent$FUNC_; }

    static final MethodHandle SetThreadpoolCallbackPersistent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadpoolCallbackPersistent",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        SetThreadpoolCallbackPersistent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadpoolCallbackPersistent$MH() { return SetThreadpoolCallbackPersistent$MH_; }

    static final FunctionDescriptor CreatePrivateNamespaceA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePrivateNamespaceA$FUNC() { return CreatePrivateNamespaceA$FUNC_; }

    static final MethodHandle CreatePrivateNamespaceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePrivateNamespaceA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreatePrivateNamespaceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePrivateNamespaceA$MH() { return CreatePrivateNamespaceA$MH_; }

    static final FunctionDescriptor OpenPrivateNamespaceA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenPrivateNamespaceA$FUNC() { return OpenPrivateNamespaceA$FUNC_; }

    static final MethodHandle OpenPrivateNamespaceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenPrivateNamespaceA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenPrivateNamespaceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenPrivateNamespaceA$MH() { return OpenPrivateNamespaceA$MH_; }

    static final FunctionDescriptor CreateBoundaryDescriptorA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateBoundaryDescriptorA$FUNC() { return CreateBoundaryDescriptorA$FUNC_; }

    static final MethodHandle CreateBoundaryDescriptorA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateBoundaryDescriptorA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateBoundaryDescriptorA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateBoundaryDescriptorA$MH() { return CreateBoundaryDescriptorA$MH_; }

    static final FunctionDescriptor AddIntegrityLabelToBoundaryDescriptor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddIntegrityLabelToBoundaryDescriptor$FUNC() { return AddIntegrityLabelToBoundaryDescriptor$FUNC_; }

    static final MethodHandle AddIntegrityLabelToBoundaryDescriptor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddIntegrityLabelToBoundaryDescriptor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AddIntegrityLabelToBoundaryDescriptor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddIntegrityLabelToBoundaryDescriptor$MH() { return AddIntegrityLabelToBoundaryDescriptor$MH_; }

    static final MemoryLayout tagHW_PROFILE_INFOA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwDockInfo"),
        MemoryLayout.ofSequence(39, C_BOOL).withName("szHwProfileGuid"),
        MemoryLayout.ofSequence(80, C_BOOL).withName("szHwProfileName"),
        MemoryLayout.ofPaddingBits(8)
    ).withName("tagHW_PROFILE_INFOA");
    public static jdk.incubator.foreign.MemoryLayout tagHW_PROFILE_INFOA$struct$LAYOUT() { return tagHW_PROFILE_INFOA$struct$LAYOUT_; }

    static final MemoryLayout tagHW_PROFILE_INFOA$dwDockInfo$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHW_PROFILE_INFOA$dwDockInfo$LAYOUT() { return tagHW_PROFILE_INFOA$dwDockInfo$LAYOUT_; }

    static final VarHandle tagHW_PROFILE_INFOA$dwDockInfo$VH_ = tagHW_PROFILE_INFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDockInfo"));
    public static java.lang.invoke.VarHandle tagHW_PROFILE_INFOA$dwDockInfo$VH() { return tagHW_PROFILE_INFOA$dwDockInfo$VH_; }

    static final MemoryLayout tagHW_PROFILE_INFOW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwDockInfo"),
        MemoryLayout.ofSequence(39, C_SHORT).withName("szHwProfileGuid"),
        MemoryLayout.ofSequence(80, C_SHORT).withName("szHwProfileName"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("tagHW_PROFILE_INFOW");
    public static jdk.incubator.foreign.MemoryLayout tagHW_PROFILE_INFOW$struct$LAYOUT() { return tagHW_PROFILE_INFOW$struct$LAYOUT_; }

    static final MemoryLayout tagHW_PROFILE_INFOW$dwDockInfo$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHW_PROFILE_INFOW$dwDockInfo$LAYOUT() { return tagHW_PROFILE_INFOW$dwDockInfo$LAYOUT_; }

    static final VarHandle tagHW_PROFILE_INFOW$dwDockInfo$VH_ = tagHW_PROFILE_INFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDockInfo"));
    public static java.lang.invoke.VarHandle tagHW_PROFILE_INFOW$dwDockInfo$VH() { return tagHW_PROFILE_INFOW$dwDockInfo$VH_; }

    static final FunctionDescriptor GetCurrentHwProfileA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentHwProfileA$FUNC() { return GetCurrentHwProfileA$FUNC_; }

    static final MethodHandle GetCurrentHwProfileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentHwProfileA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCurrentHwProfileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentHwProfileA$MH() { return GetCurrentHwProfileA$MH_; }

    static final FunctionDescriptor GetCurrentHwProfileW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentHwProfileW$FUNC() { return GetCurrentHwProfileW$FUNC_; }

    static final MethodHandle GetCurrentHwProfileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentHwProfileW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCurrentHwProfileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentHwProfileW$MH() { return GetCurrentHwProfileW$MH_; }

    static final FunctionDescriptor VerifyVersionInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor VerifyVersionInfoA$FUNC() { return VerifyVersionInfoA$FUNC_; }

    static final MethodHandle VerifyVersionInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerifyVersionInfoA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        VerifyVersionInfoA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VerifyVersionInfoA$MH() { return VerifyVersionInfoA$MH_; }

    static final FunctionDescriptor VerifyVersionInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor VerifyVersionInfoW$FUNC() { return VerifyVersionInfoW$FUNC_; }

    static final MethodHandle VerifyVersionInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerifyVersionInfoW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        VerifyVersionInfoW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VerifyVersionInfoW$MH() { return VerifyVersionInfoW$MH_; }

    static final FunctionDescriptor HRESULT_FROM_WIN32$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor HRESULT_FROM_WIN32$FUNC() { return HRESULT_FROM_WIN32$FUNC_; }

    static final MethodHandle HRESULT_FROM_WIN32$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HRESULT_FROM_WIN32",
        "(I)I",
        HRESULT_FROM_WIN32$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HRESULT_FROM_WIN32$MH() { return HRESULT_FROM_WIN32$MH_; }

    static final MemoryLayout _TIME_ZONE_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Bias"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("StandardName"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("wYear"),
            C_SHORT.withName("wMonth"),
            C_SHORT.withName("wDayOfWeek"),
            C_SHORT.withName("wDay"),
            C_SHORT.withName("wHour"),
            C_SHORT.withName("wMinute"),
            C_SHORT.withName("wSecond"),
            C_SHORT.withName("wMilliseconds")
        ).withName("StandardDate"),
        C_INT.withName("StandardBias"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("DaylightName"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("wYear"),
            C_SHORT.withName("wMonth"),
            C_SHORT.withName("wDayOfWeek"),
            C_SHORT.withName("wDay"),
            C_SHORT.withName("wHour"),
            C_SHORT.withName("wMinute"),
            C_SHORT.withName("wSecond"),
            C_SHORT.withName("wMilliseconds")
        ).withName("DaylightDate"),
        C_INT.withName("DaylightBias")
    ).withName("_TIME_ZONE_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _TIME_ZONE_INFORMATION$struct$LAYOUT() { return _TIME_ZONE_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TIME_ZONE_INFORMATION$Bias$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TIME_ZONE_INFORMATION$Bias$LAYOUT() { return _TIME_ZONE_INFORMATION$Bias$LAYOUT_; }

    static final VarHandle _TIME_ZONE_INFORMATION$Bias$VH_ = _TIME_ZONE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Bias"));
    public static java.lang.invoke.VarHandle _TIME_ZONE_INFORMATION$Bias$VH() { return _TIME_ZONE_INFORMATION$Bias$VH_; }

    static final MemoryLayout _TIME_ZONE_INFORMATION$StandardBias$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TIME_ZONE_INFORMATION$StandardBias$LAYOUT() { return _TIME_ZONE_INFORMATION$StandardBias$LAYOUT_; }

    static final VarHandle _TIME_ZONE_INFORMATION$StandardBias$VH_ = _TIME_ZONE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StandardBias"));
    public static java.lang.invoke.VarHandle _TIME_ZONE_INFORMATION$StandardBias$VH() { return _TIME_ZONE_INFORMATION$StandardBias$VH_; }

    static final MemoryLayout _TIME_ZONE_INFORMATION$DaylightBias$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TIME_ZONE_INFORMATION$DaylightBias$LAYOUT() { return _TIME_ZONE_INFORMATION$DaylightBias$LAYOUT_; }

    static final VarHandle _TIME_ZONE_INFORMATION$DaylightBias$VH_ = _TIME_ZONE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DaylightBias"));
    public static java.lang.invoke.VarHandle _TIME_ZONE_INFORMATION$DaylightBias$VH() { return _TIME_ZONE_INFORMATION$DaylightBias$VH_; }

    static final MemoryLayout _TIME_DYNAMIC_ZONE_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Bias"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("StandardName"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("wYear"),
            C_SHORT.withName("wMonth"),
            C_SHORT.withName("wDayOfWeek"),
            C_SHORT.withName("wDay"),
            C_SHORT.withName("wHour"),
            C_SHORT.withName("wMinute"),
            C_SHORT.withName("wSecond"),
            C_SHORT.withName("wMilliseconds")
        ).withName("StandardDate"),
        C_INT.withName("StandardBias"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("DaylightName"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("wYear"),
            C_SHORT.withName("wMonth"),
            C_SHORT.withName("wDayOfWeek"),
            C_SHORT.withName("wDay"),
            C_SHORT.withName("wHour"),
            C_SHORT.withName("wMinute"),
            C_SHORT.withName("wSecond"),
            C_SHORT.withName("wMilliseconds")
        ).withName("DaylightDate"),
        C_INT.withName("DaylightBias"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("TimeZoneKeyName"),
        C_BOOL.withName("DynamicDaylightTimeDisabled"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_TIME_DYNAMIC_ZONE_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _TIME_DYNAMIC_ZONE_INFORMATION$struct$LAYOUT() { return _TIME_DYNAMIC_ZONE_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TIME_DYNAMIC_ZONE_INFORMATION$Bias$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TIME_DYNAMIC_ZONE_INFORMATION$Bias$LAYOUT() { return _TIME_DYNAMIC_ZONE_INFORMATION$Bias$LAYOUT_; }

    static final VarHandle _TIME_DYNAMIC_ZONE_INFORMATION$Bias$VH_ = _TIME_DYNAMIC_ZONE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Bias"));
    public static java.lang.invoke.VarHandle _TIME_DYNAMIC_ZONE_INFORMATION$Bias$VH() { return _TIME_DYNAMIC_ZONE_INFORMATION$Bias$VH_; }

    static final MemoryLayout _TIME_DYNAMIC_ZONE_INFORMATION$StandardBias$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TIME_DYNAMIC_ZONE_INFORMATION$StandardBias$LAYOUT() { return _TIME_DYNAMIC_ZONE_INFORMATION$StandardBias$LAYOUT_; }

    static final VarHandle _TIME_DYNAMIC_ZONE_INFORMATION$StandardBias$VH_ = _TIME_DYNAMIC_ZONE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StandardBias"));
    public static java.lang.invoke.VarHandle _TIME_DYNAMIC_ZONE_INFORMATION$StandardBias$VH() { return _TIME_DYNAMIC_ZONE_INFORMATION$StandardBias$VH_; }

    static final MemoryLayout _TIME_DYNAMIC_ZONE_INFORMATION$DaylightBias$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TIME_DYNAMIC_ZONE_INFORMATION$DaylightBias$LAYOUT() { return _TIME_DYNAMIC_ZONE_INFORMATION$DaylightBias$LAYOUT_; }

    static final VarHandle _TIME_DYNAMIC_ZONE_INFORMATION$DaylightBias$VH_ = _TIME_DYNAMIC_ZONE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DaylightBias"));
    public static java.lang.invoke.VarHandle _TIME_DYNAMIC_ZONE_INFORMATION$DaylightBias$VH() { return _TIME_DYNAMIC_ZONE_INFORMATION$DaylightBias$VH_; }

    static final MemoryLayout _TIME_DYNAMIC_ZONE_INFORMATION$DynamicDaylightTimeDisabled$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _TIME_DYNAMIC_ZONE_INFORMATION$DynamicDaylightTimeDisabled$LAYOUT() { return _TIME_DYNAMIC_ZONE_INFORMATION$DynamicDaylightTimeDisabled$LAYOUT_; }

    static final VarHandle _TIME_DYNAMIC_ZONE_INFORMATION$DynamicDaylightTimeDisabled$VH_ = _TIME_DYNAMIC_ZONE_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DynamicDaylightTimeDisabled"));
    public static java.lang.invoke.VarHandle _TIME_DYNAMIC_ZONE_INFORMATION$DynamicDaylightTimeDisabled$VH() { return _TIME_DYNAMIC_ZONE_INFORMATION$DynamicDaylightTimeDisabled$VH_; }

    static final FunctionDescriptor SystemTimeToTzSpecificLocalTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SystemTimeToTzSpecificLocalTime$FUNC() { return SystemTimeToTzSpecificLocalTime$FUNC_; }

    static final MethodHandle SystemTimeToTzSpecificLocalTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SystemTimeToTzSpecificLocalTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SystemTimeToTzSpecificLocalTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SystemTimeToTzSpecificLocalTime$MH() { return SystemTimeToTzSpecificLocalTime$MH_; }

    static final FunctionDescriptor TzSpecificLocalTimeToSystemTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TzSpecificLocalTimeToSystemTime$FUNC() { return TzSpecificLocalTimeToSystemTime$FUNC_; }

    static final MethodHandle TzSpecificLocalTimeToSystemTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TzSpecificLocalTimeToSystemTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        TzSpecificLocalTimeToSystemTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TzSpecificLocalTimeToSystemTime$MH() { return TzSpecificLocalTimeToSystemTime$MH_; }

    static final FunctionDescriptor FileTimeToSystemTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FileTimeToSystemTime$FUNC() { return FileTimeToSystemTime$FUNC_; }

    static final MethodHandle FileTimeToSystemTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FileTimeToSystemTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FileTimeToSystemTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FileTimeToSystemTime$MH() { return FileTimeToSystemTime$MH_; }

    static final FunctionDescriptor SystemTimeToFileTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SystemTimeToFileTime$FUNC() { return SystemTimeToFileTime$FUNC_; }

    static final MethodHandle SystemTimeToFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SystemTimeToFileTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SystemTimeToFileTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SystemTimeToFileTime$MH() { return SystemTimeToFileTime$MH_; }

    static final FunctionDescriptor GetTimeZoneInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTimeZoneInformation$FUNC() { return GetTimeZoneInformation$FUNC_; }

    static final MethodHandle GetTimeZoneInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTimeZoneInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTimeZoneInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTimeZoneInformation$MH() { return GetTimeZoneInformation$MH_; }

    static final FunctionDescriptor SetTimeZoneInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetTimeZoneInformation$FUNC() { return SetTimeZoneInformation$FUNC_; }

    static final MethodHandle SetTimeZoneInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetTimeZoneInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetTimeZoneInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetTimeZoneInformation$MH() { return SetTimeZoneInformation$MH_; }

    static final FunctionDescriptor SetDynamicTimeZoneInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDynamicTimeZoneInformation$FUNC() { return SetDynamicTimeZoneInformation$FUNC_; }

    static final MethodHandle SetDynamicTimeZoneInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDynamicTimeZoneInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetDynamicTimeZoneInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDynamicTimeZoneInformation$MH() { return SetDynamicTimeZoneInformation$MH_; }

    static final FunctionDescriptor GetDynamicTimeZoneInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDynamicTimeZoneInformation$FUNC() { return GetDynamicTimeZoneInformation$FUNC_; }

    static final MethodHandle GetDynamicTimeZoneInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDynamicTimeZoneInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDynamicTimeZoneInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDynamicTimeZoneInformation$MH() { return GetDynamicTimeZoneInformation$MH_; }

    static final FunctionDescriptor GetTimeZoneInformationForYear$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTimeZoneInformationForYear$FUNC() { return GetTimeZoneInformationForYear$FUNC_; }

    static final MethodHandle GetTimeZoneInformationForYear$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTimeZoneInformationForYear",
        "(SLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTimeZoneInformationForYear$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTimeZoneInformationForYear$MH() { return GetTimeZoneInformationForYear$MH_; }

    static final FunctionDescriptor EnumDynamicTimeZoneInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumDynamicTimeZoneInformation$FUNC() { return EnumDynamicTimeZoneInformation$FUNC_; }

    static final MethodHandle EnumDynamicTimeZoneInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDynamicTimeZoneInformation",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        EnumDynamicTimeZoneInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumDynamicTimeZoneInformation$MH() { return EnumDynamicTimeZoneInformation$MH_; }

    static final FunctionDescriptor GetDynamicTimeZoneInformationEffectiveYears$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDynamicTimeZoneInformationEffectiveYears$FUNC() { return GetDynamicTimeZoneInformationEffectiveYears$FUNC_; }

    static final MethodHandle GetDynamicTimeZoneInformationEffectiveYears$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDynamicTimeZoneInformationEffectiveYears",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDynamicTimeZoneInformationEffectiveYears$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDynamicTimeZoneInformationEffectiveYears$MH() { return GetDynamicTimeZoneInformationEffectiveYears$MH_; }

    static final FunctionDescriptor SystemTimeToTzSpecificLocalTimeEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SystemTimeToTzSpecificLocalTimeEx$FUNC() { return SystemTimeToTzSpecificLocalTimeEx$FUNC_; }

    static final MethodHandle SystemTimeToTzSpecificLocalTimeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SystemTimeToTzSpecificLocalTimeEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SystemTimeToTzSpecificLocalTimeEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SystemTimeToTzSpecificLocalTimeEx$MH() { return SystemTimeToTzSpecificLocalTimeEx$MH_; }

    static final FunctionDescriptor TzSpecificLocalTimeToSystemTimeEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TzSpecificLocalTimeToSystemTimeEx$FUNC() { return TzSpecificLocalTimeToSystemTimeEx$FUNC_; }

    static final MethodHandle TzSpecificLocalTimeToSystemTimeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TzSpecificLocalTimeToSystemTimeEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        TzSpecificLocalTimeToSystemTimeEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TzSpecificLocalTimeToSystemTimeEx$MH() { return TzSpecificLocalTimeToSystemTimeEx$MH_; }

    static final FunctionDescriptor LocalFileTimeToLocalSystemTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalFileTimeToLocalSystemTime$FUNC() { return LocalFileTimeToLocalSystemTime$FUNC_; }

    static final MethodHandle LocalFileTimeToLocalSystemTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalFileTimeToLocalSystemTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LocalFileTimeToLocalSystemTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalFileTimeToLocalSystemTime$MH() { return LocalFileTimeToLocalSystemTime$MH_; }

    static final FunctionDescriptor LocalSystemTimeToLocalFileTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalSystemTimeToLocalFileTime$FUNC() { return LocalSystemTimeToLocalFileTime$FUNC_; }

    static final MethodHandle LocalSystemTimeToLocalFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalSystemTimeToLocalFileTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LocalSystemTimeToLocalFileTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalSystemTimeToLocalFileTime$MH() { return LocalSystemTimeToLocalFileTime$MH_; }

    static final FunctionDescriptor SetSystemPowerState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSystemPowerState$FUNC() { return SetSystemPowerState$FUNC_; }

    static final MethodHandle SetSystemPowerState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSystemPowerState",
        "(II)I",
        SetSystemPowerState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSystemPowerState$MH() { return SetSystemPowerState$MH_; }

    static final MemoryLayout _SYSTEM_POWER_STATUS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("ACLineStatus"),
        C_BOOL.withName("BatteryFlag"),
        C_BOOL.withName("BatteryLifePercent"),
        C_BOOL.withName("SystemStatusFlag"),
        C_INT.withName("BatteryLifeTime"),
        C_INT.withName("BatteryFullLifeTime")
    ).withName("_SYSTEM_POWER_STATUS");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_STATUS$struct$LAYOUT() { return _SYSTEM_POWER_STATUS$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_POWER_STATUS$ACLineStatus$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_STATUS$ACLineStatus$LAYOUT() { return _SYSTEM_POWER_STATUS$ACLineStatus$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_STATUS$ACLineStatus$VH_ = _SYSTEM_POWER_STATUS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ACLineStatus"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_STATUS$ACLineStatus$VH() { return _SYSTEM_POWER_STATUS$ACLineStatus$VH_; }

    static final MemoryLayout _SYSTEM_POWER_STATUS$BatteryFlag$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_STATUS$BatteryFlag$LAYOUT() { return _SYSTEM_POWER_STATUS$BatteryFlag$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_STATUS$BatteryFlag$VH_ = _SYSTEM_POWER_STATUS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BatteryFlag"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_STATUS$BatteryFlag$VH() { return _SYSTEM_POWER_STATUS$BatteryFlag$VH_; }

    static final MemoryLayout _SYSTEM_POWER_STATUS$BatteryLifePercent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_STATUS$BatteryLifePercent$LAYOUT() { return _SYSTEM_POWER_STATUS$BatteryLifePercent$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_STATUS$BatteryLifePercent$VH_ = _SYSTEM_POWER_STATUS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BatteryLifePercent"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_STATUS$BatteryLifePercent$VH() { return _SYSTEM_POWER_STATUS$BatteryLifePercent$VH_; }

    static final MemoryLayout _SYSTEM_POWER_STATUS$SystemStatusFlag$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_STATUS$SystemStatusFlag$LAYOUT() { return _SYSTEM_POWER_STATUS$SystemStatusFlag$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_STATUS$SystemStatusFlag$VH_ = _SYSTEM_POWER_STATUS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemStatusFlag"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_STATUS$SystemStatusFlag$VH() { return _SYSTEM_POWER_STATUS$SystemStatusFlag$VH_; }

    static final MemoryLayout _SYSTEM_POWER_STATUS$BatteryLifeTime$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_STATUS$BatteryLifeTime$LAYOUT() { return _SYSTEM_POWER_STATUS$BatteryLifeTime$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_STATUS$BatteryLifeTime$VH_ = _SYSTEM_POWER_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BatteryLifeTime"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_STATUS$BatteryLifeTime$VH() { return _SYSTEM_POWER_STATUS$BatteryLifeTime$VH_; }

    static final MemoryLayout _SYSTEM_POWER_STATUS$BatteryFullLifeTime$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_STATUS$BatteryFullLifeTime$LAYOUT() { return _SYSTEM_POWER_STATUS$BatteryFullLifeTime$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_STATUS$BatteryFullLifeTime$VH_ = _SYSTEM_POWER_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BatteryFullLifeTime"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_STATUS$BatteryFullLifeTime$VH() { return _SYSTEM_POWER_STATUS$BatteryFullLifeTime$VH_; }

    static final FunctionDescriptor GetSystemPowerStatus$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemPowerStatus$FUNC() { return GetSystemPowerStatus$FUNC_; }

    static final MethodHandle GetSystemPowerStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemPowerStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSystemPowerStatus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemPowerStatus$MH() { return GetSystemPowerStatus$MH_; }

    static final FunctionDescriptor MapUserPhysicalPagesScatter$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapUserPhysicalPagesScatter$FUNC() { return MapUserPhysicalPagesScatter$FUNC_; }

    static final MethodHandle MapUserPhysicalPagesScatter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapUserPhysicalPagesScatter",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        MapUserPhysicalPagesScatter$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapUserPhysicalPagesScatter$MH() { return MapUserPhysicalPagesScatter$MH_; }

    static final FunctionDescriptor CreateJobObjectA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateJobObjectA$FUNC() { return CreateJobObjectA$FUNC_; }

    static final MethodHandle CreateJobObjectA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateJobObjectA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateJobObjectA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateJobObjectA$MH() { return CreateJobObjectA$MH_; }

    static final FunctionDescriptor OpenJobObjectA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenJobObjectA$FUNC() { return OpenJobObjectA$FUNC_; }

    static final MethodHandle OpenJobObjectA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenJobObjectA",
        "(IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenJobObjectA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenJobObjectA$MH() { return OpenJobObjectA$MH_; }

    static final FunctionDescriptor CreateJobSet$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateJobSet$FUNC() { return CreateJobSet$FUNC_; }

    static final MethodHandle CreateJobSet$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateJobSet",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        CreateJobSet$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateJobSet$MH() { return CreateJobSet$MH_; }

    static final FunctionDescriptor FindFirstVolumeA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstVolumeA$FUNC() { return FindFirstVolumeA$FUNC_; }

    static final MethodHandle FindFirstVolumeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstVolumeA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstVolumeA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstVolumeA$MH() { return FindFirstVolumeA$MH_; }

    static final FunctionDescriptor FindNextVolumeA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindNextVolumeA$FUNC() { return FindNextVolumeA$FUNC_; }

    static final MethodHandle FindNextVolumeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindNextVolumeA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        FindNextVolumeA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindNextVolumeA$MH() { return FindNextVolumeA$MH_; }

    static final FunctionDescriptor FindFirstVolumeMountPointA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstVolumeMountPointA$FUNC() { return FindFirstVolumeMountPointA$FUNC_; }

    static final MethodHandle FindFirstVolumeMountPointA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstVolumeMountPointA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstVolumeMountPointA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstVolumeMountPointA$MH() { return FindFirstVolumeMountPointA$MH_; }

    static final FunctionDescriptor FindFirstVolumeMountPointW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstVolumeMountPointW$FUNC() { return FindFirstVolumeMountPointW$FUNC_; }

    static final MethodHandle FindFirstVolumeMountPointW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstVolumeMountPointW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FindFirstVolumeMountPointW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstVolumeMountPointW$MH() { return FindFirstVolumeMountPointW$MH_; }

    static final FunctionDescriptor FindNextVolumeMountPointA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindNextVolumeMountPointA$FUNC() { return FindNextVolumeMountPointA$FUNC_; }

    static final MethodHandle FindNextVolumeMountPointA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindNextVolumeMountPointA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        FindNextVolumeMountPointA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindNextVolumeMountPointA$MH() { return FindNextVolumeMountPointA$MH_; }

    static final FunctionDescriptor FindNextVolumeMountPointW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindNextVolumeMountPointW$FUNC() { return FindNextVolumeMountPointW$FUNC_; }

    static final MethodHandle FindNextVolumeMountPointW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindNextVolumeMountPointW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        FindNextVolumeMountPointW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindNextVolumeMountPointW$MH() { return FindNextVolumeMountPointW$MH_; }

    static final FunctionDescriptor FindVolumeMountPointClose$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindVolumeMountPointClose$FUNC() { return FindVolumeMountPointClose$FUNC_; }

    static final MethodHandle FindVolumeMountPointClose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindVolumeMountPointClose",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FindVolumeMountPointClose$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindVolumeMountPointClose$MH() { return FindVolumeMountPointClose$MH_; }

    static final FunctionDescriptor SetVolumeMountPointA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetVolumeMountPointA$FUNC() { return SetVolumeMountPointA$FUNC_; }

    static final MethodHandle SetVolumeMountPointA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetVolumeMountPointA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetVolumeMountPointA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetVolumeMountPointA$MH() { return SetVolumeMountPointA$MH_; }

    static final FunctionDescriptor SetVolumeMountPointW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetVolumeMountPointW$FUNC() { return SetVolumeMountPointW$FUNC_; }

    static final MethodHandle SetVolumeMountPointW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetVolumeMountPointW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetVolumeMountPointW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetVolumeMountPointW$MH() { return SetVolumeMountPointW$MH_; }

    static final FunctionDescriptor DeleteVolumeMountPointA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteVolumeMountPointA$FUNC() { return DeleteVolumeMountPointA$FUNC_; }

    static final MethodHandle DeleteVolumeMountPointA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteVolumeMountPointA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteVolumeMountPointA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteVolumeMountPointA$MH() { return DeleteVolumeMountPointA$MH_; }

    static final FunctionDescriptor GetVolumeNameForVolumeMountPointA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetVolumeNameForVolumeMountPointA$FUNC() { return GetVolumeNameForVolumeMountPointA$FUNC_; }

    static final MethodHandle GetVolumeNameForVolumeMountPointA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVolumeNameForVolumeMountPointA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetVolumeNameForVolumeMountPointA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVolumeNameForVolumeMountPointA$MH() { return GetVolumeNameForVolumeMountPointA$MH_; }

    static final FunctionDescriptor GetVolumePathNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetVolumePathNameA$FUNC() { return GetVolumePathNameA$FUNC_; }

    static final MethodHandle GetVolumePathNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVolumePathNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetVolumePathNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVolumePathNameA$MH() { return GetVolumePathNameA$MH_; }

    static final FunctionDescriptor GetVolumePathNamesForVolumeNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetVolumePathNamesForVolumeNameA$FUNC() { return GetVolumePathNamesForVolumeNameA$FUNC_; }

    static final MethodHandle GetVolumePathNamesForVolumeNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetVolumePathNamesForVolumeNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetVolumePathNamesForVolumeNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetVolumePathNamesForVolumeNameA$MH() { return GetVolumePathNamesForVolumeNameA$MH_; }

    static final MemoryLayout tagACTCTXA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("dwFlags"),
        C_POINTER.withName("lpSource"),
        C_SHORT.withName("wProcessorArchitecture"),
        C_SHORT.withName("wLangId"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpAssemblyDirectory"),
        C_POINTER.withName("lpResourceName"),
        C_POINTER.withName("lpApplicationName"),
        C_POINTER.withName("hModule")
    ).withName("tagACTCTXA");
    public static jdk.incubator.foreign.MemoryLayout tagACTCTXA$struct$LAYOUT() { return tagACTCTXA$struct$LAYOUT_; }

}

