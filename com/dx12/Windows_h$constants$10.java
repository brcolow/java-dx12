// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$10 extends Windows_h$constants$9 {
    Windows_h$constants$10() {}
    static final MemoryLayout _SID_AND_ATTRIBUTES$Attributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES$Attributes$LAYOUT() { return _SID_AND_ATTRIBUTES$Attributes$LAYOUT_; }

    static final VarHandle _SID_AND_ATTRIBUTES$Attributes$VH_ = _SID_AND_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Attributes"));
    public static java.lang.invoke.VarHandle _SID_AND_ATTRIBUTES$Attributes$VH() { return _SID_AND_ATTRIBUTES$Attributes$VH_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("SidCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("SidAttr"),
        MemoryLayout.ofSequence(32, C_LONGLONG).withName("Hash")
    ).withName("_SID_AND_ATTRIBUTES_HASH");
    public static jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT() { return _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidCount$LAYOUT() { return _SID_AND_ATTRIBUTES_HASH$SidCount$LAYOUT_; }

    static final VarHandle _SID_AND_ATTRIBUTES_HASH$SidCount$VH_ = _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidCount"));
    public static java.lang.invoke.VarHandle _SID_AND_ATTRIBUTES_HASH$SidCount$VH() { return _SID_AND_ATTRIBUTES_HASH$SidCount$VH_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidAttr$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidAttr$LAYOUT() { return _SID_AND_ATTRIBUTES_HASH$SidAttr$LAYOUT_; }

    static final VarHandle _SID_AND_ATTRIBUTES_HASH$SidAttr$VH_ = MemoryHandles.asAddressVarHandle(_SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SidAttr")));
    public static java.lang.invoke.VarHandle _SID_AND_ATTRIBUTES_HASH$SidAttr$VH() { return _SID_AND_ATTRIBUTES_HASH$SidAttr$VH_; }

    public static int WinNullSid() { return (int)0L; }

    public static int WinWorldSid() { return (int)1L; }

    public static int WinLocalSid() { return (int)2L; }

    public static int WinCreatorOwnerSid() { return (int)3L; }

    public static int WinCreatorGroupSid() { return (int)4L; }

    public static int WinCreatorOwnerServerSid() { return (int)5L; }

    public static int WinCreatorGroupServerSid() { return (int)6L; }

    public static int WinNtAuthoritySid() { return (int)7L; }

    public static int WinDialupSid() { return (int)8L; }

    public static int WinNetworkSid() { return (int)9L; }

    public static int WinBatchSid() { return (int)10L; }

    public static int WinInteractiveSid() { return (int)11L; }

    public static int WinServiceSid() { return (int)12L; }

    public static int WinAnonymousSid() { return (int)13L; }

    public static int WinProxySid() { return (int)14L; }

    public static int WinEnterpriseControllersSid() { return (int)15L; }

    public static int WinSelfSid() { return (int)16L; }

    public static int WinAuthenticatedUserSid() { return (int)17L; }

    public static int WinRestrictedCodeSid() { return (int)18L; }

    public static int WinTerminalServerSid() { return (int)19L; }

    public static int WinRemoteLogonIdSid() { return (int)20L; }

    public static int WinLogonIdsSid() { return (int)21L; }

    public static int WinLocalSystemSid() { return (int)22L; }

    public static int WinLocalServiceSid() { return (int)23L; }

    public static int WinNetworkServiceSid() { return (int)24L; }

    public static int WinBuiltinDomainSid() { return (int)25L; }

    public static int WinBuiltinAdministratorsSid() { return (int)26L; }

    public static int WinBuiltinUsersSid() { return (int)27L; }

    public static int WinBuiltinGuestsSid() { return (int)28L; }

    public static int WinBuiltinPowerUsersSid() { return (int)29L; }

    public static int WinBuiltinAccountOperatorsSid() { return (int)30L; }

    public static int WinBuiltinSystemOperatorsSid() { return (int)31L; }

    public static int WinBuiltinPrintOperatorsSid() { return (int)32L; }

    public static int WinBuiltinBackupOperatorsSid() { return (int)33L; }

    public static int WinBuiltinReplicatorSid() { return (int)34L; }

    public static int WinBuiltinPreWindows2000CompatibleAccessSid() { return (int)35L; }

    public static int WinBuiltinRemoteDesktopUsersSid() { return (int)36L; }

    public static int WinBuiltinNetworkConfigurationOperatorsSid() { return (int)37L; }

    public static int WinAccountAdministratorSid() { return (int)38L; }

    public static int WinAccountGuestSid() { return (int)39L; }

    public static int WinAccountKrbtgtSid() { return (int)40L; }

    public static int WinAccountDomainAdminsSid() { return (int)41L; }

    public static int WinAccountDomainUsersSid() { return (int)42L; }

    public static int WinAccountDomainGuestsSid() { return (int)43L; }

    public static int WinAccountComputersSid() { return (int)44L; }

    public static int WinAccountControllersSid() { return (int)45L; }

    public static int WinAccountCertAdminsSid() { return (int)46L; }

    public static int WinAccountSchemaAdminsSid() { return (int)47L; }

    public static int WinAccountEnterpriseAdminsSid() { return (int)48L; }

    public static int WinAccountPolicyAdminsSid() { return (int)49L; }

    public static int WinAccountRasAndIasServersSid() { return (int)50L; }

    public static int WinNTLMAuthenticationSid() { return (int)51L; }

    public static int WinDigestAuthenticationSid() { return (int)52L; }

    public static int WinSChannelAuthenticationSid() { return (int)53L; }

    public static int WinThisOrganizationSid() { return (int)54L; }

    public static int WinOtherOrganizationSid() { return (int)55L; }

    public static int WinBuiltinIncomingForestTrustBuildersSid() { return (int)56L; }

    public static int WinBuiltinPerfMonitoringUsersSid() { return (int)57L; }

    public static int WinBuiltinPerfLoggingUsersSid() { return (int)58L; }

    public static int WinBuiltinAuthorizationAccessSid() { return (int)59L; }

    public static int WinBuiltinTerminalServerLicenseServersSid() { return (int)60L; }

    public static int WinBuiltinDCOMUsersSid() { return (int)61L; }

    public static int WinBuiltinIUsersSid() { return (int)62L; }

    public static int WinIUserSid() { return (int)63L; }

    public static int WinBuiltinCryptoOperatorsSid() { return (int)64L; }

    public static int WinUntrustedLabelSid() { return (int)65L; }

    public static int WinLowLabelSid() { return (int)66L; }

    public static int WinMediumLabelSid() { return (int)67L; }

    public static int WinHighLabelSid() { return (int)68L; }

    public static int WinSystemLabelSid() { return (int)69L; }

    public static int WinWriteRestrictedCodeSid() { return (int)70L; }

    public static int WinCreatorOwnerRightsSid() { return (int)71L; }

    public static int WinCacheablePrincipalsGroupSid() { return (int)72L; }

    public static int WinNonCacheablePrincipalsGroupSid() { return (int)73L; }

    public static int WinEnterpriseReadonlyControllersSid() { return (int)74L; }

    public static int WinAccountReadonlyControllersSid() { return (int)75L; }

    public static int WinBuiltinEventLogReadersGroup() { return (int)76L; }

    public static int WinNewEnterpriseReadonlyControllersSid() { return (int)77L; }

    public static int WinBuiltinCertSvcDComAccessGroup() { return (int)78L; }

    public static int WinMediumPlusLabelSid() { return (int)79L; }

    public static int WinLocalLogonSid() { return (int)80L; }

    public static int WinConsoleLogonSid() { return (int)81L; }

    public static int WinThisOrganizationCertificateSid() { return (int)82L; }

    public static int WinApplicationPackageAuthoritySid() { return (int)83L; }

    public static int WinBuiltinAnyPackageSid() { return (int)84L; }

    public static int WinCapabilityInternetClientSid() { return (int)85L; }

    public static int WinCapabilityInternetClientServerSid() { return (int)86L; }

    public static int WinCapabilityPrivateNetworkClientServerSid() { return (int)87L; }

    public static int WinCapabilityPicturesLibrarySid() { return (int)88L; }

    public static int WinCapabilityVideosLibrarySid() { return (int)89L; }

    public static int WinCapabilityMusicLibrarySid() { return (int)90L; }

    public static int WinCapabilityDocumentsLibrarySid() { return (int)91L; }

    public static int WinCapabilitySharedUserCertificatesSid() { return (int)92L; }

    public static int WinCapabilityEnterpriseAuthenticationSid() { return (int)93L; }

    public static int WinCapabilityRemovableStorageSid() { return (int)94L; }

    public static int WinBuiltinRDSRemoteAccessServersSid() { return (int)95L; }

    public static int WinBuiltinRDSEndpointServersSid() { return (int)96L; }

    public static int WinBuiltinRDSManagementServersSid() { return (int)97L; }

    public static int WinUserModeDriversSid() { return (int)98L; }

    public static int WinBuiltinHyperVAdminsSid() { return (int)99L; }

    public static int WinAccountCloneableControllersSid() { return (int)100L; }

    public static int WinBuiltinAccessControlAssistanceOperatorsSid() { return (int)101L; }

    public static int WinBuiltinRemoteManagementUsersSid() { return (int)102L; }

    public static int WinAuthenticationAuthorityAssertedSid() { return (int)103L; }

    public static int WinAuthenticationServiceAssertedSid() { return (int)104L; }

    public static int WinLocalAccountSid() { return (int)105L; }

    public static int WinLocalAccountAndAdministratorSid() { return (int)106L; }

    public static int WinAccountProtectedUsersSid() { return (int)107L; }

    public static int WinCapabilityAppointmentsSid() { return (int)108L; }

    public static int WinCapabilityContactsSid() { return (int)109L; }

    public static int WinAccountDefaultSystemManagedSid() { return (int)110L; }

    public static int WinBuiltinDefaultSystemManagedGroupSid() { return (int)111L; }

    public static int WinBuiltinStorageReplicaAdminsSid() { return (int)112L; }

    public static int WinAccountKeyAdminsSid() { return (int)113L; }

    public static int WinAccountEnterpriseKeyAdminsSid() { return (int)114L; }

    public static int WinAuthenticationKeyTrustSid() { return (int)115L; }

    public static int WinAuthenticationKeyPropertyMFASid() { return (int)116L; }

    public static int WinAuthenticationKeyPropertyAttestationSid() { return (int)117L; }

    public static int WinAuthenticationFreshKeyAuthSid() { return (int)118L; }

    public static int WinBuiltinDeviceOwnersSid() { return (int)119L; }

    static final MemoryLayout _ACL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("AclRevision"),
        C_BOOL.withName("Sbz1"),
        C_SHORT.withName("AclSize"),
        C_SHORT.withName("AceCount"),
        C_SHORT.withName("Sbz2")
    ).withName("_ACL");
    public static jdk.incubator.foreign.MemoryLayout _ACL$struct$LAYOUT() { return _ACL$struct$LAYOUT_; }

    static final MemoryLayout _ACL$AclRevision$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _ACL$AclRevision$LAYOUT() { return _ACL$AclRevision$LAYOUT_; }

    static final VarHandle _ACL$AclRevision$VH_ = _ACL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AclRevision"));
    public static java.lang.invoke.VarHandle _ACL$AclRevision$VH() { return _ACL$AclRevision$VH_; }

    static final MemoryLayout _ACL$Sbz1$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _ACL$Sbz1$LAYOUT() { return _ACL$Sbz1$LAYOUT_; }

    static final VarHandle _ACL$Sbz1$VH_ = _ACL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Sbz1"));
    public static java.lang.invoke.VarHandle _ACL$Sbz1$VH() { return _ACL$Sbz1$VH_; }

    static final MemoryLayout _ACL$AclSize$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _ACL$AclSize$LAYOUT() { return _ACL$AclSize$LAYOUT_; }

    static final VarHandle _ACL$AclSize$VH_ = _ACL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("AclSize"));
    public static java.lang.invoke.VarHandle _ACL$AclSize$VH() { return _ACL$AclSize$VH_; }

    static final MemoryLayout _ACL$AceCount$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _ACL$AceCount$LAYOUT() { return _ACL$AceCount$LAYOUT_; }

    static final VarHandle _ACL$AceCount$VH_ = _ACL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("AceCount"));
    public static java.lang.invoke.VarHandle _ACL$AceCount$VH() { return _ACL$AceCount$VH_; }

    static final MemoryLayout _ACL$Sbz2$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _ACL$Sbz2$LAYOUT() { return _ACL$Sbz2$LAYOUT_; }

    static final VarHandle _ACL$Sbz2$VH_ = _ACL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sbz2"));
    public static java.lang.invoke.VarHandle _ACL$Sbz2$VH() { return _ACL$Sbz2$VH_; }

    static final MemoryLayout _ACE_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("AceType"),
        C_BOOL.withName("AceFlags"),
        C_SHORT.withName("AceSize")
    ).withName("_ACE_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _ACE_HEADER$struct$LAYOUT() { return _ACE_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _ACE_HEADER$AceType$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _ACE_HEADER$AceType$LAYOUT() { return _ACE_HEADER$AceType$LAYOUT_; }

    static final VarHandle _ACE_HEADER$AceType$VH_ = _ACE_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AceType"));
    public static java.lang.invoke.VarHandle _ACE_HEADER$AceType$VH() { return _ACE_HEADER$AceType$VH_; }

    static final MemoryLayout _ACE_HEADER$AceFlags$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _ACE_HEADER$AceFlags$LAYOUT() { return _ACE_HEADER$AceFlags$LAYOUT_; }

    static final VarHandle _ACE_HEADER$AceFlags$VH_ = _ACE_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AceFlags"));
    public static java.lang.invoke.VarHandle _ACE_HEADER$AceFlags$VH() { return _ACE_HEADER$AceFlags$VH_; }

    static final MemoryLayout _ACE_HEADER$AceSize$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _ACE_HEADER$AceSize$LAYOUT() { return _ACE_HEADER$AceSize$LAYOUT_; }

    static final VarHandle _ACE_HEADER$AceSize$VH_ = _ACE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("AceSize"));
    public static java.lang.invoke.VarHandle _ACE_HEADER$AceSize$VH() { return _ACE_HEADER$AceSize$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_ACE");
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_ACE$Mask$VH_ = _ACCESS_ALLOWED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _ACCESS_ALLOWED_ACE$Mask$VH() { return _ACCESS_ALLOWED_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_ACE$SidStart$VH_ = _ACCESS_ALLOWED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _ACCESS_ALLOWED_ACE$SidStart$VH() { return _ACCESS_ALLOWED_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_ACCESS_DENIED_ACE");
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_ACE$struct$LAYOUT() { return _ACCESS_DENIED_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_ACE$Mask$VH_ = _ACCESS_DENIED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _ACCESS_DENIED_ACE$Mask$VH() { return _ACCESS_DENIED_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_ACE$SidStart$VH_ = _ACCESS_DENIED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _ACCESS_DENIED_ACE$SidStart$VH() { return _ACCESS_DENIED_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_ACE$Mask$VH_ = _SYSTEM_AUDIT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_AUDIT_ACE$Mask$VH() { return _SYSTEM_AUDIT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_ACE$SidStart$VH_ = _SYSTEM_AUDIT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_AUDIT_ACE$SidStart$VH() { return _SYSTEM_AUDIT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_ALARM_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_ACE$Mask$VH_ = _SYSTEM_ALARM_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_ALARM_ACE$Mask$VH() { return _SYSTEM_ALARM_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_ACE$SidStart$VH_ = _SYSTEM_ALARM_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_ALARM_ACE$SidStart$VH() { return _SYSTEM_ALARM_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_RESOURCE_ATTRIBUTE_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$LAYOUT() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH_ = _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$LAYOUT() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH_ = _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_SCOPED_POLICY_ID_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT() { return _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$LAYOUT() { return _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH_ = _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH() { return _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$LAYOUT() { return _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH_ = _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH() { return _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_MANDATORY_LABEL_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT() { return _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$Mask$LAYOUT() { return _SYSTEM_MANDATORY_LABEL_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_MANDATORY_LABEL_ACE$Mask$VH_ = _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_MANDATORY_LABEL_ACE$Mask$VH() { return _SYSTEM_MANDATORY_LABEL_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$SidStart$LAYOUT() { return _SYSTEM_MANDATORY_LABEL_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH_ = _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH() { return _SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_PROCESS_TRUST_LABEL_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$LAYOUT() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH_ = _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$LAYOUT() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH_ = _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_ACCESS_FILTER_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT() { return _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$Mask$LAYOUT() { return _SYSTEM_ACCESS_FILTER_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ACCESS_FILTER_ACE$Mask$VH_ = _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_ACCESS_FILTER_ACE$Mask$VH() { return _SYSTEM_ACCESS_FILTER_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$SidStart$LAYOUT() { return _SYSTEM_ACCESS_FILTER_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ACCESS_FILTER_ACE$SidStart$VH_ = _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_ACCESS_FILTER_ACE$SidStart$VH() { return _SYSTEM_ACCESS_FILTER_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("Flags"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("InheritedObjectType"),
        C_INT.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_OBJECT_ACE");
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Mask$VH_ = _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Mask$VH() { return _ACCESS_ALLOWED_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Flags$VH_ = _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Flags$VH() { return _ACCESS_ALLOWED_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH_ = _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH() { return _ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("Flags"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("InheritedObjectType"),
        C_INT.withName("SidStart")
    ).withName("_ACCESS_DENIED_OBJECT_ACE");
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_OBJECT_ACE$Mask$VH_ = _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _ACCESS_DENIED_OBJECT_ACE$Mask$VH() { return _ACCESS_DENIED_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_OBJECT_ACE$Flags$VH_ = _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _ACCESS_DENIED_OBJECT_ACE$Flags$VH() { return _ACCESS_DENIED_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_OBJECT_ACE$SidStart$VH_ = _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _ACCESS_DENIED_OBJECT_ACE$SidStart$VH() { return _ACCESS_DENIED_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("Flags"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("InheritedObjectType"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_OBJECT_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Mask$VH_ = _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Mask$VH() { return _SYSTEM_AUDIT_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Flags$VH_ = _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Flags$VH() { return _SYSTEM_AUDIT_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH_ = _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH() { return _SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("Flags"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("InheritedObjectType"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_ALARM_OBJECT_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_OBJECT_ACE$Mask$VH_ = _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_ALARM_OBJECT_ACE$Mask$VH() { return _SYSTEM_ALARM_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_OBJECT_ACE$Flags$VH_ = _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _SYSTEM_ALARM_OBJECT_ACE$Flags$VH() { return _SYSTEM_ALARM_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_OBJECT_ACE$SidStart$VH_ = _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_ALARM_OBJECT_ACE$SidStart$VH() { return _SYSTEM_ALARM_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_CALLBACK_ACE");
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH_ = _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH() { return _ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH_ = _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH() { return _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_ACCESS_DENIED_CALLBACK_ACE");
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT() { return _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_ACE$Mask$VH_ = _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_ACE$Mask$VH() { return _ACCESS_DENIED_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_ACE$SidStart$VH_ = _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_ACE$SidStart$VH() { return _ACCESS_DENIED_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_CALLBACK_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH_ = _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH() { return _SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH_ = _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH() { return _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_ALARM_CALLBACK_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_ACE$Mask$VH_ = _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_ACE$Mask$VH() { return _SYSTEM_ALARM_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH_ = _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH() { return _SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("Flags"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("InheritedObjectType"),
        C_INT.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE");
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH_ = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH_ = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH_ = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("Flags"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("InheritedObjectType"),
        C_INT.withName("SidStart")
    ).withName("_ACCESS_DENIED_CALLBACK_OBJECT_ACE");
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH_ = _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH_ = _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH_ = _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("Flags"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("InheritedObjectType"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH_ = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH_ = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH_ = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_BOOL.withName("AceType"),
            C_BOOL.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_INT.withName("Mask"),
        C_INT.withName("Flags"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("InheritedObjectType"),
        C_INT.withName("SidStart")
    ).withName("_SYSTEM_ALARM_CALLBACK_OBJECT_ACE");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH_ = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    public static java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH_ = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH_ = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    public static java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    public static int AclRevisionInformation() { return (int)1L; }

    public static int AclSizeInformation() { return (int)2L; }

    static final MemoryLayout _ACL_REVISION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("AclRevision")
    ).withName("_ACL_REVISION_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _ACL_REVISION_INFORMATION$struct$LAYOUT() { return _ACL_REVISION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACL_REVISION_INFORMATION$AclRevision$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACL_REVISION_INFORMATION$AclRevision$LAYOUT() { return _ACL_REVISION_INFORMATION$AclRevision$LAYOUT_; }

    static final VarHandle _ACL_REVISION_INFORMATION$AclRevision$VH_ = _ACL_REVISION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AclRevision"));
    public static java.lang.invoke.VarHandle _ACL_REVISION_INFORMATION$AclRevision$VH() { return _ACL_REVISION_INFORMATION$AclRevision$VH_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("AceCount"),
        C_INT.withName("AclBytesInUse"),
        C_INT.withName("AclBytesFree")
    ).withName("_ACL_SIZE_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$struct$LAYOUT() { return _ACL_SIZE_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$AceCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$AceCount$LAYOUT() { return _ACL_SIZE_INFORMATION$AceCount$LAYOUT_; }

    static final VarHandle _ACL_SIZE_INFORMATION$AceCount$VH_ = _ACL_SIZE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AceCount"));
    public static java.lang.invoke.VarHandle _ACL_SIZE_INFORMATION$AceCount$VH() { return _ACL_SIZE_INFORMATION$AceCount$VH_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$AclBytesInUse$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$AclBytesInUse$LAYOUT() { return _ACL_SIZE_INFORMATION$AclBytesInUse$LAYOUT_; }

    static final VarHandle _ACL_SIZE_INFORMATION$AclBytesInUse$VH_ = _ACL_SIZE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AclBytesInUse"));
    public static java.lang.invoke.VarHandle _ACL_SIZE_INFORMATION$AclBytesInUse$VH() { return _ACL_SIZE_INFORMATION$AclBytesInUse$VH_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$AclBytesFree$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$AclBytesFree$LAYOUT() { return _ACL_SIZE_INFORMATION$AclBytesFree$LAYOUT_; }

    static final VarHandle _ACL_SIZE_INFORMATION$AclBytesFree$VH_ = _ACL_SIZE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AclBytesFree"));
    public static java.lang.invoke.VarHandle _ACL_SIZE_INFORMATION$AclBytesFree$VH() { return _ACL_SIZE_INFORMATION$AclBytesFree$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("Revision"),
        C_BOOL.withName("Sbz1"),
        C_SHORT.withName("Control"),
        C_INT.withName("Owner"),
        C_INT.withName("Group"),
        C_INT.withName("Sacl"),
        C_INT.withName("Dacl")
    ).withName("_SECURITY_DESCRIPTOR_RELATIVE");
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Revision$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Revision$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Revision$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Revision$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Revision"));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Revision$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Revision$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Sbz1"));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Control$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Control$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Control$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Control$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Control"));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Control$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Control$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Owner$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Owner$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Owner$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Owner$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Owner"));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Owner$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Owner$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Group$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Group$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Group$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Group$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Group"));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Group$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Group$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sacl$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sacl$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Sacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Sacl"));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Dacl$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Dacl$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Dacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Dacl"));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("Revision"),
        C_BOOL.withName("Sbz1"),
        C_SHORT.withName("Control"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("Owner"),
        C_POINTER.withName("Group"),
        C_POINTER.withName("Sacl"),
        C_POINTER.withName("Dacl")
    ).withName("_SECURITY_DESCRIPTOR");
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$struct$LAYOUT() { return _SECURITY_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Revision$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Revision$LAYOUT() { return _SECURITY_DESCRIPTOR$Revision$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Revision$VH_ = _SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Revision"));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Revision$VH() { return _SECURITY_DESCRIPTOR$Revision$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Sbz1$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Sbz1$LAYOUT() { return _SECURITY_DESCRIPTOR$Sbz1$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Sbz1$VH_ = _SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Sbz1"));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Sbz1$VH() { return _SECURITY_DESCRIPTOR$Sbz1$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Control$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Control$LAYOUT() { return _SECURITY_DESCRIPTOR$Control$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Control$VH_ = _SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Control"));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Control$VH() { return _SECURITY_DESCRIPTOR$Control$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Owner$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Owner$LAYOUT() { return _SECURITY_DESCRIPTOR$Owner$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Owner$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Owner")));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Owner$VH() { return _SECURITY_DESCRIPTOR$Owner$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Group$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Group$LAYOUT() { return _SECURITY_DESCRIPTOR$Group$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Group$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Group")));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Group$VH() { return _SECURITY_DESCRIPTOR$Group$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Sacl$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Sacl$LAYOUT() { return _SECURITY_DESCRIPTOR$Sacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Sacl$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Sacl")));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Sacl$VH() { return _SECURITY_DESCRIPTOR$Sacl$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Dacl$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Dacl$LAYOUT() { return _SECURITY_DESCRIPTOR$Dacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Dacl$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Dacl")));
    public static java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Dacl$VH() { return _SECURITY_DESCRIPTOR$Dacl$VH_; }

    static final MemoryLayout _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        C_INT.withName("ConstraintMask")
    ).withName("_SECURITY_OBJECT_AI_PARAMS");
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT() { return _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_OBJECT_AI_PARAMS$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_OBJECT_AI_PARAMS$Size$LAYOUT() { return _SECURITY_OBJECT_AI_PARAMS$Size$LAYOUT_; }

    static final VarHandle _SECURITY_OBJECT_AI_PARAMS$Size$VH_ = _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _SECURITY_OBJECT_AI_PARAMS$Size$VH() { return _SECURITY_OBJECT_AI_PARAMS$Size$VH_; }

    static final MemoryLayout _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$LAYOUT() { return _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$LAYOUT_; }

    static final VarHandle _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH_ = _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ConstraintMask"));
    public static java.lang.invoke.VarHandle _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH() { return _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Level"),
        C_SHORT.withName("Sbz"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ObjectType")
    ).withName("_OBJECT_TYPE_LIST");
    public static jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$struct$LAYOUT() { return _OBJECT_TYPE_LIST$struct$LAYOUT_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$Level$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$Level$LAYOUT() { return _OBJECT_TYPE_LIST$Level$LAYOUT_; }

    static final VarHandle _OBJECT_TYPE_LIST$Level$VH_ = _OBJECT_TYPE_LIST$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Level"));
    public static java.lang.invoke.VarHandle _OBJECT_TYPE_LIST$Level$VH() { return _OBJECT_TYPE_LIST$Level$VH_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$Sbz$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$Sbz$LAYOUT() { return _OBJECT_TYPE_LIST$Sbz$LAYOUT_; }

    static final VarHandle _OBJECT_TYPE_LIST$Sbz$VH_ = _OBJECT_TYPE_LIST$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sbz"));
    public static java.lang.invoke.VarHandle _OBJECT_TYPE_LIST$Sbz$VH() { return _OBJECT_TYPE_LIST$Sbz$VH_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$ObjectType$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$ObjectType$LAYOUT() { return _OBJECT_TYPE_LIST$ObjectType$LAYOUT_; }

    static final VarHandle _OBJECT_TYPE_LIST$ObjectType$VH_ = MemoryHandles.asAddressVarHandle(_OBJECT_TYPE_LIST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ObjectType")));
    public static java.lang.invoke.VarHandle _OBJECT_TYPE_LIST$ObjectType$VH() { return _OBJECT_TYPE_LIST$ObjectType$VH_; }

    public static int AuditEventObjectAccess() { return (int)0L; }

    public static int AuditEventDirectoryServiceAccess() { return (int)1L; }

    static final MemoryLayout _PRIVILEGE_SET$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("PrivilegeCount"),
        C_INT.withName("Control"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("Luid"),
            C_INT.withName("Attributes")
        ).withName("_LUID_AND_ATTRIBUTES")).withName("Privilege")
    ).withName("_PRIVILEGE_SET");
    public static jdk.incubator.foreign.MemoryLayout _PRIVILEGE_SET$struct$LAYOUT() { return _PRIVILEGE_SET$struct$LAYOUT_; }

    static final MemoryLayout _PRIVILEGE_SET$PrivilegeCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PRIVILEGE_SET$PrivilegeCount$LAYOUT() { return _PRIVILEGE_SET$PrivilegeCount$LAYOUT_; }

    static final VarHandle _PRIVILEGE_SET$PrivilegeCount$VH_ = _PRIVILEGE_SET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    public static java.lang.invoke.VarHandle _PRIVILEGE_SET$PrivilegeCount$VH() { return _PRIVILEGE_SET$PrivilegeCount$VH_; }

    static final MemoryLayout _PRIVILEGE_SET$Control$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PRIVILEGE_SET$Control$LAYOUT() { return _PRIVILEGE_SET$Control$LAYOUT_; }

    static final VarHandle _PRIVILEGE_SET$Control$VH_ = _PRIVILEGE_SET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Control"));
    public static java.lang.invoke.VarHandle _PRIVILEGE_SET$Control$VH() { return _PRIVILEGE_SET$Control$VH_; }

    public static int AccessReasonNone() { return (int)0L; }

    public static int AccessReasonAllowedAce() { return (int)65536L; }

    public static int AccessReasonDeniedAce() { return (int)131072L; }

    public static int AccessReasonAllowedParentAce() { return (int)196608L; }

    public static int AccessReasonDeniedParentAce() { return (int)262144L; }

    public static int AccessReasonNotGrantedByCape() { return (int)327680L; }

    public static int AccessReasonNotGrantedByParentCape() { return (int)393216L; }

    public static int AccessReasonNotGrantedToAppContainer() { return (int)458752L; }

    public static int AccessReasonMissingPrivilege() { return (int)1048576L; }

    public static int AccessReasonFromPrivilege() { return (int)2097152L; }

    public static int AccessReasonIntegrityLevel() { return (int)3145728L; }

    public static int AccessReasonOwnership() { return (int)4194304L; }

    public static int AccessReasonNullDacl() { return (int)5242880L; }

    public static int AccessReasonEmptyDacl() { return (int)6291456L; }

    public static int AccessReasonNoSD() { return (int)7340032L; }

    public static int AccessReasonNoGrant() { return (int)8388608L; }

    public static int AccessReasonTrustLabel() { return (int)9437184L; }

    public static int AccessReasonFilterAce() { return (int)10485760L; }

    static final MemoryLayout _ACCESS_REASONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(32, C_INT).withName("Data")
    ).withName("_ACCESS_REASONS");
    public static jdk.incubator.foreign.MemoryLayout _ACCESS_REASONS$struct$LAYOUT() { return _ACCESS_REASONS$struct$LAYOUT_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        C_INT.withName("Flags"),
        C_POINTER.withName("SecurityDescriptor")
    ).withName("_SE_SECURITY_DESCRIPTOR");
    public static jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$struct$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$Size$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$Size$LAYOUT_; }

    static final VarHandle _SE_SECURITY_DESCRIPTOR$Size$VH_ = _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _SE_SECURITY_DESCRIPTOR$Size$VH() { return _SE_SECURITY_DESCRIPTOR$Size$VH_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$Flags$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$Flags$LAYOUT_; }

    static final VarHandle _SE_SECURITY_DESCRIPTOR$Flags$VH_ = _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _SE_SECURITY_DESCRIPTOR$Flags$VH() { return _SE_SECURITY_DESCRIPTOR$Flags$VH_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$LAYOUT_; }

    static final VarHandle _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH_ = MemoryHandles.asAddressVarHandle(_SE_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SecurityDescriptor")));
    public static java.lang.invoke.VarHandle _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH() { return _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("SeSecurityDescriptor"),
        C_INT.withName("DesiredAccess"),
        C_INT.withName("PreviouslyGrantedAccess"),
        C_POINTER.withName("PrincipalSelfSid"),
        C_POINTER.withName("GenericMapping"),
        C_INT.withName("ObjectTypeListCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ObjectTypeList")
    ).withName("_SE_ACCESS_REQUEST");
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$struct$LAYOUT() { return _SE_ACCESS_REQUEST$struct$LAYOUT_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$Size$LAYOUT() { return _SE_ACCESS_REQUEST$Size$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$Size$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$Size$VH() { return _SE_ACCESS_REQUEST$Size$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$SeSecurityDescriptor$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$SeSecurityDescriptor$LAYOUT() { return _SE_ACCESS_REQUEST$SeSecurityDescriptor$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$SeSecurityDescriptor$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SeSecurityDescriptor")));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$SeSecurityDescriptor$VH() { return _SE_ACCESS_REQUEST$SeSecurityDescriptor$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$DesiredAccess$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$DesiredAccess$LAYOUT() { return _SE_ACCESS_REQUEST$DesiredAccess$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$DesiredAccess$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DesiredAccess"));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$DesiredAccess$VH() { return _SE_ACCESS_REQUEST$DesiredAccess$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$LAYOUT() { return _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PreviouslyGrantedAccess"));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH() { return _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$PrincipalSelfSid$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$PrincipalSelfSid$LAYOUT() { return _SE_ACCESS_REQUEST$PrincipalSelfSid$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$PrincipalSelfSid$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PrincipalSelfSid")));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$PrincipalSelfSid$VH() { return _SE_ACCESS_REQUEST$PrincipalSelfSid$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$GenericMapping$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$GenericMapping$LAYOUT() { return _SE_ACCESS_REQUEST$GenericMapping$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$GenericMapping$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GenericMapping")));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$GenericMapping$VH() { return _SE_ACCESS_REQUEST$GenericMapping$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeListCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeListCount$LAYOUT() { return _SE_ACCESS_REQUEST$ObjectTypeListCount$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$ObjectTypeListCount$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ObjectTypeListCount"));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$ObjectTypeListCount$VH() { return _SE_ACCESS_REQUEST$ObjectTypeListCount$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeList$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeList$LAYOUT() { return _SE_ACCESS_REQUEST$ObjectTypeList$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$ObjectTypeList$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ObjectTypeList")));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$ObjectTypeList$VH() { return _SE_ACCESS_REQUEST$ObjectTypeList$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        C_INT.withName("ResultListCount"),
        C_POINTER.withName("GrantedAccess"),
        C_POINTER.withName("AccessStatus"),
        C_POINTER.withName("AccessReason"),
        C_POINTER.withName("Privileges")
    ).withName("_SE_ACCESS_REPLY");
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$struct$LAYOUT() { return _SE_ACCESS_REPLY$struct$LAYOUT_; }

    static final MemoryLayout _SE_ACCESS_REPLY$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$Size$LAYOUT() { return _SE_ACCESS_REPLY$Size$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$Size$VH_ = _SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REPLY$Size$VH() { return _SE_ACCESS_REPLY$Size$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$ResultListCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$ResultListCount$LAYOUT() { return _SE_ACCESS_REPLY$ResultListCount$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$ResultListCount$VH_ = _SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ResultListCount"));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REPLY$ResultListCount$VH() { return _SE_ACCESS_REPLY$ResultListCount$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$GrantedAccess$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$GrantedAccess$LAYOUT() { return _SE_ACCESS_REPLY$GrantedAccess$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$GrantedAccess$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GrantedAccess")));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REPLY$GrantedAccess$VH() { return _SE_ACCESS_REPLY$GrantedAccess$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$AccessStatus$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$AccessStatus$LAYOUT() { return _SE_ACCESS_REPLY$AccessStatus$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$AccessStatus$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AccessStatus")));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REPLY$AccessStatus$VH() { return _SE_ACCESS_REPLY$AccessStatus$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$AccessReason$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$AccessReason$LAYOUT() { return _SE_ACCESS_REPLY$AccessReason$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$AccessReason$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AccessReason")));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REPLY$AccessReason$VH() { return _SE_ACCESS_REPLY$AccessReason$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$Privileges$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$Privileges$LAYOUT() { return _SE_ACCESS_REPLY$Privileges$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$Privileges$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Privileges")));
    public static java.lang.invoke.VarHandle _SE_ACCESS_REPLY$Privileges$VH() { return _SE_ACCESS_REPLY$Privileges$VH_; }

    public static int SecurityAnonymous() { return (int)0L; }

    public static int SecurityIdentification() { return (int)1L; }

    public static int SecurityImpersonation() { return (int)2L; }

    public static int SecurityDelegation() { return (int)3L; }

    public static int TokenPrimary() { return (int)1L; }

    public static int TokenImpersonation() { return (int)2L; }

    public static int TokenElevationTypeDefault() { return (int)1L; }

    public static int TokenElevationTypeFull() { return (int)2L; }

    public static int TokenElevationTypeLimited() { return (int)3L; }

    public static int TokenUser() { return (int)1L; }

    public static int TokenGroups() { return (int)2L; }

    public static int TokenPrivileges() { return (int)3L; }

    public static int TokenOwner() { return (int)4L; }

    public static int TokenPrimaryGroup() { return (int)5L; }

    public static int TokenDefaultDacl() { return (int)6L; }

    public static int TokenSource() { return (int)7L; }

    public static int TokenType() { return (int)8L; }

    public static int TokenImpersonationLevel() { return (int)9L; }

    public static int TokenStatistics() { return (int)10L; }

    public static int TokenRestrictedSids() { return (int)11L; }

    public static int TokenSessionId() { return (int)12L; }

    public static int TokenGroupsAndPrivileges() { return (int)13L; }

    public static int TokenSessionReference() { return (int)14L; }

    public static int TokenSandBoxInert() { return (int)15L; }

    public static int TokenAuditPolicy() { return (int)16L; }

    public static int TokenOrigin() { return (int)17L; }

    public static int TokenElevationType() { return (int)18L; }

    public static int TokenLinkedToken() { return (int)19L; }

    public static int TokenElevation() { return (int)20L; }

    public static int TokenHasRestrictions() { return (int)21L; }

    public static int TokenAccessInformation() { return (int)22L; }

    public static int TokenVirtualizationAllowed() { return (int)23L; }

    public static int TokenVirtualizationEnabled() { return (int)24L; }

    public static int TokenIntegrityLevel() { return (int)25L; }

    public static int TokenUIAccess() { return (int)26L; }

    public static int TokenMandatoryPolicy() { return (int)27L; }

    public static int TokenLogonSid() { return (int)28L; }

    public static int TokenIsAppContainer() { return (int)29L; }

    public static int TokenCapabilities() { return (int)30L; }

    public static int TokenAppContainerSid() { return (int)31L; }

    public static int TokenAppContainerNumber() { return (int)32L; }

    public static int TokenUserClaimAttributes() { return (int)33L; }

    public static int TokenDeviceClaimAttributes() { return (int)34L; }

    public static int TokenRestrictedUserClaimAttributes() { return (int)35L; }

    public static int TokenRestrictedDeviceClaimAttributes() { return (int)36L; }

    public static int TokenDeviceGroups() { return (int)37L; }

    public static int TokenRestrictedDeviceGroups() { return (int)38L; }

    public static int TokenSecurityAttributes() { return (int)39L; }

    public static int TokenIsRestricted() { return (int)40L; }

    public static int TokenProcessTrustLevel() { return (int)41L; }

    public static int TokenPrivateNameSpace() { return (int)42L; }

    public static int TokenSingletonAttributes() { return (int)43L; }

    public static int TokenBnoIsolation() { return (int)44L; }

    public static int TokenChildProcessFlags() { return (int)45L; }

    public static int TokenIsLessPrivilegedAppContainer() { return (int)46L; }

    public static int TokenIsSandboxed() { return (int)47L; }

    public static int TokenOriginatingProcessTrustLevel() { return (int)48L; }

    public static int MaxTokenInfoClass() { return (int)49L; }

    static final MemoryLayout _TOKEN_USER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_INT.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("User")
    ).withName("_TOKEN_USER");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_USER$struct$LAYOUT() { return _TOKEN_USER$struct$LAYOUT_; }

    static final MemoryLayout _SE_TOKEN_USER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_POINTER.withName("Sid"),
                C_INT.withName("Attributes"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("User")
        ).withName("TokenUser"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_INT.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("User"),
        MemoryLayout.ofStruct(
            C_BOOL.withName("Revision"),
            C_BOOL.withName("SubAuthorityCount"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(6, C_BOOL).withName("Value")
            ).withName("IdentifierAuthority"),
            MemoryLayout.ofSequence(1, C_INT).withName("SubAuthority")
        ).withName("Sid"),
        MemoryLayout.ofSequence(68, C_BOOL).withName("Buffer"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_SE_TOKEN_USER");
    public static jdk.incubator.foreign.MemoryLayout _SE_TOKEN_USER$struct$LAYOUT() { return _SE_TOKEN_USER$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_GROUPS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("GroupCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_INT.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("_SID_AND_ATTRIBUTES")).withName("Groups")
    ).withName("_TOKEN_GROUPS");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS$struct$LAYOUT() { return _TOKEN_GROUPS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_GROUPS$GroupCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS$GroupCount$LAYOUT() { return _TOKEN_GROUPS$GroupCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS$GroupCount$VH_ = _TOKEN_GROUPS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GroupCount"));
    public static java.lang.invoke.VarHandle _TOKEN_GROUPS$GroupCount$VH() { return _TOKEN_GROUPS$GroupCount$VH_; }

    static final MemoryLayout _TOKEN_PRIVILEGES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("PrivilegeCount"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("Luid"),
            C_INT.withName("Attributes")
        ).withName("_LUID_AND_ATTRIBUTES")).withName("Privileges")
    ).withName("_TOKEN_PRIVILEGES");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_PRIVILEGES$struct$LAYOUT() { return _TOKEN_PRIVILEGES$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_PRIVILEGES$PrivilegeCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_PRIVILEGES$PrivilegeCount$LAYOUT() { return _TOKEN_PRIVILEGES$PrivilegeCount$LAYOUT_; }

    static final VarHandle _TOKEN_PRIVILEGES$PrivilegeCount$VH_ = _TOKEN_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    public static java.lang.invoke.VarHandle _TOKEN_PRIVILEGES$PrivilegeCount$VH() { return _TOKEN_PRIVILEGES$PrivilegeCount$VH_; }

    static final MemoryLayout _TOKEN_OWNER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Owner")
    ).withName("_TOKEN_OWNER");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_OWNER$struct$LAYOUT() { return _TOKEN_OWNER$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_OWNER$Owner$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_OWNER$Owner$LAYOUT() { return _TOKEN_OWNER$Owner$LAYOUT_; }

    static final VarHandle _TOKEN_OWNER$Owner$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_OWNER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Owner")));
    public static java.lang.invoke.VarHandle _TOKEN_OWNER$Owner$VH() { return _TOKEN_OWNER$Owner$VH_; }

    static final MemoryLayout _TOKEN_PRIMARY_GROUP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("PrimaryGroup")
    ).withName("_TOKEN_PRIMARY_GROUP");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_PRIMARY_GROUP$struct$LAYOUT() { return _TOKEN_PRIMARY_GROUP$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_PRIMARY_GROUP$PrimaryGroup$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_PRIMARY_GROUP$PrimaryGroup$LAYOUT() { return _TOKEN_PRIMARY_GROUP$PrimaryGroup$LAYOUT_; }

    static final VarHandle _TOKEN_PRIMARY_GROUP$PrimaryGroup$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_PRIMARY_GROUP$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PrimaryGroup")));
    public static java.lang.invoke.VarHandle _TOKEN_PRIMARY_GROUP$PrimaryGroup$VH() { return _TOKEN_PRIMARY_GROUP$PrimaryGroup$VH_; }

    static final MemoryLayout _TOKEN_DEFAULT_DACL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("DefaultDacl")
    ).withName("_TOKEN_DEFAULT_DACL");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_DEFAULT_DACL$struct$LAYOUT() { return _TOKEN_DEFAULT_DACL$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_DEFAULT_DACL$DefaultDacl$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_DEFAULT_DACL$DefaultDacl$LAYOUT() { return _TOKEN_DEFAULT_DACL$DefaultDacl$LAYOUT_; }

    static final VarHandle _TOKEN_DEFAULT_DACL$DefaultDacl$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_DEFAULT_DACL$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DefaultDacl")));
    public static java.lang.invoke.VarHandle _TOKEN_DEFAULT_DACL$DefaultDacl$VH() { return _TOKEN_DEFAULT_DACL$DefaultDacl$VH_; }

    static final MemoryLayout _TOKEN_USER_CLAIMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("UserClaims")
    ).withName("_TOKEN_USER_CLAIMS");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_USER_CLAIMS$struct$LAYOUT() { return _TOKEN_USER_CLAIMS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_USER_CLAIMS$UserClaims$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_USER_CLAIMS$UserClaims$LAYOUT() { return _TOKEN_USER_CLAIMS$UserClaims$LAYOUT_; }

    static final VarHandle _TOKEN_USER_CLAIMS$UserClaims$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_USER_CLAIMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserClaims")));
    public static java.lang.invoke.VarHandle _TOKEN_USER_CLAIMS$UserClaims$VH() { return _TOKEN_USER_CLAIMS$UserClaims$VH_; }

    static final MemoryLayout _TOKEN_DEVICE_CLAIMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("DeviceClaims")
    ).withName("_TOKEN_DEVICE_CLAIMS");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_DEVICE_CLAIMS$struct$LAYOUT() { return _TOKEN_DEVICE_CLAIMS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_DEVICE_CLAIMS$DeviceClaims$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_DEVICE_CLAIMS$DeviceClaims$LAYOUT() { return _TOKEN_DEVICE_CLAIMS$DeviceClaims$LAYOUT_; }

    static final VarHandle _TOKEN_DEVICE_CLAIMS$DeviceClaims$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_DEVICE_CLAIMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DeviceClaims")));
    public static java.lang.invoke.VarHandle _TOKEN_DEVICE_CLAIMS$DeviceClaims$VH() { return _TOKEN_DEVICE_CLAIMS$DeviceClaims$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("SidCount"),
        C_INT.withName("SidLength"),
        C_POINTER.withName("Sids"),
        C_INT.withName("RestrictedSidCount"),
        C_INT.withName("RestrictedSidLength"),
        C_POINTER.withName("RestrictedSids"),
        C_INT.withName("PrivilegeCount"),
        C_INT.withName("PrivilegeLength"),
        C_POINTER.withName("Privileges"),
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("AuthenticationId")
    ).withName("_TOKEN_GROUPS_AND_PRIVILEGES");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidCount"));
    public static java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidLength"));
    public static java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Sids$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Sids$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$Sids$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Sids")));
    public static java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RestrictedSidCount"));
    public static java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RestrictedSidLength"));
    public static java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RestrictedSids")));
    public static java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    public static java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeLength"));
    public static java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Privileges")));
    public static java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH_; }

    static final MemoryLayout _TOKEN_LINKED_TOKEN$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("LinkedToken")
    ).withName("_TOKEN_LINKED_TOKEN");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_LINKED_TOKEN$struct$LAYOUT() { return _TOKEN_LINKED_TOKEN$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_LINKED_TOKEN$LinkedToken$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_LINKED_TOKEN$LinkedToken$LAYOUT() { return _TOKEN_LINKED_TOKEN$LinkedToken$LAYOUT_; }

    static final VarHandle _TOKEN_LINKED_TOKEN$LinkedToken$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_LINKED_TOKEN$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LinkedToken")));
    public static java.lang.invoke.VarHandle _TOKEN_LINKED_TOKEN$LinkedToken$VH() { return _TOKEN_LINKED_TOKEN$LinkedToken$VH_; }

    static final MemoryLayout _TOKEN_ELEVATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("TokenIsElevated")
    ).withName("_TOKEN_ELEVATION");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ELEVATION$struct$LAYOUT() { return _TOKEN_ELEVATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_ELEVATION$TokenIsElevated$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ELEVATION$TokenIsElevated$LAYOUT() { return _TOKEN_ELEVATION$TokenIsElevated$LAYOUT_; }

    static final VarHandle _TOKEN_ELEVATION$TokenIsElevated$VH_ = _TOKEN_ELEVATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TokenIsElevated"));
    public static java.lang.invoke.VarHandle _TOKEN_ELEVATION$TokenIsElevated$VH() { return _TOKEN_ELEVATION$TokenIsElevated$VH_; }

    static final MemoryLayout _TOKEN_MANDATORY_LABEL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_INT.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Label")
    ).withName("_TOKEN_MANDATORY_LABEL");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_MANDATORY_LABEL$struct$LAYOUT() { return _TOKEN_MANDATORY_LABEL$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_MANDATORY_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Policy")
    ).withName("_TOKEN_MANDATORY_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_MANDATORY_POLICY$struct$LAYOUT() { return _TOKEN_MANDATORY_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_MANDATORY_POLICY$Policy$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_MANDATORY_POLICY$Policy$LAYOUT() { return _TOKEN_MANDATORY_POLICY$Policy$LAYOUT_; }

    static final VarHandle _TOKEN_MANDATORY_POLICY$Policy$VH_ = _TOKEN_MANDATORY_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Policy"));
    public static java.lang.invoke.VarHandle _TOKEN_MANDATORY_POLICY$Policy$VH() { return _TOKEN_MANDATORY_POLICY$Policy$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("SidHash"),
        C_POINTER.withName("RestrictedSidHash"),
        C_POINTER.withName("Privileges"),
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("AuthenticationId"),
        C_INT.withName("TokenType"),
        C_INT.withName("ImpersonationLevel"),
        MemoryLayout.ofStruct(
            C_INT.withName("Policy")
        ).withName("MandatoryPolicy"),
        C_INT.withName("Flags"),
        C_INT.withName("AppContainerNumber"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("PackageSid"),
        C_POINTER.withName("CapabilitiesHash"),
        C_POINTER.withName("TrustLevelSid"),
        C_POINTER.withName("SecurityAttributes")
    ).withName("_TOKEN_ACCESS_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$struct$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$SidHash$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$SidHash$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$SidHash$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$SidHash$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SidHash")));
    public static java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$SidHash$VH() { return _TOKEN_ACCESS_INFORMATION$SidHash$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RestrictedSidHash")));
    public static java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH() { return _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$Privileges$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$Privileges$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$Privileges$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$Privileges$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Privileges")));
    public static java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$Privileges$VH() { return _TOKEN_ACCESS_INFORMATION$Privileges$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$TokenType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$TokenType$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$TokenType$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$TokenType$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TokenType"));
    public static java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$TokenType$VH() { return _TOKEN_ACCESS_INFORMATION$TokenType$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImpersonationLevel"));
    public static java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH() { return _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$Flags$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$Flags$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$Flags$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$Flags$VH() { return _TOKEN_ACCESS_INFORMATION$Flags$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$AppContainerNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$AppContainerNumber$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$AppContainerNumber$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AppContainerNumber"));
    public static java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH() { return _TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$PackageSid$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$PackageSid$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$PackageSid$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$PackageSid$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PackageSid")));
    public static java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$PackageSid$VH() { return _TOKEN_ACCESS_INFORMATION$PackageSid$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CapabilitiesHash")));
    public static java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH() { return _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$TrustLevelSid$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$TrustLevelSid$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$TrustLevelSid$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TrustLevelSid")));
    public static java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH() { return _TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$SecurityAttributes$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$SecurityAttributes$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$SecurityAttributes$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SecurityAttributes")));
    public static java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH() { return _TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH_; }

    static final MemoryLayout _TOKEN_AUDIT_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(30, C_BOOL).withName("PerUserPolicy")
    ).withName("_TOKEN_AUDIT_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_AUDIT_POLICY$struct$LAYOUT() { return _TOKEN_AUDIT_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_SOURCE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(8, C_BOOL).withName("SourceName"),
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("SourceIdentifier")
    ).withName("_TOKEN_SOURCE");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_SOURCE$struct$LAYOUT() { return _TOKEN_SOURCE$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_STATISTICS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("TokenId"),
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("AuthenticationId"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ExpirationTime"),
        C_INT.withName("TokenType"),
        C_INT.withName("ImpersonationLevel"),
        C_INT.withName("DynamicCharged"),
        C_INT.withName("DynamicAvailable"),
        C_INT.withName("GroupCount"),
        C_INT.withName("PrivilegeCount"),
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("ModifiedId")
    ).withName("_TOKEN_STATISTICS");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$struct$LAYOUT() { return _TOKEN_STATISTICS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_STATISTICS$TokenType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$TokenType$LAYOUT() { return _TOKEN_STATISTICS$TokenType$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$TokenType$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TokenType"));
    public static java.lang.invoke.VarHandle _TOKEN_STATISTICS$TokenType$VH() { return _TOKEN_STATISTICS$TokenType$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$ImpersonationLevel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$ImpersonationLevel$LAYOUT() { return _TOKEN_STATISTICS$ImpersonationLevel$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$ImpersonationLevel$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImpersonationLevel"));
    public static java.lang.invoke.VarHandle _TOKEN_STATISTICS$ImpersonationLevel$VH() { return _TOKEN_STATISTICS$ImpersonationLevel$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$DynamicCharged$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$DynamicCharged$LAYOUT() { return _TOKEN_STATISTICS$DynamicCharged$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$DynamicCharged$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DynamicCharged"));
    public static java.lang.invoke.VarHandle _TOKEN_STATISTICS$DynamicCharged$VH() { return _TOKEN_STATISTICS$DynamicCharged$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$DynamicAvailable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$DynamicAvailable$LAYOUT() { return _TOKEN_STATISTICS$DynamicAvailable$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$DynamicAvailable$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DynamicAvailable"));
    public static java.lang.invoke.VarHandle _TOKEN_STATISTICS$DynamicAvailable$VH() { return _TOKEN_STATISTICS$DynamicAvailable$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$GroupCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$GroupCount$LAYOUT() { return _TOKEN_STATISTICS$GroupCount$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$GroupCount$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GroupCount"));
    public static java.lang.invoke.VarHandle _TOKEN_STATISTICS$GroupCount$VH() { return _TOKEN_STATISTICS$GroupCount$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$PrivilegeCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$PrivilegeCount$LAYOUT() { return _TOKEN_STATISTICS$PrivilegeCount$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$PrivilegeCount$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    public static java.lang.invoke.VarHandle _TOKEN_STATISTICS$PrivilegeCount$VH() { return _TOKEN_STATISTICS$PrivilegeCount$VH_; }

    static final MemoryLayout _TOKEN_CONTROL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("TokenId"),
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("AuthenticationId"),
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("ModifiedId"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(8, C_BOOL).withName("SourceName"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("SourceIdentifier")
        ).withName("TokenSource")
    ).withName("_TOKEN_CONTROL");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_CONTROL$struct$LAYOUT() { return _TOKEN_CONTROL$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_ORIGIN$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart")
        ).withName("OriginatingLogonSession")
    ).withName("_TOKEN_ORIGIN");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_ORIGIN$struct$LAYOUT() { return _TOKEN_ORIGIN$struct$LAYOUT_; }

    public static int MandatoryLevelUntrusted() { return (int)0L; }

    public static int MandatoryLevelLow() { return (int)1L; }

    public static int MandatoryLevelMedium() { return (int)2L; }

    public static int MandatoryLevelHigh() { return (int)3L; }

    public static int MandatoryLevelSystem() { return (int)4L; }

    public static int MandatoryLevelSecureProcess() { return (int)5L; }

    public static int MandatoryLevelCount() { return (int)6L; }

    static final MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("TokenAppContainer")
    ).withName("_TOKEN_APPCONTAINER_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT() { return _TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$LAYOUT() { return _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$LAYOUT_; }

    static final VarHandle _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TokenAppContainer")));
    public static java.lang.invoke.VarHandle _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH() { return _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH_; }

    static final MemoryLayout _TOKEN_SID_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Sid")
    ).withName("_TOKEN_SID_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_SID_INFORMATION$struct$LAYOUT() { return _TOKEN_SID_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_SID_INFORMATION$Sid$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_SID_INFORMATION$Sid$LAYOUT() { return _TOKEN_SID_INFORMATION$Sid$LAYOUT_; }

    static final VarHandle _TOKEN_SID_INFORMATION$Sid$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_SID_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Sid")));
    public static java.lang.invoke.VarHandle _TOKEN_SID_INFORMATION$Sid$VH() { return _TOKEN_SID_INFORMATION$Sid$VH_; }

    static final MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("IsolationPrefix"),
        C_BOOL.withName("IsolationEnabled"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("_TOKEN_BNO_ISOLATION_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT() { return _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$LAYOUT() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$LAYOUT_; }

    static final VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsolationPrefix")));
    public static java.lang.invoke.VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH_; }

    static final MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$LAYOUT() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$LAYOUT_; }

    static final VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH_ = _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsolationEnabled"));
    public static java.lang.invoke.VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Version"),
        C_POINTER.withName("Name")
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE");
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH_ = _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Name")));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pValue"),
        C_INT.withName("ValueLength"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE");
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pValue")));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH_ = _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ValueLength"));
    public static java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH_; }

}

