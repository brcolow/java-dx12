// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$33 extends Windows_h$constants$32 {
    Windows_h$constants$33() {}
    static final FunctionDescriptor ClientToScreen$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ClientToScreen$FUNC() { return ClientToScreen$FUNC_; }

    static final MethodHandle ClientToScreen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClientToScreen",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ClientToScreen$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ClientToScreen$MH() { return ClientToScreen$MH_; }

    static final FunctionDescriptor ScreenToClient$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ScreenToClient$FUNC() { return ScreenToClient$FUNC_; }

    static final MethodHandle ScreenToClient$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ScreenToClient",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ScreenToClient$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ScreenToClient$MH() { return ScreenToClient$MH_; }

    static final FunctionDescriptor LogicalToPhysicalPoint$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LogicalToPhysicalPoint$FUNC() { return LogicalToPhysicalPoint$FUNC_; }

    static final MethodHandle LogicalToPhysicalPoint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LogicalToPhysicalPoint",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LogicalToPhysicalPoint$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LogicalToPhysicalPoint$MH() { return LogicalToPhysicalPoint$MH_; }

    static final FunctionDescriptor PhysicalToLogicalPoint$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor PhysicalToLogicalPoint$FUNC() { return PhysicalToLogicalPoint$FUNC_; }

    static final MethodHandle PhysicalToLogicalPoint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PhysicalToLogicalPoint",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        PhysicalToLogicalPoint$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PhysicalToLogicalPoint$MH() { return PhysicalToLogicalPoint$MH_; }

    static final FunctionDescriptor LogicalToPhysicalPointForPerMonitorDPI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LogicalToPhysicalPointForPerMonitorDPI$FUNC() { return LogicalToPhysicalPointForPerMonitorDPI$FUNC_; }

    static final MethodHandle LogicalToPhysicalPointForPerMonitorDPI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LogicalToPhysicalPointForPerMonitorDPI",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LogicalToPhysicalPointForPerMonitorDPI$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LogicalToPhysicalPointForPerMonitorDPI$MH() { return LogicalToPhysicalPointForPerMonitorDPI$MH_; }

    static final FunctionDescriptor PhysicalToLogicalPointForPerMonitorDPI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor PhysicalToLogicalPointForPerMonitorDPI$FUNC() { return PhysicalToLogicalPointForPerMonitorDPI$FUNC_; }

    static final MethodHandle PhysicalToLogicalPointForPerMonitorDPI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PhysicalToLogicalPointForPerMonitorDPI",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        PhysicalToLogicalPointForPerMonitorDPI$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PhysicalToLogicalPointForPerMonitorDPI$MH() { return PhysicalToLogicalPointForPerMonitorDPI$MH_; }

    static final FunctionDescriptor MapWindowPoints$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapWindowPoints$FUNC() { return MapWindowPoints$FUNC_; }

    static final MethodHandle MapWindowPoints$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapWindowPoints",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        MapWindowPoints$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapWindowPoints$MH() { return MapWindowPoints$MH_; }

    static final FunctionDescriptor WindowFromPoint$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("tagPOINT")
    );
    public static jdk.incubator.foreign.FunctionDescriptor WindowFromPoint$FUNC() { return WindowFromPoint$FUNC_; }

    static final MethodHandle WindowFromPoint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WindowFromPoint",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        WindowFromPoint$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WindowFromPoint$MH() { return WindowFromPoint$MH_; }

    static final FunctionDescriptor WindowFromPhysicalPoint$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("tagPOINT")
    );
    public static jdk.incubator.foreign.FunctionDescriptor WindowFromPhysicalPoint$FUNC() { return WindowFromPhysicalPoint$FUNC_; }

    static final MethodHandle WindowFromPhysicalPoint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WindowFromPhysicalPoint",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        WindowFromPhysicalPoint$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WindowFromPhysicalPoint$MH() { return WindowFromPhysicalPoint$MH_; }

    static final FunctionDescriptor ChildWindowFromPoint$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("tagPOINT")
    );
    public static jdk.incubator.foreign.FunctionDescriptor ChildWindowFromPoint$FUNC() { return ChildWindowFromPoint$FUNC_; }

    static final MethodHandle ChildWindowFromPoint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChildWindowFromPoint",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        ChildWindowFromPoint$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ChildWindowFromPoint$MH() { return ChildWindowFromPoint$MH_; }

    static final FunctionDescriptor ClipCursor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ClipCursor$FUNC() { return ClipCursor$FUNC_; }

    static final MethodHandle ClipCursor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClipCursor",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ClipCursor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ClipCursor$MH() { return ClipCursor$MH_; }

    static final FunctionDescriptor ChildWindowFromPointEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("tagPOINT"),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ChildWindowFromPointEx$FUNC() { return ChildWindowFromPointEx$FUNC_; }

    static final MethodHandle ChildWindowFromPointEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChildWindowFromPointEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemoryAddress;",
        ChildWindowFromPointEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ChildWindowFromPointEx$MH() { return ChildWindowFromPointEx$MH_; }

    static final FunctionDescriptor GetSysColor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSysColor$FUNC() { return GetSysColor$FUNC_; }

    static final MethodHandle GetSysColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSysColor",
        "(I)I",
        GetSysColor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSysColor$MH() { return GetSysColor$MH_; }

    static final FunctionDescriptor GetSysColorBrush$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSysColorBrush$FUNC() { return GetSysColorBrush$FUNC_; }

    static final MethodHandle GetSysColorBrush$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSysColorBrush",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        GetSysColorBrush$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSysColorBrush$MH() { return GetSysColorBrush$MH_; }

    static final FunctionDescriptor SetSysColors$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSysColors$FUNC() { return SetSysColors$FUNC_; }

    static final MethodHandle SetSysColors$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSysColors",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetSysColors$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSysColors$MH() { return SetSysColors$MH_; }

    static final FunctionDescriptor DrawFocusRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DrawFocusRect$FUNC() { return DrawFocusRect$FUNC_; }

    static final MethodHandle DrawFocusRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DrawFocusRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DrawFocusRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DrawFocusRect$MH() { return DrawFocusRect$MH_; }

    static final FunctionDescriptor FillRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FillRect$FUNC() { return FillRect$FUNC_; }

    static final MethodHandle FillRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FillRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FillRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FillRect$MH() { return FillRect$MH_; }

    static final FunctionDescriptor FrameRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FrameRect$FUNC() { return FrameRect$FUNC_; }

    static final MethodHandle FrameRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FrameRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FrameRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FrameRect$MH() { return FrameRect$MH_; }

    static final FunctionDescriptor InvertRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor InvertRect$FUNC() { return InvertRect$FUNC_; }

    static final MethodHandle InvertRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InvertRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        InvertRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InvertRect$MH() { return InvertRect$MH_; }

    static final FunctionDescriptor SetRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetRect$FUNC() { return SetRect$FUNC_; }

    static final MethodHandle SetRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetRect",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        SetRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetRect$MH() { return SetRect$MH_; }

    static final FunctionDescriptor SetRectEmpty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetRectEmpty$FUNC() { return SetRectEmpty$FUNC_; }

    static final MethodHandle SetRectEmpty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetRectEmpty",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetRectEmpty$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetRectEmpty$MH() { return SetRectEmpty$MH_; }

    static final FunctionDescriptor CopyRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyRect$FUNC() { return CopyRect$FUNC_; }

    static final MethodHandle CopyRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CopyRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyRect$MH() { return CopyRect$MH_; }

    static final FunctionDescriptor InflateRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor InflateRect$FUNC() { return InflateRect$FUNC_; }

    static final MethodHandle InflateRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InflateRect",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        InflateRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InflateRect$MH() { return InflateRect$MH_; }

    static final FunctionDescriptor IntersectRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IntersectRect$FUNC() { return IntersectRect$FUNC_; }

    static final MethodHandle IntersectRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IntersectRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IntersectRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IntersectRect$MH() { return IntersectRect$MH_; }

    static final FunctionDescriptor UnionRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnionRect$FUNC() { return UnionRect$FUNC_; }

    static final MethodHandle UnionRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnionRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        UnionRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnionRect$MH() { return UnionRect$MH_; }

    static final FunctionDescriptor SubtractRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SubtractRect$FUNC() { return SubtractRect$FUNC_; }

    static final MethodHandle SubtractRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SubtractRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SubtractRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SubtractRect$MH() { return SubtractRect$MH_; }

    static final FunctionDescriptor OffsetRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor OffsetRect$FUNC() { return OffsetRect$FUNC_; }

    static final MethodHandle OffsetRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OffsetRect",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        OffsetRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OffsetRect$MH() { return OffsetRect$MH_; }

    static final FunctionDescriptor IsRectEmpty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsRectEmpty$FUNC() { return IsRectEmpty$FUNC_; }

    static final MethodHandle IsRectEmpty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsRectEmpty",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsRectEmpty$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsRectEmpty$MH() { return IsRectEmpty$MH_; }

    static final FunctionDescriptor EqualRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EqualRect$FUNC() { return EqualRect$FUNC_; }

    static final MethodHandle EqualRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EqualRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EqualRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EqualRect$MH() { return EqualRect$MH_; }

    static final FunctionDescriptor PtInRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("tagPOINT")
    );
    public static jdk.incubator.foreign.FunctionDescriptor PtInRect$FUNC() { return PtInRect$FUNC_; }

    static final MethodHandle PtInRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PtInRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        PtInRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PtInRect$MH() { return PtInRect$MH_; }

    static final FunctionDescriptor GetWindowWord$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindowWord$FUNC() { return GetWindowWord$FUNC_; }

    static final MethodHandle GetWindowWord$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowWord",
        "(Ljdk/incubator/foreign/MemoryAddress;I)S",
        GetWindowWord$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindowWord$MH() { return GetWindowWord$MH_; }

    static final FunctionDescriptor SetWindowWord$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowWord$FUNC() { return SetWindowWord$FUNC_; }

    static final MethodHandle SetWindowWord$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowWord",
        "(Ljdk/incubator/foreign/MemoryAddress;IS)S",
        SetWindowWord$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowWord$MH() { return SetWindowWord$MH_; }

    static final FunctionDescriptor GetWindowLongA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindowLongA$FUNC() { return GetWindowLongA$FUNC_; }

    static final MethodHandle GetWindowLongA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowLongA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetWindowLongA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindowLongA$MH() { return GetWindowLongA$MH_; }

    static final FunctionDescriptor GetWindowLongW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindowLongW$FUNC() { return GetWindowLongW$FUNC_; }

    static final MethodHandle GetWindowLongW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowLongW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetWindowLongW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindowLongW$MH() { return GetWindowLongW$MH_; }

    static final FunctionDescriptor SetWindowLongA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowLongA$FUNC() { return SetWindowLongA$FUNC_; }

    static final MethodHandle SetWindowLongA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowLongA",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetWindowLongA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowLongA$MH() { return SetWindowLongA$MH_; }

    static final FunctionDescriptor SetWindowLongW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowLongW$FUNC() { return SetWindowLongW$FUNC_; }

    static final MethodHandle SetWindowLongW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowLongW",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetWindowLongW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowLongW$MH() { return SetWindowLongW$MH_; }

    static final FunctionDescriptor GetWindowLongPtrA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindowLongPtrA$FUNC() { return GetWindowLongPtrA$FUNC_; }

    static final MethodHandle GetWindowLongPtrA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowLongPtrA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)J",
        GetWindowLongPtrA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindowLongPtrA$MH() { return GetWindowLongPtrA$MH_; }

    static final FunctionDescriptor GetWindowLongPtrW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindowLongPtrW$FUNC() { return GetWindowLongPtrW$FUNC_; }

    static final MethodHandle GetWindowLongPtrW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowLongPtrW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)J",
        GetWindowLongPtrW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindowLongPtrW$MH() { return GetWindowLongPtrW$MH_; }

    static final FunctionDescriptor SetWindowLongPtrA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowLongPtrA$FUNC() { return SetWindowLongPtrA$FUNC_; }

    static final MethodHandle SetWindowLongPtrA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowLongPtrA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)J",
        SetWindowLongPtrA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowLongPtrA$MH() { return SetWindowLongPtrA$MH_; }

    static final FunctionDescriptor SetWindowLongPtrW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowLongPtrW$FUNC() { return SetWindowLongPtrW$FUNC_; }

    static final MethodHandle SetWindowLongPtrW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowLongPtrW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)J",
        SetWindowLongPtrW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowLongPtrW$MH() { return SetWindowLongPtrW$MH_; }

    static final FunctionDescriptor GetClassWord$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClassWord$FUNC() { return GetClassWord$FUNC_; }

    static final MethodHandle GetClassWord$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassWord",
        "(Ljdk/incubator/foreign/MemoryAddress;I)S",
        GetClassWord$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClassWord$MH() { return GetClassWord$MH_; }

    static final FunctionDescriptor SetClassWord$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetClassWord$FUNC() { return SetClassWord$FUNC_; }

    static final MethodHandle SetClassWord$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetClassWord",
        "(Ljdk/incubator/foreign/MemoryAddress;IS)S",
        SetClassWord$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetClassWord$MH() { return SetClassWord$MH_; }

    static final FunctionDescriptor GetClassLongA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClassLongA$FUNC() { return GetClassLongA$FUNC_; }

    static final MethodHandle GetClassLongA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassLongA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetClassLongA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClassLongA$MH() { return GetClassLongA$MH_; }

    static final FunctionDescriptor GetClassLongW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClassLongW$FUNC() { return GetClassLongW$FUNC_; }

    static final MethodHandle GetClassLongW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassLongW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetClassLongW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClassLongW$MH() { return GetClassLongW$MH_; }

    static final FunctionDescriptor SetClassLongA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetClassLongA$FUNC() { return SetClassLongA$FUNC_; }

    static final MethodHandle SetClassLongA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetClassLongA",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetClassLongA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetClassLongA$MH() { return SetClassLongA$MH_; }

    static final FunctionDescriptor SetClassLongW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetClassLongW$FUNC() { return SetClassLongW$FUNC_; }

    static final MethodHandle SetClassLongW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetClassLongW",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetClassLongW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetClassLongW$MH() { return SetClassLongW$MH_; }

    static final FunctionDescriptor GetClassLongPtrA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClassLongPtrA$FUNC() { return GetClassLongPtrA$FUNC_; }

    static final MethodHandle GetClassLongPtrA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassLongPtrA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)J",
        GetClassLongPtrA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClassLongPtrA$MH() { return GetClassLongPtrA$MH_; }

    static final FunctionDescriptor GetClassLongPtrW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClassLongPtrW$FUNC() { return GetClassLongPtrW$FUNC_; }

    static final MethodHandle GetClassLongPtrW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassLongPtrW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)J",
        GetClassLongPtrW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClassLongPtrW$MH() { return GetClassLongPtrW$MH_; }

    static final FunctionDescriptor SetClassLongPtrA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetClassLongPtrA$FUNC() { return SetClassLongPtrA$FUNC_; }

    static final MethodHandle SetClassLongPtrA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetClassLongPtrA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)J",
        SetClassLongPtrA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetClassLongPtrA$MH() { return SetClassLongPtrA$MH_; }

    static final FunctionDescriptor SetClassLongPtrW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetClassLongPtrW$FUNC() { return SetClassLongPtrW$FUNC_; }

    static final MethodHandle SetClassLongPtrW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetClassLongPtrW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)J",
        SetClassLongPtrW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetClassLongPtrW$MH() { return SetClassLongPtrW$MH_; }

    static final FunctionDescriptor GetProcessDefaultLayout$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessDefaultLayout$FUNC() { return GetProcessDefaultLayout$FUNC_; }

    static final MethodHandle GetProcessDefaultLayout$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessDefaultLayout",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessDefaultLayout$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessDefaultLayout$MH() { return GetProcessDefaultLayout$MH_; }

    static final FunctionDescriptor SetProcessDefaultLayout$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessDefaultLayout$FUNC() { return SetProcessDefaultLayout$FUNC_; }

    static final MethodHandle SetProcessDefaultLayout$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessDefaultLayout",
        "(I)I",
        SetProcessDefaultLayout$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessDefaultLayout$MH() { return SetProcessDefaultLayout$MH_; }

    static final FunctionDescriptor GetDesktopWindow$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetDesktopWindow$FUNC() { return GetDesktopWindow$FUNC_; }

    static final MethodHandle GetDesktopWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDesktopWindow",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetDesktopWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDesktopWindow$MH() { return GetDesktopWindow$MH_; }

    static final FunctionDescriptor GetParent$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetParent$FUNC() { return GetParent$FUNC_; }

    static final MethodHandle GetParent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetParent",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetParent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetParent$MH() { return GetParent$MH_; }

    static final FunctionDescriptor SetParent$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetParent$FUNC() { return SetParent$FUNC_; }

    static final MethodHandle SetParent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetParent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetParent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetParent$MH() { return SetParent$MH_; }

    static final FunctionDescriptor EnumChildWindows$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumChildWindows$FUNC() { return EnumChildWindows$FUNC_; }

    static final MethodHandle EnumChildWindows$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumChildWindows",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumChildWindows$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumChildWindows$MH() { return EnumChildWindows$MH_; }

    static final FunctionDescriptor EnumChildWindows$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumChildWindows$lpEnumFunc$FUNC() { return EnumChildWindows$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor FindWindowA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindWindowA$FUNC() { return FindWindowA$FUNC_; }

    static final MethodHandle FindWindowA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindWindowA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindWindowA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindWindowA$MH() { return FindWindowA$MH_; }

    static final FunctionDescriptor FindWindowW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindWindowW$FUNC() { return FindWindowW$FUNC_; }

    static final MethodHandle FindWindowW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindWindowW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindWindowW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindWindowW$MH() { return FindWindowW$MH_; }

    static final FunctionDescriptor FindWindowExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindWindowExA$FUNC() { return FindWindowExA$FUNC_; }

    static final MethodHandle FindWindowExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindWindowExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindWindowExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindWindowExA$MH() { return FindWindowExA$MH_; }

    static final FunctionDescriptor FindWindowExW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindWindowExW$FUNC() { return FindWindowExW$FUNC_; }

    static final MethodHandle FindWindowExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindWindowExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindWindowExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindWindowExW$MH() { return FindWindowExW$MH_; }

    static final FunctionDescriptor GetShellWindow$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetShellWindow$FUNC() { return GetShellWindow$FUNC_; }

    static final MethodHandle GetShellWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetShellWindow",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetShellWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetShellWindow$MH() { return GetShellWindow$MH_; }

    static final FunctionDescriptor RegisterShellHookWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RegisterShellHookWindow$FUNC() { return RegisterShellHookWindow$FUNC_; }

    static final MethodHandle RegisterShellHookWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterShellHookWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RegisterShellHookWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RegisterShellHookWindow$MH() { return RegisterShellHookWindow$MH_; }

    static final FunctionDescriptor DeregisterShellHookWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeregisterShellHookWindow$FUNC() { return DeregisterShellHookWindow$FUNC_; }

    static final MethodHandle DeregisterShellHookWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeregisterShellHookWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeregisterShellHookWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeregisterShellHookWindow$MH() { return DeregisterShellHookWindow$MH_; }

    static final FunctionDescriptor EnumWindows$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumWindows$FUNC() { return EnumWindows$FUNC_; }

    static final MethodHandle EnumWindows$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumWindows",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumWindows$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumWindows$MH() { return EnumWindows$MH_; }

    static final FunctionDescriptor EnumWindows$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumWindows$lpEnumFunc$FUNC() { return EnumWindows$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumThreadWindows$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumThreadWindows$FUNC() { return EnumThreadWindows$FUNC_; }

    static final MethodHandle EnumThreadWindows$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumThreadWindows",
        "(ILjdk/incubator/foreign/MemoryAddress;J)I",
        EnumThreadWindows$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumThreadWindows$MH() { return EnumThreadWindows$MH_; }

    static final FunctionDescriptor EnumThreadWindows$lpfn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumThreadWindows$lpfn$FUNC() { return EnumThreadWindows$lpfn$FUNC_; }

    static final FunctionDescriptor GetClassNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClassNameA$FUNC() { return GetClassNameA$FUNC_; }

    static final MethodHandle GetClassNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetClassNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClassNameA$MH() { return GetClassNameA$MH_; }

    static final FunctionDescriptor GetClassNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClassNameW$FUNC() { return GetClassNameW$FUNC_; }

    static final MethodHandle GetClassNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetClassNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClassNameW$MH() { return GetClassNameW$MH_; }

    static final FunctionDescriptor GetTopWindow$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTopWindow$FUNC() { return GetTopWindow$FUNC_; }

    static final MethodHandle GetTopWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTopWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetTopWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTopWindow$MH() { return GetTopWindow$MH_; }

    static final FunctionDescriptor GetWindowThreadProcessId$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindowThreadProcessId$FUNC() { return GetWindowThreadProcessId$FUNC_; }

    static final MethodHandle GetWindowThreadProcessId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowThreadProcessId",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWindowThreadProcessId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindowThreadProcessId$MH() { return GetWindowThreadProcessId$MH_; }

    static final FunctionDescriptor IsGUIThread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsGUIThread$FUNC() { return IsGUIThread$FUNC_; }

    static final MethodHandle IsGUIThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsGUIThread",
        "(I)I",
        IsGUIThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsGUIThread$MH() { return IsGUIThread$MH_; }

    static final FunctionDescriptor GetLastActivePopup$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLastActivePopup$FUNC() { return GetLastActivePopup$FUNC_; }

    static final MethodHandle GetLastActivePopup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLastActivePopup",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetLastActivePopup$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLastActivePopup$MH() { return GetLastActivePopup$MH_; }

    static final FunctionDescriptor GetWindow$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindow$FUNC() { return GetWindow$FUNC_; }

    static final MethodHandle GetWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        GetWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindow$MH() { return GetWindow$MH_; }

    static final FunctionDescriptor SetWindowsHookA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowsHookA$FUNC() { return SetWindowsHookA$FUNC_; }

    static final MethodHandle SetWindowsHookA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowsHookA",
        "(ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetWindowsHookA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowsHookA$MH() { return SetWindowsHookA$MH_; }

    static final FunctionDescriptor SetWindowsHookA$pfnFilterProc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowsHookA$pfnFilterProc$FUNC() { return SetWindowsHookA$pfnFilterProc$FUNC_; }

    static final FunctionDescriptor SetWindowsHookW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowsHookW$FUNC() { return SetWindowsHookW$FUNC_; }

    static final MethodHandle SetWindowsHookW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowsHookW",
        "(ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetWindowsHookW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowsHookW$MH() { return SetWindowsHookW$MH_; }

    static final FunctionDescriptor SetWindowsHookW$pfnFilterProc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowsHookW$pfnFilterProc$FUNC() { return SetWindowsHookW$pfnFilterProc$FUNC_; }

    static final FunctionDescriptor UnhookWindowsHook$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnhookWindowsHook$FUNC() { return UnhookWindowsHook$FUNC_; }

    static final MethodHandle UnhookWindowsHook$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnhookWindowsHook",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        UnhookWindowsHook$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnhookWindowsHook$MH() { return UnhookWindowsHook$MH_; }

    static final FunctionDescriptor UnhookWindowsHook$pfnFilterProc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnhookWindowsHook$pfnFilterProc$FUNC() { return UnhookWindowsHook$pfnFilterProc$FUNC_; }

    static final FunctionDescriptor SetWindowsHookExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowsHookExA$FUNC() { return SetWindowsHookExA$FUNC_; }

    static final MethodHandle SetWindowsHookExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowsHookExA",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        SetWindowsHookExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowsHookExA$MH() { return SetWindowsHookExA$MH_; }

    static final FunctionDescriptor SetWindowsHookExA$lpfn$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowsHookExA$lpfn$FUNC() { return SetWindowsHookExA$lpfn$FUNC_; }

    static final FunctionDescriptor SetWindowsHookExW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowsHookExW$FUNC() { return SetWindowsHookExW$FUNC_; }

    static final MethodHandle SetWindowsHookExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowsHookExW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        SetWindowsHookExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetWindowsHookExW$MH() { return SetWindowsHookExW$MH_; }

    static final FunctionDescriptor SetWindowsHookExW$lpfn$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetWindowsHookExW$lpfn$FUNC() { return SetWindowsHookExW$lpfn$FUNC_; }

    static final FunctionDescriptor UnhookWindowsHookEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UnhookWindowsHookEx$FUNC() { return UnhookWindowsHookEx$FUNC_; }

    static final MethodHandle UnhookWindowsHookEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnhookWindowsHookEx",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnhookWindowsHookEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UnhookWindowsHookEx$MH() { return UnhookWindowsHookEx$MH_; }

    static final FunctionDescriptor CallNextHookEx$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CallNextHookEx$FUNC() { return CallNextHookEx$FUNC_; }

    static final MethodHandle CallNextHookEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CallNextHookEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        CallNextHookEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CallNextHookEx$MH() { return CallNextHookEx$MH_; }

    static final FunctionDescriptor CheckMenuRadioItem$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CheckMenuRadioItem$FUNC() { return CheckMenuRadioItem$FUNC_; }

    static final MethodHandle CheckMenuRadioItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckMenuRadioItem",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        CheckMenuRadioItem$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CheckMenuRadioItem$MH() { return CheckMenuRadioItem$MH_; }

    static final MemoryLayout MENUITEMTEMPLATEHEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("versionNumber"),
        C_SHORT.withName("offset")
    );
    public static jdk.incubator.foreign.MemoryLayout MENUITEMTEMPLATEHEADER$struct$LAYOUT() { return MENUITEMTEMPLATEHEADER$struct$LAYOUT_; }

    static final MemoryLayout MENUITEMTEMPLATEHEADER$versionNumber$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout MENUITEMTEMPLATEHEADER$versionNumber$LAYOUT() { return MENUITEMTEMPLATEHEADER$versionNumber$LAYOUT_; }

    static final VarHandle MENUITEMTEMPLATEHEADER$versionNumber$VH_ = MENUITEMTEMPLATEHEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("versionNumber"));
    public static java.lang.invoke.VarHandle MENUITEMTEMPLATEHEADER$versionNumber$VH() { return MENUITEMTEMPLATEHEADER$versionNumber$VH_; }

    static final MemoryLayout MENUITEMTEMPLATEHEADER$offset$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout MENUITEMTEMPLATEHEADER$offset$LAYOUT() { return MENUITEMTEMPLATEHEADER$offset$LAYOUT_; }

    static final VarHandle MENUITEMTEMPLATEHEADER$offset$VH_ = MENUITEMTEMPLATEHEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("offset"));
    public static java.lang.invoke.VarHandle MENUITEMTEMPLATEHEADER$offset$VH() { return MENUITEMTEMPLATEHEADER$offset$VH_; }

    static final MemoryLayout MENUITEMTEMPLATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("mtOption"),
        C_SHORT.withName("mtID"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("mtString")
    );
    public static jdk.incubator.foreign.MemoryLayout MENUITEMTEMPLATE$struct$LAYOUT() { return MENUITEMTEMPLATE$struct$LAYOUT_; }

    static final MemoryLayout MENUITEMTEMPLATE$mtOption$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout MENUITEMTEMPLATE$mtOption$LAYOUT() { return MENUITEMTEMPLATE$mtOption$LAYOUT_; }

    static final VarHandle MENUITEMTEMPLATE$mtOption$VH_ = MENUITEMTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("mtOption"));
    public static java.lang.invoke.VarHandle MENUITEMTEMPLATE$mtOption$VH() { return MENUITEMTEMPLATE$mtOption$VH_; }

    static final MemoryLayout MENUITEMTEMPLATE$mtID$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout MENUITEMTEMPLATE$mtID$LAYOUT() { return MENUITEMTEMPLATE$mtID$LAYOUT_; }

    static final VarHandle MENUITEMTEMPLATE$mtID$VH_ = MENUITEMTEMPLATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("mtID"));
    public static java.lang.invoke.VarHandle MENUITEMTEMPLATE$mtID$VH() { return MENUITEMTEMPLATE$mtID$VH_; }

    static final FunctionDescriptor LoadBitmapA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadBitmapA$FUNC() { return LoadBitmapA$FUNC_; }

    static final MethodHandle LoadBitmapA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadBitmapA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadBitmapA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadBitmapA$MH() { return LoadBitmapA$MH_; }

    static final FunctionDescriptor LoadBitmapW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadBitmapW$FUNC() { return LoadBitmapW$FUNC_; }

    static final MethodHandle LoadBitmapW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadBitmapW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadBitmapW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadBitmapW$MH() { return LoadBitmapW$MH_; }

    static final FunctionDescriptor LoadCursorA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadCursorA$FUNC() { return LoadCursorA$FUNC_; }

    static final MethodHandle LoadCursorA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadCursorA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadCursorA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadCursorA$MH() { return LoadCursorA$MH_; }

    static final FunctionDescriptor LoadCursorW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadCursorW$FUNC() { return LoadCursorW$FUNC_; }

    static final MethodHandle LoadCursorW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadCursorW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadCursorW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadCursorW$MH() { return LoadCursorW$MH_; }

    static final FunctionDescriptor LoadCursorFromFileA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadCursorFromFileA$FUNC() { return LoadCursorFromFileA$FUNC_; }

    static final MethodHandle LoadCursorFromFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadCursorFromFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadCursorFromFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadCursorFromFileA$MH() { return LoadCursorFromFileA$MH_; }

    static final FunctionDescriptor LoadCursorFromFileW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadCursorFromFileW$FUNC() { return LoadCursorFromFileW$FUNC_; }

    static final MethodHandle LoadCursorFromFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadCursorFromFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadCursorFromFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadCursorFromFileW$MH() { return LoadCursorFromFileW$MH_; }

    static final FunctionDescriptor CreateCursor$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateCursor$FUNC() { return CreateCursor$FUNC_; }

    static final MethodHandle CreateCursor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateCursor",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateCursor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateCursor$MH() { return CreateCursor$MH_; }

    static final FunctionDescriptor DestroyCursor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DestroyCursor$FUNC() { return DestroyCursor$FUNC_; }

    static final MethodHandle DestroyCursor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DestroyCursor",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DestroyCursor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DestroyCursor$MH() { return DestroyCursor$MH_; }

    static final FunctionDescriptor SetSystemCursor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSystemCursor$FUNC() { return SetSystemCursor$FUNC_; }

    static final MethodHandle SetSystemCursor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSystemCursor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetSystemCursor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSystemCursor$MH() { return SetSystemCursor$MH_; }

    static final MemoryLayout _ICONINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("fIcon"),
        C_INT.withName("xHotspot"),
        C_INT.withName("yHotspot"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hbmMask"),
        C_POINTER.withName("hbmColor")
    ).withName("_ICONINFO");
    public static jdk.incubator.foreign.MemoryLayout _ICONINFO$struct$LAYOUT() { return _ICONINFO$struct$LAYOUT_; }

    static final MemoryLayout _ICONINFO$fIcon$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFO$fIcon$LAYOUT() { return _ICONINFO$fIcon$LAYOUT_; }

    static final VarHandle _ICONINFO$fIcon$VH_ = _ICONINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fIcon"));
    public static java.lang.invoke.VarHandle _ICONINFO$fIcon$VH() { return _ICONINFO$fIcon$VH_; }

    static final MemoryLayout _ICONINFO$xHotspot$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFO$xHotspot$LAYOUT() { return _ICONINFO$xHotspot$LAYOUT_; }

    static final VarHandle _ICONINFO$xHotspot$VH_ = _ICONINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("xHotspot"));
    public static java.lang.invoke.VarHandle _ICONINFO$xHotspot$VH() { return _ICONINFO$xHotspot$VH_; }

    static final MemoryLayout _ICONINFO$yHotspot$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFO$yHotspot$LAYOUT() { return _ICONINFO$yHotspot$LAYOUT_; }

    static final VarHandle _ICONINFO$yHotspot$VH_ = _ICONINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("yHotspot"));
    public static java.lang.invoke.VarHandle _ICONINFO$yHotspot$VH() { return _ICONINFO$yHotspot$VH_; }

    static final MemoryLayout _ICONINFO$hbmMask$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFO$hbmMask$LAYOUT() { return _ICONINFO$hbmMask$LAYOUT_; }

    static final VarHandle _ICONINFO$hbmMask$VH_ = MemoryHandles.asAddressVarHandle(_ICONINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmMask")));
    public static java.lang.invoke.VarHandle _ICONINFO$hbmMask$VH() { return _ICONINFO$hbmMask$VH_; }

    static final MemoryLayout _ICONINFO$hbmColor$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFO$hbmColor$LAYOUT() { return _ICONINFO$hbmColor$LAYOUT_; }

    static final VarHandle _ICONINFO$hbmColor$VH_ = MemoryHandles.asAddressVarHandle(_ICONINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmColor")));
    public static java.lang.invoke.VarHandle _ICONINFO$hbmColor$VH() { return _ICONINFO$hbmColor$VH_; }

    static final FunctionDescriptor LoadIconA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadIconA$FUNC() { return LoadIconA$FUNC_; }

    static final MethodHandle LoadIconA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadIconA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadIconA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadIconA$MH() { return LoadIconA$MH_; }

    static final FunctionDescriptor LoadIconW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadIconW$FUNC() { return LoadIconW$FUNC_; }

    static final MethodHandle LoadIconW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadIconW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadIconW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadIconW$MH() { return LoadIconW$MH_; }

    static final FunctionDescriptor PrivateExtractIconsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PrivateExtractIconsA$FUNC() { return PrivateExtractIconsA$FUNC_; }

    static final MethodHandle PrivateExtractIconsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PrivateExtractIconsA",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        PrivateExtractIconsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PrivateExtractIconsA$MH() { return PrivateExtractIconsA$MH_; }

    static final FunctionDescriptor PrivateExtractIconsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PrivateExtractIconsW$FUNC() { return PrivateExtractIconsW$FUNC_; }

    static final MethodHandle PrivateExtractIconsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PrivateExtractIconsW",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        PrivateExtractIconsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PrivateExtractIconsW$MH() { return PrivateExtractIconsW$MH_; }

    static final FunctionDescriptor CreateIcon$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_BOOL,
        C_BOOL,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateIcon$FUNC() { return CreateIcon$FUNC_; }

    static final MethodHandle CreateIcon$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateIcon",
        "(Ljdk/incubator/foreign/MemoryAddress;IIBBLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateIcon$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateIcon$MH() { return CreateIcon$MH_; }

    static final FunctionDescriptor DestroyIcon$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DestroyIcon$FUNC() { return DestroyIcon$FUNC_; }

    static final MethodHandle DestroyIcon$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DestroyIcon",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DestroyIcon$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DestroyIcon$MH() { return DestroyIcon$MH_; }

    static final FunctionDescriptor LookupIconIdFromDirectory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupIconIdFromDirectory$FUNC() { return LookupIconIdFromDirectory$FUNC_; }

    static final MethodHandle LookupIconIdFromDirectory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupIconIdFromDirectory",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        LookupIconIdFromDirectory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupIconIdFromDirectory$MH() { return LookupIconIdFromDirectory$MH_; }

    static final FunctionDescriptor LookupIconIdFromDirectoryEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LookupIconIdFromDirectoryEx$FUNC() { return LookupIconIdFromDirectoryEx$FUNC_; }

    static final MethodHandle LookupIconIdFromDirectoryEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LookupIconIdFromDirectoryEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        LookupIconIdFromDirectoryEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LookupIconIdFromDirectoryEx$MH() { return LookupIconIdFromDirectoryEx$MH_; }

    static final FunctionDescriptor CreateIconFromResource$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateIconFromResource$FUNC() { return CreateIconFromResource$FUNC_; }

    static final MethodHandle CreateIconFromResource$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateIconFromResource",
        "(Ljdk/incubator/foreign/MemoryAddress;III)Ljdk/incubator/foreign/MemoryAddress;",
        CreateIconFromResource$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateIconFromResource$MH() { return CreateIconFromResource$MH_; }

    static final FunctionDescriptor CreateIconFromResourceEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateIconFromResourceEx$FUNC() { return CreateIconFromResourceEx$FUNC_; }

    static final MethodHandle CreateIconFromResourceEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateIconFromResourceEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIII)Ljdk/incubator/foreign/MemoryAddress;",
        CreateIconFromResourceEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateIconFromResourceEx$MH() { return CreateIconFromResourceEx$MH_; }

    static final MemoryLayout tagCURSORSHAPE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("xHotSpot"),
        C_INT.withName("yHotSpot"),
        C_INT.withName("cx"),
        C_INT.withName("cy"),
        C_INT.withName("cbWidth"),
        C_BOOL.withName("Planes"),
        C_BOOL.withName("BitsPixel"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("tagCURSORSHAPE");
    public static jdk.incubator.foreign.MemoryLayout tagCURSORSHAPE$struct$LAYOUT() { return tagCURSORSHAPE$struct$LAYOUT_; }

    static final MemoryLayout tagCURSORSHAPE$xHotSpot$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCURSORSHAPE$xHotSpot$LAYOUT() { return tagCURSORSHAPE$xHotSpot$LAYOUT_; }

    static final VarHandle tagCURSORSHAPE$xHotSpot$VH_ = tagCURSORSHAPE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("xHotSpot"));
    public static java.lang.invoke.VarHandle tagCURSORSHAPE$xHotSpot$VH() { return tagCURSORSHAPE$xHotSpot$VH_; }

    static final MemoryLayout tagCURSORSHAPE$yHotSpot$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCURSORSHAPE$yHotSpot$LAYOUT() { return tagCURSORSHAPE$yHotSpot$LAYOUT_; }

    static final VarHandle tagCURSORSHAPE$yHotSpot$VH_ = tagCURSORSHAPE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("yHotSpot"));
    public static java.lang.invoke.VarHandle tagCURSORSHAPE$yHotSpot$VH() { return tagCURSORSHAPE$yHotSpot$VH_; }

    static final MemoryLayout tagCURSORSHAPE$cx$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCURSORSHAPE$cx$LAYOUT() { return tagCURSORSHAPE$cx$LAYOUT_; }

    static final VarHandle tagCURSORSHAPE$cx$VH_ = tagCURSORSHAPE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cx"));
    public static java.lang.invoke.VarHandle tagCURSORSHAPE$cx$VH() { return tagCURSORSHAPE$cx$VH_; }

    static final MemoryLayout tagCURSORSHAPE$cy$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCURSORSHAPE$cy$LAYOUT() { return tagCURSORSHAPE$cy$LAYOUT_; }

    static final VarHandle tagCURSORSHAPE$cy$VH_ = tagCURSORSHAPE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cy"));
    public static java.lang.invoke.VarHandle tagCURSORSHAPE$cy$VH() { return tagCURSORSHAPE$cy$VH_; }

    static final MemoryLayout tagCURSORSHAPE$cbWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCURSORSHAPE$cbWidth$LAYOUT() { return tagCURSORSHAPE$cbWidth$LAYOUT_; }

    static final VarHandle tagCURSORSHAPE$cbWidth$VH_ = tagCURSORSHAPE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbWidth"));
    public static java.lang.invoke.VarHandle tagCURSORSHAPE$cbWidth$VH() { return tagCURSORSHAPE$cbWidth$VH_; }

    static final MemoryLayout tagCURSORSHAPE$Planes$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagCURSORSHAPE$Planes$LAYOUT() { return tagCURSORSHAPE$Planes$LAYOUT_; }

    static final VarHandle tagCURSORSHAPE$Planes$VH_ = tagCURSORSHAPE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Planes"));
    public static java.lang.invoke.VarHandle tagCURSORSHAPE$Planes$VH() { return tagCURSORSHAPE$Planes$VH_; }

    static final MemoryLayout tagCURSORSHAPE$BitsPixel$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagCURSORSHAPE$BitsPixel$LAYOUT() { return tagCURSORSHAPE$BitsPixel$LAYOUT_; }

    static final VarHandle tagCURSORSHAPE$BitsPixel$VH_ = tagCURSORSHAPE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BitsPixel"));
    public static java.lang.invoke.VarHandle tagCURSORSHAPE$BitsPixel$VH() { return tagCURSORSHAPE$BitsPixel$VH_; }

    static final FunctionDescriptor LoadImageA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadImageA$FUNC() { return LoadImageA$FUNC_; }

    static final MethodHandle LoadImageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadImageA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIII)Ljdk/incubator/foreign/MemoryAddress;",
        LoadImageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadImageA$MH() { return LoadImageA$MH_; }

    static final FunctionDescriptor LoadImageW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadImageW$FUNC() { return LoadImageW$FUNC_; }

    static final MethodHandle LoadImageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadImageW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIII)Ljdk/incubator/foreign/MemoryAddress;",
        LoadImageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadImageW$MH() { return LoadImageW$MH_; }

    static final FunctionDescriptor CopyImage$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyImage$FUNC() { return CopyImage$FUNC_; }

    static final MethodHandle CopyImage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyImage",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)Ljdk/incubator/foreign/MemoryAddress;",
        CopyImage$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyImage$MH() { return CopyImage$MH_; }

    static final FunctionDescriptor DrawIconEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DrawIconEx$FUNC() { return DrawIconEx$FUNC_; }

    static final MethodHandle DrawIconEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DrawIconEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;I)I",
        DrawIconEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DrawIconEx$MH() { return DrawIconEx$MH_; }

    static final FunctionDescriptor CreateIconIndirect$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateIconIndirect$FUNC() { return CreateIconIndirect$FUNC_; }

    static final MethodHandle CreateIconIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateIconIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateIconIndirect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateIconIndirect$MH() { return CreateIconIndirect$MH_; }

    static final FunctionDescriptor CopyIcon$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyIcon$FUNC() { return CopyIcon$FUNC_; }

    static final MethodHandle CopyIcon$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyIcon",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CopyIcon$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyIcon$MH() { return CopyIcon$MH_; }

    static final FunctionDescriptor GetIconInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetIconInfo$FUNC() { return GetIconInfo$FUNC_; }

    static final MethodHandle GetIconInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetIconInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetIconInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetIconInfo$MH() { return GetIconInfo$MH_; }

    static final MemoryLayout _ICONINFOEXA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("fIcon"),
        C_INT.withName("xHotspot"),
        C_INT.withName("yHotspot"),
        C_POINTER.withName("hbmMask"),
        C_POINTER.withName("hbmColor"),
        C_SHORT.withName("wResID"),
        MemoryLayout.ofSequence(260, C_BOOL).withName("szModName"),
        MemoryLayout.ofSequence(260, C_BOOL).withName("szResName"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_ICONINFOEXA");
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXA$struct$LAYOUT() { return _ICONINFOEXA$struct$LAYOUT_; }

    static final MemoryLayout _ICONINFOEXA$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXA$cbSize$LAYOUT() { return _ICONINFOEXA$cbSize$LAYOUT_; }

    static final VarHandle _ICONINFOEXA$cbSize$VH_ = _ICONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle _ICONINFOEXA$cbSize$VH() { return _ICONINFOEXA$cbSize$VH_; }

    static final MemoryLayout _ICONINFOEXA$fIcon$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXA$fIcon$LAYOUT() { return _ICONINFOEXA$fIcon$LAYOUT_; }

    static final VarHandle _ICONINFOEXA$fIcon$VH_ = _ICONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fIcon"));
    public static java.lang.invoke.VarHandle _ICONINFOEXA$fIcon$VH() { return _ICONINFOEXA$fIcon$VH_; }

    static final MemoryLayout _ICONINFOEXA$xHotspot$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXA$xHotspot$LAYOUT() { return _ICONINFOEXA$xHotspot$LAYOUT_; }

    static final VarHandle _ICONINFOEXA$xHotspot$VH_ = _ICONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("xHotspot"));
    public static java.lang.invoke.VarHandle _ICONINFOEXA$xHotspot$VH() { return _ICONINFOEXA$xHotspot$VH_; }

    static final MemoryLayout _ICONINFOEXA$yHotspot$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXA$yHotspot$LAYOUT() { return _ICONINFOEXA$yHotspot$LAYOUT_; }

    static final VarHandle _ICONINFOEXA$yHotspot$VH_ = _ICONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("yHotspot"));
    public static java.lang.invoke.VarHandle _ICONINFOEXA$yHotspot$VH() { return _ICONINFOEXA$yHotspot$VH_; }

    static final MemoryLayout _ICONINFOEXA$hbmMask$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXA$hbmMask$LAYOUT() { return _ICONINFOEXA$hbmMask$LAYOUT_; }

    static final VarHandle _ICONINFOEXA$hbmMask$VH_ = MemoryHandles.asAddressVarHandle(_ICONINFOEXA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmMask")));
    public static java.lang.invoke.VarHandle _ICONINFOEXA$hbmMask$VH() { return _ICONINFOEXA$hbmMask$VH_; }

    static final MemoryLayout _ICONINFOEXA$hbmColor$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXA$hbmColor$LAYOUT() { return _ICONINFOEXA$hbmColor$LAYOUT_; }

    static final VarHandle _ICONINFOEXA$hbmColor$VH_ = MemoryHandles.asAddressVarHandle(_ICONINFOEXA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmColor")));
    public static java.lang.invoke.VarHandle _ICONINFOEXA$hbmColor$VH() { return _ICONINFOEXA$hbmColor$VH_; }

    static final MemoryLayout _ICONINFOEXA$wResID$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXA$wResID$LAYOUT() { return _ICONINFOEXA$wResID$LAYOUT_; }

    static final VarHandle _ICONINFOEXA$wResID$VH_ = _ICONINFOEXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wResID"));
    public static java.lang.invoke.VarHandle _ICONINFOEXA$wResID$VH() { return _ICONINFOEXA$wResID$VH_; }

    static final MemoryLayout _ICONINFOEXW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("fIcon"),
        C_INT.withName("xHotspot"),
        C_INT.withName("yHotspot"),
        C_POINTER.withName("hbmMask"),
        C_POINTER.withName("hbmColor"),
        C_SHORT.withName("wResID"),
        MemoryLayout.ofSequence(260, C_SHORT).withName("szModName"),
        MemoryLayout.ofSequence(260, C_SHORT).withName("szResName"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_ICONINFOEXW");
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXW$struct$LAYOUT() { return _ICONINFOEXW$struct$LAYOUT_; }

    static final MemoryLayout _ICONINFOEXW$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXW$cbSize$LAYOUT() { return _ICONINFOEXW$cbSize$LAYOUT_; }

    static final VarHandle _ICONINFOEXW$cbSize$VH_ = _ICONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle _ICONINFOEXW$cbSize$VH() { return _ICONINFOEXW$cbSize$VH_; }

    static final MemoryLayout _ICONINFOEXW$fIcon$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXW$fIcon$LAYOUT() { return _ICONINFOEXW$fIcon$LAYOUT_; }

    static final VarHandle _ICONINFOEXW$fIcon$VH_ = _ICONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fIcon"));
    public static java.lang.invoke.VarHandle _ICONINFOEXW$fIcon$VH() { return _ICONINFOEXW$fIcon$VH_; }

    static final MemoryLayout _ICONINFOEXW$xHotspot$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXW$xHotspot$LAYOUT() { return _ICONINFOEXW$xHotspot$LAYOUT_; }

    static final VarHandle _ICONINFOEXW$xHotspot$VH_ = _ICONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("xHotspot"));
    public static java.lang.invoke.VarHandle _ICONINFOEXW$xHotspot$VH() { return _ICONINFOEXW$xHotspot$VH_; }

    static final MemoryLayout _ICONINFOEXW$yHotspot$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXW$yHotspot$LAYOUT() { return _ICONINFOEXW$yHotspot$LAYOUT_; }

    static final VarHandle _ICONINFOEXW$yHotspot$VH_ = _ICONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("yHotspot"));
    public static java.lang.invoke.VarHandle _ICONINFOEXW$yHotspot$VH() { return _ICONINFOEXW$yHotspot$VH_; }

    static final MemoryLayout _ICONINFOEXW$hbmMask$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXW$hbmMask$LAYOUT() { return _ICONINFOEXW$hbmMask$LAYOUT_; }

    static final VarHandle _ICONINFOEXW$hbmMask$VH_ = MemoryHandles.asAddressVarHandle(_ICONINFOEXW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmMask")));
    public static java.lang.invoke.VarHandle _ICONINFOEXW$hbmMask$VH() { return _ICONINFOEXW$hbmMask$VH_; }

    static final MemoryLayout _ICONINFOEXW$hbmColor$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXW$hbmColor$LAYOUT() { return _ICONINFOEXW$hbmColor$LAYOUT_; }

    static final VarHandle _ICONINFOEXW$hbmColor$VH_ = MemoryHandles.asAddressVarHandle(_ICONINFOEXW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmColor")));
    public static java.lang.invoke.VarHandle _ICONINFOEXW$hbmColor$VH() { return _ICONINFOEXW$hbmColor$VH_; }

    static final MemoryLayout _ICONINFOEXW$wResID$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _ICONINFOEXW$wResID$LAYOUT() { return _ICONINFOEXW$wResID$LAYOUT_; }

    static final VarHandle _ICONINFOEXW$wResID$VH_ = _ICONINFOEXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wResID"));
    public static java.lang.invoke.VarHandle _ICONINFOEXW$wResID$VH() { return _ICONINFOEXW$wResID$VH_; }

    static final FunctionDescriptor GetIconInfoExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetIconInfoExA$FUNC() { return GetIconInfoExA$FUNC_; }

    static final MethodHandle GetIconInfoExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetIconInfoExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetIconInfoExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetIconInfoExA$MH() { return GetIconInfoExA$MH_; }

    static final FunctionDescriptor GetIconInfoExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetIconInfoExW$FUNC() { return GetIconInfoExW$FUNC_; }

    static final MethodHandle GetIconInfoExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetIconInfoExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetIconInfoExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetIconInfoExW$MH() { return GetIconInfoExW$MH_; }

    public static int EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT() { return (int)0L; }

    public static int EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS() { return (int)1L; }

    static final FunctionDescriptor IsDialogMessageA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsDialogMessageA$FUNC() { return IsDialogMessageA$FUNC_; }

    static final MethodHandle IsDialogMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsDialogMessageA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IsDialogMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsDialogMessageA$MH() { return IsDialogMessageA$MH_; }

    static final FunctionDescriptor IsDialogMessageW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsDialogMessageW$FUNC() { return IsDialogMessageW$FUNC_; }

    static final MethodHandle IsDialogMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsDialogMessageW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IsDialogMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsDialogMessageW$MH() { return IsDialogMessageW$MH_; }

    static final FunctionDescriptor MapDialogRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapDialogRect$FUNC() { return MapDialogRect$FUNC_; }

    static final MethodHandle MapDialogRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapDialogRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        MapDialogRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapDialogRect$MH() { return MapDialogRect$MH_; }

    static final FunctionDescriptor DlgDirListA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DlgDirListA$FUNC() { return DlgDirListA$FUNC_; }

    static final MethodHandle DlgDirListA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DlgDirListA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        DlgDirListA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DlgDirListA$MH() { return DlgDirListA$MH_; }

    static final FunctionDescriptor DlgDirListW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DlgDirListW$FUNC() { return DlgDirListW$FUNC_; }

    static final MethodHandle DlgDirListW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DlgDirListW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        DlgDirListW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DlgDirListW$MH() { return DlgDirListW$MH_; }

    static final FunctionDescriptor DlgDirSelectExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DlgDirSelectExA$FUNC() { return DlgDirSelectExA$FUNC_; }

    static final MethodHandle DlgDirSelectExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DlgDirSelectExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        DlgDirSelectExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DlgDirSelectExA$MH() { return DlgDirSelectExA$MH_; }

    static final FunctionDescriptor DlgDirSelectExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DlgDirSelectExW$FUNC() { return DlgDirSelectExW$FUNC_; }

    static final MethodHandle DlgDirSelectExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DlgDirSelectExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        DlgDirSelectExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DlgDirSelectExW$MH() { return DlgDirSelectExW$MH_; }

    static final FunctionDescriptor DlgDirListComboBoxA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DlgDirListComboBoxA$FUNC() { return DlgDirListComboBoxA$FUNC_; }

    static final MethodHandle DlgDirListComboBoxA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DlgDirListComboBoxA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        DlgDirListComboBoxA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DlgDirListComboBoxA$MH() { return DlgDirListComboBoxA$MH_; }

    static final FunctionDescriptor DlgDirListComboBoxW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DlgDirListComboBoxW$FUNC() { return DlgDirListComboBoxW$FUNC_; }

    static final MethodHandle DlgDirListComboBoxW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DlgDirListComboBoxW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        DlgDirListComboBoxW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DlgDirListComboBoxW$MH() { return DlgDirListComboBoxW$MH_; }

    static final FunctionDescriptor DlgDirSelectComboBoxExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DlgDirSelectComboBoxExA$FUNC() { return DlgDirSelectComboBoxExA$FUNC_; }

    static final MethodHandle DlgDirSelectComboBoxExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DlgDirSelectComboBoxExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        DlgDirSelectComboBoxExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DlgDirSelectComboBoxExA$MH() { return DlgDirSelectComboBoxExA$MH_; }

    static final FunctionDescriptor DlgDirSelectComboBoxExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DlgDirSelectComboBoxExW$FUNC() { return DlgDirSelectComboBoxExW$FUNC_; }

    static final MethodHandle DlgDirSelectComboBoxExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DlgDirSelectComboBoxExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        DlgDirSelectComboBoxExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DlgDirSelectComboBoxExW$MH() { return DlgDirSelectComboBoxExW$MH_; }

    static final MemoryLayout tagSCROLLINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("fMask"),
        C_INT.withName("nMin"),
        C_INT.withName("nMax"),
        C_INT.withName("nPage"),
        C_INT.withName("nPos"),
        C_INT.withName("nTrackPos")
    ).withName("tagSCROLLINFO");
    public static jdk.incubator.foreign.MemoryLayout tagSCROLLINFO$struct$LAYOUT() { return tagSCROLLINFO$struct$LAYOUT_; }

    static final MemoryLayout tagSCROLLINFO$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSCROLLINFO$cbSize$LAYOUT() { return tagSCROLLINFO$cbSize$LAYOUT_; }

    static final VarHandle tagSCROLLINFO$cbSize$VH_ = tagSCROLLINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagSCROLLINFO$cbSize$VH() { return tagSCROLLINFO$cbSize$VH_; }

    static final MemoryLayout tagSCROLLINFO$fMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSCROLLINFO$fMask$LAYOUT() { return tagSCROLLINFO$fMask$LAYOUT_; }

    static final VarHandle tagSCROLLINFO$fMask$VH_ = tagSCROLLINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fMask"));
    public static java.lang.invoke.VarHandle tagSCROLLINFO$fMask$VH() { return tagSCROLLINFO$fMask$VH_; }

    static final MemoryLayout tagSCROLLINFO$nMin$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSCROLLINFO$nMin$LAYOUT() { return tagSCROLLINFO$nMin$LAYOUT_; }

    static final VarHandle tagSCROLLINFO$nMin$VH_ = tagSCROLLINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMin"));
    public static java.lang.invoke.VarHandle tagSCROLLINFO$nMin$VH() { return tagSCROLLINFO$nMin$VH_; }

    static final MemoryLayout tagSCROLLINFO$nMax$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSCROLLINFO$nMax$LAYOUT() { return tagSCROLLINFO$nMax$LAYOUT_; }

    static final VarHandle tagSCROLLINFO$nMax$VH_ = tagSCROLLINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMax"));
    public static java.lang.invoke.VarHandle tagSCROLLINFO$nMax$VH() { return tagSCROLLINFO$nMax$VH_; }

    static final MemoryLayout tagSCROLLINFO$nPage$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSCROLLINFO$nPage$LAYOUT() { return tagSCROLLINFO$nPage$LAYOUT_; }

    static final VarHandle tagSCROLLINFO$nPage$VH_ = tagSCROLLINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nPage"));
    public static java.lang.invoke.VarHandle tagSCROLLINFO$nPage$VH() { return tagSCROLLINFO$nPage$VH_; }

    static final MemoryLayout tagSCROLLINFO$nPos$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSCROLLINFO$nPos$LAYOUT() { return tagSCROLLINFO$nPos$LAYOUT_; }

    static final VarHandle tagSCROLLINFO$nPos$VH_ = tagSCROLLINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nPos"));
    public static java.lang.invoke.VarHandle tagSCROLLINFO$nPos$VH() { return tagSCROLLINFO$nPos$VH_; }

    static final MemoryLayout tagSCROLLINFO$nTrackPos$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSCROLLINFO$nTrackPos$LAYOUT() { return tagSCROLLINFO$nTrackPos$LAYOUT_; }

    static final VarHandle tagSCROLLINFO$nTrackPos$VH_ = tagSCROLLINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nTrackPos"));
    public static java.lang.invoke.VarHandle tagSCROLLINFO$nTrackPos$VH() { return tagSCROLLINFO$nTrackPos$VH_; }

    static final FunctionDescriptor SetScrollInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetScrollInfo$FUNC() { return SetScrollInfo$FUNC_; }

    static final MethodHandle SetScrollInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetScrollInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetScrollInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetScrollInfo$MH() { return SetScrollInfo$MH_; }

    static final FunctionDescriptor GetScrollInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetScrollInfo$FUNC() { return GetScrollInfo$FUNC_; }

    static final MethodHandle GetScrollInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetScrollInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetScrollInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetScrollInfo$MH() { return GetScrollInfo$MH_; }

    static final MemoryLayout tagMDICREATESTRUCTA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("szClass"),
        C_POINTER.withName("szTitle"),
        C_POINTER.withName("hOwner"),
        C_INT.withName("x"),
        C_INT.withName("y"),
        C_INT.withName("cx"),
        C_INT.withName("cy"),
        C_INT.withName("style"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("lParam")
    ).withName("tagMDICREATESTRUCTA");
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTA$struct$LAYOUT() { return tagMDICREATESTRUCTA$struct$LAYOUT_; }

    static final MemoryLayout tagMDICREATESTRUCTA$szClass$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTA$szClass$LAYOUT() { return tagMDICREATESTRUCTA$szClass$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTA$szClass$VH_ = MemoryHandles.asAddressVarHandle(tagMDICREATESTRUCTA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("szClass")));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTA$szClass$VH() { return tagMDICREATESTRUCTA$szClass$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTA$szTitle$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTA$szTitle$LAYOUT() { return tagMDICREATESTRUCTA$szTitle$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTA$szTitle$VH_ = MemoryHandles.asAddressVarHandle(tagMDICREATESTRUCTA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("szTitle")));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTA$szTitle$VH() { return tagMDICREATESTRUCTA$szTitle$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTA$hOwner$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTA$hOwner$LAYOUT() { return tagMDICREATESTRUCTA$hOwner$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTA$hOwner$VH_ = MemoryHandles.asAddressVarHandle(tagMDICREATESTRUCTA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hOwner")));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTA$hOwner$VH() { return tagMDICREATESTRUCTA$hOwner$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTA$x$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTA$x$LAYOUT() { return tagMDICREATESTRUCTA$x$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTA$x$VH_ = tagMDICREATESTRUCTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTA$x$VH() { return tagMDICREATESTRUCTA$x$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTA$y$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTA$y$LAYOUT() { return tagMDICREATESTRUCTA$y$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTA$y$VH_ = tagMDICREATESTRUCTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTA$y$VH() { return tagMDICREATESTRUCTA$y$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTA$cx$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTA$cx$LAYOUT() { return tagMDICREATESTRUCTA$cx$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTA$cx$VH_ = tagMDICREATESTRUCTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cx"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTA$cx$VH() { return tagMDICREATESTRUCTA$cx$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTA$cy$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTA$cy$LAYOUT() { return tagMDICREATESTRUCTA$cy$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTA$cy$VH_ = tagMDICREATESTRUCTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cy"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTA$cy$VH() { return tagMDICREATESTRUCTA$cy$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTA$style$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTA$style$LAYOUT() { return tagMDICREATESTRUCTA$style$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTA$style$VH_ = tagMDICREATESTRUCTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("style"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTA$style$VH() { return tagMDICREATESTRUCTA$style$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTA$lParam$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTA$lParam$LAYOUT() { return tagMDICREATESTRUCTA$lParam$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTA$lParam$VH_ = tagMDICREATESTRUCTA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lParam"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTA$lParam$VH() { return tagMDICREATESTRUCTA$lParam$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("szClass"),
        C_POINTER.withName("szTitle"),
        C_POINTER.withName("hOwner"),
        C_INT.withName("x"),
        C_INT.withName("y"),
        C_INT.withName("cx"),
        C_INT.withName("cy"),
        C_INT.withName("style"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("lParam")
    ).withName("tagMDICREATESTRUCTW");
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTW$struct$LAYOUT() { return tagMDICREATESTRUCTW$struct$LAYOUT_; }

    static final MemoryLayout tagMDICREATESTRUCTW$szClass$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTW$szClass$LAYOUT() { return tagMDICREATESTRUCTW$szClass$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTW$szClass$VH_ = MemoryHandles.asAddressVarHandle(tagMDICREATESTRUCTW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("szClass")));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTW$szClass$VH() { return tagMDICREATESTRUCTW$szClass$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTW$szTitle$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTW$szTitle$LAYOUT() { return tagMDICREATESTRUCTW$szTitle$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTW$szTitle$VH_ = MemoryHandles.asAddressVarHandle(tagMDICREATESTRUCTW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("szTitle")));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTW$szTitle$VH() { return tagMDICREATESTRUCTW$szTitle$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTW$hOwner$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTW$hOwner$LAYOUT() { return tagMDICREATESTRUCTW$hOwner$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTW$hOwner$VH_ = MemoryHandles.asAddressVarHandle(tagMDICREATESTRUCTW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hOwner")));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTW$hOwner$VH() { return tagMDICREATESTRUCTW$hOwner$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTW$x$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTW$x$LAYOUT() { return tagMDICREATESTRUCTW$x$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTW$x$VH_ = tagMDICREATESTRUCTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTW$x$VH() { return tagMDICREATESTRUCTW$x$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTW$y$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTW$y$LAYOUT() { return tagMDICREATESTRUCTW$y$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTW$y$VH_ = tagMDICREATESTRUCTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTW$y$VH() { return tagMDICREATESTRUCTW$y$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTW$cx$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTW$cx$LAYOUT() { return tagMDICREATESTRUCTW$cx$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTW$cx$VH_ = tagMDICREATESTRUCTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cx"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTW$cx$VH() { return tagMDICREATESTRUCTW$cx$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTW$cy$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTW$cy$LAYOUT() { return tagMDICREATESTRUCTW$cy$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTW$cy$VH_ = tagMDICREATESTRUCTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cy"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTW$cy$VH() { return tagMDICREATESTRUCTW$cy$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTW$style$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTW$style$LAYOUT() { return tagMDICREATESTRUCTW$style$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTW$style$VH_ = tagMDICREATESTRUCTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("style"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTW$style$VH() { return tagMDICREATESTRUCTW$style$VH_; }

    static final MemoryLayout tagMDICREATESTRUCTW$lParam$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout tagMDICREATESTRUCTW$lParam$LAYOUT() { return tagMDICREATESTRUCTW$lParam$LAYOUT_; }

    static final VarHandle tagMDICREATESTRUCTW$lParam$VH_ = tagMDICREATESTRUCTW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lParam"));
    public static java.lang.invoke.VarHandle tagMDICREATESTRUCTW$lParam$VH() { return tagMDICREATESTRUCTW$lParam$VH_; }

    static final MemoryLayout tagCLIENTCREATESTRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("hWindowMenu"),
        C_INT.withName("idFirstChild"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagCLIENTCREATESTRUCT");
    public static jdk.incubator.foreign.MemoryLayout tagCLIENTCREATESTRUCT$struct$LAYOUT() { return tagCLIENTCREATESTRUCT$struct$LAYOUT_; }

    static final MemoryLayout tagCLIENTCREATESTRUCT$hWindowMenu$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagCLIENTCREATESTRUCT$hWindowMenu$LAYOUT() { return tagCLIENTCREATESTRUCT$hWindowMenu$LAYOUT_; }

    static final VarHandle tagCLIENTCREATESTRUCT$hWindowMenu$VH_ = MemoryHandles.asAddressVarHandle(tagCLIENTCREATESTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hWindowMenu")));
    public static java.lang.invoke.VarHandle tagCLIENTCREATESTRUCT$hWindowMenu$VH() { return tagCLIENTCREATESTRUCT$hWindowMenu$VH_; }

    static final MemoryLayout tagCLIENTCREATESTRUCT$idFirstChild$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagCLIENTCREATESTRUCT$idFirstChild$LAYOUT() { return tagCLIENTCREATESTRUCT$idFirstChild$LAYOUT_; }

    static final VarHandle tagCLIENTCREATESTRUCT$idFirstChild$VH_ = tagCLIENTCREATESTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("idFirstChild"));
    public static java.lang.invoke.VarHandle tagCLIENTCREATESTRUCT$idFirstChild$VH() { return tagCLIENTCREATESTRUCT$idFirstChild$VH_; }

    static final FunctionDescriptor DefFrameProcA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DefFrameProcA$FUNC() { return DefFrameProcA$FUNC_; }

    static final MethodHandle DefFrameProcA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DefFrameProcA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        DefFrameProcA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DefFrameProcA$MH() { return DefFrameProcA$MH_; }

    static final FunctionDescriptor DefFrameProcW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DefFrameProcW$FUNC() { return DefFrameProcW$FUNC_; }

    static final MethodHandle DefFrameProcW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DefFrameProcW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        DefFrameProcW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DefFrameProcW$MH() { return DefFrameProcW$MH_; }

    static final FunctionDescriptor DefMDIChildProcA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DefMDIChildProcA$FUNC() { return DefMDIChildProcA$FUNC_; }

    static final MethodHandle DefMDIChildProcA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DefMDIChildProcA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        DefMDIChildProcA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DefMDIChildProcA$MH() { return DefMDIChildProcA$MH_; }

    static final FunctionDescriptor DefMDIChildProcW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor DefMDIChildProcW$FUNC() { return DefMDIChildProcW$FUNC_; }

    static final MethodHandle DefMDIChildProcW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DefMDIChildProcW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)J",
        DefMDIChildProcW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DefMDIChildProcW$MH() { return DefMDIChildProcW$MH_; }

    static final FunctionDescriptor TranslateMDISysAccel$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TranslateMDISysAccel$FUNC() { return TranslateMDISysAccel$FUNC_; }

    static final MethodHandle TranslateMDISysAccel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TranslateMDISysAccel",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        TranslateMDISysAccel$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TranslateMDISysAccel$MH() { return TranslateMDISysAccel$MH_; }

    static final FunctionDescriptor ArrangeIconicWindows$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ArrangeIconicWindows$FUNC() { return ArrangeIconicWindows$FUNC_; }

    static final MethodHandle ArrangeIconicWindows$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ArrangeIconicWindows",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ArrangeIconicWindows$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ArrangeIconicWindows$MH() { return ArrangeIconicWindows$MH_; }

    static final FunctionDescriptor CreateMDIWindowA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateMDIWindowA$FUNC() { return CreateMDIWindowA$FUNC_; }

    static final MethodHandle CreateMDIWindowA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMDIWindowA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        CreateMDIWindowA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateMDIWindowA$MH() { return CreateMDIWindowA$MH_; }

    static final FunctionDescriptor CreateMDIWindowW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateMDIWindowW$FUNC() { return CreateMDIWindowW$FUNC_; }

    static final MethodHandle CreateMDIWindowW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMDIWindowW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        CreateMDIWindowW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateMDIWindowW$MH() { return CreateMDIWindowW$MH_; }

    static final FunctionDescriptor TileWindows$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor TileWindows$FUNC() { return TileWindows$FUNC_; }

    static final MethodHandle TileWindows$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TileWindows",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)S",
        TileWindows$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TileWindows$MH() { return TileWindows$MH_; }

    static final FunctionDescriptor CascadeWindows$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CascadeWindows$FUNC() { return CascadeWindows$FUNC_; }

    static final MethodHandle CascadeWindows$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CascadeWindows",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)S",
        CascadeWindows$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CascadeWindows$MH() { return CascadeWindows$MH_; }

    static final MemoryLayout tagMULTIKEYHELPA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("mkSize"),
        C_BOOL.withName("mkKeylist"),
        MemoryLayout.ofSequence(1, C_BOOL).withName("szKeyphrase"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("tagMULTIKEYHELPA");
    public static jdk.incubator.foreign.MemoryLayout tagMULTIKEYHELPA$struct$LAYOUT() { return tagMULTIKEYHELPA$struct$LAYOUT_; }

    static final MemoryLayout tagMULTIKEYHELPA$mkSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMULTIKEYHELPA$mkSize$LAYOUT() { return tagMULTIKEYHELPA$mkSize$LAYOUT_; }

    static final VarHandle tagMULTIKEYHELPA$mkSize$VH_ = tagMULTIKEYHELPA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mkSize"));
    public static java.lang.invoke.VarHandle tagMULTIKEYHELPA$mkSize$VH() { return tagMULTIKEYHELPA$mkSize$VH_; }

    static final MemoryLayout tagMULTIKEYHELPA$mkKeylist$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagMULTIKEYHELPA$mkKeylist$LAYOUT() { return tagMULTIKEYHELPA$mkKeylist$LAYOUT_; }

    static final VarHandle tagMULTIKEYHELPA$mkKeylist$VH_ = tagMULTIKEYHELPA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("mkKeylist"));
    public static java.lang.invoke.VarHandle tagMULTIKEYHELPA$mkKeylist$VH() { return tagMULTIKEYHELPA$mkKeylist$VH_; }

    static final MemoryLayout tagMULTIKEYHELPW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("mkSize"),
        C_SHORT.withName("mkKeylist"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("szKeyphrase")
    ).withName("tagMULTIKEYHELPW");
    public static jdk.incubator.foreign.MemoryLayout tagMULTIKEYHELPW$struct$LAYOUT() { return tagMULTIKEYHELPW$struct$LAYOUT_; }

    static final MemoryLayout tagMULTIKEYHELPW$mkSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMULTIKEYHELPW$mkSize$LAYOUT() { return tagMULTIKEYHELPW$mkSize$LAYOUT_; }

    static final VarHandle tagMULTIKEYHELPW$mkSize$VH_ = tagMULTIKEYHELPW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mkSize"));
    public static java.lang.invoke.VarHandle tagMULTIKEYHELPW$mkSize$VH() { return tagMULTIKEYHELPW$mkSize$VH_; }

    static final MemoryLayout tagMULTIKEYHELPW$mkKeylist$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagMULTIKEYHELPW$mkKeylist$LAYOUT() { return tagMULTIKEYHELPW$mkKeylist$LAYOUT_; }

    static final VarHandle tagMULTIKEYHELPW$mkKeylist$VH_ = tagMULTIKEYHELPW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("mkKeylist"));
    public static java.lang.invoke.VarHandle tagMULTIKEYHELPW$mkKeylist$VH() { return tagMULTIKEYHELPW$mkKeylist$VH_; }

    static final MemoryLayout tagHELPWININFOA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("wStructSize"),
        C_INT.withName("x"),
        C_INT.withName("y"),
        C_INT.withName("dx"),
        C_INT.withName("dy"),
        C_INT.withName("wMax"),
        MemoryLayout.ofSequence(2, C_BOOL).withName("rgchMember"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("tagHELPWININFOA");
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOA$struct$LAYOUT() { return tagHELPWININFOA$struct$LAYOUT_; }

    static final MemoryLayout tagHELPWININFOA$wStructSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOA$wStructSize$LAYOUT() { return tagHELPWININFOA$wStructSize$LAYOUT_; }

    static final VarHandle tagHELPWININFOA$wStructSize$VH_ = tagHELPWININFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("wStructSize"));
    public static java.lang.invoke.VarHandle tagHELPWININFOA$wStructSize$VH() { return tagHELPWININFOA$wStructSize$VH_; }

    static final MemoryLayout tagHELPWININFOA$x$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOA$x$LAYOUT() { return tagHELPWININFOA$x$LAYOUT_; }

    static final VarHandle tagHELPWININFOA$x$VH_ = tagHELPWININFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    public static java.lang.invoke.VarHandle tagHELPWININFOA$x$VH() { return tagHELPWININFOA$x$VH_; }

    static final MemoryLayout tagHELPWININFOA$y$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOA$y$LAYOUT() { return tagHELPWININFOA$y$LAYOUT_; }

    static final VarHandle tagHELPWININFOA$y$VH_ = tagHELPWININFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    public static java.lang.invoke.VarHandle tagHELPWININFOA$y$VH() { return tagHELPWININFOA$y$VH_; }

    static final MemoryLayout tagHELPWININFOA$dx$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOA$dx$LAYOUT() { return tagHELPWININFOA$dx$LAYOUT_; }

    static final VarHandle tagHELPWININFOA$dx$VH_ = tagHELPWININFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dx"));
    public static java.lang.invoke.VarHandle tagHELPWININFOA$dx$VH() { return tagHELPWININFOA$dx$VH_; }

    static final MemoryLayout tagHELPWININFOA$dy$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOA$dy$LAYOUT() { return tagHELPWININFOA$dy$LAYOUT_; }

    static final VarHandle tagHELPWININFOA$dy$VH_ = tagHELPWININFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dy"));
    public static java.lang.invoke.VarHandle tagHELPWININFOA$dy$VH() { return tagHELPWININFOA$dy$VH_; }

    static final MemoryLayout tagHELPWININFOA$wMax$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOA$wMax$LAYOUT() { return tagHELPWININFOA$wMax$LAYOUT_; }

    static final VarHandle tagHELPWININFOA$wMax$VH_ = tagHELPWININFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("wMax"));
    public static java.lang.invoke.VarHandle tagHELPWININFOA$wMax$VH() { return tagHELPWININFOA$wMax$VH_; }

    static final MemoryLayout tagHELPWININFOW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("wStructSize"),
        C_INT.withName("x"),
        C_INT.withName("y"),
        C_INT.withName("dx"),
        C_INT.withName("dy"),
        C_INT.withName("wMax"),
        MemoryLayout.ofSequence(2, C_SHORT).withName("rgchMember")
    ).withName("tagHELPWININFOW");
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOW$struct$LAYOUT() { return tagHELPWININFOW$struct$LAYOUT_; }

    static final MemoryLayout tagHELPWININFOW$wStructSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOW$wStructSize$LAYOUT() { return tagHELPWININFOW$wStructSize$LAYOUT_; }

    static final VarHandle tagHELPWININFOW$wStructSize$VH_ = tagHELPWININFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("wStructSize"));
    public static java.lang.invoke.VarHandle tagHELPWININFOW$wStructSize$VH() { return tagHELPWININFOW$wStructSize$VH_; }

    static final MemoryLayout tagHELPWININFOW$x$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOW$x$LAYOUT() { return tagHELPWININFOW$x$LAYOUT_; }

    static final VarHandle tagHELPWININFOW$x$VH_ = tagHELPWININFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    public static java.lang.invoke.VarHandle tagHELPWININFOW$x$VH() { return tagHELPWININFOW$x$VH_; }

    static final MemoryLayout tagHELPWININFOW$y$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOW$y$LAYOUT() { return tagHELPWININFOW$y$LAYOUT_; }

    static final VarHandle tagHELPWININFOW$y$VH_ = tagHELPWININFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    public static java.lang.invoke.VarHandle tagHELPWININFOW$y$VH() { return tagHELPWININFOW$y$VH_; }

    static final MemoryLayout tagHELPWININFOW$dx$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOW$dx$LAYOUT() { return tagHELPWININFOW$dx$LAYOUT_; }

    static final VarHandle tagHELPWININFOW$dx$VH_ = tagHELPWININFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dx"));
    public static java.lang.invoke.VarHandle tagHELPWININFOW$dx$VH() { return tagHELPWININFOW$dx$VH_; }

    static final MemoryLayout tagHELPWININFOW$dy$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOW$dy$LAYOUT() { return tagHELPWININFOW$dy$LAYOUT_; }

    static final VarHandle tagHELPWININFOW$dy$VH_ = tagHELPWININFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dy"));
    public static java.lang.invoke.VarHandle tagHELPWININFOW$dy$VH() { return tagHELPWININFOW$dy$VH_; }

    static final MemoryLayout tagHELPWININFOW$wMax$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHELPWININFOW$wMax$LAYOUT() { return tagHELPWININFOW$wMax$LAYOUT_; }

    static final VarHandle tagHELPWININFOW$wMax$VH_ = tagHELPWININFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("wMax"));
    public static java.lang.invoke.VarHandle tagHELPWININFOW$wMax$VH() { return tagHELPWININFOW$wMax$VH_; }

    static final FunctionDescriptor WinHelpA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor WinHelpA$FUNC() { return WinHelpA$FUNC_; }

    static final MethodHandle WinHelpA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WinHelpA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        WinHelpA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WinHelpA$MH() { return WinHelpA$MH_; }

    static final FunctionDescriptor WinHelpW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor WinHelpW$FUNC() { return WinHelpW$FUNC_; }

    static final MethodHandle WinHelpW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WinHelpW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        WinHelpW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WinHelpW$MH() { return WinHelpW$MH_; }

    static final FunctionDescriptor GetGuiResources$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGuiResources$FUNC() { return GetGuiResources$FUNC_; }

    static final MethodHandle GetGuiResources$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGuiResources",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetGuiResources$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGuiResources$MH() { return GetGuiResources$MH_; }

    static final MemoryLayout tagTouchPredictionParameters$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("dwLatency"),
        C_INT.withName("dwSampleTime"),
        C_INT.withName("bUseHWTimeStamp")
    ).withName("tagTouchPredictionParameters");
    public static jdk.incubator.foreign.MemoryLayout tagTouchPredictionParameters$struct$LAYOUT() { return tagTouchPredictionParameters$struct$LAYOUT_; }

    static final MemoryLayout tagTouchPredictionParameters$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTouchPredictionParameters$cbSize$LAYOUT() { return tagTouchPredictionParameters$cbSize$LAYOUT_; }

    static final VarHandle tagTouchPredictionParameters$cbSize$VH_ = tagTouchPredictionParameters$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagTouchPredictionParameters$cbSize$VH() { return tagTouchPredictionParameters$cbSize$VH_; }

    static final MemoryLayout tagTouchPredictionParameters$dwLatency$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTouchPredictionParameters$dwLatency$LAYOUT() { return tagTouchPredictionParameters$dwLatency$LAYOUT_; }

    static final VarHandle tagTouchPredictionParameters$dwLatency$VH_ = tagTouchPredictionParameters$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwLatency"));
    public static java.lang.invoke.VarHandle tagTouchPredictionParameters$dwLatency$VH() { return tagTouchPredictionParameters$dwLatency$VH_; }

    static final MemoryLayout tagTouchPredictionParameters$dwSampleTime$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTouchPredictionParameters$dwSampleTime$LAYOUT() { return tagTouchPredictionParameters$dwSampleTime$LAYOUT_; }

    static final VarHandle tagTouchPredictionParameters$dwSampleTime$VH_ = tagTouchPredictionParameters$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSampleTime"));
    public static java.lang.invoke.VarHandle tagTouchPredictionParameters$dwSampleTime$VH() { return tagTouchPredictionParameters$dwSampleTime$VH_; }

    static final MemoryLayout tagTouchPredictionParameters$bUseHWTimeStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTouchPredictionParameters$bUseHWTimeStamp$LAYOUT() { return tagTouchPredictionParameters$bUseHWTimeStamp$LAYOUT_; }

    static final VarHandle tagTouchPredictionParameters$bUseHWTimeStamp$VH_ = tagTouchPredictionParameters$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bUseHWTimeStamp"));
    public static java.lang.invoke.VarHandle tagTouchPredictionParameters$bUseHWTimeStamp$VH() { return tagTouchPredictionParameters$bUseHWTimeStamp$VH_; }

    public static int HANDEDNESS_LEFT() { return (int)0L; }

    public static int HANDEDNESS_RIGHT() { return (int)1L; }

    static final MemoryLayout tagNONCLIENTMETRICSA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("iBorderWidth"),
        C_INT.withName("iScrollWidth"),
        C_INT.withName("iScrollHeight"),
        C_INT.withName("iCaptionWidth"),
        C_INT.withName("iCaptionHeight"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_BOOL).withName("lfFaceName")
        ).withName("lfCaptionFont"),
        C_INT.withName("iSmCaptionWidth"),
        C_INT.withName("iSmCaptionHeight"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_BOOL).withName("lfFaceName")
        ).withName("lfSmCaptionFont"),
        C_INT.withName("iMenuWidth"),
        C_INT.withName("iMenuHeight"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_BOOL).withName("lfFaceName")
        ).withName("lfMenuFont"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_BOOL).withName("lfFaceName")
        ).withName("lfStatusFont"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_BOOL).withName("lfFaceName")
        ).withName("lfMessageFont"),
        C_INT.withName("iPaddedBorderWidth")
    ).withName("tagNONCLIENTMETRICSA");
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$struct$LAYOUT() { return tagNONCLIENTMETRICSA$struct$LAYOUT_; }

    static final MemoryLayout tagNONCLIENTMETRICSA$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$cbSize$LAYOUT() { return tagNONCLIENTMETRICSA$cbSize$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSA$cbSize$VH_ = tagNONCLIENTMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSA$cbSize$VH() { return tagNONCLIENTMETRICSA$cbSize$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSA$iBorderWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$iBorderWidth$LAYOUT() { return tagNONCLIENTMETRICSA$iBorderWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSA$iBorderWidth$VH_ = tagNONCLIENTMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iBorderWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSA$iBorderWidth$VH() { return tagNONCLIENTMETRICSA$iBorderWidth$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSA$iScrollWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$iScrollWidth$LAYOUT() { return tagNONCLIENTMETRICSA$iScrollWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSA$iScrollWidth$VH_ = tagNONCLIENTMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iScrollWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSA$iScrollWidth$VH() { return tagNONCLIENTMETRICSA$iScrollWidth$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSA$iScrollHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$iScrollHeight$LAYOUT() { return tagNONCLIENTMETRICSA$iScrollHeight$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSA$iScrollHeight$VH_ = tagNONCLIENTMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iScrollHeight"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSA$iScrollHeight$VH() { return tagNONCLIENTMETRICSA$iScrollHeight$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSA$iCaptionWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$iCaptionWidth$LAYOUT() { return tagNONCLIENTMETRICSA$iCaptionWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSA$iCaptionWidth$VH_ = tagNONCLIENTMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iCaptionWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSA$iCaptionWidth$VH() { return tagNONCLIENTMETRICSA$iCaptionWidth$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSA$iCaptionHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$iCaptionHeight$LAYOUT() { return tagNONCLIENTMETRICSA$iCaptionHeight$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSA$iCaptionHeight$VH_ = tagNONCLIENTMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iCaptionHeight"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSA$iCaptionHeight$VH() { return tagNONCLIENTMETRICSA$iCaptionHeight$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSA$iSmCaptionWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$iSmCaptionWidth$LAYOUT() { return tagNONCLIENTMETRICSA$iSmCaptionWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSA$iSmCaptionWidth$VH_ = tagNONCLIENTMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iSmCaptionWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSA$iSmCaptionWidth$VH() { return tagNONCLIENTMETRICSA$iSmCaptionWidth$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSA$iSmCaptionHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$iSmCaptionHeight$LAYOUT() { return tagNONCLIENTMETRICSA$iSmCaptionHeight$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSA$iSmCaptionHeight$VH_ = tagNONCLIENTMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iSmCaptionHeight"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSA$iSmCaptionHeight$VH() { return tagNONCLIENTMETRICSA$iSmCaptionHeight$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSA$iMenuWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$iMenuWidth$LAYOUT() { return tagNONCLIENTMETRICSA$iMenuWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSA$iMenuWidth$VH_ = tagNONCLIENTMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMenuWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSA$iMenuWidth$VH() { return tagNONCLIENTMETRICSA$iMenuWidth$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSA$iMenuHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$iMenuHeight$LAYOUT() { return tagNONCLIENTMETRICSA$iMenuHeight$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSA$iMenuHeight$VH_ = tagNONCLIENTMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMenuHeight"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSA$iMenuHeight$VH() { return tagNONCLIENTMETRICSA$iMenuHeight$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSA$iPaddedBorderWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSA$iPaddedBorderWidth$LAYOUT() { return tagNONCLIENTMETRICSA$iPaddedBorderWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSA$iPaddedBorderWidth$VH_ = tagNONCLIENTMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iPaddedBorderWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSA$iPaddedBorderWidth$VH() { return tagNONCLIENTMETRICSA$iPaddedBorderWidth$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("iBorderWidth"),
        C_INT.withName("iScrollWidth"),
        C_INT.withName("iScrollHeight"),
        C_INT.withName("iCaptionWidth"),
        C_INT.withName("iCaptionHeight"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
        ).withName("lfCaptionFont"),
        C_INT.withName("iSmCaptionWidth"),
        C_INT.withName("iSmCaptionHeight"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
        ).withName("lfSmCaptionFont"),
        C_INT.withName("iMenuWidth"),
        C_INT.withName("iMenuHeight"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
        ).withName("lfMenuFont"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
        ).withName("lfStatusFont"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
        ).withName("lfMessageFont"),
        C_INT.withName("iPaddedBorderWidth")
    ).withName("tagNONCLIENTMETRICSW");
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$struct$LAYOUT() { return tagNONCLIENTMETRICSW$struct$LAYOUT_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$cbSize$LAYOUT() { return tagNONCLIENTMETRICSW$cbSize$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSW$cbSize$VH_ = tagNONCLIENTMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSW$cbSize$VH() { return tagNONCLIENTMETRICSW$cbSize$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$iBorderWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$iBorderWidth$LAYOUT() { return tagNONCLIENTMETRICSW$iBorderWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSW$iBorderWidth$VH_ = tagNONCLIENTMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iBorderWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSW$iBorderWidth$VH() { return tagNONCLIENTMETRICSW$iBorderWidth$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$iScrollWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$iScrollWidth$LAYOUT() { return tagNONCLIENTMETRICSW$iScrollWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSW$iScrollWidth$VH_ = tagNONCLIENTMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iScrollWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSW$iScrollWidth$VH() { return tagNONCLIENTMETRICSW$iScrollWidth$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$iScrollHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$iScrollHeight$LAYOUT() { return tagNONCLIENTMETRICSW$iScrollHeight$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSW$iScrollHeight$VH_ = tagNONCLIENTMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iScrollHeight"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSW$iScrollHeight$VH() { return tagNONCLIENTMETRICSW$iScrollHeight$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$iCaptionWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$iCaptionWidth$LAYOUT() { return tagNONCLIENTMETRICSW$iCaptionWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSW$iCaptionWidth$VH_ = tagNONCLIENTMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iCaptionWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSW$iCaptionWidth$VH() { return tagNONCLIENTMETRICSW$iCaptionWidth$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$iCaptionHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$iCaptionHeight$LAYOUT() { return tagNONCLIENTMETRICSW$iCaptionHeight$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSW$iCaptionHeight$VH_ = tagNONCLIENTMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iCaptionHeight"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSW$iCaptionHeight$VH() { return tagNONCLIENTMETRICSW$iCaptionHeight$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$iSmCaptionWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$iSmCaptionWidth$LAYOUT() { return tagNONCLIENTMETRICSW$iSmCaptionWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSW$iSmCaptionWidth$VH_ = tagNONCLIENTMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iSmCaptionWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSW$iSmCaptionWidth$VH() { return tagNONCLIENTMETRICSW$iSmCaptionWidth$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$iSmCaptionHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$iSmCaptionHeight$LAYOUT() { return tagNONCLIENTMETRICSW$iSmCaptionHeight$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSW$iSmCaptionHeight$VH_ = tagNONCLIENTMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iSmCaptionHeight"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSW$iSmCaptionHeight$VH() { return tagNONCLIENTMETRICSW$iSmCaptionHeight$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$iMenuWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$iMenuWidth$LAYOUT() { return tagNONCLIENTMETRICSW$iMenuWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSW$iMenuWidth$VH_ = tagNONCLIENTMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMenuWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSW$iMenuWidth$VH() { return tagNONCLIENTMETRICSW$iMenuWidth$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$iMenuHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$iMenuHeight$LAYOUT() { return tagNONCLIENTMETRICSW$iMenuHeight$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSW$iMenuHeight$VH_ = tagNONCLIENTMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMenuHeight"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSW$iMenuHeight$VH() { return tagNONCLIENTMETRICSW$iMenuHeight$VH_; }

    static final MemoryLayout tagNONCLIENTMETRICSW$iPaddedBorderWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagNONCLIENTMETRICSW$iPaddedBorderWidth$LAYOUT() { return tagNONCLIENTMETRICSW$iPaddedBorderWidth$LAYOUT_; }

    static final VarHandle tagNONCLIENTMETRICSW$iPaddedBorderWidth$VH_ = tagNONCLIENTMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iPaddedBorderWidth"));
    public static java.lang.invoke.VarHandle tagNONCLIENTMETRICSW$iPaddedBorderWidth$VH() { return tagNONCLIENTMETRICSW$iPaddedBorderWidth$VH_; }

    static final MemoryLayout tagMINIMIZEDMETRICS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("iWidth"),
        C_INT.withName("iHorzGap"),
        C_INT.withName("iVertGap"),
        C_INT.withName("iArrange")
    ).withName("tagMINIMIZEDMETRICS");
    public static jdk.incubator.foreign.MemoryLayout tagMINIMIZEDMETRICS$struct$LAYOUT() { return tagMINIMIZEDMETRICS$struct$LAYOUT_; }

    static final MemoryLayout tagMINIMIZEDMETRICS$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMINIMIZEDMETRICS$cbSize$LAYOUT() { return tagMINIMIZEDMETRICS$cbSize$LAYOUT_; }

    static final VarHandle tagMINIMIZEDMETRICS$cbSize$VH_ = tagMINIMIZEDMETRICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagMINIMIZEDMETRICS$cbSize$VH() { return tagMINIMIZEDMETRICS$cbSize$VH_; }

    static final MemoryLayout tagMINIMIZEDMETRICS$iWidth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMINIMIZEDMETRICS$iWidth$LAYOUT() { return tagMINIMIZEDMETRICS$iWidth$LAYOUT_; }

    static final VarHandle tagMINIMIZEDMETRICS$iWidth$VH_ = tagMINIMIZEDMETRICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iWidth"));
    public static java.lang.invoke.VarHandle tagMINIMIZEDMETRICS$iWidth$VH() { return tagMINIMIZEDMETRICS$iWidth$VH_; }

    static final MemoryLayout tagMINIMIZEDMETRICS$iHorzGap$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMINIMIZEDMETRICS$iHorzGap$LAYOUT() { return tagMINIMIZEDMETRICS$iHorzGap$LAYOUT_; }

    static final VarHandle tagMINIMIZEDMETRICS$iHorzGap$VH_ = tagMINIMIZEDMETRICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iHorzGap"));
    public static java.lang.invoke.VarHandle tagMINIMIZEDMETRICS$iHorzGap$VH() { return tagMINIMIZEDMETRICS$iHorzGap$VH_; }

    static final MemoryLayout tagMINIMIZEDMETRICS$iVertGap$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMINIMIZEDMETRICS$iVertGap$LAYOUT() { return tagMINIMIZEDMETRICS$iVertGap$LAYOUT_; }

    static final VarHandle tagMINIMIZEDMETRICS$iVertGap$VH_ = tagMINIMIZEDMETRICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iVertGap"));
    public static java.lang.invoke.VarHandle tagMINIMIZEDMETRICS$iVertGap$VH() { return tagMINIMIZEDMETRICS$iVertGap$VH_; }

    static final MemoryLayout tagMINIMIZEDMETRICS$iArrange$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagMINIMIZEDMETRICS$iArrange$LAYOUT() { return tagMINIMIZEDMETRICS$iArrange$LAYOUT_; }

    static final VarHandle tagMINIMIZEDMETRICS$iArrange$VH_ = tagMINIMIZEDMETRICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iArrange"));
    public static java.lang.invoke.VarHandle tagMINIMIZEDMETRICS$iArrange$VH() { return tagMINIMIZEDMETRICS$iArrange$VH_; }

    static final MemoryLayout tagICONMETRICSA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("iHorzSpacing"),
        C_INT.withName("iVertSpacing"),
        C_INT.withName("iTitleWrap"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_BOOL).withName("lfFaceName")
        ).withName("lfFont")
    ).withName("tagICONMETRICSA");
    public static jdk.incubator.foreign.MemoryLayout tagICONMETRICSA$struct$LAYOUT() { return tagICONMETRICSA$struct$LAYOUT_; }

    static final MemoryLayout tagICONMETRICSA$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagICONMETRICSA$cbSize$LAYOUT() { return tagICONMETRICSA$cbSize$LAYOUT_; }

    static final VarHandle tagICONMETRICSA$cbSize$VH_ = tagICONMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagICONMETRICSA$cbSize$VH() { return tagICONMETRICSA$cbSize$VH_; }

    static final MemoryLayout tagICONMETRICSA$iHorzSpacing$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagICONMETRICSA$iHorzSpacing$LAYOUT() { return tagICONMETRICSA$iHorzSpacing$LAYOUT_; }

    static final VarHandle tagICONMETRICSA$iHorzSpacing$VH_ = tagICONMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iHorzSpacing"));
    public static java.lang.invoke.VarHandle tagICONMETRICSA$iHorzSpacing$VH() { return tagICONMETRICSA$iHorzSpacing$VH_; }

    static final MemoryLayout tagICONMETRICSA$iVertSpacing$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagICONMETRICSA$iVertSpacing$LAYOUT() { return tagICONMETRICSA$iVertSpacing$LAYOUT_; }

    static final VarHandle tagICONMETRICSA$iVertSpacing$VH_ = tagICONMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iVertSpacing"));
    public static java.lang.invoke.VarHandle tagICONMETRICSA$iVertSpacing$VH() { return tagICONMETRICSA$iVertSpacing$VH_; }

    static final MemoryLayout tagICONMETRICSA$iTitleWrap$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagICONMETRICSA$iTitleWrap$LAYOUT() { return tagICONMETRICSA$iTitleWrap$LAYOUT_; }

    static final VarHandle tagICONMETRICSA$iTitleWrap$VH_ = tagICONMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iTitleWrap"));
    public static java.lang.invoke.VarHandle tagICONMETRICSA$iTitleWrap$VH() { return tagICONMETRICSA$iTitleWrap$VH_; }

    static final MemoryLayout tagICONMETRICSW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("iHorzSpacing"),
        C_INT.withName("iVertSpacing"),
        C_INT.withName("iTitleWrap"),
        MemoryLayout.ofStruct(
            C_INT.withName("lfHeight"),
            C_INT.withName("lfWidth"),
            C_INT.withName("lfEscapement"),
            C_INT.withName("lfOrientation"),
            C_INT.withName("lfWeight"),
            C_BOOL.withName("lfItalic"),
            C_BOOL.withName("lfUnderline"),
            C_BOOL.withName("lfStrikeOut"),
            C_BOOL.withName("lfCharSet"),
            C_BOOL.withName("lfOutPrecision"),
            C_BOOL.withName("lfClipPrecision"),
            C_BOOL.withName("lfQuality"),
            C_BOOL.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
        ).withName("lfFont")
    ).withName("tagICONMETRICSW");
    public static jdk.incubator.foreign.MemoryLayout tagICONMETRICSW$struct$LAYOUT() { return tagICONMETRICSW$struct$LAYOUT_; }

    static final MemoryLayout tagICONMETRICSW$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagICONMETRICSW$cbSize$LAYOUT() { return tagICONMETRICSW$cbSize$LAYOUT_; }

    static final VarHandle tagICONMETRICSW$cbSize$VH_ = tagICONMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagICONMETRICSW$cbSize$VH() { return tagICONMETRICSW$cbSize$VH_; }

    static final MemoryLayout tagICONMETRICSW$iHorzSpacing$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagICONMETRICSW$iHorzSpacing$LAYOUT() { return tagICONMETRICSW$iHorzSpacing$LAYOUT_; }

    static final VarHandle tagICONMETRICSW$iHorzSpacing$VH_ = tagICONMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iHorzSpacing"));
    public static java.lang.invoke.VarHandle tagICONMETRICSW$iHorzSpacing$VH() { return tagICONMETRICSW$iHorzSpacing$VH_; }

    static final MemoryLayout tagICONMETRICSW$iVertSpacing$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagICONMETRICSW$iVertSpacing$LAYOUT() { return tagICONMETRICSW$iVertSpacing$LAYOUT_; }

    static final VarHandle tagICONMETRICSW$iVertSpacing$VH_ = tagICONMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iVertSpacing"));
    public static java.lang.invoke.VarHandle tagICONMETRICSW$iVertSpacing$VH() { return tagICONMETRICSW$iVertSpacing$VH_; }

    static final MemoryLayout tagICONMETRICSW$iTitleWrap$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagICONMETRICSW$iTitleWrap$LAYOUT() { return tagICONMETRICSW$iTitleWrap$LAYOUT_; }

    static final VarHandle tagICONMETRICSW$iTitleWrap$VH_ = tagICONMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iTitleWrap"));
    public static java.lang.invoke.VarHandle tagICONMETRICSW$iTitleWrap$VH() { return tagICONMETRICSW$iTitleWrap$VH_; }

    static final MemoryLayout tagANIMATIONINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("iMinAnimate")
    ).withName("tagANIMATIONINFO");
    public static jdk.incubator.foreign.MemoryLayout tagANIMATIONINFO$struct$LAYOUT() { return tagANIMATIONINFO$struct$LAYOUT_; }

    static final MemoryLayout tagANIMATIONINFO$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagANIMATIONINFO$cbSize$LAYOUT() { return tagANIMATIONINFO$cbSize$LAYOUT_; }

    static final VarHandle tagANIMATIONINFO$cbSize$VH_ = tagANIMATIONINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagANIMATIONINFO$cbSize$VH() { return tagANIMATIONINFO$cbSize$VH_; }

    static final MemoryLayout tagANIMATIONINFO$iMinAnimate$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagANIMATIONINFO$iMinAnimate$LAYOUT() { return tagANIMATIONINFO$iMinAnimate$LAYOUT_; }

    static final VarHandle tagANIMATIONINFO$iMinAnimate$VH_ = tagANIMATIONINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMinAnimate"));
    public static java.lang.invoke.VarHandle tagANIMATIONINFO$iMinAnimate$VH() { return tagANIMATIONINFO$iMinAnimate$VH_; }

    static final MemoryLayout tagSERIALKEYSA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("dwFlags"),
        C_POINTER.withName("lpszActivePort"),
        C_POINTER.withName("lpszPort"),
        C_INT.withName("iBaudRate"),
        C_INT.withName("iPortState"),
        C_INT.withName("iActive"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagSERIALKEYSA");
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$struct$LAYOUT() { return tagSERIALKEYSA$struct$LAYOUT_; }

    static final MemoryLayout tagSERIALKEYSA$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$cbSize$LAYOUT() { return tagSERIALKEYSA$cbSize$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$cbSize$VH_ = tagSERIALKEYSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagSERIALKEYSA$cbSize$VH() { return tagSERIALKEYSA$cbSize$VH_; }

    static final MemoryLayout tagSERIALKEYSA$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$dwFlags$LAYOUT() { return tagSERIALKEYSA$dwFlags$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$dwFlags$VH_ = tagSERIALKEYSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagSERIALKEYSA$dwFlags$VH() { return tagSERIALKEYSA$dwFlags$VH_; }

    static final MemoryLayout tagSERIALKEYSA$lpszActivePort$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$lpszActivePort$LAYOUT() { return tagSERIALKEYSA$lpszActivePort$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$lpszActivePort$VH_ = MemoryHandles.asAddressVarHandle(tagSERIALKEYSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszActivePort")));
    public static java.lang.invoke.VarHandle tagSERIALKEYSA$lpszActivePort$VH() { return tagSERIALKEYSA$lpszActivePort$VH_; }

    static final MemoryLayout tagSERIALKEYSA$lpszPort$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$lpszPort$LAYOUT() { return tagSERIALKEYSA$lpszPort$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$lpszPort$VH_ = MemoryHandles.asAddressVarHandle(tagSERIALKEYSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszPort")));
    public static java.lang.invoke.VarHandle tagSERIALKEYSA$lpszPort$VH() { return tagSERIALKEYSA$lpszPort$VH_; }

    static final MemoryLayout tagSERIALKEYSA$iBaudRate$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$iBaudRate$LAYOUT() { return tagSERIALKEYSA$iBaudRate$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$iBaudRate$VH_ = tagSERIALKEYSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iBaudRate"));
    public static java.lang.invoke.VarHandle tagSERIALKEYSA$iBaudRate$VH() { return tagSERIALKEYSA$iBaudRate$VH_; }

    static final MemoryLayout tagSERIALKEYSA$iPortState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$iPortState$LAYOUT() { return tagSERIALKEYSA$iPortState$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$iPortState$VH_ = tagSERIALKEYSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iPortState"));
    public static java.lang.invoke.VarHandle tagSERIALKEYSA$iPortState$VH() { return tagSERIALKEYSA$iPortState$VH_; }

    static final MemoryLayout tagSERIALKEYSA$iActive$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$iActive$LAYOUT() { return tagSERIALKEYSA$iActive$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$iActive$VH_ = tagSERIALKEYSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iActive"));
    public static java.lang.invoke.VarHandle tagSERIALKEYSA$iActive$VH() { return tagSERIALKEYSA$iActive$VH_; }

    static final MemoryLayout tagSERIALKEYSW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("dwFlags"),
        C_POINTER.withName("lpszActivePort"),
        C_POINTER.withName("lpszPort"),
        C_INT.withName("iBaudRate"),
        C_INT.withName("iPortState"),
        C_INT.withName("iActive"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagSERIALKEYSW");
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$struct$LAYOUT() { return tagSERIALKEYSW$struct$LAYOUT_; }

    static final MemoryLayout tagSERIALKEYSW$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$cbSize$LAYOUT() { return tagSERIALKEYSW$cbSize$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$cbSize$VH_ = tagSERIALKEYSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagSERIALKEYSW$cbSize$VH() { return tagSERIALKEYSW$cbSize$VH_; }

    static final MemoryLayout tagSERIALKEYSW$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$dwFlags$LAYOUT() { return tagSERIALKEYSW$dwFlags$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$dwFlags$VH_ = tagSERIALKEYSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagSERIALKEYSW$dwFlags$VH() { return tagSERIALKEYSW$dwFlags$VH_; }

    static final MemoryLayout tagSERIALKEYSW$lpszActivePort$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$lpszActivePort$LAYOUT() { return tagSERIALKEYSW$lpszActivePort$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$lpszActivePort$VH_ = MemoryHandles.asAddressVarHandle(tagSERIALKEYSW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszActivePort")));
    public static java.lang.invoke.VarHandle tagSERIALKEYSW$lpszActivePort$VH() { return tagSERIALKEYSW$lpszActivePort$VH_; }

    static final MemoryLayout tagSERIALKEYSW$lpszPort$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$lpszPort$LAYOUT() { return tagSERIALKEYSW$lpszPort$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$lpszPort$VH_ = MemoryHandles.asAddressVarHandle(tagSERIALKEYSW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszPort")));
    public static java.lang.invoke.VarHandle tagSERIALKEYSW$lpszPort$VH() { return tagSERIALKEYSW$lpszPort$VH_; }

    static final MemoryLayout tagSERIALKEYSW$iBaudRate$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$iBaudRate$LAYOUT() { return tagSERIALKEYSW$iBaudRate$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$iBaudRate$VH_ = tagSERIALKEYSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iBaudRate"));
    public static java.lang.invoke.VarHandle tagSERIALKEYSW$iBaudRate$VH() { return tagSERIALKEYSW$iBaudRate$VH_; }

    static final MemoryLayout tagSERIALKEYSW$iPortState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$iPortState$LAYOUT() { return tagSERIALKEYSW$iPortState$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$iPortState$VH_ = tagSERIALKEYSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iPortState"));
    public static java.lang.invoke.VarHandle tagSERIALKEYSW$iPortState$VH() { return tagSERIALKEYSW$iPortState$VH_; }

    static final MemoryLayout tagSERIALKEYSW$iActive$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$iActive$LAYOUT() { return tagSERIALKEYSW$iActive$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$iActive$VH_ = tagSERIALKEYSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iActive"));
    public static java.lang.invoke.VarHandle tagSERIALKEYSW$iActive$VH() { return tagSERIALKEYSW$iActive$VH_; }

    static final MemoryLayout tagHIGHCONTRASTA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("dwFlags"),
        C_POINTER.withName("lpszDefaultScheme")
    ).withName("tagHIGHCONTRASTA");
    public static jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTA$struct$LAYOUT() { return tagHIGHCONTRASTA$struct$LAYOUT_; }

    static final MemoryLayout tagHIGHCONTRASTA$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTA$cbSize$LAYOUT() { return tagHIGHCONTRASTA$cbSize$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTA$cbSize$VH_ = tagHIGHCONTRASTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagHIGHCONTRASTA$cbSize$VH() { return tagHIGHCONTRASTA$cbSize$VH_; }

    static final MemoryLayout tagHIGHCONTRASTA$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTA$dwFlags$LAYOUT() { return tagHIGHCONTRASTA$dwFlags$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTA$dwFlags$VH_ = tagHIGHCONTRASTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagHIGHCONTRASTA$dwFlags$VH() { return tagHIGHCONTRASTA$dwFlags$VH_; }

    static final MemoryLayout tagHIGHCONTRASTA$lpszDefaultScheme$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTA$lpszDefaultScheme$LAYOUT() { return tagHIGHCONTRASTA$lpszDefaultScheme$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTA$lpszDefaultScheme$VH_ = MemoryHandles.asAddressVarHandle(tagHIGHCONTRASTA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszDefaultScheme")));
    public static java.lang.invoke.VarHandle tagHIGHCONTRASTA$lpszDefaultScheme$VH() { return tagHIGHCONTRASTA$lpszDefaultScheme$VH_; }

    static final MemoryLayout tagHIGHCONTRASTW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("dwFlags"),
        C_POINTER.withName("lpszDefaultScheme")
    ).withName("tagHIGHCONTRASTW");
    public static jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTW$struct$LAYOUT() { return tagHIGHCONTRASTW$struct$LAYOUT_; }

    static final MemoryLayout tagHIGHCONTRASTW$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTW$cbSize$LAYOUT() { return tagHIGHCONTRASTW$cbSize$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTW$cbSize$VH_ = tagHIGHCONTRASTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagHIGHCONTRASTW$cbSize$VH() { return tagHIGHCONTRASTW$cbSize$VH_; }

    static final MemoryLayout tagHIGHCONTRASTW$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTW$dwFlags$LAYOUT() { return tagHIGHCONTRASTW$dwFlags$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTW$dwFlags$VH_ = tagHIGHCONTRASTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagHIGHCONTRASTW$dwFlags$VH() { return tagHIGHCONTRASTW$dwFlags$VH_; }

    static final MemoryLayout tagHIGHCONTRASTW$lpszDefaultScheme$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTW$lpszDefaultScheme$LAYOUT() { return tagHIGHCONTRASTW$lpszDefaultScheme$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTW$lpszDefaultScheme$VH_ = MemoryHandles.asAddressVarHandle(tagHIGHCONTRASTW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszDefaultScheme")));
    public static java.lang.invoke.VarHandle tagHIGHCONTRASTW$lpszDefaultScheme$VH() { return tagHIGHCONTRASTW$lpszDefaultScheme$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("Guid"),
        C_INT.withName("dwOffset"),
        C_INT.withName("dwCommand"),
        C_INT.withName("dwFlags"),
        C_INT.withName("dwMode"),
        C_INT.withName("dwTVStandard"),
        C_INT.withName("dwAvailableModes"),
        C_INT.withName("dwAvailableTVStandard"),
        C_INT.withName("dwFlickerFilter"),
        C_INT.withName("dwOverScanX"),
        C_INT.withName("dwOverScanY"),
        C_INT.withName("dwMaxUnscaledX"),
        C_INT.withName("dwMaxUnscaledY"),
        C_INT.withName("dwPositionX"),
        C_INT.withName("dwPositionY"),
        C_INT.withName("dwBrightness"),
        C_INT.withName("dwContrast"),
        C_INT.withName("dwCPType"),
        C_INT.withName("dwCPCommand"),
        C_INT.withName("dwCPStandard"),
        C_INT.withName("dwCPKey"),
        C_INT.withName("bCP_APSTriggerBits"),
        MemoryLayout.ofSequence(256, C_BOOL).withName("bOEMCopyProtection")
    ).withName("_VIDEOPARAMETERS");
    public static jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$struct$LAYOUT() { return _VIDEOPARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwOffset$LAYOUT() { return _VIDEOPARAMETERS$dwOffset$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwOffset$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOffset"));
    public static java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwOffset$VH() { return _VIDEOPARAMETERS$dwOffset$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwCommand$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwCommand$LAYOUT() { return _VIDEOPARAMETERS$dwCommand$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwCommand$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCommand"));
    public static java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwCommand$VH() { return _VIDEOPARAMETERS$dwCommand$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwFlags$LAYOUT() { return _VIDEOPARAMETERS$dwFlags$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwFlags$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwFlags$VH() { return _VIDEOPARAMETERS$dwFlags$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwMode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwMode$LAYOUT() { return _VIDEOPARAMETERS$dwMode$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwMode$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMode"));
    public static java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwMode$VH() { return _VIDEOPARAMETERS$dwMode$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwTVStandard$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwTVStandard$LAYOUT() { return _VIDEOPARAMETERS$dwTVStandard$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwTVStandard$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTVStandard"));
    public static java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwTVStandard$VH() { return _VIDEOPARAMETERS$dwTVStandard$VH_; }

}

