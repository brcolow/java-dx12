// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$38 extends Windows_h$constants$37 {
    Windows_h$constants$38() {}
    static final MemoryLayout tagREGISTERWORDA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpReading"),
        C_POINTER.withName("lpWord")
    ).withName("tagREGISTERWORDA");
    public static jdk.incubator.foreign.MemoryLayout tagREGISTERWORDA$struct$LAYOUT() { return tagREGISTERWORDA$struct$LAYOUT_; }

    static final MemoryLayout tagREGISTERWORDA$lpReading$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagREGISTERWORDA$lpReading$LAYOUT() { return tagREGISTERWORDA$lpReading$LAYOUT_; }

    static final VarHandle tagREGISTERWORDA$lpReading$VH_ = MemoryHandles.asAddressVarHandle(tagREGISTERWORDA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpReading")));
    public static java.lang.invoke.VarHandle tagREGISTERWORDA$lpReading$VH() { return tagREGISTERWORDA$lpReading$VH_; }

    static final MemoryLayout tagREGISTERWORDA$lpWord$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagREGISTERWORDA$lpWord$LAYOUT() { return tagREGISTERWORDA$lpWord$LAYOUT_; }

    static final VarHandle tagREGISTERWORDA$lpWord$VH_ = MemoryHandles.asAddressVarHandle(tagREGISTERWORDA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpWord")));
    public static java.lang.invoke.VarHandle tagREGISTERWORDA$lpWord$VH() { return tagREGISTERWORDA$lpWord$VH_; }

    static final MemoryLayout tagREGISTERWORDW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpReading"),
        C_POINTER.withName("lpWord")
    ).withName("tagREGISTERWORDW");
    public static jdk.incubator.foreign.MemoryLayout tagREGISTERWORDW$struct$LAYOUT() { return tagREGISTERWORDW$struct$LAYOUT_; }

    static final MemoryLayout tagREGISTERWORDW$lpReading$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagREGISTERWORDW$lpReading$LAYOUT() { return tagREGISTERWORDW$lpReading$LAYOUT_; }

    static final VarHandle tagREGISTERWORDW$lpReading$VH_ = MemoryHandles.asAddressVarHandle(tagREGISTERWORDW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpReading")));
    public static java.lang.invoke.VarHandle tagREGISTERWORDW$lpReading$VH() { return tagREGISTERWORDW$lpReading$VH_; }

    static final MemoryLayout tagREGISTERWORDW$lpWord$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagREGISTERWORDW$lpWord$LAYOUT() { return tagREGISTERWORDW$lpWord$LAYOUT_; }

    static final VarHandle tagREGISTERWORDW$lpWord$VH_ = MemoryHandles.asAddressVarHandle(tagREGISTERWORDW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpWord")));
    public static java.lang.invoke.VarHandle tagREGISTERWORDW$lpWord$VH() { return tagREGISTERWORDW$lpWord$VH_; }

    static final MemoryLayout tagRECONVERTSTRING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwSize"),
        C_INT.withName("dwVersion"),
        C_INT.withName("dwStrLen"),
        C_INT.withName("dwStrOffset"),
        C_INT.withName("dwCompStrLen"),
        C_INT.withName("dwCompStrOffset"),
        C_INT.withName("dwTargetStrLen"),
        C_INT.withName("dwTargetStrOffset")
    ).withName("tagRECONVERTSTRING");
    public static jdk.incubator.foreign.MemoryLayout tagRECONVERTSTRING$struct$LAYOUT() { return tagRECONVERTSTRING$struct$LAYOUT_; }

    static final MemoryLayout tagRECONVERTSTRING$dwSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagRECONVERTSTRING$dwSize$LAYOUT() { return tagRECONVERTSTRING$dwSize$LAYOUT_; }

    static final VarHandle tagRECONVERTSTRING$dwSize$VH_ = tagRECONVERTSTRING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    public static java.lang.invoke.VarHandle tagRECONVERTSTRING$dwSize$VH() { return tagRECONVERTSTRING$dwSize$VH_; }

    static final MemoryLayout tagRECONVERTSTRING$dwVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagRECONVERTSTRING$dwVersion$LAYOUT() { return tagRECONVERTSTRING$dwVersion$LAYOUT_; }

    static final VarHandle tagRECONVERTSTRING$dwVersion$VH_ = tagRECONVERTSTRING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    public static java.lang.invoke.VarHandle tagRECONVERTSTRING$dwVersion$VH() { return tagRECONVERTSTRING$dwVersion$VH_; }

    static final MemoryLayout tagRECONVERTSTRING$dwStrLen$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagRECONVERTSTRING$dwStrLen$LAYOUT() { return tagRECONVERTSTRING$dwStrLen$LAYOUT_; }

    static final VarHandle tagRECONVERTSTRING$dwStrLen$VH_ = tagRECONVERTSTRING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStrLen"));
    public static java.lang.invoke.VarHandle tagRECONVERTSTRING$dwStrLen$VH() { return tagRECONVERTSTRING$dwStrLen$VH_; }

    static final MemoryLayout tagRECONVERTSTRING$dwStrOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagRECONVERTSTRING$dwStrOffset$LAYOUT() { return tagRECONVERTSTRING$dwStrOffset$LAYOUT_; }

    static final VarHandle tagRECONVERTSTRING$dwStrOffset$VH_ = tagRECONVERTSTRING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStrOffset"));
    public static java.lang.invoke.VarHandle tagRECONVERTSTRING$dwStrOffset$VH() { return tagRECONVERTSTRING$dwStrOffset$VH_; }

    static final MemoryLayout tagRECONVERTSTRING$dwCompStrLen$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagRECONVERTSTRING$dwCompStrLen$LAYOUT() { return tagRECONVERTSTRING$dwCompStrLen$LAYOUT_; }

    static final VarHandle tagRECONVERTSTRING$dwCompStrLen$VH_ = tagRECONVERTSTRING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCompStrLen"));
    public static java.lang.invoke.VarHandle tagRECONVERTSTRING$dwCompStrLen$VH() { return tagRECONVERTSTRING$dwCompStrLen$VH_; }

    static final MemoryLayout tagRECONVERTSTRING$dwCompStrOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagRECONVERTSTRING$dwCompStrOffset$LAYOUT() { return tagRECONVERTSTRING$dwCompStrOffset$LAYOUT_; }

    static final VarHandle tagRECONVERTSTRING$dwCompStrOffset$VH_ = tagRECONVERTSTRING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCompStrOffset"));
    public static java.lang.invoke.VarHandle tagRECONVERTSTRING$dwCompStrOffset$VH() { return tagRECONVERTSTRING$dwCompStrOffset$VH_; }

    static final MemoryLayout tagRECONVERTSTRING$dwTargetStrLen$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagRECONVERTSTRING$dwTargetStrLen$LAYOUT() { return tagRECONVERTSTRING$dwTargetStrLen$LAYOUT_; }

    static final VarHandle tagRECONVERTSTRING$dwTargetStrLen$VH_ = tagRECONVERTSTRING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTargetStrLen"));
    public static java.lang.invoke.VarHandle tagRECONVERTSTRING$dwTargetStrLen$VH() { return tagRECONVERTSTRING$dwTargetStrLen$VH_; }

    static final MemoryLayout tagRECONVERTSTRING$dwTargetStrOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagRECONVERTSTRING$dwTargetStrOffset$LAYOUT() { return tagRECONVERTSTRING$dwTargetStrOffset$LAYOUT_; }

    static final VarHandle tagRECONVERTSTRING$dwTargetStrOffset$VH_ = tagRECONVERTSTRING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTargetStrOffset"));
    public static java.lang.invoke.VarHandle tagRECONVERTSTRING$dwTargetStrOffset$VH() { return tagRECONVERTSTRING$dwTargetStrOffset$VH_; }

    static final MemoryLayout tagSTYLEBUFA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwStyle"),
        MemoryLayout.ofSequence(32, C_BOOL).withName("szDescription")
    ).withName("tagSTYLEBUFA");
    public static jdk.incubator.foreign.MemoryLayout tagSTYLEBUFA$struct$LAYOUT() { return tagSTYLEBUFA$struct$LAYOUT_; }

    static final MemoryLayout tagSTYLEBUFA$dwStyle$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSTYLEBUFA$dwStyle$LAYOUT() { return tagSTYLEBUFA$dwStyle$LAYOUT_; }

    static final VarHandle tagSTYLEBUFA$dwStyle$VH_ = tagSTYLEBUFA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStyle"));
    public static java.lang.invoke.VarHandle tagSTYLEBUFA$dwStyle$VH() { return tagSTYLEBUFA$dwStyle$VH_; }

    static final MemoryLayout tagSTYLEBUFW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwStyle"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("szDescription")
    ).withName("tagSTYLEBUFW");
    public static jdk.incubator.foreign.MemoryLayout tagSTYLEBUFW$struct$LAYOUT() { return tagSTYLEBUFW$struct$LAYOUT_; }

    static final MemoryLayout tagSTYLEBUFW$dwStyle$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagSTYLEBUFW$dwStyle$LAYOUT() { return tagSTYLEBUFW$dwStyle$LAYOUT_; }

    static final VarHandle tagSTYLEBUFW$dwStyle$VH_ = tagSTYLEBUFW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStyle"));
    public static java.lang.invoke.VarHandle tagSTYLEBUFW$dwStyle$VH() { return tagSTYLEBUFW$dwStyle$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("fType"),
        C_INT.withName("fState"),
        C_INT.withName("wID"),
        C_POINTER.withName("hbmpChecked"),
        C_POINTER.withName("hbmpUnchecked"),
        C_INT.withName("dwItemData"),
        MemoryLayout.ofSequence(80, C_BOOL).withName("szString"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hbmpItem")
    ).withName("tagIMEMENUITEMINFOA");
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOA$struct$LAYOUT() { return tagIMEMENUITEMINFOA$struct$LAYOUT_; }

    static final MemoryLayout tagIMEMENUITEMINFOA$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOA$cbSize$LAYOUT() { return tagIMEMENUITEMINFOA$cbSize$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOA$cbSize$VH_ = tagIMEMENUITEMINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOA$cbSize$VH() { return tagIMEMENUITEMINFOA$cbSize$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOA$fType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOA$fType$LAYOUT() { return tagIMEMENUITEMINFOA$fType$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOA$fType$VH_ = tagIMEMENUITEMINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fType"));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOA$fType$VH() { return tagIMEMENUITEMINFOA$fType$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOA$fState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOA$fState$LAYOUT() { return tagIMEMENUITEMINFOA$fState$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOA$fState$VH_ = tagIMEMENUITEMINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fState"));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOA$fState$VH() { return tagIMEMENUITEMINFOA$fState$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOA$wID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOA$wID$LAYOUT() { return tagIMEMENUITEMINFOA$wID$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOA$wID$VH_ = tagIMEMENUITEMINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("wID"));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOA$wID$VH() { return tagIMEMENUITEMINFOA$wID$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOA$hbmpChecked$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOA$hbmpChecked$LAYOUT() { return tagIMEMENUITEMINFOA$hbmpChecked$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOA$hbmpChecked$VH_ = MemoryHandles.asAddressVarHandle(tagIMEMENUITEMINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpChecked")));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOA$hbmpChecked$VH() { return tagIMEMENUITEMINFOA$hbmpChecked$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOA$hbmpUnchecked$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOA$hbmpUnchecked$LAYOUT() { return tagIMEMENUITEMINFOA$hbmpUnchecked$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOA$hbmpUnchecked$VH_ = MemoryHandles.asAddressVarHandle(tagIMEMENUITEMINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpUnchecked")));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOA$hbmpUnchecked$VH() { return tagIMEMENUITEMINFOA$hbmpUnchecked$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOA$dwItemData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOA$dwItemData$LAYOUT() { return tagIMEMENUITEMINFOA$dwItemData$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOA$dwItemData$VH_ = tagIMEMENUITEMINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwItemData"));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOA$dwItemData$VH() { return tagIMEMENUITEMINFOA$dwItemData$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOA$hbmpItem$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOA$hbmpItem$LAYOUT() { return tagIMEMENUITEMINFOA$hbmpItem$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOA$hbmpItem$VH_ = MemoryHandles.asAddressVarHandle(tagIMEMENUITEMINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpItem")));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOA$hbmpItem$VH() { return tagIMEMENUITEMINFOA$hbmpItem$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("fType"),
        C_INT.withName("fState"),
        C_INT.withName("wID"),
        C_POINTER.withName("hbmpChecked"),
        C_POINTER.withName("hbmpUnchecked"),
        C_INT.withName("dwItemData"),
        MemoryLayout.ofSequence(80, C_SHORT).withName("szString"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hbmpItem")
    ).withName("tagIMEMENUITEMINFOW");
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOW$struct$LAYOUT() { return tagIMEMENUITEMINFOW$struct$LAYOUT_; }

    static final MemoryLayout tagIMEMENUITEMINFOW$cbSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOW$cbSize$LAYOUT() { return tagIMEMENUITEMINFOW$cbSize$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOW$cbSize$VH_ = tagIMEMENUITEMINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOW$cbSize$VH() { return tagIMEMENUITEMINFOW$cbSize$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOW$fType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOW$fType$LAYOUT() { return tagIMEMENUITEMINFOW$fType$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOW$fType$VH_ = tagIMEMENUITEMINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fType"));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOW$fType$VH() { return tagIMEMENUITEMINFOW$fType$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOW$fState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOW$fState$LAYOUT() { return tagIMEMENUITEMINFOW$fState$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOW$fState$VH_ = tagIMEMENUITEMINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fState"));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOW$fState$VH() { return tagIMEMENUITEMINFOW$fState$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOW$wID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOW$wID$LAYOUT() { return tagIMEMENUITEMINFOW$wID$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOW$wID$VH_ = tagIMEMENUITEMINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("wID"));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOW$wID$VH() { return tagIMEMENUITEMINFOW$wID$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOW$hbmpChecked$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOW$hbmpChecked$LAYOUT() { return tagIMEMENUITEMINFOW$hbmpChecked$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOW$hbmpChecked$VH_ = MemoryHandles.asAddressVarHandle(tagIMEMENUITEMINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpChecked")));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOW$hbmpChecked$VH() { return tagIMEMENUITEMINFOW$hbmpChecked$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOW$hbmpUnchecked$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOW$hbmpUnchecked$LAYOUT() { return tagIMEMENUITEMINFOW$hbmpUnchecked$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOW$hbmpUnchecked$VH_ = MemoryHandles.asAddressVarHandle(tagIMEMENUITEMINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpUnchecked")));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOW$hbmpUnchecked$VH() { return tagIMEMENUITEMINFOW$hbmpUnchecked$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOW$dwItemData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOW$dwItemData$LAYOUT() { return tagIMEMENUITEMINFOW$dwItemData$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOW$dwItemData$VH_ = tagIMEMENUITEMINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwItemData"));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOW$dwItemData$VH() { return tagIMEMENUITEMINFOW$dwItemData$VH_; }

    static final MemoryLayout tagIMEMENUITEMINFOW$hbmpItem$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagIMEMENUITEMINFOW$hbmpItem$LAYOUT() { return tagIMEMENUITEMINFOW$hbmpItem$LAYOUT_; }

    static final VarHandle tagIMEMENUITEMINFOW$hbmpItem$VH_ = MemoryHandles.asAddressVarHandle(tagIMEMENUITEMINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpItem")));
    public static java.lang.invoke.VarHandle tagIMEMENUITEMINFOW$hbmpItem$VH() { return tagIMEMENUITEMINFOW$hbmpItem$VH_; }

    static final MemoryLayout tagIMECHARPOSITION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwSize"),
        C_INT.withName("dwCharPos"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("pt"),
        C_INT.withName("cLineHeight"),
        MemoryLayout.ofStruct(
            C_INT.withName("left"),
            C_INT.withName("top"),
            C_INT.withName("right"),
            C_INT.withName("bottom")
        ).withName("rcDocument")
    ).withName("tagIMECHARPOSITION");
    public static jdk.incubator.foreign.MemoryLayout tagIMECHARPOSITION$struct$LAYOUT() { return tagIMECHARPOSITION$struct$LAYOUT_; }

    static final MemoryLayout tagIMECHARPOSITION$dwSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMECHARPOSITION$dwSize$LAYOUT() { return tagIMECHARPOSITION$dwSize$LAYOUT_; }

    static final VarHandle tagIMECHARPOSITION$dwSize$VH_ = tagIMECHARPOSITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    public static java.lang.invoke.VarHandle tagIMECHARPOSITION$dwSize$VH() { return tagIMECHARPOSITION$dwSize$VH_; }

    static final MemoryLayout tagIMECHARPOSITION$dwCharPos$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMECHARPOSITION$dwCharPos$LAYOUT() { return tagIMECHARPOSITION$dwCharPos$LAYOUT_; }

    static final VarHandle tagIMECHARPOSITION$dwCharPos$VH_ = tagIMECHARPOSITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCharPos"));
    public static java.lang.invoke.VarHandle tagIMECHARPOSITION$dwCharPos$VH() { return tagIMECHARPOSITION$dwCharPos$VH_; }

    static final MemoryLayout tagIMECHARPOSITION$cLineHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagIMECHARPOSITION$cLineHeight$LAYOUT() { return tagIMECHARPOSITION$cLineHeight$LAYOUT_; }

    static final VarHandle tagIMECHARPOSITION$cLineHeight$VH_ = tagIMECHARPOSITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cLineHeight"));
    public static java.lang.invoke.VarHandle tagIMECHARPOSITION$cLineHeight$VH() { return tagIMECHARPOSITION$cLineHeight$VH_; }

    static final FunctionDescriptor ImmInstallIMEA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmInstallIMEA$FUNC() { return ImmInstallIMEA$FUNC_; }

    static final MethodHandle ImmInstallIMEA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmInstallIMEA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ImmInstallIMEA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmInstallIMEA$MH() { return ImmInstallIMEA$MH_; }

    static final FunctionDescriptor ImmInstallIMEW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmInstallIMEW$FUNC() { return ImmInstallIMEW$FUNC_; }

    static final MethodHandle ImmInstallIMEW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmInstallIMEW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ImmInstallIMEW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmInstallIMEW$MH() { return ImmInstallIMEW$MH_; }

    static final FunctionDescriptor ImmGetDefaultIMEWnd$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetDefaultIMEWnd$FUNC() { return ImmGetDefaultIMEWnd$FUNC_; }

    static final MethodHandle ImmGetDefaultIMEWnd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetDefaultIMEWnd",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ImmGetDefaultIMEWnd$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetDefaultIMEWnd$MH() { return ImmGetDefaultIMEWnd$MH_; }

    static final FunctionDescriptor ImmGetDescriptionA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetDescriptionA$FUNC() { return ImmGetDescriptionA$FUNC_; }

    static final MethodHandle ImmGetDescriptionA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetDescriptionA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetDescriptionA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetDescriptionA$MH() { return ImmGetDescriptionA$MH_; }

    static final FunctionDescriptor ImmGetDescriptionW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetDescriptionW$FUNC() { return ImmGetDescriptionW$FUNC_; }

    static final MethodHandle ImmGetDescriptionW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetDescriptionW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetDescriptionW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetDescriptionW$MH() { return ImmGetDescriptionW$MH_; }

    static final FunctionDescriptor ImmGetIMEFileNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetIMEFileNameA$FUNC() { return ImmGetIMEFileNameA$FUNC_; }

    static final MethodHandle ImmGetIMEFileNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetIMEFileNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetIMEFileNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetIMEFileNameA$MH() { return ImmGetIMEFileNameA$MH_; }

    static final FunctionDescriptor ImmGetIMEFileNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetIMEFileNameW$FUNC() { return ImmGetIMEFileNameW$FUNC_; }

    static final MethodHandle ImmGetIMEFileNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetIMEFileNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetIMEFileNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetIMEFileNameW$MH() { return ImmGetIMEFileNameW$MH_; }

    static final FunctionDescriptor ImmGetProperty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetProperty$FUNC() { return ImmGetProperty$FUNC_; }

    static final MethodHandle ImmGetProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetProperty$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetProperty$MH() { return ImmGetProperty$MH_; }

    static final FunctionDescriptor ImmIsIME$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmIsIME$FUNC() { return ImmIsIME$FUNC_; }

    static final MethodHandle ImmIsIME$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmIsIME",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmIsIME$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmIsIME$MH() { return ImmIsIME$MH_; }

    static final FunctionDescriptor ImmSimulateHotKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmSimulateHotKey$FUNC() { return ImmSimulateHotKey$FUNC_; }

    static final MethodHandle ImmSimulateHotKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmSimulateHotKey",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ImmSimulateHotKey$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmSimulateHotKey$MH() { return ImmSimulateHotKey$MH_; }

    static final FunctionDescriptor ImmCreateContext$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor ImmCreateContext$FUNC() { return ImmCreateContext$FUNC_; }

    static final MethodHandle ImmCreateContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmCreateContext",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        ImmCreateContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmCreateContext$MH() { return ImmCreateContext$MH_; }

    static final FunctionDescriptor ImmDestroyContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmDestroyContext$FUNC() { return ImmDestroyContext$FUNC_; }

    static final MethodHandle ImmDestroyContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmDestroyContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmDestroyContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmDestroyContext$MH() { return ImmDestroyContext$MH_; }

    static final FunctionDescriptor ImmGetContext$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetContext$FUNC() { return ImmGetContext$FUNC_; }

    static final MethodHandle ImmGetContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ImmGetContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetContext$MH() { return ImmGetContext$MH_; }

    static final FunctionDescriptor ImmReleaseContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmReleaseContext$FUNC() { return ImmReleaseContext$FUNC_; }

    static final MethodHandle ImmReleaseContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmReleaseContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmReleaseContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmReleaseContext$MH() { return ImmReleaseContext$MH_; }

    static final FunctionDescriptor ImmAssociateContext$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmAssociateContext$FUNC() { return ImmAssociateContext$FUNC_; }

    static final MethodHandle ImmAssociateContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmAssociateContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ImmAssociateContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmAssociateContext$MH() { return ImmAssociateContext$MH_; }

    static final FunctionDescriptor ImmAssociateContextEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmAssociateContextEx$FUNC() { return ImmAssociateContextEx$FUNC_; }

    static final MethodHandle ImmAssociateContextEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmAssociateContextEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ImmAssociateContextEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmAssociateContextEx$MH() { return ImmAssociateContextEx$MH_; }

    static final FunctionDescriptor ImmGetCompositionStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetCompositionStringA$FUNC() { return ImmGetCompositionStringA$FUNC_; }

    static final MethodHandle ImmGetCompositionStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetCompositionStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetCompositionStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetCompositionStringA$MH() { return ImmGetCompositionStringA$MH_; }

    static final FunctionDescriptor ImmGetCompositionStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetCompositionStringW$FUNC() { return ImmGetCompositionStringW$FUNC_; }

    static final MethodHandle ImmGetCompositionStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetCompositionStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetCompositionStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetCompositionStringW$MH() { return ImmGetCompositionStringW$MH_; }

    static final FunctionDescriptor ImmSetCompositionStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmSetCompositionStringA$FUNC() { return ImmSetCompositionStringA$FUNC_; }

    static final MethodHandle ImmSetCompositionStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmSetCompositionStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        ImmSetCompositionStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmSetCompositionStringA$MH() { return ImmSetCompositionStringA$MH_; }

    static final FunctionDescriptor ImmSetCompositionStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmSetCompositionStringW$FUNC() { return ImmSetCompositionStringW$FUNC_; }

    static final MethodHandle ImmSetCompositionStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmSetCompositionStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        ImmSetCompositionStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmSetCompositionStringW$MH() { return ImmSetCompositionStringW$MH_; }

    static final FunctionDescriptor ImmGetCandidateListCountA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetCandidateListCountA$FUNC() { return ImmGetCandidateListCountA$FUNC_; }

    static final MethodHandle ImmGetCandidateListCountA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetCandidateListCountA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmGetCandidateListCountA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetCandidateListCountA$MH() { return ImmGetCandidateListCountA$MH_; }

    static final FunctionDescriptor ImmGetCandidateListCountW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetCandidateListCountW$FUNC() { return ImmGetCandidateListCountW$FUNC_; }

    static final MethodHandle ImmGetCandidateListCountW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetCandidateListCountW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmGetCandidateListCountW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetCandidateListCountW$MH() { return ImmGetCandidateListCountW$MH_; }

    static final FunctionDescriptor ImmGetCandidateListA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetCandidateListA$FUNC() { return ImmGetCandidateListA$FUNC_; }

    static final MethodHandle ImmGetCandidateListA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetCandidateListA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetCandidateListA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetCandidateListA$MH() { return ImmGetCandidateListA$MH_; }

    static final FunctionDescriptor ImmGetCandidateListW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetCandidateListW$FUNC() { return ImmGetCandidateListW$FUNC_; }

    static final MethodHandle ImmGetCandidateListW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetCandidateListW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetCandidateListW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetCandidateListW$MH() { return ImmGetCandidateListW$MH_; }

    static final FunctionDescriptor ImmGetGuideLineA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetGuideLineA$FUNC() { return ImmGetGuideLineA$FUNC_; }

    static final MethodHandle ImmGetGuideLineA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetGuideLineA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetGuideLineA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetGuideLineA$MH() { return ImmGetGuideLineA$MH_; }

    static final FunctionDescriptor ImmGetGuideLineW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetGuideLineW$FUNC() { return ImmGetGuideLineW$FUNC_; }

    static final MethodHandle ImmGetGuideLineW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetGuideLineW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetGuideLineW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetGuideLineW$MH() { return ImmGetGuideLineW$MH_; }

    static final FunctionDescriptor ImmGetConversionStatus$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetConversionStatus$FUNC() { return ImmGetConversionStatus$FUNC_; }

    static final MethodHandle ImmGetConversionStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetConversionStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmGetConversionStatus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetConversionStatus$MH() { return ImmGetConversionStatus$MH_; }

    static final FunctionDescriptor ImmSetConversionStatus$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmSetConversionStatus$FUNC() { return ImmSetConversionStatus$FUNC_; }

    static final MethodHandle ImmSetConversionStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmSetConversionStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        ImmSetConversionStatus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmSetConversionStatus$MH() { return ImmSetConversionStatus$MH_; }

    static final FunctionDescriptor ImmGetOpenStatus$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetOpenStatus$FUNC() { return ImmGetOpenStatus$FUNC_; }

    static final MethodHandle ImmGetOpenStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetOpenStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmGetOpenStatus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetOpenStatus$MH() { return ImmGetOpenStatus$MH_; }

    static final FunctionDescriptor ImmSetOpenStatus$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmSetOpenStatus$FUNC() { return ImmSetOpenStatus$FUNC_; }

    static final MethodHandle ImmSetOpenStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmSetOpenStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ImmSetOpenStatus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmSetOpenStatus$MH() { return ImmSetOpenStatus$MH_; }

    static final FunctionDescriptor ImmGetCompositionFontA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetCompositionFontA$FUNC() { return ImmGetCompositionFontA$FUNC_; }

    static final MethodHandle ImmGetCompositionFontA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetCompositionFontA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmGetCompositionFontA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetCompositionFontA$MH() { return ImmGetCompositionFontA$MH_; }

    static final FunctionDescriptor ImmGetCompositionFontW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetCompositionFontW$FUNC() { return ImmGetCompositionFontW$FUNC_; }

    static final MethodHandle ImmGetCompositionFontW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetCompositionFontW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmGetCompositionFontW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetCompositionFontW$MH() { return ImmGetCompositionFontW$MH_; }

    static final FunctionDescriptor ImmSetCompositionFontA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmSetCompositionFontA$FUNC() { return ImmSetCompositionFontA$FUNC_; }

    static final MethodHandle ImmSetCompositionFontA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmSetCompositionFontA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmSetCompositionFontA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmSetCompositionFontA$MH() { return ImmSetCompositionFontA$MH_; }

    static final FunctionDescriptor ImmSetCompositionFontW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmSetCompositionFontW$FUNC() { return ImmSetCompositionFontW$FUNC_; }

    static final MethodHandle ImmSetCompositionFontW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmSetCompositionFontW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmSetCompositionFontW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmSetCompositionFontW$MH() { return ImmSetCompositionFontW$MH_; }

    static final FunctionDescriptor ImmConfigureIMEA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmConfigureIMEA$FUNC() { return ImmConfigureIMEA$FUNC_; }

    static final MethodHandle ImmConfigureIMEA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmConfigureIMEA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ImmConfigureIMEA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmConfigureIMEA$MH() { return ImmConfigureIMEA$MH_; }

    static final FunctionDescriptor ImmConfigureIMEW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmConfigureIMEW$FUNC() { return ImmConfigureIMEW$FUNC_; }

    static final MethodHandle ImmConfigureIMEW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmConfigureIMEW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ImmConfigureIMEW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmConfigureIMEW$MH() { return ImmConfigureIMEW$MH_; }

    static final FunctionDescriptor ImmEscapeA$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmEscapeA$FUNC() { return ImmEscapeA$FUNC_; }

    static final MethodHandle ImmEscapeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmEscapeA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)J",
        ImmEscapeA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmEscapeA$MH() { return ImmEscapeA$MH_; }

    static final FunctionDescriptor ImmEscapeW$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmEscapeW$FUNC() { return ImmEscapeW$FUNC_; }

    static final MethodHandle ImmEscapeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmEscapeW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)J",
        ImmEscapeW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmEscapeW$MH() { return ImmEscapeW$MH_; }

    static final FunctionDescriptor ImmGetConversionListA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetConversionListA$FUNC() { return ImmGetConversionListA$FUNC_; }

    static final MethodHandle ImmGetConversionListA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetConversionListA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        ImmGetConversionListA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetConversionListA$MH() { return ImmGetConversionListA$MH_; }

    static final FunctionDescriptor ImmGetConversionListW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetConversionListW$FUNC() { return ImmGetConversionListW$FUNC_; }

    static final MethodHandle ImmGetConversionListW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetConversionListW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        ImmGetConversionListW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetConversionListW$MH() { return ImmGetConversionListW$MH_; }

    static final FunctionDescriptor ImmNotifyIME$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmNotifyIME$FUNC() { return ImmNotifyIME$FUNC_; }

    static final MethodHandle ImmNotifyIME$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmNotifyIME",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        ImmNotifyIME$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmNotifyIME$MH() { return ImmNotifyIME$MH_; }

    static final FunctionDescriptor ImmGetStatusWindowPos$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetStatusWindowPos$FUNC() { return ImmGetStatusWindowPos$FUNC_; }

    static final MethodHandle ImmGetStatusWindowPos$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetStatusWindowPos",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmGetStatusWindowPos$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetStatusWindowPos$MH() { return ImmGetStatusWindowPos$MH_; }

    static final FunctionDescriptor ImmSetStatusWindowPos$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmSetStatusWindowPos$FUNC() { return ImmSetStatusWindowPos$FUNC_; }

    static final MethodHandle ImmSetStatusWindowPos$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmSetStatusWindowPos",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmSetStatusWindowPos$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmSetStatusWindowPos$MH() { return ImmSetStatusWindowPos$MH_; }

    static final FunctionDescriptor ImmGetCompositionWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetCompositionWindow$FUNC() { return ImmGetCompositionWindow$FUNC_; }

    static final MethodHandle ImmGetCompositionWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetCompositionWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmGetCompositionWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetCompositionWindow$MH() { return ImmGetCompositionWindow$MH_; }

    static final FunctionDescriptor ImmSetCompositionWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmSetCompositionWindow$FUNC() { return ImmSetCompositionWindow$FUNC_; }

    static final MethodHandle ImmSetCompositionWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmSetCompositionWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmSetCompositionWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmSetCompositionWindow$MH() { return ImmSetCompositionWindow$MH_; }

    static final FunctionDescriptor ImmGetCandidateWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetCandidateWindow$FUNC() { return ImmGetCandidateWindow$FUNC_; }

    static final MethodHandle ImmGetCandidateWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetCandidateWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ImmGetCandidateWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetCandidateWindow$MH() { return ImmGetCandidateWindow$MH_; }

    static final FunctionDescriptor ImmSetCandidateWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmSetCandidateWindow$FUNC() { return ImmSetCandidateWindow$FUNC_; }

    static final MethodHandle ImmSetCandidateWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmSetCandidateWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmSetCandidateWindow$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmSetCandidateWindow$MH() { return ImmSetCandidateWindow$MH_; }

    static final FunctionDescriptor ImmIsUIMessageA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmIsUIMessageA$FUNC() { return ImmIsUIMessageA$FUNC_; }

    static final MethodHandle ImmIsUIMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmIsUIMessageA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)I",
        ImmIsUIMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmIsUIMessageA$MH() { return ImmIsUIMessageA$MH_; }

    static final FunctionDescriptor ImmIsUIMessageW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmIsUIMessageW$FUNC() { return ImmIsUIMessageW$FUNC_; }

    static final MethodHandle ImmIsUIMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmIsUIMessageW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJ)I",
        ImmIsUIMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmIsUIMessageW$MH() { return ImmIsUIMessageW$MH_; }

    static final FunctionDescriptor ImmGetVirtualKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetVirtualKey$FUNC() { return ImmGetVirtualKey$FUNC_; }

    static final MethodHandle ImmGetVirtualKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetVirtualKey",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmGetVirtualKey$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetVirtualKey$MH() { return ImmGetVirtualKey$MH_; }

    static final FunctionDescriptor ImmRegisterWordA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmRegisterWordA$FUNC() { return ImmRegisterWordA$FUNC_; }

    static final MethodHandle ImmRegisterWordA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmRegisterWordA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ImmRegisterWordA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmRegisterWordA$MH() { return ImmRegisterWordA$MH_; }

    static final FunctionDescriptor ImmRegisterWordW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmRegisterWordW$FUNC() { return ImmRegisterWordW$FUNC_; }

    static final MethodHandle ImmRegisterWordW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmRegisterWordW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ImmRegisterWordW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmRegisterWordW$MH() { return ImmRegisterWordW$MH_; }

    static final FunctionDescriptor ImmUnregisterWordA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmUnregisterWordA$FUNC() { return ImmUnregisterWordA$FUNC_; }

    static final MethodHandle ImmUnregisterWordA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmUnregisterWordA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ImmUnregisterWordA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmUnregisterWordA$MH() { return ImmUnregisterWordA$MH_; }

    static final FunctionDescriptor ImmUnregisterWordW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmUnregisterWordW$FUNC() { return ImmUnregisterWordW$FUNC_; }

    static final MethodHandle ImmUnregisterWordW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmUnregisterWordW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ImmUnregisterWordW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmUnregisterWordW$MH() { return ImmUnregisterWordW$MH_; }

    static final FunctionDescriptor ImmGetRegisterWordStyleA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetRegisterWordStyleA$FUNC() { return ImmGetRegisterWordStyleA$FUNC_; }

    static final MethodHandle ImmGetRegisterWordStyleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetRegisterWordStyleA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ImmGetRegisterWordStyleA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetRegisterWordStyleA$MH() { return ImmGetRegisterWordStyleA$MH_; }

    static final FunctionDescriptor ImmGetRegisterWordStyleW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetRegisterWordStyleW$FUNC() { return ImmGetRegisterWordStyleW$FUNC_; }

    static final MethodHandle ImmGetRegisterWordStyleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetRegisterWordStyleW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ImmGetRegisterWordStyleW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetRegisterWordStyleW$MH() { return ImmGetRegisterWordStyleW$MH_; }

    static final FunctionDescriptor ImmEnumRegisterWordA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmEnumRegisterWordA$FUNC() { return ImmEnumRegisterWordA$FUNC_; }

    static final MethodHandle ImmEnumRegisterWordA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmEnumRegisterWordA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmEnumRegisterWordA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmEnumRegisterWordA$MH() { return ImmEnumRegisterWordA$MH_; }

    static final FunctionDescriptor ImmEnumRegisterWordA$x0$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmEnumRegisterWordA$x0$FUNC() { return ImmEnumRegisterWordA$x0$FUNC_; }

    static final FunctionDescriptor ImmEnumRegisterWordW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmEnumRegisterWordW$FUNC() { return ImmEnumRegisterWordW$FUNC_; }

    static final MethodHandle ImmEnumRegisterWordW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmEnumRegisterWordW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ImmEnumRegisterWordW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmEnumRegisterWordW$MH() { return ImmEnumRegisterWordW$MH_; }

    static final FunctionDescriptor ImmEnumRegisterWordW$x0$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmEnumRegisterWordW$x0$FUNC() { return ImmEnumRegisterWordW$x0$FUNC_; }

    static final FunctionDescriptor ImmDisableIME$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmDisableIME$FUNC() { return ImmDisableIME$FUNC_; }

    static final MethodHandle ImmDisableIME$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmDisableIME",
        "(I)I",
        ImmDisableIME$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmDisableIME$MH() { return ImmDisableIME$MH_; }

    static final FunctionDescriptor ImmEnumInputContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmEnumInputContext$FUNC() { return ImmEnumInputContext$FUNC_; }

    static final MethodHandle ImmEnumInputContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmEnumInputContext",
        "(ILjdk/incubator/foreign/MemoryAddress;J)I",
        ImmEnumInputContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmEnumInputContext$MH() { return ImmEnumInputContext$MH_; }

    static final FunctionDescriptor ImmEnumInputContext$lpfn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmEnumInputContext$lpfn$FUNC() { return ImmEnumInputContext$lpfn$FUNC_; }

    static final FunctionDescriptor ImmGetImeMenuItemsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetImeMenuItemsA$FUNC() { return ImmGetImeMenuItemsA$FUNC_; }

    static final MethodHandle ImmGetImeMenuItemsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetImeMenuItemsA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetImeMenuItemsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetImeMenuItemsA$MH() { return ImmGetImeMenuItemsA$MH_; }

    static final FunctionDescriptor ImmGetImeMenuItemsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmGetImeMenuItemsW$FUNC() { return ImmGetImeMenuItemsW$FUNC_; }

    static final MethodHandle ImmGetImeMenuItemsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmGetImeMenuItemsW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ImmGetImeMenuItemsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmGetImeMenuItemsW$MH() { return ImmGetImeMenuItemsW$MH_; }

    static final FunctionDescriptor ImmDisableTextFrameService$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImmDisableTextFrameService$FUNC() { return ImmDisableTextFrameService$FUNC_; }

    static final MethodHandle ImmDisableTextFrameService$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmDisableTextFrameService",
        "(I)I",
        ImmDisableTextFrameService$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmDisableTextFrameService$MH() { return ImmDisableTextFrameService$MH_; }

    static final FunctionDescriptor ImmDisableLegacyIME$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor ImmDisableLegacyIME$FUNC() { return ImmDisableLegacyIME$FUNC_; }

    static final MethodHandle ImmDisableLegacyIME$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImmDisableLegacyIME",
        "()I",
        ImmDisableLegacyIME$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImmDisableLegacyIME$MH() { return ImmDisableLegacyIME$MH_; }

    public static int WINAPI_PARTITION_SERVER() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_WINTRUST() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_WEBSERVICES() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_EVENTLOGSERVICE() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_VHD() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_PERFCOUNTER() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_SECURESTARTUP() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_REMOTEFS() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_BOOTABLESKU() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_CMDTOOLS() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_DISM() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_CORESETUP() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_APPRUNTIME() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_ESENT() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_WINMGMT() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_WNV() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_CLUSTER() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_VSS() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_TRAFFIC() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_ISCSI() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_STORAGE() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_MPSSVC() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_APPXDEPLOYMENT() { return (int)0L; }

    public static int WINAPI_PARTITION_PKG_WER() { return (int)0L; }

    public static int WINAPI_FAMILY_APP() { return (int)2L; }

    public static int WINAPI_FAMILY() { return (int)100L; }

    public static int WINAPI_PARTITION_DESKTOP() { return (int)1L; }

    public static int WINAPI_PARTITION_APP() { return (int)1L; }

    public static int WINAPI_PARTITION_PC_APP() { return (int)1L; }

    public static int WINAPI_PARTITION_PHONE_APP() { return (int)0L; }

    public static int WINAPI_PARTITION_GAMES() { return (int)1L; }

    public static int WINAPI_PARTITION_SYSTEM() { return (int)0L; }

    public static int WINAPI_PARTITION_PHONE() { return (int)0L; }

    public static int _WIN32_IE_NT4() { return (int)512L; }

    public static int _WIN32_IE_NT4SP1() { return (int)512L; }

    public static int _WIN32_IE_NT4SP2() { return (int)512L; }

    public static int _WIN32_IE_NT4SP3() { return (int)770L; }

    public static int _WIN32_IE_NT4SP4() { return (int)1025L; }

    public static int _WIN32_IE_NT4SP5() { return (int)1025L; }

    public static int _WIN32_IE_NT4SP6() { return (int)1280L; }

    public static int _WIN32_IE_WIN98() { return (int)1025L; }

    public static int _WIN32_IE_WIN98SE() { return (int)1280L; }

    public static int _WIN32_IE_WINME() { return (int)1360L; }

    public static int _WIN32_IE_WIN2K() { return (int)1281L; }

    public static int _WIN32_IE_WIN2KSP1() { return (int)1281L; }

    public static int _WIN32_IE_WIN2KSP2() { return (int)1281L; }

    public static int _WIN32_IE_WIN2KSP3() { return (int)1281L; }

    public static int _WIN32_IE_WIN2KSP4() { return (int)1281L; }

    public static int _WIN32_IE_XP() { return (int)1536L; }

    public static int _WIN32_IE_XPSP1() { return (int)1537L; }

    public static int _WIN32_IE_XPSP2() { return (int)1539L; }

    public static int _WIN32_IE_WS03SP1() { return (int)1539L; }

    public static int _WIN32_IE_WIN6() { return (int)1792L; }

    public static int _WIN32_IE_LONGHORN() { return (int)1792L; }

    public static int _WIN32_IE_WIN7() { return (int)2048L; }

    public static int _WIN32_IE_WIN8() { return (int)2560L; }

    public static int _WIN32_IE_WINBLUE() { return (int)2560L; }

    public static int _WIN32_IE_WINTHRESHOLD() { return (int)2560L; }

    public static int _WIN32_IE_WIN10() { return (int)2560L; }

    public static int NTDDI_VISTA() { return (int)100663296L; }

    public static int NTDDI_VISTASP1() { return (int)100663552L; }

    public static int NTDDI_VISTASP2() { return (int)100663808L; }

    public static int NTDDI_VISTASP3() { return (int)100664064L; }

    public static int NTDDI_VISTASP4() { return (int)100664320L; }

    public static int NTDDI_LONGHORN() { return (int)100663296L; }

    public static int NTDDI_WS08() { return (int)100663552L; }

    public static int NTDDI_WS08SP2() { return (int)100663808L; }

    public static int NTDDI_WS08SP3() { return (int)100664064L; }

    public static int NTDDI_WS08SP4() { return (int)100664320L; }

    public static int WDK_NTDDI_VERSION() { return (int)167772168L; }

    public static int OSVERSION_MASK() { return (int)4294901760L; }

    public static int NTDDI_VERSION() { return (int)167772168L; }

    public static int WINVER() { return (int)2560L; }

    static final MemoryAddress NULL$ADDR_CONSTANT_ = MemoryAddress.ofLong(0L);
    public static jdk.incubator.foreign.MemoryAddress NULL() { return NULL$ADDR_CONSTANT_; }

    public static int EXCEPTION_CONTINUE_EXECUTION() { return (int)-1L; }

    public static int _UCRT_DISABLED_WARNINGS() { return (int)4324L; }

    public static long _TRUNCATE() { return -1L; }

    public static long _CRT_SIZE_MAX() { return -1L; }

    static final MemorySegment __FILEW__$SEGMENT_CONSTANT_ = CSupport.toCString("C");
    public static jdk.incubator.foreign.MemorySegment __FILEW__() { return __FILEW__$SEGMENT_CONSTANT_; }

    public static int __STDC_SECURE_LIB__() { return (int)200411L; }

    public static int __GOT_SECURE_LIB__() { return (int)200411L; }

    public static short WEOF() { return (short)65535L; }

    public static int _ALPHA() { return (int)259L; }

    public static long MAX_NATURAL_ALIGNMENT() { return 8L; }

    public static long ADDRESS_TAG_BIT() { return 4398046511104L; }

    public static long MAXUINT_PTR() { return -1L; }

    public static long MAXINT_PTR() { return 9223372036854775807L; }

    public static long MININT_PTR() { return -9223372036854775808L; }

    public static long MAXULONG_PTR() { return -1L; }

    public static long MAXLONG_PTR() { return 9223372036854775807L; }

    public static long MINLONG_PTR() { return -9223372036854775808L; }

    public static int MAXUHALF_PTR() { return (int)4294967295L; }

    public static int MAXHALF_PTR() { return (int)2147483647L; }

    public static int MINHALF_PTR() { return (int)-2147483648L; }

    public static byte MAXUINT8() { return (byte)255L; }

    public static byte MAXINT8() { return (byte)127L; }

    public static byte MININT8() { return (byte)-128L; }

    public static short MAXUINT16() { return (short)65535L; }

    public static short MAXINT16() { return (short)32767L; }

    public static short MININT16() { return (short)-32768L; }

    public static int MAXUINT32() { return (int)4294967295L; }

    public static int MAXINT32() { return (int)2147483647L; }

    public static int MININT32() { return (int)-2147483648L; }

    public static long MAXUINT64() { return -1L; }

    public static long MAXINT64() { return 9223372036854775807L; }

    public static long MININT64() { return -9223372036854775808L; }

    public static int MAXULONG32() { return (int)4294967295L; }

    public static int MAXLONG32() { return (int)2147483647L; }

    public static int MINLONG32() { return (int)-2147483648L; }

    public static long MAXULONG64() { return -1L; }

    public static long MAXLONG64() { return 9223372036854775807L; }

    public static long MINLONG64() { return -9223372036854775808L; }

    public static long MAXULONGLONG() { return -1L; }

    public static long MINLONGLONG() { return -9223372036854775808L; }

    public static long MAXSIZE_T() { return -1L; }

    public static long MAXSSIZE_T() { return 9223372036854775807L; }

    public static long MINSSIZE_T() { return -9223372036854775808L; }

    public static int MAXUINT() { return (int)4294967295L; }

    public static int MAXINT() { return (int)2147483647L; }

    public static int MININT() { return (int)-2147483648L; }

    public static int MAXDWORD32() { return (int)4294967295L; }

    public static long MAXDWORD64() { return -1L; }

    public static int UCSCHAR_INVALID_CHARACTER() { return (int)4294967295L; }

    public static int MIN_UCSCHAR() { return (int)0L; }

    public static int MAX_UCSCHAR() { return (int)1114111L; }

    public static int MAXIMUM_PROCESSORS() { return (int)64L; }

    public static int ERROR_SEVERITY_WARNING() { return (int)2147483648L; }

    public static int ERROR_SEVERITY_ERROR() { return (int)3221225472L; }

    public static long MAXLONGLONG() { return 9223372036854775807L; }

    public static byte ANSI_NULL() { return (byte)0L; }

    public static short UNICODE_NULL() { return (short)0L; }

    public static short UNICODE_STRING_MAX_BYTES() { return (short)65534L; }

    public static int UNICODE_STRING_MAX_CHARS() { return (int)32767L; }

    public static int EDEADLOCK() { return (int)36L; }

    public static int _NLSCMPERROR() { return (int)2147483647L; }

    public static int MINLONG() { return (int)2147483648L; }

    public static int MAXDWORD() { return (int)4294967295L; }

    public static int VER_SERVER_NT() { return (int)2147483648L; }

    public static int PRODUCT_UNLICENSED() { return (int)2882382797L; }

    public static int LANG_SYSTEM_DEFAULT() { return (int)2048L; }

    public static int LANG_USER_DEFAULT() { return (int)1024L; }

    public static int LOCALE_SYSTEM_DEFAULT() { return (int)2048L; }

    public static int LOCALE_USER_DEFAULT() { return (int)1024L; }

    public static int LOCALE_CUSTOM_DEFAULT() { return (int)3072L; }

    public static int LOCALE_CUSTOM_UNSPECIFIED() { return (int)4096L; }

    public static int LOCALE_CUSTOM_UI_DEFAULT() { return (int)5120L; }

    public static int LOCALE_NEUTRAL() { return (int)0L; }

    public static int LOCALE_INVARIANT() { return (int)127L; }

    public static int LOCALE_UNASSIGNED_LCID() { return (int)4096L; }

    public static int STATUS_WAIT_0() { return (int)0L; }

    public static int STATUS_ABANDONED_WAIT_0() { return (int)128L; }

    public static int STATUS_USER_APC() { return (int)192L; }

    public static int STATUS_TIMEOUT() { return (int)258L; }

    public static int STATUS_PENDING() { return (int)259L; }

    public static int DBG_EXCEPTION_HANDLED() { return (int)65537L; }

    public static int DBG_CONTINUE() { return (int)65538L; }

    public static int STATUS_SEGMENT_NOTIFICATION() { return (int)1073741829L; }

    public static int STATUS_FATAL_APP_EXIT() { return (int)1073741845L; }

    public static int DBG_REPLY_LATER() { return (int)1073807361L; }

    public static int DBG_TERMINATE_THREAD() { return (int)1073807363L; }

    public static int DBG_TERMINATE_PROCESS() { return (int)1073807364L; }

    public static int DBG_CONTROL_C() { return (int)1073807365L; }

    public static int DBG_PRINTEXCEPTION_C() { return (int)1073807366L; }

    public static int DBG_RIPEXCEPTION() { return (int)1073807367L; }

    public static int DBG_CONTROL_BREAK() { return (int)1073807368L; }

    public static int DBG_COMMAND_EXCEPTION() { return (int)1073807369L; }

    public static int DBG_PRINTEXCEPTION_WIDE_C() { return (int)1073807370L; }

    public static int STATUS_GUARD_PAGE_VIOLATION() { return (int)2147483649L; }

    public static int STATUS_DATATYPE_MISALIGNMENT() { return (int)2147483650L; }

    public static int STATUS_BREAKPOINT() { return (int)2147483651L; }

    public static int STATUS_SINGLE_STEP() { return (int)2147483652L; }

    public static int STATUS_LONGJUMP() { return (int)2147483686L; }

    public static int STATUS_UNWIND_CONSOLIDATE() { return (int)2147483689L; }

    public static int DBG_EXCEPTION_NOT_HANDLED() { return (int)2147549185L; }

    public static int STATUS_ACCESS_VIOLATION() { return (int)3221225477L; }

    public static int STATUS_IN_PAGE_ERROR() { return (int)3221225478L; }

    public static int STATUS_INVALID_HANDLE() { return (int)3221225480L; }

    public static int STATUS_INVALID_PARAMETER() { return (int)3221225485L; }

    public static int STATUS_NO_MEMORY() { return (int)3221225495L; }

    public static int STATUS_ILLEGAL_INSTRUCTION() { return (int)3221225501L; }

    public static int STATUS_NONCONTINUABLE_EXCEPTION() { return (int)3221225509L; }

    public static int STATUS_INVALID_DISPOSITION() { return (int)3221225510L; }

    public static int STATUS_ARRAY_BOUNDS_EXCEEDED() { return (int)3221225612L; }

    public static int STATUS_FLOAT_DENORMAL_OPERAND() { return (int)3221225613L; }

    public static int STATUS_FLOAT_DIVIDE_BY_ZERO() { return (int)3221225614L; }

    public static int STATUS_FLOAT_INEXACT_RESULT() { return (int)3221225615L; }

    public static int STATUS_FLOAT_INVALID_OPERATION() { return (int)3221225616L; }

    public static int STATUS_FLOAT_OVERFLOW() { return (int)3221225617L; }

    public static int STATUS_FLOAT_STACK_CHECK() { return (int)3221225618L; }

    public static int STATUS_FLOAT_UNDERFLOW() { return (int)3221225619L; }

    public static int STATUS_INTEGER_DIVIDE_BY_ZERO() { return (int)3221225620L; }

    public static int STATUS_INTEGER_OVERFLOW() { return (int)3221225621L; }

    public static int STATUS_PRIVILEGED_INSTRUCTION() { return (int)3221225622L; }

    public static int STATUS_STACK_OVERFLOW() { return (int)3221225725L; }

    public static int STATUS_DLL_NOT_FOUND() { return (int)3221225781L; }

    public static int STATUS_ORDINAL_NOT_FOUND() { return (int)3221225784L; }

    public static int STATUS_ENTRYPOINT_NOT_FOUND() { return (int)3221225785L; }

    public static int STATUS_CONTROL_C_EXIT() { return (int)3221225786L; }

    public static int STATUS_DLL_INIT_FAILED() { return (int)3221225794L; }

    public static int STATUS_CONTROL_STACK_VIOLATION() { return (int)3221225906L; }

    public static int STATUS_FLOAT_MULTIPLE_FAULTS() { return (int)3221226164L; }

    public static int STATUS_FLOAT_MULTIPLE_TRAPS() { return (int)3221226165L; }

    public static int STATUS_REG_NAT_CONSUMPTION() { return (int)3221226185L; }

    public static int STATUS_HEAP_CORRUPTION() { return (int)3221226356L; }

    public static int STATUS_STACK_BUFFER_OVERRUN() { return (int)3221226505L; }

    public static int STATUS_INVALID_CRUNTIME_PARAMETER() { return (int)3221226519L; }

    public static int STATUS_ASSERTION_FAILURE() { return (int)3221226528L; }

    public static int STATUS_ENCLAVE_VIOLATION() { return (int)3221226658L; }

    public static int STATUS_INTERRUPTED() { return (int)3221226773L; }

    public static int STATUS_THREAD_NOT_RUNNING() { return (int)3221226774L; }

    public static int STATUS_ALREADY_REGISTERED() { return (int)3221227288L; }

    public static int STATUS_SXS_EARLY_DEACTIVATION() { return (int)3222601743L; }

    public static int STATUS_SXS_INVALID_DEACTIVATION() { return (int)3222601744L; }

    public static int MAXIMUM_SUSPEND_COUNT() { return (int)127L; }

    public static int PF_TEMPORAL_LEVEL_1() { return (int)1L; }

    public static int PF_TEMPORAL_LEVEL_2() { return (int)2L; }

    public static int PF_TEMPORAL_LEVEL_3() { return (int)3L; }

    public static int PF_NON_TEMPORAL_LEVEL_ALL() { return (int)0L; }

    public static int CONTEXT_AMD64() { return (int)1048576L; }

    public static int CONTEXT_CONTROL() { return (int)1048577L; }

    public static int CONTEXT_INTEGER() { return (int)1048578L; }

    public static int CONTEXT_SEGMENTS() { return (int)1048580L; }

    public static int CONTEXT_FLOATING_POINT() { return (int)1048584L; }

    public static int CONTEXT_DEBUG_REGISTERS() { return (int)1048592L; }

    public static int CONTEXT_FULL() { return (int)1048587L; }

    public static int CONTEXT_ALL() { return (int)1048607L; }

    public static int CONTEXT_XSTATE() { return (int)1048640L; }

    public static int CONTEXT_EXCEPTION_ACTIVE() { return (int)134217728L; }

    public static int CONTEXT_SERVICE_ACTIVE() { return (int)268435456L; }

    public static int CONTEXT_EXCEPTION_REQUEST() { return (int)1073741824L; }

    public static int CONTEXT_EXCEPTION_REPORTING() { return (int)2147483648L; }

    public static int UNW_FLAG_NO_EPILOGUE() { return (int)2147483648L; }

    static final MemorySegment OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("OutOfProcessFunctionTableCallback");
    public static jdk.incubator.foreign.MemorySegment OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME() { return OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME$SEGMENT_CONSTANT_; }

    public static int WOW64_CONTEXT_CONTROL() { return (int)65537L; }

    public static int WOW64_CONTEXT_INTEGER() { return (int)65538L; }

    public static int WOW64_CONTEXT_SEGMENTS() { return (int)65540L; }

    public static int WOW64_CONTEXT_FLOATING_POINT() { return (int)65544L; }

    public static int WOW64_CONTEXT_DEBUG_REGISTERS() { return (int)65552L; }

    public static int WOW64_CONTEXT_EXTENDED_REGISTERS() { return (int)65568L; }

    public static int WOW64_CONTEXT_FULL() { return (int)65543L; }

    public static int WOW64_CONTEXT_ALL() { return (int)65599L; }

    public static int WOW64_CONTEXT_XSTATE() { return (int)65600L; }

    public static int WOW64_CONTEXT_EXCEPTION_REPORTING() { return (int)2147483648L; }

    public static int EXCEPTION_UNWIND() { return (int)102L; }

    public static int DELETE() { return (int)65536L; }

    public static int READ_CONTROL() { return (int)131072L; }

    public static int WRITE_DAC() { return (int)262144L; }

    public static int WRITE_OWNER() { return (int)524288L; }

    public static int SYNCHRONIZE() { return (int)1048576L; }

    public static int STANDARD_RIGHTS_REQUIRED() { return (int)983040L; }

    public static int STANDARD_RIGHTS_READ() { return (int)131072L; }

    public static int STANDARD_RIGHTS_WRITE() { return (int)131072L; }

    public static int STANDARD_RIGHTS_EXECUTE() { return (int)131072L; }

    public static int STANDARD_RIGHTS_ALL() { return (int)2031616L; }

    public static int SPECIFIC_RIGHTS_ALL() { return (int)65535L; }

    public static int ACCESS_SYSTEM_SECURITY() { return (int)16777216L; }

    public static int MAXIMUM_ALLOWED() { return (int)33554432L; }

    public static int GENERIC_READ() { return (int)2147483648L; }

    public static int GENERIC_WRITE() { return (int)1073741824L; }

    public static int GENERIC_EXECUTE() { return (int)536870912L; }

    public static int GENERIC_ALL() { return (int)268435456L; }

    public static int SID_REVISION() { return (int)1L; }

    public static int SID_MAX_SUB_AUTHORITIES() { return (int)15L; }

    public static int SID_RECOMMENDED_SUB_AUTHORITIES() { return (int)1L; }

    public static long SECURITY_MAX_SID_SIZE() { return 68L; }

    public static int SECURITY_MAX_SID_STRING_CHARACTERS() { return (int)187L; }

    public static int SECURITY_NULL_RID() { return (int)0L; }

    public static int SECURITY_WORLD_RID() { return (int)0L; }

    public static int SECURITY_LOCAL_RID() { return (int)0L; }

    public static int SECURITY_LOCAL_LOGON_RID() { return (int)1L; }

    public static int SECURITY_CREATOR_OWNER_RID() { return (int)0L; }

    public static int SECURITY_CREATOR_GROUP_RID() { return (int)1L; }

    public static int SECURITY_CREATOR_OWNER_SERVER_RID() { return (int)2L; }

    public static int SECURITY_CREATOR_GROUP_SERVER_RID() { return (int)3L; }

    public static int SECURITY_CREATOR_OWNER_RIGHTS_RID() { return (int)4L; }

    public static int SECURITY_DIALUP_RID() { return (int)1L; }

    public static int SECURITY_NETWORK_RID() { return (int)2L; }

    public static int SECURITY_BATCH_RID() { return (int)3L; }

    public static int SECURITY_INTERACTIVE_RID() { return (int)4L; }

    public static int SECURITY_LOGON_IDS_RID() { return (int)5L; }

    public static int SECURITY_LOGON_IDS_RID_COUNT() { return (int)3L; }

    public static int SECURITY_SERVICE_RID() { return (int)6L; }

    public static int SECURITY_ANONYMOUS_LOGON_RID() { return (int)7L; }

    public static int SECURITY_PROXY_RID() { return (int)8L; }

    public static int SECURITY_ENTERPRISE_CONTROLLERS_RID() { return (int)9L; }

    public static int SECURITY_SERVER_LOGON_RID() { return (int)9L; }

    public static int SECURITY_PRINCIPAL_SELF_RID() { return (int)10L; }

    public static int SECURITY_AUTHENTICATED_USER_RID() { return (int)11L; }

    public static int SECURITY_RESTRICTED_CODE_RID() { return (int)12L; }

    public static int SECURITY_TERMINAL_SERVER_RID() { return (int)13L; }

    public static int SECURITY_REMOTE_LOGON_RID() { return (int)14L; }

    public static int SECURITY_THIS_ORGANIZATION_RID() { return (int)15L; }

    public static int SECURITY_IUSER_RID() { return (int)17L; }

    public static int SECURITY_LOCAL_SYSTEM_RID() { return (int)18L; }

    public static int SECURITY_LOCAL_SERVICE_RID() { return (int)19L; }

    public static int SECURITY_NETWORK_SERVICE_RID() { return (int)20L; }

    public static int SECURITY_NT_NON_UNIQUE() { return (int)21L; }

    public static int SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT() { return (int)3L; }

    public static int SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID() { return (int)22L; }

    public static int SECURITY_BUILTIN_DOMAIN_RID() { return (int)32L; }

    public static int SECURITY_WRITE_RESTRICTED_CODE_RID() { return (int)33L; }

    public static int SECURITY_PACKAGE_BASE_RID() { return (int)64L; }

    public static int SECURITY_PACKAGE_RID_COUNT() { return (int)2L; }

    public static int SECURITY_PACKAGE_NTLM_RID() { return (int)10L; }

    public static int SECURITY_PACKAGE_SCHANNEL_RID() { return (int)14L; }

    public static int SECURITY_PACKAGE_DIGEST_RID() { return (int)21L; }

    public static int SECURITY_CRED_TYPE_BASE_RID() { return (int)65L; }

    public static int SECURITY_CRED_TYPE_RID_COUNT() { return (int)2L; }

    public static int SECURITY_CRED_TYPE_THIS_ORG_CERT_RID() { return (int)1L; }

    public static int SECURITY_MIN_BASE_RID() { return (int)80L; }

    public static int SECURITY_SERVICE_ID_BASE_RID() { return (int)80L; }

    public static int SECURITY_SERVICE_ID_RID_COUNT() { return (int)6L; }

    public static int SECURITY_RESERVED_ID_BASE_RID() { return (int)81L; }

    public static int SECURITY_APPPOOL_ID_BASE_RID() { return (int)82L; }

    public static int SECURITY_APPPOOL_ID_RID_COUNT() { return (int)6L; }

    public static int SECURITY_VIRTUALSERVER_ID_BASE_RID() { return (int)83L; }

    public static int SECURITY_VIRTUALSERVER_ID_RID_COUNT() { return (int)6L; }

    public static int SECURITY_USERMODEDRIVERHOST_ID_BASE_RID() { return (int)84L; }

    public static int SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT() { return (int)6L; }

    public static int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID() { return (int)85L; }

    public static int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT() { return (int)6L; }

    public static int SECURITY_WMIHOST_ID_BASE_RID() { return (int)86L; }

    public static int SECURITY_WMIHOST_ID_RID_COUNT() { return (int)6L; }

    public static int SECURITY_TASK_ID_BASE_RID() { return (int)87L; }

    public static int SECURITY_NFS_ID_BASE_RID() { return (int)88L; }

    public static int SECURITY_COM_ID_BASE_RID() { return (int)89L; }

    public static int SECURITY_WINDOW_MANAGER_BASE_RID() { return (int)90L; }

    public static int SECURITY_RDV_GFX_BASE_RID() { return (int)91L; }

    public static int SECURITY_DASHOST_ID_BASE_RID() { return (int)92L; }

    public static int SECURITY_DASHOST_ID_RID_COUNT() { return (int)6L; }

    public static int SECURITY_USERMANAGER_ID_BASE_RID() { return (int)93L; }

    public static int SECURITY_USERMANAGER_ID_RID_COUNT() { return (int)6L; }

    public static int SECURITY_WINRM_ID_BASE_RID() { return (int)94L; }

    public static int SECURITY_WINRM_ID_RID_COUNT() { return (int)6L; }

    public static int SECURITY_CCG_ID_BASE_RID() { return (int)95L; }

    public static int SECURITY_UMFD_BASE_RID() { return (int)96L; }

    public static int SECURITY_VIRTUALACCOUNT_ID_RID_COUNT() { return (int)6L; }

    public static int SECURITY_MAX_BASE_RID() { return (int)111L; }

    public static int SECURITY_MAX_ALWAYS_FILTERED() { return (int)999L; }

    public static int SECURITY_MIN_NEVER_FILTERED() { return (int)1000L; }

    public static int SECURITY_OTHER_ORGANIZATION_RID() { return (int)1000L; }

    public static int SECURITY_WINDOWSMOBILE_ID_BASE_RID() { return (int)112L; }

    public static int SECURITY_INSTALLER_GROUP_CAPABILITY_BASE() { return (int)32L; }

    public static int SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT() { return (int)9L; }

    public static int SECURITY_INSTALLER_CAPABILITY_RID_COUNT() { return (int)10L; }

    public static int SECURITY_LOCAL_ACCOUNT_RID() { return (int)113L; }

    public static int SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID() { return (int)114L; }

    public static int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED() { return (int)496L; }

    public static int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS() { return (int)497L; }

    public static int DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS() { return (int)498L; }

    public static int FOREST_USER_RID_MAX() { return (int)499L; }

    public static int DOMAIN_USER_RID_ADMIN() { return (int)500L; }

    public static int DOMAIN_USER_RID_GUEST() { return (int)501L; }

    public static int DOMAIN_USER_RID_KRBTGT() { return (int)502L; }

    public static int DOMAIN_USER_RID_DEFAULT_ACCOUNT() { return (int)503L; }

    public static int DOMAIN_USER_RID_WDAG_ACCOUNT() { return (int)504L; }

    public static int DOMAIN_USER_RID_MAX() { return (int)999L; }

    public static int DOMAIN_GROUP_RID_ADMINS() { return (int)512L; }

    public static int DOMAIN_GROUP_RID_USERS() { return (int)513L; }

    public static int DOMAIN_GROUP_RID_GUESTS() { return (int)514L; }

    public static int DOMAIN_GROUP_RID_COMPUTERS() { return (int)515L; }

    public static int DOMAIN_GROUP_RID_CONTROLLERS() { return (int)516L; }

    public static int DOMAIN_GROUP_RID_CERT_ADMINS() { return (int)517L; }

    public static int DOMAIN_GROUP_RID_SCHEMA_ADMINS() { return (int)518L; }

    public static int DOMAIN_GROUP_RID_ENTERPRISE_ADMINS() { return (int)519L; }

    public static int DOMAIN_GROUP_RID_POLICY_ADMINS() { return (int)520L; }

    public static int DOMAIN_GROUP_RID_READONLY_CONTROLLERS() { return (int)521L; }

    public static int DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS() { return (int)522L; }

    public static int DOMAIN_GROUP_RID_CDC_RESERVED() { return (int)524L; }

    public static int DOMAIN_GROUP_RID_PROTECTED_USERS() { return (int)525L; }

    public static int DOMAIN_GROUP_RID_KEY_ADMINS() { return (int)526L; }

    public static int DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS() { return (int)527L; }

    public static int DOMAIN_ALIAS_RID_ADMINS() { return (int)544L; }

    public static int DOMAIN_ALIAS_RID_USERS() { return (int)545L; }

    public static int DOMAIN_ALIAS_RID_GUESTS() { return (int)546L; }

    public static int DOMAIN_ALIAS_RID_POWER_USERS() { return (int)547L; }

    public static int DOMAIN_ALIAS_RID_ACCOUNT_OPS() { return (int)548L; }

    public static int DOMAIN_ALIAS_RID_SYSTEM_OPS() { return (int)549L; }

    public static int DOMAIN_ALIAS_RID_PRINT_OPS() { return (int)550L; }

    public static int DOMAIN_ALIAS_RID_BACKUP_OPS() { return (int)551L; }

    public static int DOMAIN_ALIAS_RID_REPLICATOR() { return (int)552L; }

    public static int DOMAIN_ALIAS_RID_RAS_SERVERS() { return (int)553L; }

    public static int DOMAIN_ALIAS_RID_PREW2KCOMPACCESS() { return (int)554L; }

    public static int DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS() { return (int)555L; }

    public static int DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS() { return (int)556L; }

    public static int DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS() { return (int)557L; }

    public static int DOMAIN_ALIAS_RID_MONITORING_USERS() { return (int)558L; }

    public static int DOMAIN_ALIAS_RID_LOGGING_USERS() { return (int)559L; }

    public static int DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS() { return (int)560L; }

    public static int DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS() { return (int)561L; }

    public static int DOMAIN_ALIAS_RID_DCOM_USERS() { return (int)562L; }

    public static int DOMAIN_ALIAS_RID_IUSERS() { return (int)568L; }

    public static int DOMAIN_ALIAS_RID_CRYPTO_OPERATORS() { return (int)569L; }

    public static int DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP() { return (int)571L; }

    public static int DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP() { return (int)572L; }

    public static int DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP() { return (int)573L; }

    public static int DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP() { return (int)574L; }

    public static int DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS() { return (int)575L; }

    public static int DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS() { return (int)576L; }

    public static int DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS() { return (int)577L; }

    public static int DOMAIN_ALIAS_RID_HYPER_V_ADMINS() { return (int)578L; }

    public static int DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS() { return (int)579L; }

    public static int DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS() { return (int)580L; }

    public static int DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT() { return (int)581L; }

    public static int DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS() { return (int)582L; }

    public static int DOMAIN_ALIAS_RID_DEVICE_OWNERS() { return (int)583L; }

    public static int SECURITY_APP_PACKAGE_BASE_RID() { return (int)2L; }

    public static int SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT() { return (int)2L; }

    public static int SECURITY_APP_PACKAGE_RID_COUNT() { return (int)8L; }

    public static int SECURITY_CAPABILITY_BASE_RID() { return (int)3L; }

    public static int SECURITY_CAPABILITY_APP_RID() { return (int)1024L; }

    public static int SECURITY_BUILTIN_CAPABILITY_RID_COUNT() { return (int)2L; }

    public static int SECURITY_CAPABILITY_RID_COUNT() { return (int)5L; }

    public static int SECURITY_PARENT_PACKAGE_RID_COUNT() { return (int)8L; }

    public static int SECURITY_CHILD_PACKAGE_RID_COUNT() { return (int)12L; }

    public static int SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE() { return (int)1L; }

    public static int SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE() { return (int)2L; }

    public static int SECURITY_CAPABILITY_INTERNET_CLIENT() { return (int)1L; }

    public static int SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER() { return (int)2L; }

    public static int SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER() { return (int)3L; }

    public static int SECURITY_CAPABILITY_PICTURES_LIBRARY() { return (int)4L; }

    public static int SECURITY_CAPABILITY_VIDEOS_LIBRARY() { return (int)5L; }

    public static int SECURITY_CAPABILITY_MUSIC_LIBRARY() { return (int)6L; }

    public static int SECURITY_CAPABILITY_DOCUMENTS_LIBRARY() { return (int)7L; }

    public static int SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION() { return (int)8L; }

    public static int SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES() { return (int)9L; }

    public static int SECURITY_CAPABILITY_REMOVABLE_STORAGE() { return (int)10L; }

    public static int SECURITY_CAPABILITY_APPOINTMENTS() { return (int)11L; }

    public static int SECURITY_CAPABILITY_CONTACTS() { return (int)12L; }

    public static int SECURITY_CAPABILITY_INTERNET_EXPLORER() { return (int)4096L; }

    public static int SECURITY_MANDATORY_UNTRUSTED_RID() { return (int)0L; }

    public static int SECURITY_MANDATORY_LOW_RID() { return (int)4096L; }

    public static int SECURITY_MANDATORY_MEDIUM_RID() { return (int)8192L; }

    public static int SECURITY_MANDATORY_MEDIUM_PLUS_RID() { return (int)8448L; }

    public static int SECURITY_MANDATORY_HIGH_RID() { return (int)12288L; }

    public static int SECURITY_MANDATORY_SYSTEM_RID() { return (int)16384L; }

    public static int SECURITY_MANDATORY_PROTECTED_PROCESS_RID() { return (int)20480L; }

    public static int SECURITY_MANDATORY_MAXIMUM_USER_RID() { return (int)16384L; }

    public static int SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT() { return (int)1L; }

    public static int SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID() { return (int)1L; }

    public static int SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID() { return (int)2L; }

    public static int SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID() { return (int)3L; }

    public static int SECURITY_AUTHENTICATION_KEY_TRUST_RID() { return (int)4L; }

    public static int SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID() { return (int)5L; }

    public static int SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID() { return (int)6L; }

    public static int SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT() { return (int)2L; }

    public static int SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID() { return (int)1024L; }

    public static int SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID() { return (int)512L; }

    public static int SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID() { return (int)0L; }

    public static int SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID() { return (int)8192L; }

    public static int SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID() { return (int)4096L; }

    public static int SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID() { return (int)2048L; }

    public static int SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID() { return (int)1536L; }

    public static int SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID() { return (int)1024L; }

    public static int SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID() { return (int)0L; }

    public static long SECURITY_TRUSTED_INSTALLER_RID2() { return 3418522649L; }

    public static long SECURITY_TRUSTED_INSTALLER_RID5() { return 2271478464L; }

    public static int SE_GROUP_MANDATORY() { return (int)1L; }

    public static int SE_GROUP_ENABLED_BY_DEFAULT() { return (int)2L; }

    public static int SE_GROUP_ENABLED() { return (int)4L; }

    public static int SE_GROUP_OWNER() { return (int)8L; }

    public static int SE_GROUP_USE_FOR_DENY_ONLY() { return (int)16L; }

    public static int SE_GROUP_INTEGRITY() { return (int)32L; }

    public static int SE_GROUP_INTEGRITY_ENABLED() { return (int)64L; }

    public static int SE_GROUP_LOGON_ID() { return (int)3221225472L; }

    public static int SE_GROUP_RESOURCE() { return (int)536870912L; }

    public static int SE_GROUP_VALID_ATTRIBUTES() { return (int)3758096511L; }

    public static int ACL_REVISION() { return (int)2L; }

    public static int ACL_REVISION_DS() { return (int)4L; }

    public static int ACL_REVISION1() { return (int)1L; }

    public static int MIN_ACL_REVISION() { return (int)2L; }

    public static int ACL_REVISION2() { return (int)2L; }

    public static int ACL_REVISION3() { return (int)3L; }

    public static int ACL_REVISION4() { return (int)4L; }

    public static int MAX_ACL_REVISION() { return (int)4L; }

    public static int ACCESS_MIN_MS_ACE_TYPE() { return (int)0L; }

    public static int ACCESS_ALLOWED_ACE_TYPE() { return (int)0L; }

    public static int ACCESS_DENIED_ACE_TYPE() { return (int)1L; }

    public static int SYSTEM_AUDIT_ACE_TYPE() { return (int)2L; }

    public static int SYSTEM_ALARM_ACE_TYPE() { return (int)3L; }

    public static int ACCESS_MAX_MS_V2_ACE_TYPE() { return (int)3L; }

    public static int ACCESS_ALLOWED_COMPOUND_ACE_TYPE() { return (int)4L; }

    public static int ACCESS_MAX_MS_V3_ACE_TYPE() { return (int)4L; }

    public static int ACCESS_MIN_MS_OBJECT_ACE_TYPE() { return (int)5L; }

    public static int ACCESS_ALLOWED_OBJECT_ACE_TYPE() { return (int)5L; }

    public static int ACCESS_DENIED_OBJECT_ACE_TYPE() { return (int)6L; }

    public static int SYSTEM_AUDIT_OBJECT_ACE_TYPE() { return (int)7L; }

    public static int SYSTEM_ALARM_OBJECT_ACE_TYPE() { return (int)8L; }

    public static int ACCESS_MAX_MS_OBJECT_ACE_TYPE() { return (int)8L; }

    public static int ACCESS_MAX_MS_V4_ACE_TYPE() { return (int)8L; }

    public static int ACCESS_MAX_MS_ACE_TYPE() { return (int)8L; }

    public static int ACCESS_ALLOWED_CALLBACK_ACE_TYPE() { return (int)9L; }

    public static int ACCESS_DENIED_CALLBACK_ACE_TYPE() { return (int)10L; }

    public static int ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE() { return (int)11L; }

    public static int ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE() { return (int)12L; }

    public static int SYSTEM_AUDIT_CALLBACK_ACE_TYPE() { return (int)13L; }

    public static int SYSTEM_ALARM_CALLBACK_ACE_TYPE() { return (int)14L; }

    public static int SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE() { return (int)15L; }

    public static int SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE() { return (int)16L; }

    public static int SYSTEM_MANDATORY_LABEL_ACE_TYPE() { return (int)17L; }

    public static int SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE() { return (int)18L; }

    public static int SYSTEM_SCOPED_POLICY_ID_ACE_TYPE() { return (int)19L; }

    public static int SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE() { return (int)20L; }

    public static int SYSTEM_ACCESS_FILTER_ACE_TYPE() { return (int)21L; }

    public static int ACCESS_MAX_MS_V5_ACE_TYPE() { return (int)21L; }

    public static int OBJECT_INHERIT_ACE() { return (int)1L; }

    public static int CONTAINER_INHERIT_ACE() { return (int)2L; }

    public static int NO_PROPAGATE_INHERIT_ACE() { return (int)4L; }

    public static int INHERIT_ONLY_ACE() { return (int)8L; }

    public static int INHERITED_ACE() { return (int)16L; }

    public static int VALID_INHERIT_FLAGS() { return (int)31L; }

    public static int CRITICAL_ACE_FLAG() { return (int)32L; }

    public static int SUCCESSFUL_ACCESS_ACE_FLAG() { return (int)64L; }

    public static int FAILED_ACCESS_ACE_FLAG() { return (int)128L; }

    public static int TRUST_PROTECTED_FILTER_ACE_FLAG() { return (int)64L; }

    public static int SYSTEM_MANDATORY_LABEL_VALID_MASK() { return (int)7L; }

    public static int SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK() { return (int)4294967295L; }

    public static int SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK() { return (int)4294967295L; }

    public static int SECURITY_DESCRIPTOR_REVISION() { return (int)1L; }

    public static int SECURITY_DESCRIPTOR_REVISION1() { return (int)1L; }

    public static long SECURITY_DESCRIPTOR_MIN_LENGTH() { return 40L; }

    public static int SE_OWNER_DEFAULTED() { return (int)1L; }

    public static int SE_GROUP_DEFAULTED() { return (int)2L; }

    public static int SE_DACL_PRESENT() { return (int)4L; }

    public static int SE_DACL_DEFAULTED() { return (int)8L; }

    public static int SE_SACL_PRESENT() { return (int)16L; }

    public static int SE_SACL_DEFAULTED() { return (int)32L; }

    public static int SE_DACL_AUTO_INHERIT_REQ() { return (int)256L; }

    public static int SE_SACL_AUTO_INHERIT_REQ() { return (int)512L; }

    public static int SE_DACL_AUTO_INHERITED() { return (int)1024L; }

    public static int SE_SACL_AUTO_INHERITED() { return (int)2048L; }

    public static int SE_DACL_PROTECTED() { return (int)4096L; }

    public static int SE_SACL_PROTECTED() { return (int)8192L; }

    public static int SE_RM_CONTROL_VALID() { return (int)16384L; }

    public static int SE_SELF_RELATIVE() { return (int)32768L; }

    static final MemorySegment ACCESS_DS_SOURCE_A$SEGMENT_CONSTANT_ = CSupport.toCString("DS");
    public static jdk.incubator.foreign.MemorySegment ACCESS_DS_SOURCE_A() { return ACCESS_DS_SOURCE_A$SEGMENT_CONSTANT_; }

    static final MemorySegment ACCESS_DS_SOURCE_W$SEGMENT_CONSTANT_ = CSupport.toCString("D");
    public static jdk.incubator.foreign.MemorySegment ACCESS_DS_SOURCE_W() { return ACCESS_DS_SOURCE_W$SEGMENT_CONSTANT_; }

    static final MemorySegment ACCESS_DS_OBJECT_TYPE_NAME_A$SEGMENT_CONSTANT_ = CSupport.toCString("Directory Service Object");
    public static jdk.incubator.foreign.MemorySegment ACCESS_DS_OBJECT_TYPE_NAME_A() { return ACCESS_DS_OBJECT_TYPE_NAME_A$SEGMENT_CONSTANT_; }

    static final MemorySegment ACCESS_DS_OBJECT_TYPE_NAME_W$SEGMENT_CONSTANT_ = CSupport.toCString("D");
    public static jdk.incubator.foreign.MemorySegment ACCESS_DS_OBJECT_TYPE_NAME_W() { return ACCESS_DS_OBJECT_TYPE_NAME_W$SEGMENT_CONSTANT_; }

    public static int SE_PRIVILEGE_ENABLED_BY_DEFAULT() { return (int)1L; }

    public static int SE_PRIVILEGE_ENABLED() { return (int)2L; }

    public static int SE_PRIVILEGE_REMOVED() { return (int)4L; }

    public static int SE_PRIVILEGE_USED_FOR_ACCESS() { return (int)2147483648L; }

    public static int SE_PRIVILEGE_VALID_ATTRIBUTES() { return (int)2147483655L; }

    public static int PRIVILEGE_SET_ALL_NECESSARY() { return (int)1L; }

    public static int ACCESS_REASON_STAGING_MASK() { return (int)2147483648L; }

    static final MemorySegment SE_CREATE_TOKEN_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeCreateTokenPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_CREATE_TOKEN_NAME() { return SE_CREATE_TOKEN_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_ASSIGNPRIMARYTOKEN_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeAssignPrimaryTokenPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_ASSIGNPRIMARYTOKEN_NAME() { return SE_ASSIGNPRIMARYTOKEN_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_LOCK_MEMORY_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeLockMemoryPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_LOCK_MEMORY_NAME() { return SE_LOCK_MEMORY_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_INCREASE_QUOTA_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeIncreaseQuotaPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_INCREASE_QUOTA_NAME() { return SE_INCREASE_QUOTA_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_UNSOLICITED_INPUT_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeUnsolicitedInputPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_UNSOLICITED_INPUT_NAME() { return SE_UNSOLICITED_INPUT_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_MACHINE_ACCOUNT_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeMachineAccountPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_MACHINE_ACCOUNT_NAME() { return SE_MACHINE_ACCOUNT_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_TCB_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeTcbPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_TCB_NAME() { return SE_TCB_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_SECURITY_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeSecurityPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_SECURITY_NAME() { return SE_SECURITY_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_TAKE_OWNERSHIP_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeTakeOwnershipPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_TAKE_OWNERSHIP_NAME() { return SE_TAKE_OWNERSHIP_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_LOAD_DRIVER_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeLoadDriverPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_LOAD_DRIVER_NAME() { return SE_LOAD_DRIVER_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_SYSTEM_PROFILE_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeSystemProfilePrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_SYSTEM_PROFILE_NAME() { return SE_SYSTEM_PROFILE_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_SYSTEMTIME_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeSystemtimePrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_SYSTEMTIME_NAME() { return SE_SYSTEMTIME_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_PROF_SINGLE_PROCESS_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeProfileSingleProcessPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_PROF_SINGLE_PROCESS_NAME() { return SE_PROF_SINGLE_PROCESS_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_INC_BASE_PRIORITY_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeIncreaseBasePriorityPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_INC_BASE_PRIORITY_NAME() { return SE_INC_BASE_PRIORITY_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_CREATE_PAGEFILE_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeCreatePagefilePrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_CREATE_PAGEFILE_NAME() { return SE_CREATE_PAGEFILE_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_CREATE_PERMANENT_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeCreatePermanentPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_CREATE_PERMANENT_NAME() { return SE_CREATE_PERMANENT_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_BACKUP_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeBackupPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_BACKUP_NAME() { return SE_BACKUP_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_RESTORE_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeRestorePrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_RESTORE_NAME() { return SE_RESTORE_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_SHUTDOWN_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeShutdownPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_SHUTDOWN_NAME() { return SE_SHUTDOWN_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_DEBUG_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeDebugPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_DEBUG_NAME() { return SE_DEBUG_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_AUDIT_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeAuditPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_AUDIT_NAME() { return SE_AUDIT_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_SYSTEM_ENVIRONMENT_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeSystemEnvironmentPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_SYSTEM_ENVIRONMENT_NAME() { return SE_SYSTEM_ENVIRONMENT_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_CHANGE_NOTIFY_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeChangeNotifyPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_CHANGE_NOTIFY_NAME() { return SE_CHANGE_NOTIFY_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_REMOTE_SHUTDOWN_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeRemoteShutdownPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_REMOTE_SHUTDOWN_NAME() { return SE_REMOTE_SHUTDOWN_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_UNDOCK_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeUndockPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_UNDOCK_NAME() { return SE_UNDOCK_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_SYNC_AGENT_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeSyncAgentPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_SYNC_AGENT_NAME() { return SE_SYNC_AGENT_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_ENABLE_DELEGATION_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeEnableDelegationPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_ENABLE_DELEGATION_NAME() { return SE_ENABLE_DELEGATION_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_MANAGE_VOLUME_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeManageVolumePrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_MANAGE_VOLUME_NAME() { return SE_MANAGE_VOLUME_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_IMPERSONATE_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeImpersonatePrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_IMPERSONATE_NAME() { return SE_IMPERSONATE_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_CREATE_GLOBAL_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeCreateGlobalPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_CREATE_GLOBAL_NAME() { return SE_CREATE_GLOBAL_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_TRUSTED_CREDMAN_ACCESS_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeTrustedCredManAccessPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_TRUSTED_CREDMAN_ACCESS_NAME() { return SE_TRUSTED_CREDMAN_ACCESS_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_RELABEL_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeRelabelPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_RELABEL_NAME() { return SE_RELABEL_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_INC_WORKING_SET_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeIncreaseWorkingSetPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_INC_WORKING_SET_NAME() { return SE_INC_WORKING_SET_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_TIME_ZONE_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeTimeZonePrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_TIME_ZONE_NAME() { return SE_TIME_ZONE_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_CREATE_SYMBOLIC_LINK_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeCreateSymbolicLinkPrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_CREATE_SYMBOLIC_LINK_NAME() { return SE_CREATE_SYMBOLIC_LINK_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME$SEGMENT_CONSTANT_ = CSupport.toCString("SeDelegateSessionUserImpersonatePrivilege");
    public static jdk.incubator.foreign.MemorySegment SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME() { return SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_ACTIVATE_AS_USER_CAPABILITY$SEGMENT_CONSTANT_ = CSupport.toCString("a");
    public static jdk.incubator.foreign.MemorySegment SE_ACTIVATE_AS_USER_CAPABILITY() { return SE_ACTIVATE_AS_USER_CAPABILITY$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_CONSTRAINED_IMPERSONATION_CAPABILITY$SEGMENT_CONSTANT_ = CSupport.toCString("c");
    public static jdk.incubator.foreign.MemorySegment SE_CONSTRAINED_IMPERSONATION_CAPABILITY() { return SE_CONSTRAINED_IMPERSONATION_CAPABILITY$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_SESSION_IMPERSONATION_CAPABILITY$SEGMENT_CONSTANT_ = CSupport.toCString("s");
    public static jdk.incubator.foreign.MemorySegment SE_SESSION_IMPERSONATION_CAPABILITY() { return SE_SESSION_IMPERSONATION_CAPABILITY$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_MUMA_CAPABILITY$SEGMENT_CONSTANT_ = CSupport.toCString("m");
    public static jdk.incubator.foreign.MemorySegment SE_MUMA_CAPABILITY() { return SE_MUMA_CAPABILITY$SEGMENT_CONSTANT_; }

    static final MemorySegment SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY$SEGMENT_CONSTANT_ = CSupport.toCString("d");
    public static jdk.incubator.foreign.MemorySegment SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY() { return SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY$SEGMENT_CONSTANT_; }

    public static int SECURITY_MAX_IMPERSONATION_LEVEL() { return (int)3L; }

    public static int SECURITY_MIN_IMPERSONATION_LEVEL() { return (int)0L; }

    public static int DEFAULT_IMPERSONATION_LEVEL() { return (int)2L; }

    public static int TOKEN_ASSIGN_PRIMARY() { return (int)1L; }

    public static int TOKEN_DUPLICATE() { return (int)2L; }

    public static int TOKEN_IMPERSONATE() { return (int)4L; }

    public static int TOKEN_QUERY() { return (int)8L; }

    public static int TOKEN_QUERY_SOURCE() { return (int)16L; }

    public static int TOKEN_ADJUST_PRIVILEGES() { return (int)32L; }

    public static int TOKEN_ADJUST_GROUPS() { return (int)64L; }

    public static int TOKEN_ADJUST_DEFAULT() { return (int)128L; }

    public static int TOKEN_ADJUST_SESSIONID() { return (int)256L; }

    public static int TOKEN_ALL_ACCESS_P() { return (int)983295L; }

    public static int TOKEN_ALL_ACCESS() { return (int)983551L; }

    public static int TOKEN_READ() { return (int)131080L; }

    public static int TOKEN_WRITE() { return (int)131296L; }

    public static int TOKEN_EXECUTE() { return (int)131072L; }

    public static int TOKEN_TRUST_CONSTRAINT_MASK() { return (int)131096L; }

    public static int TOKEN_ACCESS_PSEUDO_HANDLE_WIN8() { return (int)24L; }

    public static int TOKEN_ACCESS_PSEUDO_HANDLE() { return (int)24L; }

    public static long TOKEN_USER_MAX_SIZE() { return 84L; }

    public static long TOKEN_OWNER_MAX_SIZE() { return 76L; }

    public static int TOKEN_MANDATORY_POLICY_VALID_MASK() { return (int)3L; }

    public static long TOKEN_INTEGRITY_LEVEL_MAX_SIZE() { return 84L; }

    public static int POLICY_AUDIT_SUBCATEGORY_COUNT() { return (int)59L; }

    public static long TOKEN_APPCONTAINER_SID_MAX_SIZE() { return 76L; }

    public static int CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS() { return (int)63L; }

    public static int CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS() { return (int)4294901760L; }

    public static int CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION() { return (int)1L; }

    public static int SECURITY_DYNAMIC_TRACKING() { return (int)1L; }

    public static int SECURITY_STATIC_TRACKING() { return (int)0L; }

    public static int OWNER_SECURITY_INFORMATION() { return (int)1L; }

    public static int GROUP_SECURITY_INFORMATION() { return (int)2L; }

    public static int DACL_SECURITY_INFORMATION() { return (int)4L; }

    public static int SACL_SECURITY_INFORMATION() { return (int)8L; }

    public static int LABEL_SECURITY_INFORMATION() { return (int)16L; }

    public static int ATTRIBUTE_SECURITY_INFORMATION() { return (int)32L; }

    public static int SCOPE_SECURITY_INFORMATION() { return (int)64L; }

    public static int PROCESS_TRUST_LABEL_SECURITY_INFORMATION() { return (int)128L; }

    public static int ACCESS_FILTER_SECURITY_INFORMATION() { return (int)256L; }

    public static int BACKUP_SECURITY_INFORMATION() { return (int)65536L; }

    public static int PROTECTED_DACL_SECURITY_INFORMATION() { return (int)2147483648L; }

    public static int PROTECTED_SACL_SECURITY_INFORMATION() { return (int)1073741824L; }

    public static int UNPROTECTED_DACL_SECURITY_INFORMATION() { return (int)536870912L; }

    public static int UNPROTECTED_SACL_SECURITY_INFORMATION() { return (int)268435456L; }

    public static int SE_SIGNING_LEVEL_DEVELOPER() { return (int)3L; }

    public static int SE_SIGNING_LEVEL_ANTIMALWARE() { return (int)7L; }

    public static int PROCESS_TERMINATE() { return (int)1L; }

    public static int PROCESS_CREATE_THREAD() { return (int)2L; }

    public static int PROCESS_SET_SESSIONID() { return (int)4L; }

    public static int PROCESS_VM_OPERATION() { return (int)8L; }

    public static int PROCESS_VM_READ() { return (int)16L; }

    public static int PROCESS_VM_WRITE() { return (int)32L; }

    public static int PROCESS_DUP_HANDLE() { return (int)64L; }

    public static int PROCESS_CREATE_PROCESS() { return (int)128L; }

    public static int PROCESS_SET_QUOTA() { return (int)256L; }

    public static int PROCESS_SET_INFORMATION() { return (int)512L; }

    public static int PROCESS_QUERY_INFORMATION() { return (int)1024L; }

    public static int PROCESS_SUSPEND_RESUME() { return (int)2048L; }

    public static int PROCESS_QUERY_LIMITED_INFORMATION() { return (int)4096L; }

    public static int PROCESS_SET_LIMITED_INFORMATION() { return (int)8192L; }

    public static int PROCESS_ALL_ACCESS() { return (int)2097151L; }

    public static int THREAD_TERMINATE() { return (int)1L; }

    public static int THREAD_SUSPEND_RESUME() { return (int)2L; }

    public static int THREAD_GET_CONTEXT() { return (int)8L; }

    public static int THREAD_SET_CONTEXT() { return (int)16L; }

    public static int THREAD_QUERY_INFORMATION() { return (int)64L; }

    public static int THREAD_SET_INFORMATION() { return (int)32L; }

    public static int THREAD_SET_THREAD_TOKEN() { return (int)128L; }

    public static int THREAD_IMPERSONATE() { return (int)256L; }

    public static int THREAD_DIRECT_IMPERSONATION() { return (int)512L; }

    public static int THREAD_SET_LIMITED_INFORMATION() { return (int)1024L; }

    public static int THREAD_QUERY_LIMITED_INFORMATION() { return (int)2048L; }

    public static int THREAD_RESUME() { return (int)4096L; }

    public static int THREAD_ALL_ACCESS() { return (int)2097151L; }

    public static int JOB_OBJECT_ASSIGN_PROCESS() { return (int)1L; }

    public static int JOB_OBJECT_SET_ATTRIBUTES() { return (int)2L; }

    public static int JOB_OBJECT_QUERY() { return (int)4L; }

    public static int JOB_OBJECT_TERMINATE() { return (int)8L; }

    public static int JOB_OBJECT_SET_SECURITY_ATTRIBUTES() { return (int)16L; }

    public static int JOB_OBJECT_IMPERSONATE() { return (int)32L; }

    public static int JOB_OBJECT_ALL_ACCESS() { return (int)2031679L; }

    public static int THREAD_BASE_PRIORITY_MIN() { return (int)-2L; }

    public static int THREAD_BASE_PRIORITY_IDLE() { return (int)-15L; }

    public static int DYNAMIC_EH_CONTINUATION_TARGET_ADD() { return (int)1L; }

    public static int DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED() { return (int)2L; }

    public static int JOB_OBJECT_VALID_COMPLETION_FILTER() { return (int)16382L; }

    public static int JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH() { return (int)512L; }

    public static int JOB_OBJECT_LIMIT_CPU_RATE_CONTROL() { return (int)262144L; }

    public static int JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS() { return (int)2064900L; }

    public static int EVENT_ALL_ACCESS() { return (int)2031619L; }

    public static int MUTANT_ALL_ACCESS() { return (int)2031617L; }

    public static int SEMAPHORE_ALL_ACCESS() { return (int)2031619L; }

    public static int TIMER_ALL_ACCESS() { return (int)2031619L; }

    public static int XSTATE_LEGACY_FLOATING_POINT() { return (int)0L; }

    public static int XSTATE_LEGACY_SSE() { return (int)1L; }

    public static int XSTATE_GSSE() { return (int)2L; }

    public static int XSTATE_AVX() { return (int)2L; }

    public static int XSTATE_MPX_BNDREGS() { return (int)3L; }

    public static int XSTATE_MPX_BNDCSR() { return (int)4L; }

    public static int XSTATE_AVX512_KMASK() { return (int)5L; }

    public static int XSTATE_AVX512_ZMM_H() { return (int)6L; }

    public static int XSTATE_AVX512_ZMM() { return (int)7L; }

    public static int XSTATE_IPT() { return (int)8L; }

    public static int XSTATE_CET_U() { return (int)11L; }

    public static int XSTATE_LWP() { return (int)62L; }

    public static int MAXIMUM_XSTATE_FEATURES() { return (int)64L; }

    public static long XSTATE_MASK_LEGACY_FLOATING_POINT() { return 1L; }

    public static long XSTATE_MASK_LEGACY_SSE() { return 2L; }

}

