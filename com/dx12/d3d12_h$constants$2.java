// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class d3d12_h$constants$2 extends d3d12_h$constants$1 {
    d3d12_h$constants$2() {}
    static final MemoryLayout D3D12_SUBRESOURCE_FOOTPRINT$Depth$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SUBRESOURCE_FOOTPRINT$Depth$LAYOUT() { return D3D12_SUBRESOURCE_FOOTPRINT$Depth$LAYOUT_; }

    static final VarHandle D3D12_SUBRESOURCE_FOOTPRINT$Depth$VH_ = D3D12_SUBRESOURCE_FOOTPRINT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Depth"));
    public static java.lang.invoke.VarHandle D3D12_SUBRESOURCE_FOOTPRINT$Depth$VH() { return D3D12_SUBRESOURCE_FOOTPRINT$Depth$VH_; }

    static final MemoryLayout D3D12_SUBRESOURCE_FOOTPRINT$RowPitch$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SUBRESOURCE_FOOTPRINT$RowPitch$LAYOUT() { return D3D12_SUBRESOURCE_FOOTPRINT$RowPitch$LAYOUT_; }

    static final VarHandle D3D12_SUBRESOURCE_FOOTPRINT$RowPitch$VH_ = D3D12_SUBRESOURCE_FOOTPRINT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RowPitch"));
    public static java.lang.invoke.VarHandle D3D12_SUBRESOURCE_FOOTPRINT$RowPitch$VH() { return D3D12_SUBRESOURCE_FOOTPRINT$RowPitch$VH_; }

    static final MemoryLayout D3D12_PLACED_SUBRESOURCE_FOOTPRINT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Offset"),
        MemoryLayout.ofStruct(
            C_INT.withName("Format"),
            C_INT.withName("Width"),
            C_INT.withName("Height"),
            C_INT.withName("Depth"),
            C_INT.withName("RowPitch")
        ).withName("Footprint"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT");
    public static jdk.incubator.foreign.MemoryLayout D3D12_PLACED_SUBRESOURCE_FOOTPRINT$struct$LAYOUT() { return D3D12_PLACED_SUBRESOURCE_FOOTPRINT$struct$LAYOUT_; }

    static final MemoryLayout D3D12_PLACED_SUBRESOURCE_FOOTPRINT$Offset$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout D3D12_PLACED_SUBRESOURCE_FOOTPRINT$Offset$LAYOUT() { return D3D12_PLACED_SUBRESOURCE_FOOTPRINT$Offset$LAYOUT_; }

    static final VarHandle D3D12_PLACED_SUBRESOURCE_FOOTPRINT$Offset$VH_ = D3D12_PLACED_SUBRESOURCE_FOOTPRINT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    public static java.lang.invoke.VarHandle D3D12_PLACED_SUBRESOURCE_FOOTPRINT$Offset$VH() { return D3D12_PLACED_SUBRESOURCE_FOOTPRINT$Offset$VH_; }

    public static int D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX() { return (int)0L; }

    public static int D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT() { return (int)1L; }

    static final MemoryLayout D3D12_TEXTURE_COPY_LOCATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pResource"),
        C_INT.withName("Type"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Offset"),
            MemoryLayout.ofStruct(
                C_INT.withName("Format"),
                C_INT.withName("Width"),
                C_INT.withName("Height"),
                C_INT.withName("Depth"),
                C_INT.withName("RowPitch")
            ).withName("Footprint"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("PlacedFootprint"),
        C_INT.withName("SubresourceIndex")
    ).withName("D3D12_TEXTURE_COPY_LOCATION");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXTURE_COPY_LOCATION$struct$LAYOUT() { return D3D12_TEXTURE_COPY_LOCATION$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEXTURE_COPY_LOCATION$pResource$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXTURE_COPY_LOCATION$pResource$LAYOUT() { return D3D12_TEXTURE_COPY_LOCATION$pResource$LAYOUT_; }

    static final VarHandle D3D12_TEXTURE_COPY_LOCATION$pResource$VH_ = MemoryHandles.asAddressVarHandle(D3D12_TEXTURE_COPY_LOCATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pResource")));
    public static java.lang.invoke.VarHandle D3D12_TEXTURE_COPY_LOCATION$pResource$VH() { return D3D12_TEXTURE_COPY_LOCATION$pResource$VH_; }

    static final MemoryLayout D3D12_TEXTURE_COPY_LOCATION$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXTURE_COPY_LOCATION$Type$LAYOUT() { return D3D12_TEXTURE_COPY_LOCATION$Type$LAYOUT_; }

    static final VarHandle D3D12_TEXTURE_COPY_LOCATION$Type$VH_ = D3D12_TEXTURE_COPY_LOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle D3D12_TEXTURE_COPY_LOCATION$Type$VH() { return D3D12_TEXTURE_COPY_LOCATION$Type$VH_; }

    static final MemoryLayout D3D12_TEXTURE_COPY_LOCATION$SubresourceIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXTURE_COPY_LOCATION$SubresourceIndex$LAYOUT() { return D3D12_TEXTURE_COPY_LOCATION$SubresourceIndex$LAYOUT_; }

    static final VarHandle D3D12_TEXTURE_COPY_LOCATION$SubresourceIndex$VH_ = D3D12_TEXTURE_COPY_LOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SubresourceIndex"));
    public static java.lang.invoke.VarHandle D3D12_TEXTURE_COPY_LOCATION$SubresourceIndex$VH() { return D3D12_TEXTURE_COPY_LOCATION$SubresourceIndex$VH_; }

    public static int D3D12_RESOLVE_MODE_DECOMPRESS() { return (int)0L; }

    public static int D3D12_RESOLVE_MODE_MIN() { return (int)1L; }

    public static int D3D12_RESOLVE_MODE_MAX() { return (int)2L; }

    public static int D3D12_RESOLVE_MODE_AVERAGE() { return (int)3L; }

    public static int D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK() { return (int)4L; }

    public static int D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK() { return (int)5L; }

    static final MemoryLayout D3D12_SAMPLE_POSITION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("X"),
        C_BOOL.withName("Y")
    ).withName("D3D12_SAMPLE_POSITION");
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLE_POSITION$struct$LAYOUT() { return D3D12_SAMPLE_POSITION$struct$LAYOUT_; }

    static final MemoryLayout D3D12_SAMPLE_POSITION$X$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLE_POSITION$X$LAYOUT() { return D3D12_SAMPLE_POSITION$X$LAYOUT_; }

    static final VarHandle D3D12_SAMPLE_POSITION$X$VH_ = D3D12_SAMPLE_POSITION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("X"));
    public static java.lang.invoke.VarHandle D3D12_SAMPLE_POSITION$X$VH() { return D3D12_SAMPLE_POSITION$X$VH_; }

    static final MemoryLayout D3D12_SAMPLE_POSITION$Y$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLE_POSITION$Y$LAYOUT() { return D3D12_SAMPLE_POSITION$Y$LAYOUT_; }

    static final VarHandle D3D12_SAMPLE_POSITION$Y$VH_ = D3D12_SAMPLE_POSITION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Y"));
    public static java.lang.invoke.VarHandle D3D12_SAMPLE_POSITION$Y$VH() { return D3D12_SAMPLE_POSITION$Y$VH_; }

    static final MemoryLayout D3D12_VIEW_INSTANCE_LOCATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ViewportArrayIndex"),
        C_INT.withName("RenderTargetArrayIndex")
    ).withName("D3D12_VIEW_INSTANCE_LOCATION");
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEW_INSTANCE_LOCATION$struct$LAYOUT() { return D3D12_VIEW_INSTANCE_LOCATION$struct$LAYOUT_; }

    static final MemoryLayout D3D12_VIEW_INSTANCE_LOCATION$ViewportArrayIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEW_INSTANCE_LOCATION$ViewportArrayIndex$LAYOUT() { return D3D12_VIEW_INSTANCE_LOCATION$ViewportArrayIndex$LAYOUT_; }

    static final VarHandle D3D12_VIEW_INSTANCE_LOCATION$ViewportArrayIndex$VH_ = D3D12_VIEW_INSTANCE_LOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ViewportArrayIndex"));
    public static java.lang.invoke.VarHandle D3D12_VIEW_INSTANCE_LOCATION$ViewportArrayIndex$VH() { return D3D12_VIEW_INSTANCE_LOCATION$ViewportArrayIndex$VH_; }

    static final MemoryLayout D3D12_VIEW_INSTANCE_LOCATION$RenderTargetArrayIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEW_INSTANCE_LOCATION$RenderTargetArrayIndex$LAYOUT() { return D3D12_VIEW_INSTANCE_LOCATION$RenderTargetArrayIndex$LAYOUT_; }

    static final VarHandle D3D12_VIEW_INSTANCE_LOCATION$RenderTargetArrayIndex$VH_ = D3D12_VIEW_INSTANCE_LOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RenderTargetArrayIndex"));
    public static java.lang.invoke.VarHandle D3D12_VIEW_INSTANCE_LOCATION$RenderTargetArrayIndex$VH() { return D3D12_VIEW_INSTANCE_LOCATION$RenderTargetArrayIndex$VH_; }

    public static int D3D12_VIEW_INSTANCING_FLAG_NONE() { return (int)0L; }

    public static int D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING() { return (int)1L; }

    static final MemoryLayout D3D12_VIEW_INSTANCING_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ViewInstanceCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pViewInstanceLocations"),
        C_INT.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("D3D12_VIEW_INSTANCING_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEW_INSTANCING_DESC$struct$LAYOUT() { return D3D12_VIEW_INSTANCING_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_VIEW_INSTANCING_DESC$ViewInstanceCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEW_INSTANCING_DESC$ViewInstanceCount$LAYOUT() { return D3D12_VIEW_INSTANCING_DESC$ViewInstanceCount$LAYOUT_; }

    static final VarHandle D3D12_VIEW_INSTANCING_DESC$ViewInstanceCount$VH_ = D3D12_VIEW_INSTANCING_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ViewInstanceCount"));
    public static java.lang.invoke.VarHandle D3D12_VIEW_INSTANCING_DESC$ViewInstanceCount$VH() { return D3D12_VIEW_INSTANCING_DESC$ViewInstanceCount$VH_; }

    static final MemoryLayout D3D12_VIEW_INSTANCING_DESC$pViewInstanceLocations$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEW_INSTANCING_DESC$pViewInstanceLocations$LAYOUT() { return D3D12_VIEW_INSTANCING_DESC$pViewInstanceLocations$LAYOUT_; }

    static final VarHandle D3D12_VIEW_INSTANCING_DESC$pViewInstanceLocations$VH_ = MemoryHandles.asAddressVarHandle(D3D12_VIEW_INSTANCING_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pViewInstanceLocations")));
    public static java.lang.invoke.VarHandle D3D12_VIEW_INSTANCING_DESC$pViewInstanceLocations$VH() { return D3D12_VIEW_INSTANCING_DESC$pViewInstanceLocations$VH_; }

    static final MemoryLayout D3D12_VIEW_INSTANCING_DESC$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_VIEW_INSTANCING_DESC$Flags$LAYOUT() { return D3D12_VIEW_INSTANCING_DESC$Flags$LAYOUT_; }

    static final VarHandle D3D12_VIEW_INSTANCING_DESC$Flags$VH_ = D3D12_VIEW_INSTANCING_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle D3D12_VIEW_INSTANCING_DESC$Flags$VH() { return D3D12_VIEW_INSTANCING_DESC$Flags$VH_; }

    public static int D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0() { return (int)0L; }

    public static int D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1() { return (int)1L; }

    public static int D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2() { return (int)2L; }

    public static int D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3() { return (int)3L; }

    public static int D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0() { return (int)4L; }

    public static int D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1() { return (int)5L; }

    public static int D3D12_BUFFER_SRV_FLAG_NONE() { return (int)0L; }

    public static int D3D12_BUFFER_SRV_FLAG_RAW() { return (int)1L; }

    static final MemoryLayout D3D12_BUFFER_SRV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("FirstElement"),
        C_INT.withName("NumElements"),
        C_INT.withName("StructureByteStride"),
        C_INT.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("D3D12_BUFFER_SRV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_SRV$struct$LAYOUT() { return D3D12_BUFFER_SRV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_BUFFER_SRV$FirstElement$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_SRV$FirstElement$LAYOUT() { return D3D12_BUFFER_SRV$FirstElement$LAYOUT_; }

    static final VarHandle D3D12_BUFFER_SRV$FirstElement$VH_ = D3D12_BUFFER_SRV$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FirstElement"));
    public static java.lang.invoke.VarHandle D3D12_BUFFER_SRV$FirstElement$VH() { return D3D12_BUFFER_SRV$FirstElement$VH_; }

    static final MemoryLayout D3D12_BUFFER_SRV$NumElements$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_SRV$NumElements$LAYOUT() { return D3D12_BUFFER_SRV$NumElements$LAYOUT_; }

    static final VarHandle D3D12_BUFFER_SRV$NumElements$VH_ = D3D12_BUFFER_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumElements"));
    public static java.lang.invoke.VarHandle D3D12_BUFFER_SRV$NumElements$VH() { return D3D12_BUFFER_SRV$NumElements$VH_; }

    static final MemoryLayout D3D12_BUFFER_SRV$StructureByteStride$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_SRV$StructureByteStride$LAYOUT() { return D3D12_BUFFER_SRV$StructureByteStride$LAYOUT_; }

    static final VarHandle D3D12_BUFFER_SRV$StructureByteStride$VH_ = D3D12_BUFFER_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StructureByteStride"));
    public static java.lang.invoke.VarHandle D3D12_BUFFER_SRV$StructureByteStride$VH() { return D3D12_BUFFER_SRV$StructureByteStride$VH_; }

    static final MemoryLayout D3D12_BUFFER_SRV$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_SRV$Flags$LAYOUT() { return D3D12_BUFFER_SRV$Flags$LAYOUT_; }

    static final VarHandle D3D12_BUFFER_SRV$Flags$VH_ = D3D12_BUFFER_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle D3D12_BUFFER_SRV$Flags$VH() { return D3D12_BUFFER_SRV$Flags$VH_; }

    static final MemoryLayout D3D12_TEX1D_SRV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MostDetailedMip"),
        C_INT.withName("MipLevels"),
        C_FLOAT.withName("ResourceMinLODClamp")
    ).withName("D3D12_TEX1D_SRV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_SRV$struct$LAYOUT() { return D3D12_TEX1D_SRV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX1D_SRV$MostDetailedMip$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_SRV$MostDetailedMip$LAYOUT() { return D3D12_TEX1D_SRV$MostDetailedMip$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_SRV$MostDetailedMip$VH_ = D3D12_TEX1D_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MostDetailedMip"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_SRV$MostDetailedMip$VH() { return D3D12_TEX1D_SRV$MostDetailedMip$VH_; }

    static final MemoryLayout D3D12_TEX1D_SRV$MipLevels$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_SRV$MipLevels$LAYOUT() { return D3D12_TEX1D_SRV$MipLevels$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_SRV$MipLevels$VH_ = D3D12_TEX1D_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipLevels"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_SRV$MipLevels$VH() { return D3D12_TEX1D_SRV$MipLevels$VH_; }

    static final MemoryLayout D3D12_TEX1D_SRV$ResourceMinLODClamp$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_SRV$ResourceMinLODClamp$LAYOUT() { return D3D12_TEX1D_SRV$ResourceMinLODClamp$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_SRV$ResourceMinLODClamp$VH_ = D3D12_TEX1D_SRV$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("ResourceMinLODClamp"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_SRV$ResourceMinLODClamp$VH() { return D3D12_TEX1D_SRV$ResourceMinLODClamp$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_SRV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MostDetailedMip"),
        C_INT.withName("MipLevels"),
        C_INT.withName("FirstArraySlice"),
        C_INT.withName("ArraySize"),
        C_FLOAT.withName("ResourceMinLODClamp")
    ).withName("D3D12_TEX1D_ARRAY_SRV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_SRV$struct$LAYOUT() { return D3D12_TEX1D_ARRAY_SRV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_SRV$MostDetailedMip$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_SRV$MostDetailedMip$LAYOUT() { return D3D12_TEX1D_ARRAY_SRV$MostDetailedMip$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_SRV$MostDetailedMip$VH_ = D3D12_TEX1D_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MostDetailedMip"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_SRV$MostDetailedMip$VH() { return D3D12_TEX1D_ARRAY_SRV$MostDetailedMip$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_SRV$MipLevels$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_SRV$MipLevels$LAYOUT() { return D3D12_TEX1D_ARRAY_SRV$MipLevels$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_SRV$MipLevels$VH_ = D3D12_TEX1D_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipLevels"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_SRV$MipLevels$VH() { return D3D12_TEX1D_ARRAY_SRV$MipLevels$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_SRV$FirstArraySlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_SRV$FirstArraySlice$LAYOUT() { return D3D12_TEX1D_ARRAY_SRV$FirstArraySlice$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_SRV$FirstArraySlice$VH_ = D3D12_TEX1D_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstArraySlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_SRV$FirstArraySlice$VH() { return D3D12_TEX1D_ARRAY_SRV$FirstArraySlice$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_SRV$ArraySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_SRV$ArraySize$LAYOUT() { return D3D12_TEX1D_ARRAY_SRV$ArraySize$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_SRV$ArraySize$VH_ = D3D12_TEX1D_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArraySize"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_SRV$ArraySize$VH() { return D3D12_TEX1D_ARRAY_SRV$ArraySize$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_SRV$ResourceMinLODClamp$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_SRV$ResourceMinLODClamp$LAYOUT() { return D3D12_TEX1D_ARRAY_SRV$ResourceMinLODClamp$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_SRV$ResourceMinLODClamp$VH_ = D3D12_TEX1D_ARRAY_SRV$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("ResourceMinLODClamp"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_SRV$ResourceMinLODClamp$VH() { return D3D12_TEX1D_ARRAY_SRV$ResourceMinLODClamp$VH_; }

    static final MemoryLayout D3D12_TEX2D_SRV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MostDetailedMip"),
        C_INT.withName("MipLevels"),
        C_INT.withName("PlaneSlice"),
        C_FLOAT.withName("ResourceMinLODClamp")
    ).withName("D3D12_TEX2D_SRV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_SRV$struct$LAYOUT() { return D3D12_TEX2D_SRV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2D_SRV$MostDetailedMip$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_SRV$MostDetailedMip$LAYOUT() { return D3D12_TEX2D_SRV$MostDetailedMip$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_SRV$MostDetailedMip$VH_ = D3D12_TEX2D_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MostDetailedMip"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_SRV$MostDetailedMip$VH() { return D3D12_TEX2D_SRV$MostDetailedMip$VH_; }

    static final MemoryLayout D3D12_TEX2D_SRV$MipLevels$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_SRV$MipLevels$LAYOUT() { return D3D12_TEX2D_SRV$MipLevels$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_SRV$MipLevels$VH_ = D3D12_TEX2D_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipLevels"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_SRV$MipLevels$VH() { return D3D12_TEX2D_SRV$MipLevels$VH_; }

    static final MemoryLayout D3D12_TEX2D_SRV$PlaneSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_SRV$PlaneSlice$LAYOUT() { return D3D12_TEX2D_SRV$PlaneSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_SRV$PlaneSlice$VH_ = D3D12_TEX2D_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PlaneSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_SRV$PlaneSlice$VH() { return D3D12_TEX2D_SRV$PlaneSlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_SRV$ResourceMinLODClamp$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_SRV$ResourceMinLODClamp$LAYOUT() { return D3D12_TEX2D_SRV$ResourceMinLODClamp$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_SRV$ResourceMinLODClamp$VH_ = D3D12_TEX2D_SRV$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("ResourceMinLODClamp"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_SRV$ResourceMinLODClamp$VH() { return D3D12_TEX2D_SRV$ResourceMinLODClamp$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_SRV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MostDetailedMip"),
        C_INT.withName("MipLevels"),
        C_INT.withName("FirstArraySlice"),
        C_INT.withName("ArraySize"),
        C_INT.withName("PlaneSlice"),
        C_FLOAT.withName("ResourceMinLODClamp")
    ).withName("D3D12_TEX2D_ARRAY_SRV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_SRV$struct$LAYOUT() { return D3D12_TEX2D_ARRAY_SRV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_SRV$MostDetailedMip$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_SRV$MostDetailedMip$LAYOUT() { return D3D12_TEX2D_ARRAY_SRV$MostDetailedMip$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_SRV$MostDetailedMip$VH_ = D3D12_TEX2D_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MostDetailedMip"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_SRV$MostDetailedMip$VH() { return D3D12_TEX2D_ARRAY_SRV$MostDetailedMip$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_SRV$MipLevels$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_SRV$MipLevels$LAYOUT() { return D3D12_TEX2D_ARRAY_SRV$MipLevels$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_SRV$MipLevels$VH_ = D3D12_TEX2D_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipLevels"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_SRV$MipLevels$VH() { return D3D12_TEX2D_ARRAY_SRV$MipLevels$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_SRV$FirstArraySlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_SRV$FirstArraySlice$LAYOUT() { return D3D12_TEX2D_ARRAY_SRV$FirstArraySlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_SRV$FirstArraySlice$VH_ = D3D12_TEX2D_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstArraySlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_SRV$FirstArraySlice$VH() { return D3D12_TEX2D_ARRAY_SRV$FirstArraySlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_SRV$ArraySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_SRV$ArraySize$LAYOUT() { return D3D12_TEX2D_ARRAY_SRV$ArraySize$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_SRV$ArraySize$VH_ = D3D12_TEX2D_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArraySize"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_SRV$ArraySize$VH() { return D3D12_TEX2D_ARRAY_SRV$ArraySize$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_SRV$PlaneSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_SRV$PlaneSlice$LAYOUT() { return D3D12_TEX2D_ARRAY_SRV$PlaneSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_SRV$PlaneSlice$VH_ = D3D12_TEX2D_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PlaneSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_SRV$PlaneSlice$VH() { return D3D12_TEX2D_ARRAY_SRV$PlaneSlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_SRV$ResourceMinLODClamp$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_SRV$ResourceMinLODClamp$LAYOUT() { return D3D12_TEX2D_ARRAY_SRV$ResourceMinLODClamp$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_SRV$ResourceMinLODClamp$VH_ = D3D12_TEX2D_ARRAY_SRV$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("ResourceMinLODClamp"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_SRV$ResourceMinLODClamp$VH() { return D3D12_TEX2D_ARRAY_SRV$ResourceMinLODClamp$VH_; }

    static final MemoryLayout D3D12_TEX3D_SRV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MostDetailedMip"),
        C_INT.withName("MipLevels"),
        C_FLOAT.withName("ResourceMinLODClamp")
    ).withName("D3D12_TEX3D_SRV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_SRV$struct$LAYOUT() { return D3D12_TEX3D_SRV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX3D_SRV$MostDetailedMip$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_SRV$MostDetailedMip$LAYOUT() { return D3D12_TEX3D_SRV$MostDetailedMip$LAYOUT_; }

    static final VarHandle D3D12_TEX3D_SRV$MostDetailedMip$VH_ = D3D12_TEX3D_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MostDetailedMip"));
    public static java.lang.invoke.VarHandle D3D12_TEX3D_SRV$MostDetailedMip$VH() { return D3D12_TEX3D_SRV$MostDetailedMip$VH_; }

    static final MemoryLayout D3D12_TEX3D_SRV$MipLevels$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_SRV$MipLevels$LAYOUT() { return D3D12_TEX3D_SRV$MipLevels$LAYOUT_; }

    static final VarHandle D3D12_TEX3D_SRV$MipLevels$VH_ = D3D12_TEX3D_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipLevels"));
    public static java.lang.invoke.VarHandle D3D12_TEX3D_SRV$MipLevels$VH() { return D3D12_TEX3D_SRV$MipLevels$VH_; }

    static final MemoryLayout D3D12_TEX3D_SRV$ResourceMinLODClamp$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_SRV$ResourceMinLODClamp$LAYOUT() { return D3D12_TEX3D_SRV$ResourceMinLODClamp$LAYOUT_; }

    static final VarHandle D3D12_TEX3D_SRV$ResourceMinLODClamp$VH_ = D3D12_TEX3D_SRV$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("ResourceMinLODClamp"));
    public static java.lang.invoke.VarHandle D3D12_TEX3D_SRV$ResourceMinLODClamp$VH() { return D3D12_TEX3D_SRV$ResourceMinLODClamp$VH_; }

    static final MemoryLayout D3D12_TEXCUBE_SRV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MostDetailedMip"),
        C_INT.withName("MipLevels"),
        C_FLOAT.withName("ResourceMinLODClamp")
    ).withName("D3D12_TEXCUBE_SRV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXCUBE_SRV$struct$LAYOUT() { return D3D12_TEXCUBE_SRV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEXCUBE_SRV$MostDetailedMip$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXCUBE_SRV$MostDetailedMip$LAYOUT() { return D3D12_TEXCUBE_SRV$MostDetailedMip$LAYOUT_; }

    static final VarHandle D3D12_TEXCUBE_SRV$MostDetailedMip$VH_ = D3D12_TEXCUBE_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MostDetailedMip"));
    public static java.lang.invoke.VarHandle D3D12_TEXCUBE_SRV$MostDetailedMip$VH() { return D3D12_TEXCUBE_SRV$MostDetailedMip$VH_; }

    static final MemoryLayout D3D12_TEXCUBE_SRV$MipLevels$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXCUBE_SRV$MipLevels$LAYOUT() { return D3D12_TEXCUBE_SRV$MipLevels$LAYOUT_; }

    static final VarHandle D3D12_TEXCUBE_SRV$MipLevels$VH_ = D3D12_TEXCUBE_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipLevels"));
    public static java.lang.invoke.VarHandle D3D12_TEXCUBE_SRV$MipLevels$VH() { return D3D12_TEXCUBE_SRV$MipLevels$VH_; }

    static final MemoryLayout D3D12_TEXCUBE_SRV$ResourceMinLODClamp$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXCUBE_SRV$ResourceMinLODClamp$LAYOUT() { return D3D12_TEXCUBE_SRV$ResourceMinLODClamp$LAYOUT_; }

    static final VarHandle D3D12_TEXCUBE_SRV$ResourceMinLODClamp$VH_ = D3D12_TEXCUBE_SRV$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("ResourceMinLODClamp"));
    public static java.lang.invoke.VarHandle D3D12_TEXCUBE_SRV$ResourceMinLODClamp$VH() { return D3D12_TEXCUBE_SRV$ResourceMinLODClamp$VH_; }

    static final MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MostDetailedMip"),
        C_INT.withName("MipLevels"),
        C_INT.withName("First2DArrayFace"),
        C_INT.withName("NumCubes"),
        C_FLOAT.withName("ResourceMinLODClamp")
    ).withName("D3D12_TEXCUBE_ARRAY_SRV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$struct$LAYOUT() { return D3D12_TEXCUBE_ARRAY_SRV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$MostDetailedMip$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$MostDetailedMip$LAYOUT() { return D3D12_TEXCUBE_ARRAY_SRV$MostDetailedMip$LAYOUT_; }

    static final VarHandle D3D12_TEXCUBE_ARRAY_SRV$MostDetailedMip$VH_ = D3D12_TEXCUBE_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MostDetailedMip"));
    public static java.lang.invoke.VarHandle D3D12_TEXCUBE_ARRAY_SRV$MostDetailedMip$VH() { return D3D12_TEXCUBE_ARRAY_SRV$MostDetailedMip$VH_; }

    static final MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$MipLevels$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$MipLevels$LAYOUT() { return D3D12_TEXCUBE_ARRAY_SRV$MipLevels$LAYOUT_; }

    static final VarHandle D3D12_TEXCUBE_ARRAY_SRV$MipLevels$VH_ = D3D12_TEXCUBE_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipLevels"));
    public static java.lang.invoke.VarHandle D3D12_TEXCUBE_ARRAY_SRV$MipLevels$VH() { return D3D12_TEXCUBE_ARRAY_SRV$MipLevels$VH_; }

    static final MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$First2DArrayFace$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$First2DArrayFace$LAYOUT() { return D3D12_TEXCUBE_ARRAY_SRV$First2DArrayFace$LAYOUT_; }

    static final VarHandle D3D12_TEXCUBE_ARRAY_SRV$First2DArrayFace$VH_ = D3D12_TEXCUBE_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("First2DArrayFace"));
    public static java.lang.invoke.VarHandle D3D12_TEXCUBE_ARRAY_SRV$First2DArrayFace$VH() { return D3D12_TEXCUBE_ARRAY_SRV$First2DArrayFace$VH_; }

    static final MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$NumCubes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$NumCubes$LAYOUT() { return D3D12_TEXCUBE_ARRAY_SRV$NumCubes$LAYOUT_; }

    static final VarHandle D3D12_TEXCUBE_ARRAY_SRV$NumCubes$VH_ = D3D12_TEXCUBE_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumCubes"));
    public static java.lang.invoke.VarHandle D3D12_TEXCUBE_ARRAY_SRV$NumCubes$VH() { return D3D12_TEXCUBE_ARRAY_SRV$NumCubes$VH_; }

    static final MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$ResourceMinLODClamp$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEXCUBE_ARRAY_SRV$ResourceMinLODClamp$LAYOUT() { return D3D12_TEXCUBE_ARRAY_SRV$ResourceMinLODClamp$LAYOUT_; }

    static final VarHandle D3D12_TEXCUBE_ARRAY_SRV$ResourceMinLODClamp$VH_ = D3D12_TEXCUBE_ARRAY_SRV$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("ResourceMinLODClamp"));
    public static java.lang.invoke.VarHandle D3D12_TEXCUBE_ARRAY_SRV$ResourceMinLODClamp$VH() { return D3D12_TEXCUBE_ARRAY_SRV$ResourceMinLODClamp$VH_; }

    static final MemoryLayout D3D12_TEX2DMS_SRV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("UnusedField_NothingToDefine")
    ).withName("D3D12_TEX2DMS_SRV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_SRV$struct$LAYOUT() { return D3D12_TEX2DMS_SRV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2DMS_SRV$UnusedField_NothingToDefine$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_SRV$UnusedField_NothingToDefine$LAYOUT() { return D3D12_TEX2DMS_SRV$UnusedField_NothingToDefine$LAYOUT_; }

    static final VarHandle D3D12_TEX2DMS_SRV$UnusedField_NothingToDefine$VH_ = D3D12_TEX2DMS_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UnusedField_NothingToDefine"));
    public static java.lang.invoke.VarHandle D3D12_TEX2DMS_SRV$UnusedField_NothingToDefine$VH() { return D3D12_TEX2DMS_SRV$UnusedField_NothingToDefine$VH_; }

    static final MemoryLayout D3D12_TEX2DMS_ARRAY_SRV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("FirstArraySlice"),
        C_INT.withName("ArraySize")
    ).withName("D3D12_TEX2DMS_ARRAY_SRV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_ARRAY_SRV$struct$LAYOUT() { return D3D12_TEX2DMS_ARRAY_SRV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2DMS_ARRAY_SRV$FirstArraySlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_ARRAY_SRV$FirstArraySlice$LAYOUT() { return D3D12_TEX2DMS_ARRAY_SRV$FirstArraySlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2DMS_ARRAY_SRV$FirstArraySlice$VH_ = D3D12_TEX2DMS_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstArraySlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2DMS_ARRAY_SRV$FirstArraySlice$VH() { return D3D12_TEX2DMS_ARRAY_SRV$FirstArraySlice$VH_; }

    static final MemoryLayout D3D12_TEX2DMS_ARRAY_SRV$ArraySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_ARRAY_SRV$ArraySize$LAYOUT() { return D3D12_TEX2DMS_ARRAY_SRV$ArraySize$LAYOUT_; }

    static final VarHandle D3D12_TEX2DMS_ARRAY_SRV$ArraySize$VH_ = D3D12_TEX2DMS_ARRAY_SRV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArraySize"));
    public static java.lang.invoke.VarHandle D3D12_TEX2DMS_ARRAY_SRV$ArraySize$VH() { return D3D12_TEX2DMS_ARRAY_SRV$ArraySize$VH_; }

    static final MemoryLayout D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Location")
    ).withName("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV$struct$LAYOUT() { return D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV$Location$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV$Location$LAYOUT() { return D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV$Location$LAYOUT_; }

    static final VarHandle D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV$Location$VH_ = D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Location"));
    public static java.lang.invoke.VarHandle D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV$Location$VH() { return D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV$Location$VH_; }

    public static int D3D12_SRV_DIMENSION_UNKNOWN() { return (int)0L; }

    public static int D3D12_SRV_DIMENSION_BUFFER() { return (int)1L; }

    public static int D3D12_SRV_DIMENSION_TEXTURE1D() { return (int)2L; }

    public static int D3D12_SRV_DIMENSION_TEXTURE1DARRAY() { return (int)3L; }

    public static int D3D12_SRV_DIMENSION_TEXTURE2D() { return (int)4L; }

    public static int D3D12_SRV_DIMENSION_TEXTURE2DARRAY() { return (int)5L; }

    public static int D3D12_SRV_DIMENSION_TEXTURE2DMS() { return (int)6L; }

    public static int D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY() { return (int)7L; }

    public static int D3D12_SRV_DIMENSION_TEXTURE3D() { return (int)8L; }

    public static int D3D12_SRV_DIMENSION_TEXTURECUBE() { return (int)9L; }

    public static int D3D12_SRV_DIMENSION_TEXTURECUBEARRAY() { return (int)10L; }

    public static int D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE() { return (int)11L; }

    static final MemoryLayout D3D12_SHADER_RESOURCE_VIEW_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Format"),
        C_INT.withName("ViewDimension"),
        C_INT.withName("Shader4ComponentMapping"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("FirstElement"),
            C_INT.withName("NumElements"),
            C_INT.withName("StructureByteStride"),
            C_INT.withName("Flags"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Buffer"),
        MemoryLayout.ofStruct(
            C_INT.withName("MostDetailedMip"),
            C_INT.withName("MipLevels"),
            C_FLOAT.withName("ResourceMinLODClamp")
        ).withName("Texture1D"),
        MemoryLayout.ofStruct(
            C_INT.withName("MostDetailedMip"),
            C_INT.withName("MipLevels"),
            C_INT.withName("FirstArraySlice"),
            C_INT.withName("ArraySize"),
            C_FLOAT.withName("ResourceMinLODClamp")
        ).withName("Texture1DArray"),
        MemoryLayout.ofStruct(
            C_INT.withName("MostDetailedMip"),
            C_INT.withName("MipLevels"),
            C_INT.withName("PlaneSlice"),
            C_FLOAT.withName("ResourceMinLODClamp")
        ).withName("Texture2D"),
        MemoryLayout.ofStruct(
            C_INT.withName("MostDetailedMip"),
            C_INT.withName("MipLevels"),
            C_INT.withName("FirstArraySlice"),
            C_INT.withName("ArraySize"),
            C_INT.withName("PlaneSlice"),
            C_FLOAT.withName("ResourceMinLODClamp")
        ).withName("Texture2DArray"),
        MemoryLayout.ofStruct(
            C_INT.withName("UnusedField_NothingToDefine")
        ).withName("Texture2DMS"),
        MemoryLayout.ofStruct(
            C_INT.withName("FirstArraySlice"),
            C_INT.withName("ArraySize")
        ).withName("Texture2DMSArray"),
        MemoryLayout.ofStruct(
            C_INT.withName("MostDetailedMip"),
            C_INT.withName("MipLevels"),
            C_FLOAT.withName("ResourceMinLODClamp")
        ).withName("Texture3D"),
        MemoryLayout.ofStruct(
            C_INT.withName("MostDetailedMip"),
            C_INT.withName("MipLevels"),
            C_FLOAT.withName("ResourceMinLODClamp")
        ).withName("TextureCube"),
        MemoryLayout.ofStruct(
            C_INT.withName("MostDetailedMip"),
            C_INT.withName("MipLevels"),
            C_INT.withName("First2DArrayFace"),
            C_INT.withName("NumCubes"),
            C_FLOAT.withName("ResourceMinLODClamp")
        ).withName("TextureCubeArray"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Location")
        ).withName("RaytracingAccelerationStructure")
    ).withName("D3D12_SHADER_RESOURCE_VIEW_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_SHADER_RESOURCE_VIEW_DESC$struct$LAYOUT() { return D3D12_SHADER_RESOURCE_VIEW_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_SHADER_RESOURCE_VIEW_DESC$Format$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SHADER_RESOURCE_VIEW_DESC$Format$LAYOUT() { return D3D12_SHADER_RESOURCE_VIEW_DESC$Format$LAYOUT_; }

    static final VarHandle D3D12_SHADER_RESOURCE_VIEW_DESC$Format$VH_ = D3D12_SHADER_RESOURCE_VIEW_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Format"));
    public static java.lang.invoke.VarHandle D3D12_SHADER_RESOURCE_VIEW_DESC$Format$VH() { return D3D12_SHADER_RESOURCE_VIEW_DESC$Format$VH_; }

    static final MemoryLayout D3D12_SHADER_RESOURCE_VIEW_DESC$ViewDimension$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SHADER_RESOURCE_VIEW_DESC$ViewDimension$LAYOUT() { return D3D12_SHADER_RESOURCE_VIEW_DESC$ViewDimension$LAYOUT_; }

    static final VarHandle D3D12_SHADER_RESOURCE_VIEW_DESC$ViewDimension$VH_ = D3D12_SHADER_RESOURCE_VIEW_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ViewDimension"));
    public static java.lang.invoke.VarHandle D3D12_SHADER_RESOURCE_VIEW_DESC$ViewDimension$VH() { return D3D12_SHADER_RESOURCE_VIEW_DESC$ViewDimension$VH_; }

    static final MemoryLayout D3D12_SHADER_RESOURCE_VIEW_DESC$Shader4ComponentMapping$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SHADER_RESOURCE_VIEW_DESC$Shader4ComponentMapping$LAYOUT() { return D3D12_SHADER_RESOURCE_VIEW_DESC$Shader4ComponentMapping$LAYOUT_; }

    static final VarHandle D3D12_SHADER_RESOURCE_VIEW_DESC$Shader4ComponentMapping$VH_ = D3D12_SHADER_RESOURCE_VIEW_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Shader4ComponentMapping"));
    public static java.lang.invoke.VarHandle D3D12_SHADER_RESOURCE_VIEW_DESC$Shader4ComponentMapping$VH() { return D3D12_SHADER_RESOURCE_VIEW_DESC$Shader4ComponentMapping$VH_; }

    static final MemoryLayout D3D12_CONSTANT_BUFFER_VIEW_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("BufferLocation"),
        C_INT.withName("SizeInBytes"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("D3D12_CONSTANT_BUFFER_VIEW_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_CONSTANT_BUFFER_VIEW_DESC$struct$LAYOUT() { return D3D12_CONSTANT_BUFFER_VIEW_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_CONSTANT_BUFFER_VIEW_DESC$BufferLocation$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout D3D12_CONSTANT_BUFFER_VIEW_DESC$BufferLocation$LAYOUT() { return D3D12_CONSTANT_BUFFER_VIEW_DESC$BufferLocation$LAYOUT_; }

    static final VarHandle D3D12_CONSTANT_BUFFER_VIEW_DESC$BufferLocation$VH_ = D3D12_CONSTANT_BUFFER_VIEW_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferLocation"));
    public static java.lang.invoke.VarHandle D3D12_CONSTANT_BUFFER_VIEW_DESC$BufferLocation$VH() { return D3D12_CONSTANT_BUFFER_VIEW_DESC$BufferLocation$VH_; }

    static final MemoryLayout D3D12_CONSTANT_BUFFER_VIEW_DESC$SizeInBytes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_CONSTANT_BUFFER_VIEW_DESC$SizeInBytes$LAYOUT() { return D3D12_CONSTANT_BUFFER_VIEW_DESC$SizeInBytes$LAYOUT_; }

    static final VarHandle D3D12_CONSTANT_BUFFER_VIEW_DESC$SizeInBytes$VH_ = D3D12_CONSTANT_BUFFER_VIEW_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeInBytes"));
    public static java.lang.invoke.VarHandle D3D12_CONSTANT_BUFFER_VIEW_DESC$SizeInBytes$VH() { return D3D12_CONSTANT_BUFFER_VIEW_DESC$SizeInBytes$VH_; }

    public static int D3D12_FILTER_MIN_MAG_MIP_POINT() { return (int)0L; }

    public static int D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR() { return (int)1L; }

    public static int D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT() { return (int)4L; }

    public static int D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR() { return (int)5L; }

    public static int D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT() { return (int)16L; }

    public static int D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR() { return (int)17L; }

    public static int D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT() { return (int)20L; }

    public static int D3D12_FILTER_MIN_MAG_MIP_LINEAR() { return (int)21L; }

    public static int D3D12_FILTER_ANISOTROPIC() { return (int)85L; }

    public static int D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT() { return (int)128L; }

    public static int D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR() { return (int)129L; }

    public static int D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT() { return (int)132L; }

    public static int D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR() { return (int)133L; }

    public static int D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT() { return (int)144L; }

    public static int D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR() { return (int)145L; }

    public static int D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT() { return (int)148L; }

    public static int D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR() { return (int)149L; }

    public static int D3D12_FILTER_COMPARISON_ANISOTROPIC() { return (int)213L; }

    public static int D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT() { return (int)256L; }

    public static int D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR() { return (int)257L; }

    public static int D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT() { return (int)260L; }

    public static int D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR() { return (int)261L; }

    public static int D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT() { return (int)272L; }

    public static int D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR() { return (int)273L; }

    public static int D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT() { return (int)276L; }

    public static int D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR() { return (int)277L; }

    public static int D3D12_FILTER_MINIMUM_ANISOTROPIC() { return (int)341L; }

    public static int D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT() { return (int)384L; }

    public static int D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR() { return (int)385L; }

    public static int D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT() { return (int)388L; }

    public static int D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR() { return (int)389L; }

    public static int D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT() { return (int)400L; }

    public static int D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR() { return (int)401L; }

    public static int D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT() { return (int)404L; }

    public static int D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR() { return (int)405L; }

    public static int D3D12_FILTER_MAXIMUM_ANISOTROPIC() { return (int)469L; }

    public static int D3D12_FILTER_TYPE_POINT() { return (int)0L; }

    public static int D3D12_FILTER_TYPE_LINEAR() { return (int)1L; }

    public static int D3D12_FILTER_REDUCTION_TYPE_STANDARD() { return (int)0L; }

    public static int D3D12_FILTER_REDUCTION_TYPE_COMPARISON() { return (int)1L; }

    public static int D3D12_FILTER_REDUCTION_TYPE_MINIMUM() { return (int)2L; }

    public static int D3D12_FILTER_REDUCTION_TYPE_MAXIMUM() { return (int)3L; }

    public static int D3D12_TEXTURE_ADDRESS_MODE_WRAP() { return (int)1L; }

    public static int D3D12_TEXTURE_ADDRESS_MODE_MIRROR() { return (int)2L; }

    public static int D3D12_TEXTURE_ADDRESS_MODE_CLAMP() { return (int)3L; }

    public static int D3D12_TEXTURE_ADDRESS_MODE_BORDER() { return (int)4L; }

    public static int D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE() { return (int)5L; }

    static final MemoryLayout D3D12_SAMPLER_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Filter"),
        C_INT.withName("AddressU"),
        C_INT.withName("AddressV"),
        C_INT.withName("AddressW"),
        C_FLOAT.withName("MipLODBias"),
        C_INT.withName("MaxAnisotropy"),
        C_INT.withName("ComparisonFunc"),
        MemoryLayout.ofSequence(4, C_FLOAT).withName("BorderColor"),
        C_FLOAT.withName("MinLOD"),
        C_FLOAT.withName("MaxLOD")
    ).withName("D3D12_SAMPLER_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLER_DESC$struct$LAYOUT() { return D3D12_SAMPLER_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_SAMPLER_DESC$Filter$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLER_DESC$Filter$LAYOUT() { return D3D12_SAMPLER_DESC$Filter$LAYOUT_; }

    static final VarHandle D3D12_SAMPLER_DESC$Filter$VH_ = D3D12_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Filter"));
    public static java.lang.invoke.VarHandle D3D12_SAMPLER_DESC$Filter$VH() { return D3D12_SAMPLER_DESC$Filter$VH_; }

    static final MemoryLayout D3D12_SAMPLER_DESC$AddressU$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLER_DESC$AddressU$LAYOUT() { return D3D12_SAMPLER_DESC$AddressU$LAYOUT_; }

    static final VarHandle D3D12_SAMPLER_DESC$AddressU$VH_ = D3D12_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressU"));
    public static java.lang.invoke.VarHandle D3D12_SAMPLER_DESC$AddressU$VH() { return D3D12_SAMPLER_DESC$AddressU$VH_; }

    static final MemoryLayout D3D12_SAMPLER_DESC$AddressV$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLER_DESC$AddressV$LAYOUT() { return D3D12_SAMPLER_DESC$AddressV$LAYOUT_; }

    static final VarHandle D3D12_SAMPLER_DESC$AddressV$VH_ = D3D12_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressV"));
    public static java.lang.invoke.VarHandle D3D12_SAMPLER_DESC$AddressV$VH() { return D3D12_SAMPLER_DESC$AddressV$VH_; }

    static final MemoryLayout D3D12_SAMPLER_DESC$AddressW$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLER_DESC$AddressW$LAYOUT() { return D3D12_SAMPLER_DESC$AddressW$LAYOUT_; }

    static final VarHandle D3D12_SAMPLER_DESC$AddressW$VH_ = D3D12_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressW"));
    public static java.lang.invoke.VarHandle D3D12_SAMPLER_DESC$AddressW$VH() { return D3D12_SAMPLER_DESC$AddressW$VH_; }

    static final MemoryLayout D3D12_SAMPLER_DESC$MipLODBias$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLER_DESC$MipLODBias$LAYOUT() { return D3D12_SAMPLER_DESC$MipLODBias$LAYOUT_; }

    static final VarHandle D3D12_SAMPLER_DESC$MipLODBias$VH_ = D3D12_SAMPLER_DESC$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("MipLODBias"));
    public static java.lang.invoke.VarHandle D3D12_SAMPLER_DESC$MipLODBias$VH() { return D3D12_SAMPLER_DESC$MipLODBias$VH_; }

    static final MemoryLayout D3D12_SAMPLER_DESC$MaxAnisotropy$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLER_DESC$MaxAnisotropy$LAYOUT() { return D3D12_SAMPLER_DESC$MaxAnisotropy$LAYOUT_; }

    static final VarHandle D3D12_SAMPLER_DESC$MaxAnisotropy$VH_ = D3D12_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxAnisotropy"));
    public static java.lang.invoke.VarHandle D3D12_SAMPLER_DESC$MaxAnisotropy$VH() { return D3D12_SAMPLER_DESC$MaxAnisotropy$VH_; }

    static final MemoryLayout D3D12_SAMPLER_DESC$ComparisonFunc$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLER_DESC$ComparisonFunc$LAYOUT() { return D3D12_SAMPLER_DESC$ComparisonFunc$LAYOUT_; }

    static final VarHandle D3D12_SAMPLER_DESC$ComparisonFunc$VH_ = D3D12_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ComparisonFunc"));
    public static java.lang.invoke.VarHandle D3D12_SAMPLER_DESC$ComparisonFunc$VH() { return D3D12_SAMPLER_DESC$ComparisonFunc$VH_; }

    static final MemoryLayout D3D12_SAMPLER_DESC$MinLOD$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLER_DESC$MinLOD$LAYOUT() { return D3D12_SAMPLER_DESC$MinLOD$LAYOUT_; }

    static final VarHandle D3D12_SAMPLER_DESC$MinLOD$VH_ = D3D12_SAMPLER_DESC$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("MinLOD"));
    public static java.lang.invoke.VarHandle D3D12_SAMPLER_DESC$MinLOD$VH() { return D3D12_SAMPLER_DESC$MinLOD$VH_; }

    static final MemoryLayout D3D12_SAMPLER_DESC$MaxLOD$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_SAMPLER_DESC$MaxLOD$LAYOUT() { return D3D12_SAMPLER_DESC$MaxLOD$LAYOUT_; }

    static final VarHandle D3D12_SAMPLER_DESC$MaxLOD$VH_ = D3D12_SAMPLER_DESC$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("MaxLOD"));
    public static java.lang.invoke.VarHandle D3D12_SAMPLER_DESC$MaxLOD$VH() { return D3D12_SAMPLER_DESC$MaxLOD$VH_; }

    public static int D3D12_BUFFER_UAV_FLAG_NONE() { return (int)0L; }

    public static int D3D12_BUFFER_UAV_FLAG_RAW() { return (int)1L; }

    static final MemoryLayout D3D12_BUFFER_UAV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("FirstElement"),
        C_INT.withName("NumElements"),
        C_INT.withName("StructureByteStride"),
        C_LONGLONG.withName("CounterOffsetInBytes"),
        C_INT.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("D3D12_BUFFER_UAV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_UAV$struct$LAYOUT() { return D3D12_BUFFER_UAV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_BUFFER_UAV$FirstElement$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_UAV$FirstElement$LAYOUT() { return D3D12_BUFFER_UAV$FirstElement$LAYOUT_; }

    static final VarHandle D3D12_BUFFER_UAV$FirstElement$VH_ = D3D12_BUFFER_UAV$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FirstElement"));
    public static java.lang.invoke.VarHandle D3D12_BUFFER_UAV$FirstElement$VH() { return D3D12_BUFFER_UAV$FirstElement$VH_; }

    static final MemoryLayout D3D12_BUFFER_UAV$NumElements$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_UAV$NumElements$LAYOUT() { return D3D12_BUFFER_UAV$NumElements$LAYOUT_; }

    static final VarHandle D3D12_BUFFER_UAV$NumElements$VH_ = D3D12_BUFFER_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumElements"));
    public static java.lang.invoke.VarHandle D3D12_BUFFER_UAV$NumElements$VH() { return D3D12_BUFFER_UAV$NumElements$VH_; }

    static final MemoryLayout D3D12_BUFFER_UAV$StructureByteStride$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_UAV$StructureByteStride$LAYOUT() { return D3D12_BUFFER_UAV$StructureByteStride$LAYOUT_; }

    static final VarHandle D3D12_BUFFER_UAV$StructureByteStride$VH_ = D3D12_BUFFER_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StructureByteStride"));
    public static java.lang.invoke.VarHandle D3D12_BUFFER_UAV$StructureByteStride$VH() { return D3D12_BUFFER_UAV$StructureByteStride$VH_; }

    static final MemoryLayout D3D12_BUFFER_UAV$CounterOffsetInBytes$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_UAV$CounterOffsetInBytes$LAYOUT() { return D3D12_BUFFER_UAV$CounterOffsetInBytes$LAYOUT_; }

    static final VarHandle D3D12_BUFFER_UAV$CounterOffsetInBytes$VH_ = D3D12_BUFFER_UAV$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CounterOffsetInBytes"));
    public static java.lang.invoke.VarHandle D3D12_BUFFER_UAV$CounterOffsetInBytes$VH() { return D3D12_BUFFER_UAV$CounterOffsetInBytes$VH_; }

    static final MemoryLayout D3D12_BUFFER_UAV$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_UAV$Flags$LAYOUT() { return D3D12_BUFFER_UAV$Flags$LAYOUT_; }

    static final VarHandle D3D12_BUFFER_UAV$Flags$VH_ = D3D12_BUFFER_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle D3D12_BUFFER_UAV$Flags$VH() { return D3D12_BUFFER_UAV$Flags$VH_; }

    static final MemoryLayout D3D12_TEX1D_UAV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice")
    ).withName("D3D12_TEX1D_UAV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_UAV$struct$LAYOUT() { return D3D12_TEX1D_UAV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX1D_UAV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_UAV$MipSlice$LAYOUT() { return D3D12_TEX1D_UAV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_UAV$MipSlice$VH_ = D3D12_TEX1D_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_UAV$MipSlice$VH() { return D3D12_TEX1D_UAV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_UAV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice"),
        C_INT.withName("FirstArraySlice"),
        C_INT.withName("ArraySize")
    ).withName("D3D12_TEX1D_ARRAY_UAV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_UAV$struct$LAYOUT() { return D3D12_TEX1D_ARRAY_UAV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_UAV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_UAV$MipSlice$LAYOUT() { return D3D12_TEX1D_ARRAY_UAV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_UAV$MipSlice$VH_ = D3D12_TEX1D_ARRAY_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_UAV$MipSlice$VH() { return D3D12_TEX1D_ARRAY_UAV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_UAV$FirstArraySlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_UAV$FirstArraySlice$LAYOUT() { return D3D12_TEX1D_ARRAY_UAV$FirstArraySlice$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_UAV$FirstArraySlice$VH_ = D3D12_TEX1D_ARRAY_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstArraySlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_UAV$FirstArraySlice$VH() { return D3D12_TEX1D_ARRAY_UAV$FirstArraySlice$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_UAV$ArraySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_UAV$ArraySize$LAYOUT() { return D3D12_TEX1D_ARRAY_UAV$ArraySize$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_UAV$ArraySize$VH_ = D3D12_TEX1D_ARRAY_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArraySize"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_UAV$ArraySize$VH() { return D3D12_TEX1D_ARRAY_UAV$ArraySize$VH_; }

    static final MemoryLayout D3D12_TEX2D_UAV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice"),
        C_INT.withName("PlaneSlice")
    ).withName("D3D12_TEX2D_UAV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_UAV$struct$LAYOUT() { return D3D12_TEX2D_UAV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2D_UAV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_UAV$MipSlice$LAYOUT() { return D3D12_TEX2D_UAV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_UAV$MipSlice$VH_ = D3D12_TEX2D_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_UAV$MipSlice$VH() { return D3D12_TEX2D_UAV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_UAV$PlaneSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_UAV$PlaneSlice$LAYOUT() { return D3D12_TEX2D_UAV$PlaneSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_UAV$PlaneSlice$VH_ = D3D12_TEX2D_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PlaneSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_UAV$PlaneSlice$VH() { return D3D12_TEX2D_UAV$PlaneSlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_UAV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice"),
        C_INT.withName("FirstArraySlice"),
        C_INT.withName("ArraySize"),
        C_INT.withName("PlaneSlice")
    ).withName("D3D12_TEX2D_ARRAY_UAV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_UAV$struct$LAYOUT() { return D3D12_TEX2D_ARRAY_UAV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_UAV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_UAV$MipSlice$LAYOUT() { return D3D12_TEX2D_ARRAY_UAV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_UAV$MipSlice$VH_ = D3D12_TEX2D_ARRAY_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_UAV$MipSlice$VH() { return D3D12_TEX2D_ARRAY_UAV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_UAV$FirstArraySlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_UAV$FirstArraySlice$LAYOUT() { return D3D12_TEX2D_ARRAY_UAV$FirstArraySlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_UAV$FirstArraySlice$VH_ = D3D12_TEX2D_ARRAY_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstArraySlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_UAV$FirstArraySlice$VH() { return D3D12_TEX2D_ARRAY_UAV$FirstArraySlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_UAV$ArraySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_UAV$ArraySize$LAYOUT() { return D3D12_TEX2D_ARRAY_UAV$ArraySize$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_UAV$ArraySize$VH_ = D3D12_TEX2D_ARRAY_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArraySize"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_UAV$ArraySize$VH() { return D3D12_TEX2D_ARRAY_UAV$ArraySize$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_UAV$PlaneSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_UAV$PlaneSlice$LAYOUT() { return D3D12_TEX2D_ARRAY_UAV$PlaneSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_UAV$PlaneSlice$VH_ = D3D12_TEX2D_ARRAY_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PlaneSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_UAV$PlaneSlice$VH() { return D3D12_TEX2D_ARRAY_UAV$PlaneSlice$VH_; }

    static final MemoryLayout D3D12_TEX3D_UAV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice"),
        C_INT.withName("FirstWSlice"),
        C_INT.withName("WSize")
    ).withName("D3D12_TEX3D_UAV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_UAV$struct$LAYOUT() { return D3D12_TEX3D_UAV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX3D_UAV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_UAV$MipSlice$LAYOUT() { return D3D12_TEX3D_UAV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX3D_UAV$MipSlice$VH_ = D3D12_TEX3D_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX3D_UAV$MipSlice$VH() { return D3D12_TEX3D_UAV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX3D_UAV$FirstWSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_UAV$FirstWSlice$LAYOUT() { return D3D12_TEX3D_UAV$FirstWSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX3D_UAV$FirstWSlice$VH_ = D3D12_TEX3D_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstWSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX3D_UAV$FirstWSlice$VH() { return D3D12_TEX3D_UAV$FirstWSlice$VH_; }

    static final MemoryLayout D3D12_TEX3D_UAV$WSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_UAV$WSize$LAYOUT() { return D3D12_TEX3D_UAV$WSize$LAYOUT_; }

    static final VarHandle D3D12_TEX3D_UAV$WSize$VH_ = D3D12_TEX3D_UAV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WSize"));
    public static java.lang.invoke.VarHandle D3D12_TEX3D_UAV$WSize$VH() { return D3D12_TEX3D_UAV$WSize$VH_; }

    public static int D3D12_UAV_DIMENSION_UNKNOWN() { return (int)0L; }

    public static int D3D12_UAV_DIMENSION_BUFFER() { return (int)1L; }

    public static int D3D12_UAV_DIMENSION_TEXTURE1D() { return (int)2L; }

    public static int D3D12_UAV_DIMENSION_TEXTURE1DARRAY() { return (int)3L; }

    public static int D3D12_UAV_DIMENSION_TEXTURE2D() { return (int)4L; }

    public static int D3D12_UAV_DIMENSION_TEXTURE2DARRAY() { return (int)5L; }

    public static int D3D12_UAV_DIMENSION_TEXTURE3D() { return (int)8L; }

    static final MemoryLayout D3D12_UNORDERED_ACCESS_VIEW_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Format"),
        C_INT.withName("ViewDimension"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("FirstElement"),
            C_INT.withName("NumElements"),
            C_INT.withName("StructureByteStride"),
            C_LONGLONG.withName("CounterOffsetInBytes"),
            C_INT.withName("Flags"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Buffer"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice")
        ).withName("Texture1D"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice"),
            C_INT.withName("FirstArraySlice"),
            C_INT.withName("ArraySize")
        ).withName("Texture1DArray"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice"),
            C_INT.withName("PlaneSlice")
        ).withName("Texture2D"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice"),
            C_INT.withName("FirstArraySlice"),
            C_INT.withName("ArraySize"),
            C_INT.withName("PlaneSlice")
        ).withName("Texture2DArray"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice"),
            C_INT.withName("FirstWSlice"),
            C_INT.withName("WSize")
        ).withName("Texture3D")
    ).withName("D3D12_UNORDERED_ACCESS_VIEW_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_UNORDERED_ACCESS_VIEW_DESC$struct$LAYOUT() { return D3D12_UNORDERED_ACCESS_VIEW_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_UNORDERED_ACCESS_VIEW_DESC$Format$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_UNORDERED_ACCESS_VIEW_DESC$Format$LAYOUT() { return D3D12_UNORDERED_ACCESS_VIEW_DESC$Format$LAYOUT_; }

    static final VarHandle D3D12_UNORDERED_ACCESS_VIEW_DESC$Format$VH_ = D3D12_UNORDERED_ACCESS_VIEW_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Format"));
    public static java.lang.invoke.VarHandle D3D12_UNORDERED_ACCESS_VIEW_DESC$Format$VH() { return D3D12_UNORDERED_ACCESS_VIEW_DESC$Format$VH_; }

    static final MemoryLayout D3D12_UNORDERED_ACCESS_VIEW_DESC$ViewDimension$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_UNORDERED_ACCESS_VIEW_DESC$ViewDimension$LAYOUT() { return D3D12_UNORDERED_ACCESS_VIEW_DESC$ViewDimension$LAYOUT_; }

    static final VarHandle D3D12_UNORDERED_ACCESS_VIEW_DESC$ViewDimension$VH_ = D3D12_UNORDERED_ACCESS_VIEW_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ViewDimension"));
    public static java.lang.invoke.VarHandle D3D12_UNORDERED_ACCESS_VIEW_DESC$ViewDimension$VH() { return D3D12_UNORDERED_ACCESS_VIEW_DESC$ViewDimension$VH_; }

    static final MemoryLayout D3D12_BUFFER_RTV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("FirstElement"),
        C_INT.withName("NumElements"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("D3D12_BUFFER_RTV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_RTV$struct$LAYOUT() { return D3D12_BUFFER_RTV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_BUFFER_RTV$FirstElement$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_RTV$FirstElement$LAYOUT() { return D3D12_BUFFER_RTV$FirstElement$LAYOUT_; }

    static final VarHandle D3D12_BUFFER_RTV$FirstElement$VH_ = D3D12_BUFFER_RTV$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FirstElement"));
    public static java.lang.invoke.VarHandle D3D12_BUFFER_RTV$FirstElement$VH() { return D3D12_BUFFER_RTV$FirstElement$VH_; }

    static final MemoryLayout D3D12_BUFFER_RTV$NumElements$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_BUFFER_RTV$NumElements$LAYOUT() { return D3D12_BUFFER_RTV$NumElements$LAYOUT_; }

    static final VarHandle D3D12_BUFFER_RTV$NumElements$VH_ = D3D12_BUFFER_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumElements"));
    public static java.lang.invoke.VarHandle D3D12_BUFFER_RTV$NumElements$VH() { return D3D12_BUFFER_RTV$NumElements$VH_; }

    static final MemoryLayout D3D12_TEX1D_RTV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice")
    ).withName("D3D12_TEX1D_RTV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_RTV$struct$LAYOUT() { return D3D12_TEX1D_RTV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX1D_RTV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_RTV$MipSlice$LAYOUT() { return D3D12_TEX1D_RTV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_RTV$MipSlice$VH_ = D3D12_TEX1D_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_RTV$MipSlice$VH() { return D3D12_TEX1D_RTV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_RTV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice"),
        C_INT.withName("FirstArraySlice"),
        C_INT.withName("ArraySize")
    ).withName("D3D12_TEX1D_ARRAY_RTV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_RTV$struct$LAYOUT() { return D3D12_TEX1D_ARRAY_RTV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_RTV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_RTV$MipSlice$LAYOUT() { return D3D12_TEX1D_ARRAY_RTV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_RTV$MipSlice$VH_ = D3D12_TEX1D_ARRAY_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_RTV$MipSlice$VH() { return D3D12_TEX1D_ARRAY_RTV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_RTV$FirstArraySlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_RTV$FirstArraySlice$LAYOUT() { return D3D12_TEX1D_ARRAY_RTV$FirstArraySlice$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_RTV$FirstArraySlice$VH_ = D3D12_TEX1D_ARRAY_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstArraySlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_RTV$FirstArraySlice$VH() { return D3D12_TEX1D_ARRAY_RTV$FirstArraySlice$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_RTV$ArraySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_RTV$ArraySize$LAYOUT() { return D3D12_TEX1D_ARRAY_RTV$ArraySize$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_RTV$ArraySize$VH_ = D3D12_TEX1D_ARRAY_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArraySize"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_RTV$ArraySize$VH() { return D3D12_TEX1D_ARRAY_RTV$ArraySize$VH_; }

    static final MemoryLayout D3D12_TEX2D_RTV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice"),
        C_INT.withName("PlaneSlice")
    ).withName("D3D12_TEX2D_RTV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_RTV$struct$LAYOUT() { return D3D12_TEX2D_RTV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2D_RTV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_RTV$MipSlice$LAYOUT() { return D3D12_TEX2D_RTV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_RTV$MipSlice$VH_ = D3D12_TEX2D_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_RTV$MipSlice$VH() { return D3D12_TEX2D_RTV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_RTV$PlaneSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_RTV$PlaneSlice$LAYOUT() { return D3D12_TEX2D_RTV$PlaneSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_RTV$PlaneSlice$VH_ = D3D12_TEX2D_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PlaneSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_RTV$PlaneSlice$VH() { return D3D12_TEX2D_RTV$PlaneSlice$VH_; }

    static final MemoryLayout D3D12_TEX2DMS_RTV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("UnusedField_NothingToDefine")
    ).withName("D3D12_TEX2DMS_RTV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_RTV$struct$LAYOUT() { return D3D12_TEX2DMS_RTV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2DMS_RTV$UnusedField_NothingToDefine$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_RTV$UnusedField_NothingToDefine$LAYOUT() { return D3D12_TEX2DMS_RTV$UnusedField_NothingToDefine$LAYOUT_; }

    static final VarHandle D3D12_TEX2DMS_RTV$UnusedField_NothingToDefine$VH_ = D3D12_TEX2DMS_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UnusedField_NothingToDefine"));
    public static java.lang.invoke.VarHandle D3D12_TEX2DMS_RTV$UnusedField_NothingToDefine$VH() { return D3D12_TEX2DMS_RTV$UnusedField_NothingToDefine$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_RTV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice"),
        C_INT.withName("FirstArraySlice"),
        C_INT.withName("ArraySize"),
        C_INT.withName("PlaneSlice")
    ).withName("D3D12_TEX2D_ARRAY_RTV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_RTV$struct$LAYOUT() { return D3D12_TEX2D_ARRAY_RTV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_RTV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_RTV$MipSlice$LAYOUT() { return D3D12_TEX2D_ARRAY_RTV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_RTV$MipSlice$VH_ = D3D12_TEX2D_ARRAY_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_RTV$MipSlice$VH() { return D3D12_TEX2D_ARRAY_RTV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_RTV$FirstArraySlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_RTV$FirstArraySlice$LAYOUT() { return D3D12_TEX2D_ARRAY_RTV$FirstArraySlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_RTV$FirstArraySlice$VH_ = D3D12_TEX2D_ARRAY_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstArraySlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_RTV$FirstArraySlice$VH() { return D3D12_TEX2D_ARRAY_RTV$FirstArraySlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_RTV$ArraySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_RTV$ArraySize$LAYOUT() { return D3D12_TEX2D_ARRAY_RTV$ArraySize$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_RTV$ArraySize$VH_ = D3D12_TEX2D_ARRAY_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArraySize"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_RTV$ArraySize$VH() { return D3D12_TEX2D_ARRAY_RTV$ArraySize$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_RTV$PlaneSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_RTV$PlaneSlice$LAYOUT() { return D3D12_TEX2D_ARRAY_RTV$PlaneSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_RTV$PlaneSlice$VH_ = D3D12_TEX2D_ARRAY_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PlaneSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_RTV$PlaneSlice$VH() { return D3D12_TEX2D_ARRAY_RTV$PlaneSlice$VH_; }

    static final MemoryLayout D3D12_TEX2DMS_ARRAY_RTV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("FirstArraySlice"),
        C_INT.withName("ArraySize")
    ).withName("D3D12_TEX2DMS_ARRAY_RTV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_ARRAY_RTV$struct$LAYOUT() { return D3D12_TEX2DMS_ARRAY_RTV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2DMS_ARRAY_RTV$FirstArraySlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_ARRAY_RTV$FirstArraySlice$LAYOUT() { return D3D12_TEX2DMS_ARRAY_RTV$FirstArraySlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2DMS_ARRAY_RTV$FirstArraySlice$VH_ = D3D12_TEX2DMS_ARRAY_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstArraySlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2DMS_ARRAY_RTV$FirstArraySlice$VH() { return D3D12_TEX2DMS_ARRAY_RTV$FirstArraySlice$VH_; }

    static final MemoryLayout D3D12_TEX2DMS_ARRAY_RTV$ArraySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_ARRAY_RTV$ArraySize$LAYOUT() { return D3D12_TEX2DMS_ARRAY_RTV$ArraySize$LAYOUT_; }

    static final VarHandle D3D12_TEX2DMS_ARRAY_RTV$ArraySize$VH_ = D3D12_TEX2DMS_ARRAY_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArraySize"));
    public static java.lang.invoke.VarHandle D3D12_TEX2DMS_ARRAY_RTV$ArraySize$VH() { return D3D12_TEX2DMS_ARRAY_RTV$ArraySize$VH_; }

    static final MemoryLayout D3D12_TEX3D_RTV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice"),
        C_INT.withName("FirstWSlice"),
        C_INT.withName("WSize")
    ).withName("D3D12_TEX3D_RTV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_RTV$struct$LAYOUT() { return D3D12_TEX3D_RTV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX3D_RTV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_RTV$MipSlice$LAYOUT() { return D3D12_TEX3D_RTV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX3D_RTV$MipSlice$VH_ = D3D12_TEX3D_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX3D_RTV$MipSlice$VH() { return D3D12_TEX3D_RTV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX3D_RTV$FirstWSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_RTV$FirstWSlice$LAYOUT() { return D3D12_TEX3D_RTV$FirstWSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX3D_RTV$FirstWSlice$VH_ = D3D12_TEX3D_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstWSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX3D_RTV$FirstWSlice$VH() { return D3D12_TEX3D_RTV$FirstWSlice$VH_; }

    static final MemoryLayout D3D12_TEX3D_RTV$WSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX3D_RTV$WSize$LAYOUT() { return D3D12_TEX3D_RTV$WSize$LAYOUT_; }

    static final VarHandle D3D12_TEX3D_RTV$WSize$VH_ = D3D12_TEX3D_RTV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WSize"));
    public static java.lang.invoke.VarHandle D3D12_TEX3D_RTV$WSize$VH() { return D3D12_TEX3D_RTV$WSize$VH_; }

    public static int D3D12_RTV_DIMENSION_UNKNOWN() { return (int)0L; }

    public static int D3D12_RTV_DIMENSION_BUFFER() { return (int)1L; }

    public static int D3D12_RTV_DIMENSION_TEXTURE1D() { return (int)2L; }

    public static int D3D12_RTV_DIMENSION_TEXTURE1DARRAY() { return (int)3L; }

    public static int D3D12_RTV_DIMENSION_TEXTURE2D() { return (int)4L; }

    public static int D3D12_RTV_DIMENSION_TEXTURE2DARRAY() { return (int)5L; }

    public static int D3D12_RTV_DIMENSION_TEXTURE2DMS() { return (int)6L; }

    public static int D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY() { return (int)7L; }

    public static int D3D12_RTV_DIMENSION_TEXTURE3D() { return (int)8L; }

    static final MemoryLayout D3D12_RENDER_TARGET_VIEW_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Format"),
        C_INT.withName("ViewDimension"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("FirstElement"),
            C_INT.withName("NumElements"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Buffer"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice")
        ).withName("Texture1D"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice"),
            C_INT.withName("FirstArraySlice"),
            C_INT.withName("ArraySize")
        ).withName("Texture1DArray"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice"),
            C_INT.withName("PlaneSlice")
        ).withName("Texture2D"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice"),
            C_INT.withName("FirstArraySlice"),
            C_INT.withName("ArraySize"),
            C_INT.withName("PlaneSlice")
        ).withName("Texture2DArray"),
        MemoryLayout.ofStruct(
            C_INT.withName("UnusedField_NothingToDefine")
        ).withName("Texture2DMS"),
        MemoryLayout.ofStruct(
            C_INT.withName("FirstArraySlice"),
            C_INT.withName("ArraySize")
        ).withName("Texture2DMSArray"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice"),
            C_INT.withName("FirstWSlice"),
            C_INT.withName("WSize")
        ).withName("Texture3D")
    ).withName("D3D12_RENDER_TARGET_VIEW_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_VIEW_DESC$struct$LAYOUT() { return D3D12_RENDER_TARGET_VIEW_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_RENDER_TARGET_VIEW_DESC$Format$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_VIEW_DESC$Format$LAYOUT() { return D3D12_RENDER_TARGET_VIEW_DESC$Format$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_VIEW_DESC$Format$VH_ = D3D12_RENDER_TARGET_VIEW_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Format"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_VIEW_DESC$Format$VH() { return D3D12_RENDER_TARGET_VIEW_DESC$Format$VH_; }

    static final MemoryLayout D3D12_RENDER_TARGET_VIEW_DESC$ViewDimension$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_RENDER_TARGET_VIEW_DESC$ViewDimension$LAYOUT() { return D3D12_RENDER_TARGET_VIEW_DESC$ViewDimension$LAYOUT_; }

    static final VarHandle D3D12_RENDER_TARGET_VIEW_DESC$ViewDimension$VH_ = D3D12_RENDER_TARGET_VIEW_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ViewDimension"));
    public static java.lang.invoke.VarHandle D3D12_RENDER_TARGET_VIEW_DESC$ViewDimension$VH() { return D3D12_RENDER_TARGET_VIEW_DESC$ViewDimension$VH_; }

    static final MemoryLayout D3D12_TEX1D_DSV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice")
    ).withName("D3D12_TEX1D_DSV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_DSV$struct$LAYOUT() { return D3D12_TEX1D_DSV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX1D_DSV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_DSV$MipSlice$LAYOUT() { return D3D12_TEX1D_DSV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_DSV$MipSlice$VH_ = D3D12_TEX1D_DSV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_DSV$MipSlice$VH() { return D3D12_TEX1D_DSV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_DSV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice"),
        C_INT.withName("FirstArraySlice"),
        C_INT.withName("ArraySize")
    ).withName("D3D12_TEX1D_ARRAY_DSV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_DSV$struct$LAYOUT() { return D3D12_TEX1D_ARRAY_DSV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_DSV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_DSV$MipSlice$LAYOUT() { return D3D12_TEX1D_ARRAY_DSV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_DSV$MipSlice$VH_ = D3D12_TEX1D_ARRAY_DSV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_DSV$MipSlice$VH() { return D3D12_TEX1D_ARRAY_DSV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_DSV$FirstArraySlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_DSV$FirstArraySlice$LAYOUT() { return D3D12_TEX1D_ARRAY_DSV$FirstArraySlice$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_DSV$FirstArraySlice$VH_ = D3D12_TEX1D_ARRAY_DSV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstArraySlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_DSV$FirstArraySlice$VH() { return D3D12_TEX1D_ARRAY_DSV$FirstArraySlice$VH_; }

    static final MemoryLayout D3D12_TEX1D_ARRAY_DSV$ArraySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX1D_ARRAY_DSV$ArraySize$LAYOUT() { return D3D12_TEX1D_ARRAY_DSV$ArraySize$LAYOUT_; }

    static final VarHandle D3D12_TEX1D_ARRAY_DSV$ArraySize$VH_ = D3D12_TEX1D_ARRAY_DSV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArraySize"));
    public static java.lang.invoke.VarHandle D3D12_TEX1D_ARRAY_DSV$ArraySize$VH() { return D3D12_TEX1D_ARRAY_DSV$ArraySize$VH_; }

    static final MemoryLayout D3D12_TEX2D_DSV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice")
    ).withName("D3D12_TEX2D_DSV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_DSV$struct$LAYOUT() { return D3D12_TEX2D_DSV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2D_DSV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_DSV$MipSlice$LAYOUT() { return D3D12_TEX2D_DSV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_DSV$MipSlice$VH_ = D3D12_TEX2D_DSV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_DSV$MipSlice$VH() { return D3D12_TEX2D_DSV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_DSV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MipSlice"),
        C_INT.withName("FirstArraySlice"),
        C_INT.withName("ArraySize")
    ).withName("D3D12_TEX2D_ARRAY_DSV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_DSV$struct$LAYOUT() { return D3D12_TEX2D_ARRAY_DSV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_DSV$MipSlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_DSV$MipSlice$LAYOUT() { return D3D12_TEX2D_ARRAY_DSV$MipSlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_DSV$MipSlice$VH_ = D3D12_TEX2D_ARRAY_DSV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MipSlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_DSV$MipSlice$VH() { return D3D12_TEX2D_ARRAY_DSV$MipSlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_DSV$FirstArraySlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_DSV$FirstArraySlice$LAYOUT() { return D3D12_TEX2D_ARRAY_DSV$FirstArraySlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_DSV$FirstArraySlice$VH_ = D3D12_TEX2D_ARRAY_DSV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstArraySlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_DSV$FirstArraySlice$VH() { return D3D12_TEX2D_ARRAY_DSV$FirstArraySlice$VH_; }

    static final MemoryLayout D3D12_TEX2D_ARRAY_DSV$ArraySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2D_ARRAY_DSV$ArraySize$LAYOUT() { return D3D12_TEX2D_ARRAY_DSV$ArraySize$LAYOUT_; }

    static final VarHandle D3D12_TEX2D_ARRAY_DSV$ArraySize$VH_ = D3D12_TEX2D_ARRAY_DSV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArraySize"));
    public static java.lang.invoke.VarHandle D3D12_TEX2D_ARRAY_DSV$ArraySize$VH() { return D3D12_TEX2D_ARRAY_DSV$ArraySize$VH_; }

    static final MemoryLayout D3D12_TEX2DMS_DSV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("UnusedField_NothingToDefine")
    ).withName("D3D12_TEX2DMS_DSV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_DSV$struct$LAYOUT() { return D3D12_TEX2DMS_DSV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2DMS_DSV$UnusedField_NothingToDefine$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_DSV$UnusedField_NothingToDefine$LAYOUT() { return D3D12_TEX2DMS_DSV$UnusedField_NothingToDefine$LAYOUT_; }

    static final VarHandle D3D12_TEX2DMS_DSV$UnusedField_NothingToDefine$VH_ = D3D12_TEX2DMS_DSV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UnusedField_NothingToDefine"));
    public static java.lang.invoke.VarHandle D3D12_TEX2DMS_DSV$UnusedField_NothingToDefine$VH() { return D3D12_TEX2DMS_DSV$UnusedField_NothingToDefine$VH_; }

    static final MemoryLayout D3D12_TEX2DMS_ARRAY_DSV$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("FirstArraySlice"),
        C_INT.withName("ArraySize")
    ).withName("D3D12_TEX2DMS_ARRAY_DSV");
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_ARRAY_DSV$struct$LAYOUT() { return D3D12_TEX2DMS_ARRAY_DSV$struct$LAYOUT_; }

    static final MemoryLayout D3D12_TEX2DMS_ARRAY_DSV$FirstArraySlice$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_ARRAY_DSV$FirstArraySlice$LAYOUT() { return D3D12_TEX2DMS_ARRAY_DSV$FirstArraySlice$LAYOUT_; }

    static final VarHandle D3D12_TEX2DMS_ARRAY_DSV$FirstArraySlice$VH_ = D3D12_TEX2DMS_ARRAY_DSV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstArraySlice"));
    public static java.lang.invoke.VarHandle D3D12_TEX2DMS_ARRAY_DSV$FirstArraySlice$VH() { return D3D12_TEX2DMS_ARRAY_DSV$FirstArraySlice$VH_; }

    static final MemoryLayout D3D12_TEX2DMS_ARRAY_DSV$ArraySize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_TEX2DMS_ARRAY_DSV$ArraySize$LAYOUT() { return D3D12_TEX2DMS_ARRAY_DSV$ArraySize$LAYOUT_; }

    static final VarHandle D3D12_TEX2DMS_ARRAY_DSV$ArraySize$VH_ = D3D12_TEX2DMS_ARRAY_DSV$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArraySize"));
    public static java.lang.invoke.VarHandle D3D12_TEX2DMS_ARRAY_DSV$ArraySize$VH() { return D3D12_TEX2DMS_ARRAY_DSV$ArraySize$VH_; }

    public static int D3D12_DSV_FLAG_NONE() { return (int)0L; }

    public static int D3D12_DSV_FLAG_READ_ONLY_DEPTH() { return (int)1L; }

    public static int D3D12_DSV_FLAG_READ_ONLY_STENCIL() { return (int)2L; }

    public static int D3D12_DSV_DIMENSION_UNKNOWN() { return (int)0L; }

    public static int D3D12_DSV_DIMENSION_TEXTURE1D() { return (int)1L; }

    public static int D3D12_DSV_DIMENSION_TEXTURE1DARRAY() { return (int)2L; }

    public static int D3D12_DSV_DIMENSION_TEXTURE2D() { return (int)3L; }

    public static int D3D12_DSV_DIMENSION_TEXTURE2DARRAY() { return (int)4L; }

    public static int D3D12_DSV_DIMENSION_TEXTURE2DMS() { return (int)5L; }

    public static int D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY() { return (int)6L; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_VIEW_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Format"),
        C_INT.withName("ViewDimension"),
        C_INT.withName("Flags"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice")
        ).withName("Texture1D"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice"),
            C_INT.withName("FirstArraySlice"),
            C_INT.withName("ArraySize")
        ).withName("Texture1DArray"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice")
        ).withName("Texture2D"),
        MemoryLayout.ofStruct(
            C_INT.withName("MipSlice"),
            C_INT.withName("FirstArraySlice"),
            C_INT.withName("ArraySize")
        ).withName("Texture2DArray"),
        MemoryLayout.ofStruct(
            C_INT.withName("UnusedField_NothingToDefine")
        ).withName("Texture2DMS"),
        MemoryLayout.ofStruct(
            C_INT.withName("FirstArraySlice"),
            C_INT.withName("ArraySize")
        ).withName("Texture2DMSArray")
    ).withName("D3D12_DEPTH_STENCIL_VIEW_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_VIEW_DESC$struct$LAYOUT() { return D3D12_DEPTH_STENCIL_VIEW_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_VIEW_DESC$Format$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_VIEW_DESC$Format$LAYOUT() { return D3D12_DEPTH_STENCIL_VIEW_DESC$Format$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_VIEW_DESC$Format$VH_ = D3D12_DEPTH_STENCIL_VIEW_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Format"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_VIEW_DESC$Format$VH() { return D3D12_DEPTH_STENCIL_VIEW_DESC$Format$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_VIEW_DESC$ViewDimension$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_VIEW_DESC$ViewDimension$LAYOUT() { return D3D12_DEPTH_STENCIL_VIEW_DESC$ViewDimension$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_VIEW_DESC$ViewDimension$VH_ = D3D12_DEPTH_STENCIL_VIEW_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ViewDimension"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_VIEW_DESC$ViewDimension$VH() { return D3D12_DEPTH_STENCIL_VIEW_DESC$ViewDimension$VH_; }

    static final MemoryLayout D3D12_DEPTH_STENCIL_VIEW_DESC$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DEPTH_STENCIL_VIEW_DESC$Flags$LAYOUT() { return D3D12_DEPTH_STENCIL_VIEW_DESC$Flags$LAYOUT_; }

    static final VarHandle D3D12_DEPTH_STENCIL_VIEW_DESC$Flags$VH_ = D3D12_DEPTH_STENCIL_VIEW_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle D3D12_DEPTH_STENCIL_VIEW_DESC$Flags$VH() { return D3D12_DEPTH_STENCIL_VIEW_DESC$Flags$VH_; }

    public static int D3D12_CLEAR_FLAG_DEPTH() { return (int)1L; }

    public static int D3D12_CLEAR_FLAG_STENCIL() { return (int)2L; }

    public static int D3D12_FENCE_FLAG_NONE() { return (int)0L; }

    public static int D3D12_FENCE_FLAG_SHARED() { return (int)1L; }

    public static int D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER() { return (int)2L; }

    public static int D3D12_FENCE_FLAG_NON_MONITORED() { return (int)4L; }

    public static int D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV() { return (int)0L; }

    public static int D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER() { return (int)1L; }

    public static int D3D12_DESCRIPTOR_HEAP_TYPE_RTV() { return (int)2L; }

    public static int D3D12_DESCRIPTOR_HEAP_TYPE_DSV() { return (int)3L; }

    public static int D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES() { return (int)4L; }

    public static int D3D12_DESCRIPTOR_HEAP_FLAG_NONE() { return (int)0L; }

    public static int D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE() { return (int)1L; }

    static final MemoryLayout D3D12_DESCRIPTOR_HEAP_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Type"),
        C_INT.withName("NumDescriptors"),
        C_INT.withName("Flags"),
        C_INT.withName("NodeMask")
    ).withName("D3D12_DESCRIPTOR_HEAP_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_HEAP_DESC$struct$LAYOUT() { return D3D12_DESCRIPTOR_HEAP_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_DESCRIPTOR_HEAP_DESC$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_HEAP_DESC$Type$LAYOUT() { return D3D12_DESCRIPTOR_HEAP_DESC$Type$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_HEAP_DESC$Type$VH_ = D3D12_DESCRIPTOR_HEAP_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_HEAP_DESC$Type$VH() { return D3D12_DESCRIPTOR_HEAP_DESC$Type$VH_; }

    static final MemoryLayout D3D12_DESCRIPTOR_HEAP_DESC$NumDescriptors$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_HEAP_DESC$NumDescriptors$LAYOUT() { return D3D12_DESCRIPTOR_HEAP_DESC$NumDescriptors$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_HEAP_DESC$NumDescriptors$VH_ = D3D12_DESCRIPTOR_HEAP_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumDescriptors"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_HEAP_DESC$NumDescriptors$VH() { return D3D12_DESCRIPTOR_HEAP_DESC$NumDescriptors$VH_; }

    static final MemoryLayout D3D12_DESCRIPTOR_HEAP_DESC$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_HEAP_DESC$Flags$LAYOUT() { return D3D12_DESCRIPTOR_HEAP_DESC$Flags$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_HEAP_DESC$Flags$VH_ = D3D12_DESCRIPTOR_HEAP_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_HEAP_DESC$Flags$VH() { return D3D12_DESCRIPTOR_HEAP_DESC$Flags$VH_; }

    static final MemoryLayout D3D12_DESCRIPTOR_HEAP_DESC$NodeMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_HEAP_DESC$NodeMask$LAYOUT() { return D3D12_DESCRIPTOR_HEAP_DESC$NodeMask$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_HEAP_DESC$NodeMask$VH_ = D3D12_DESCRIPTOR_HEAP_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NodeMask"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_HEAP_DESC$NodeMask$VH() { return D3D12_DESCRIPTOR_HEAP_DESC$NodeMask$VH_; }

    public static int D3D12_DESCRIPTOR_RANGE_TYPE_SRV() { return (int)0L; }

    public static int D3D12_DESCRIPTOR_RANGE_TYPE_UAV() { return (int)1L; }

    public static int D3D12_DESCRIPTOR_RANGE_TYPE_CBV() { return (int)2L; }

    public static int D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER() { return (int)3L; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("RangeType"),
        C_INT.withName("NumDescriptors"),
        C_INT.withName("BaseShaderRegister"),
        C_INT.withName("RegisterSpace"),
        C_INT.withName("OffsetInDescriptorsFromTableStart")
    ).withName("D3D12_DESCRIPTOR_RANGE");
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE$struct$LAYOUT() { return D3D12_DESCRIPTOR_RANGE$struct$LAYOUT_; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE$RangeType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE$RangeType$LAYOUT() { return D3D12_DESCRIPTOR_RANGE$RangeType$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_RANGE$RangeType$VH_ = D3D12_DESCRIPTOR_RANGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RangeType"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_RANGE$RangeType$VH() { return D3D12_DESCRIPTOR_RANGE$RangeType$VH_; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE$NumDescriptors$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE$NumDescriptors$LAYOUT() { return D3D12_DESCRIPTOR_RANGE$NumDescriptors$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_RANGE$NumDescriptors$VH_ = D3D12_DESCRIPTOR_RANGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumDescriptors"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_RANGE$NumDescriptors$VH() { return D3D12_DESCRIPTOR_RANGE$NumDescriptors$VH_; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE$BaseShaderRegister$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE$BaseShaderRegister$LAYOUT() { return D3D12_DESCRIPTOR_RANGE$BaseShaderRegister$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_RANGE$BaseShaderRegister$VH_ = D3D12_DESCRIPTOR_RANGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseShaderRegister"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_RANGE$BaseShaderRegister$VH() { return D3D12_DESCRIPTOR_RANGE$BaseShaderRegister$VH_; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE$RegisterSpace$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE$RegisterSpace$LAYOUT() { return D3D12_DESCRIPTOR_RANGE$RegisterSpace$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_RANGE$RegisterSpace$VH_ = D3D12_DESCRIPTOR_RANGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RegisterSpace"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_RANGE$RegisterSpace$VH() { return D3D12_DESCRIPTOR_RANGE$RegisterSpace$VH_; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE$OffsetInDescriptorsFromTableStart$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE$OffsetInDescriptorsFromTableStart$LAYOUT() { return D3D12_DESCRIPTOR_RANGE$OffsetInDescriptorsFromTableStart$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_RANGE$OffsetInDescriptorsFromTableStart$VH_ = D3D12_DESCRIPTOR_RANGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OffsetInDescriptorsFromTableStart"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_RANGE$OffsetInDescriptorsFromTableStart$VH() { return D3D12_DESCRIPTOR_RANGE$OffsetInDescriptorsFromTableStart$VH_; }

    static final MemoryLayout D3D12_ROOT_DESCRIPTOR_TABLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NumDescriptorRanges"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pDescriptorRanges")
    ).withName("D3D12_ROOT_DESCRIPTOR_TABLE");
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_DESCRIPTOR_TABLE$struct$LAYOUT() { return D3D12_ROOT_DESCRIPTOR_TABLE$struct$LAYOUT_; }

    static final MemoryLayout D3D12_ROOT_DESCRIPTOR_TABLE$NumDescriptorRanges$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_DESCRIPTOR_TABLE$NumDescriptorRanges$LAYOUT() { return D3D12_ROOT_DESCRIPTOR_TABLE$NumDescriptorRanges$LAYOUT_; }

    static final VarHandle D3D12_ROOT_DESCRIPTOR_TABLE$NumDescriptorRanges$VH_ = D3D12_ROOT_DESCRIPTOR_TABLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumDescriptorRanges"));
    public static java.lang.invoke.VarHandle D3D12_ROOT_DESCRIPTOR_TABLE$NumDescriptorRanges$VH() { return D3D12_ROOT_DESCRIPTOR_TABLE$NumDescriptorRanges$VH_; }

    static final MemoryLayout D3D12_ROOT_DESCRIPTOR_TABLE$pDescriptorRanges$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_DESCRIPTOR_TABLE$pDescriptorRanges$LAYOUT() { return D3D12_ROOT_DESCRIPTOR_TABLE$pDescriptorRanges$LAYOUT_; }

    static final VarHandle D3D12_ROOT_DESCRIPTOR_TABLE$pDescriptorRanges$VH_ = MemoryHandles.asAddressVarHandle(D3D12_ROOT_DESCRIPTOR_TABLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pDescriptorRanges")));
    public static java.lang.invoke.VarHandle D3D12_ROOT_DESCRIPTOR_TABLE$pDescriptorRanges$VH() { return D3D12_ROOT_DESCRIPTOR_TABLE$pDescriptorRanges$VH_; }

    static final MemoryLayout D3D12_ROOT_CONSTANTS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ShaderRegister"),
        C_INT.withName("RegisterSpace"),
        C_INT.withName("Num32BitValues")
    ).withName("D3D12_ROOT_CONSTANTS");
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_CONSTANTS$struct$LAYOUT() { return D3D12_ROOT_CONSTANTS$struct$LAYOUT_; }

    static final MemoryLayout D3D12_ROOT_CONSTANTS$ShaderRegister$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_CONSTANTS$ShaderRegister$LAYOUT() { return D3D12_ROOT_CONSTANTS$ShaderRegister$LAYOUT_; }

    static final VarHandle D3D12_ROOT_CONSTANTS$ShaderRegister$VH_ = D3D12_ROOT_CONSTANTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ShaderRegister"));
    public static java.lang.invoke.VarHandle D3D12_ROOT_CONSTANTS$ShaderRegister$VH() { return D3D12_ROOT_CONSTANTS$ShaderRegister$VH_; }

    static final MemoryLayout D3D12_ROOT_CONSTANTS$RegisterSpace$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_CONSTANTS$RegisterSpace$LAYOUT() { return D3D12_ROOT_CONSTANTS$RegisterSpace$LAYOUT_; }

    static final VarHandle D3D12_ROOT_CONSTANTS$RegisterSpace$VH_ = D3D12_ROOT_CONSTANTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RegisterSpace"));
    public static java.lang.invoke.VarHandle D3D12_ROOT_CONSTANTS$RegisterSpace$VH() { return D3D12_ROOT_CONSTANTS$RegisterSpace$VH_; }

    static final MemoryLayout D3D12_ROOT_CONSTANTS$Num32BitValues$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_CONSTANTS$Num32BitValues$LAYOUT() { return D3D12_ROOT_CONSTANTS$Num32BitValues$LAYOUT_; }

    static final VarHandle D3D12_ROOT_CONSTANTS$Num32BitValues$VH_ = D3D12_ROOT_CONSTANTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Num32BitValues"));
    public static java.lang.invoke.VarHandle D3D12_ROOT_CONSTANTS$Num32BitValues$VH() { return D3D12_ROOT_CONSTANTS$Num32BitValues$VH_; }

    static final MemoryLayout D3D12_ROOT_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ShaderRegister"),
        C_INT.withName("RegisterSpace")
    ).withName("D3D12_ROOT_DESCRIPTOR");
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_DESCRIPTOR$struct$LAYOUT() { return D3D12_ROOT_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout D3D12_ROOT_DESCRIPTOR$ShaderRegister$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_DESCRIPTOR$ShaderRegister$LAYOUT() { return D3D12_ROOT_DESCRIPTOR$ShaderRegister$LAYOUT_; }

    static final VarHandle D3D12_ROOT_DESCRIPTOR$ShaderRegister$VH_ = D3D12_ROOT_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ShaderRegister"));
    public static java.lang.invoke.VarHandle D3D12_ROOT_DESCRIPTOR$ShaderRegister$VH() { return D3D12_ROOT_DESCRIPTOR$ShaderRegister$VH_; }

    static final MemoryLayout D3D12_ROOT_DESCRIPTOR$RegisterSpace$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_DESCRIPTOR$RegisterSpace$LAYOUT() { return D3D12_ROOT_DESCRIPTOR$RegisterSpace$LAYOUT_; }

    static final VarHandle D3D12_ROOT_DESCRIPTOR$RegisterSpace$VH_ = D3D12_ROOT_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RegisterSpace"));
    public static java.lang.invoke.VarHandle D3D12_ROOT_DESCRIPTOR$RegisterSpace$VH() { return D3D12_ROOT_DESCRIPTOR$RegisterSpace$VH_; }

    public static int D3D12_SHADER_VISIBILITY_ALL() { return (int)0L; }

    public static int D3D12_SHADER_VISIBILITY_VERTEX() { return (int)1L; }

    public static int D3D12_SHADER_VISIBILITY_HULL() { return (int)2L; }

    public static int D3D12_SHADER_VISIBILITY_DOMAIN() { return (int)3L; }

    public static int D3D12_SHADER_VISIBILITY_GEOMETRY() { return (int)4L; }

    public static int D3D12_SHADER_VISIBILITY_PIXEL() { return (int)5L; }

    public static int D3D12_SHADER_VISIBILITY_AMPLIFICATION() { return (int)6L; }

    public static int D3D12_SHADER_VISIBILITY_MESH() { return (int)7L; }

    public static int D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE() { return (int)0L; }

    public static int D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS() { return (int)1L; }

    public static int D3D12_ROOT_PARAMETER_TYPE_CBV() { return (int)2L; }

    public static int D3D12_ROOT_PARAMETER_TYPE_SRV() { return (int)3L; }

    public static int D3D12_ROOT_PARAMETER_TYPE_UAV() { return (int)4L; }

    static final MemoryLayout D3D12_ROOT_PARAMETER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ParameterType"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_INT.withName("NumDescriptorRanges"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pDescriptorRanges")
        ).withName("DescriptorTable"),
        MemoryLayout.ofStruct(
            C_INT.withName("ShaderRegister"),
            C_INT.withName("RegisterSpace"),
            C_INT.withName("Num32BitValues")
        ).withName("Constants"),
        MemoryLayout.ofStruct(
            C_INT.withName("ShaderRegister"),
            C_INT.withName("RegisterSpace")
        ).withName("Descriptor"),
        C_INT.withName("ShaderVisibility"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("D3D12_ROOT_PARAMETER");
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_PARAMETER$struct$LAYOUT() { return D3D12_ROOT_PARAMETER$struct$LAYOUT_; }

    static final MemoryLayout D3D12_ROOT_PARAMETER$ParameterType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_PARAMETER$ParameterType$LAYOUT() { return D3D12_ROOT_PARAMETER$ParameterType$LAYOUT_; }

    static final VarHandle D3D12_ROOT_PARAMETER$ParameterType$VH_ = D3D12_ROOT_PARAMETER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ParameterType"));
    public static java.lang.invoke.VarHandle D3D12_ROOT_PARAMETER$ParameterType$VH() { return D3D12_ROOT_PARAMETER$ParameterType$VH_; }

    static final MemoryLayout D3D12_ROOT_PARAMETER$ShaderVisibility$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_PARAMETER$ShaderVisibility$LAYOUT() { return D3D12_ROOT_PARAMETER$ShaderVisibility$LAYOUT_; }

    static final VarHandle D3D12_ROOT_PARAMETER$ShaderVisibility$VH_ = D3D12_ROOT_PARAMETER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ShaderVisibility"));
    public static java.lang.invoke.VarHandle D3D12_ROOT_PARAMETER$ShaderVisibility$VH() { return D3D12_ROOT_PARAMETER$ShaderVisibility$VH_; }

    public static int D3D12_ROOT_SIGNATURE_FLAG_NONE() { return (int)0L; }

    public static int D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT() { return (int)1L; }

    public static int D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS() { return (int)2L; }

    public static int D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS() { return (int)4L; }

    public static int D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS() { return (int)8L; }

    public static int D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS() { return (int)16L; }

    public static int D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS() { return (int)32L; }

    public static int D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT() { return (int)64L; }

    public static int D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE() { return (int)128L; }

    public static int D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS() { return (int)256L; }

    public static int D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS() { return (int)512L; }

    public static int D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK() { return (int)0L; }

    public static int D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK() { return (int)1L; }

    public static int D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE() { return (int)2L; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Filter"),
        C_INT.withName("AddressU"),
        C_INT.withName("AddressV"),
        C_INT.withName("AddressW"),
        C_FLOAT.withName("MipLODBias"),
        C_INT.withName("MaxAnisotropy"),
        C_INT.withName("ComparisonFunc"),
        C_INT.withName("BorderColor"),
        C_FLOAT.withName("MinLOD"),
        C_FLOAT.withName("MaxLOD"),
        C_INT.withName("ShaderRegister"),
        C_INT.withName("RegisterSpace"),
        C_INT.withName("ShaderVisibility")
    ).withName("D3D12_STATIC_SAMPLER_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$Filter$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$Filter$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$Filter$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$Filter$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Filter"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$Filter$VH() { return D3D12_STATIC_SAMPLER_DESC$Filter$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$AddressU$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$AddressU$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$AddressU$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$AddressU$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressU"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$AddressU$VH() { return D3D12_STATIC_SAMPLER_DESC$AddressU$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$AddressV$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$AddressV$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$AddressV$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$AddressV$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressV"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$AddressV$VH() { return D3D12_STATIC_SAMPLER_DESC$AddressV$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$AddressW$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$AddressW$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$AddressW$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$AddressW$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressW"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$AddressW$VH() { return D3D12_STATIC_SAMPLER_DESC$AddressW$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$MipLODBias$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$MipLODBias$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$MipLODBias$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$MipLODBias$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("MipLODBias"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$MipLODBias$VH() { return D3D12_STATIC_SAMPLER_DESC$MipLODBias$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$MaxAnisotropy$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$MaxAnisotropy$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$MaxAnisotropy$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$MaxAnisotropy$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxAnisotropy"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$MaxAnisotropy$VH() { return D3D12_STATIC_SAMPLER_DESC$MaxAnisotropy$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$ComparisonFunc$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$ComparisonFunc$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$ComparisonFunc$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$ComparisonFunc$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ComparisonFunc"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$ComparisonFunc$VH() { return D3D12_STATIC_SAMPLER_DESC$ComparisonFunc$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$BorderColor$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$BorderColor$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$BorderColor$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$BorderColor$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BorderColor"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$BorderColor$VH() { return D3D12_STATIC_SAMPLER_DESC$BorderColor$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$MinLOD$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$MinLOD$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$MinLOD$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$MinLOD$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("MinLOD"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$MinLOD$VH() { return D3D12_STATIC_SAMPLER_DESC$MinLOD$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$MaxLOD$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$MaxLOD$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$MaxLOD$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$MaxLOD$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("MaxLOD"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$MaxLOD$VH() { return D3D12_STATIC_SAMPLER_DESC$MaxLOD$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$ShaderRegister$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$ShaderRegister$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$ShaderRegister$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$ShaderRegister$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ShaderRegister"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$ShaderRegister$VH() { return D3D12_STATIC_SAMPLER_DESC$ShaderRegister$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$RegisterSpace$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$RegisterSpace$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$RegisterSpace$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$RegisterSpace$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RegisterSpace"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$RegisterSpace$VH() { return D3D12_STATIC_SAMPLER_DESC$RegisterSpace$VH_; }

    static final MemoryLayout D3D12_STATIC_SAMPLER_DESC$ShaderVisibility$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_STATIC_SAMPLER_DESC$ShaderVisibility$LAYOUT() { return D3D12_STATIC_SAMPLER_DESC$ShaderVisibility$LAYOUT_; }

    static final VarHandle D3D12_STATIC_SAMPLER_DESC$ShaderVisibility$VH_ = D3D12_STATIC_SAMPLER_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ShaderVisibility"));
    public static java.lang.invoke.VarHandle D3D12_STATIC_SAMPLER_DESC$ShaderVisibility$VH() { return D3D12_STATIC_SAMPLER_DESC$ShaderVisibility$VH_; }

    static final MemoryLayout D3D12_ROOT_SIGNATURE_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NumParameters"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pParameters"),
        C_INT.withName("NumStaticSamplers"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pStaticSamplers"),
        C_INT.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("D3D12_ROOT_SIGNATURE_DESC");
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_SIGNATURE_DESC$struct$LAYOUT() { return D3D12_ROOT_SIGNATURE_DESC$struct$LAYOUT_; }

    static final MemoryLayout D3D12_ROOT_SIGNATURE_DESC$NumParameters$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_SIGNATURE_DESC$NumParameters$LAYOUT() { return D3D12_ROOT_SIGNATURE_DESC$NumParameters$LAYOUT_; }

    static final VarHandle D3D12_ROOT_SIGNATURE_DESC$NumParameters$VH_ = D3D12_ROOT_SIGNATURE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumParameters"));
    public static java.lang.invoke.VarHandle D3D12_ROOT_SIGNATURE_DESC$NumParameters$VH() { return D3D12_ROOT_SIGNATURE_DESC$NumParameters$VH_; }

    static final MemoryLayout D3D12_ROOT_SIGNATURE_DESC$pParameters$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_SIGNATURE_DESC$pParameters$LAYOUT() { return D3D12_ROOT_SIGNATURE_DESC$pParameters$LAYOUT_; }

    static final VarHandle D3D12_ROOT_SIGNATURE_DESC$pParameters$VH_ = MemoryHandles.asAddressVarHandle(D3D12_ROOT_SIGNATURE_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pParameters")));
    public static java.lang.invoke.VarHandle D3D12_ROOT_SIGNATURE_DESC$pParameters$VH() { return D3D12_ROOT_SIGNATURE_DESC$pParameters$VH_; }

    static final MemoryLayout D3D12_ROOT_SIGNATURE_DESC$NumStaticSamplers$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_SIGNATURE_DESC$NumStaticSamplers$LAYOUT() { return D3D12_ROOT_SIGNATURE_DESC$NumStaticSamplers$LAYOUT_; }

    static final VarHandle D3D12_ROOT_SIGNATURE_DESC$NumStaticSamplers$VH_ = D3D12_ROOT_SIGNATURE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumStaticSamplers"));
    public static java.lang.invoke.VarHandle D3D12_ROOT_SIGNATURE_DESC$NumStaticSamplers$VH() { return D3D12_ROOT_SIGNATURE_DESC$NumStaticSamplers$VH_; }

    static final MemoryLayout D3D12_ROOT_SIGNATURE_DESC$pStaticSamplers$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_SIGNATURE_DESC$pStaticSamplers$LAYOUT() { return D3D12_ROOT_SIGNATURE_DESC$pStaticSamplers$LAYOUT_; }

    static final VarHandle D3D12_ROOT_SIGNATURE_DESC$pStaticSamplers$VH_ = MemoryHandles.asAddressVarHandle(D3D12_ROOT_SIGNATURE_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pStaticSamplers")));
    public static java.lang.invoke.VarHandle D3D12_ROOT_SIGNATURE_DESC$pStaticSamplers$VH() { return D3D12_ROOT_SIGNATURE_DESC$pStaticSamplers$VH_; }

    static final MemoryLayout D3D12_ROOT_SIGNATURE_DESC$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_ROOT_SIGNATURE_DESC$Flags$LAYOUT() { return D3D12_ROOT_SIGNATURE_DESC$Flags$LAYOUT_; }

    static final VarHandle D3D12_ROOT_SIGNATURE_DESC$Flags$VH_ = D3D12_ROOT_SIGNATURE_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle D3D12_ROOT_SIGNATURE_DESC$Flags$VH() { return D3D12_ROOT_SIGNATURE_DESC$Flags$VH_; }

    public static int D3D12_DESCRIPTOR_RANGE_FLAG_NONE() { return (int)0L; }

    public static int D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE() { return (int)1L; }

    public static int D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE() { return (int)2L; }

    public static int D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE() { return (int)4L; }

    public static int D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC() { return (int)8L; }

    public static int D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS() { return (int)65536L; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("RangeType"),
        C_INT.withName("NumDescriptors"),
        C_INT.withName("BaseShaderRegister"),
        C_INT.withName("RegisterSpace"),
        C_INT.withName("Flags"),
        C_INT.withName("OffsetInDescriptorsFromTableStart")
    ).withName("D3D12_DESCRIPTOR_RANGE1");
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE1$struct$LAYOUT() { return D3D12_DESCRIPTOR_RANGE1$struct$LAYOUT_; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE1$RangeType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE1$RangeType$LAYOUT() { return D3D12_DESCRIPTOR_RANGE1$RangeType$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_RANGE1$RangeType$VH_ = D3D12_DESCRIPTOR_RANGE1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RangeType"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_RANGE1$RangeType$VH() { return D3D12_DESCRIPTOR_RANGE1$RangeType$VH_; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE1$NumDescriptors$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE1$NumDescriptors$LAYOUT() { return D3D12_DESCRIPTOR_RANGE1$NumDescriptors$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_RANGE1$NumDescriptors$VH_ = D3D12_DESCRIPTOR_RANGE1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumDescriptors"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_RANGE1$NumDescriptors$VH() { return D3D12_DESCRIPTOR_RANGE1$NumDescriptors$VH_; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE1$BaseShaderRegister$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE1$BaseShaderRegister$LAYOUT() { return D3D12_DESCRIPTOR_RANGE1$BaseShaderRegister$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_RANGE1$BaseShaderRegister$VH_ = D3D12_DESCRIPTOR_RANGE1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseShaderRegister"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_RANGE1$BaseShaderRegister$VH() { return D3D12_DESCRIPTOR_RANGE1$BaseShaderRegister$VH_; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE1$RegisterSpace$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE1$RegisterSpace$LAYOUT() { return D3D12_DESCRIPTOR_RANGE1$RegisterSpace$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_RANGE1$RegisterSpace$VH_ = D3D12_DESCRIPTOR_RANGE1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RegisterSpace"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_RANGE1$RegisterSpace$VH() { return D3D12_DESCRIPTOR_RANGE1$RegisterSpace$VH_; }

    static final MemoryLayout D3D12_DESCRIPTOR_RANGE1$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout D3D12_DESCRIPTOR_RANGE1$Flags$LAYOUT() { return D3D12_DESCRIPTOR_RANGE1$Flags$LAYOUT_; }

    static final VarHandle D3D12_DESCRIPTOR_RANGE1$Flags$VH_ = D3D12_DESCRIPTOR_RANGE1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle D3D12_DESCRIPTOR_RANGE1$Flags$VH() { return D3D12_DESCRIPTOR_RANGE1$Flags$VH_; }

}

