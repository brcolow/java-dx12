// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$15 extends Windows_h$constants$14 {
    Windows_h$constants$15() {}
    static final MemoryLayout _IMAGE_OS2_HEADER$ne_rev$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_rev$LAYOUT() { return _IMAGE_OS2_HEADER$ne_rev$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_rev$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_rev"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_rev$VH() { return _IMAGE_OS2_HEADER$ne_rev$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_enttab$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_enttab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_enttab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_enttab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_enttab"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_enttab$VH() { return _IMAGE_OS2_HEADER$ne_enttab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cbenttab$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cbenttab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cbenttab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cbenttab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cbenttab"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cbenttab$VH() { return _IMAGE_OS2_HEADER$ne_cbenttab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_crc$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_crc$LAYOUT() { return _IMAGE_OS2_HEADER$ne_crc$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_crc$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_crc"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_crc$VH() { return _IMAGE_OS2_HEADER$ne_crc$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_flags$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_flags$LAYOUT() { return _IMAGE_OS2_HEADER$ne_flags$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_flags$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_flags"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_flags$VH() { return _IMAGE_OS2_HEADER$ne_flags$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_autodata$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_autodata$LAYOUT() { return _IMAGE_OS2_HEADER$ne_autodata$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_autodata$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_autodata"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_autodata$VH() { return _IMAGE_OS2_HEADER$ne_autodata$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_heap$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_heap$LAYOUT() { return _IMAGE_OS2_HEADER$ne_heap$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_heap$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_heap"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_heap$VH() { return _IMAGE_OS2_HEADER$ne_heap$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_stack$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_stack$LAYOUT() { return _IMAGE_OS2_HEADER$ne_stack$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_stack$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_stack"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_stack$VH() { return _IMAGE_OS2_HEADER$ne_stack$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_csip$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_csip$LAYOUT() { return _IMAGE_OS2_HEADER$ne_csip$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_csip$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_csip"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_csip$VH() { return _IMAGE_OS2_HEADER$ne_csip$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_sssp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_sssp$LAYOUT() { return _IMAGE_OS2_HEADER$ne_sssp$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_sssp$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_sssp"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_sssp$VH() { return _IMAGE_OS2_HEADER$ne_sssp$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cseg$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cseg$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cseg$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cseg$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cseg"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cseg$VH() { return _IMAGE_OS2_HEADER$ne_cseg$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cmod$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cmod$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cmod$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cmod$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cmod"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cmod$VH() { return _IMAGE_OS2_HEADER$ne_cmod$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cbnrestab$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cbnrestab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cbnrestab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cbnrestab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cbnrestab"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cbnrestab$VH() { return _IMAGE_OS2_HEADER$ne_cbnrestab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_segtab$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_segtab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_segtab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_segtab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_segtab"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_segtab$VH() { return _IMAGE_OS2_HEADER$ne_segtab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_rsrctab$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_rsrctab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_rsrctab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_rsrctab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_rsrctab"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_rsrctab$VH() { return _IMAGE_OS2_HEADER$ne_rsrctab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_restab$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_restab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_restab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_restab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_restab"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_restab$VH() { return _IMAGE_OS2_HEADER$ne_restab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_modtab$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_modtab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_modtab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_modtab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_modtab"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_modtab$VH() { return _IMAGE_OS2_HEADER$ne_modtab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_imptab$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_imptab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_imptab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_imptab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_imptab"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_imptab$VH() { return _IMAGE_OS2_HEADER$ne_imptab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_nrestab$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_nrestab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_nrestab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_nrestab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_nrestab"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_nrestab$VH() { return _IMAGE_OS2_HEADER$ne_nrestab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cmovent$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cmovent$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cmovent$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cmovent$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cmovent"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cmovent$VH() { return _IMAGE_OS2_HEADER$ne_cmovent$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_align$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_align$LAYOUT() { return _IMAGE_OS2_HEADER$ne_align$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_align$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_align"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_align$VH() { return _IMAGE_OS2_HEADER$ne_align$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cres$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cres$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cres$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cres$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cres"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cres$VH() { return _IMAGE_OS2_HEADER$ne_cres$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_exetyp$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_exetyp$LAYOUT() { return _IMAGE_OS2_HEADER$ne_exetyp$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_exetyp$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_exetyp"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_exetyp$VH() { return _IMAGE_OS2_HEADER$ne_exetyp$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_flagsothers$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_flagsothers$LAYOUT() { return _IMAGE_OS2_HEADER$ne_flagsothers$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_flagsothers$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_flagsothers"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_flagsothers$VH() { return _IMAGE_OS2_HEADER$ne_flagsothers$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_pretthunks$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_pretthunks$LAYOUT() { return _IMAGE_OS2_HEADER$ne_pretthunks$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_pretthunks$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_pretthunks"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_pretthunks$VH() { return _IMAGE_OS2_HEADER$ne_pretthunks$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_psegrefbytes$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_psegrefbytes$LAYOUT() { return _IMAGE_OS2_HEADER$ne_psegrefbytes$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_psegrefbytes$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_psegrefbytes"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_psegrefbytes$VH() { return _IMAGE_OS2_HEADER$ne_psegrefbytes$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_swaparea$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_swaparea$LAYOUT() { return _IMAGE_OS2_HEADER$ne_swaparea$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_swaparea$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_swaparea"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_swaparea$VH() { return _IMAGE_OS2_HEADER$ne_swaparea$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_expver$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_expver$LAYOUT() { return _IMAGE_OS2_HEADER$ne_expver$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_expver$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_expver"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_expver$VH() { return _IMAGE_OS2_HEADER$ne_expver$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("e32_magic"),
        C_BOOL.withName("e32_border"),
        C_BOOL.withName("e32_worder"),
        C_INT.withName("e32_level"),
        C_SHORT.withName("e32_cpu"),
        C_SHORT.withName("e32_os"),
        C_INT.withName("e32_ver"),
        C_INT.withName("e32_mflags"),
        C_INT.withName("e32_mpages"),
        C_INT.withName("e32_startobj"),
        C_INT.withName("e32_eip"),
        C_INT.withName("e32_stackobj"),
        C_INT.withName("e32_esp"),
        C_INT.withName("e32_pagesize"),
        C_INT.withName("e32_lastpagesize"),
        C_INT.withName("e32_fixupsize"),
        C_INT.withName("e32_fixupsum"),
        C_INT.withName("e32_ldrsize"),
        C_INT.withName("e32_ldrsum"),
        C_INT.withName("e32_objtab"),
        C_INT.withName("e32_objcnt"),
        C_INT.withName("e32_objmap"),
        C_INT.withName("e32_itermap"),
        C_INT.withName("e32_rsrctab"),
        C_INT.withName("e32_rsrccnt"),
        C_INT.withName("e32_restab"),
        C_INT.withName("e32_enttab"),
        C_INT.withName("e32_dirtab"),
        C_INT.withName("e32_dircnt"),
        C_INT.withName("e32_fpagetab"),
        C_INT.withName("e32_frectab"),
        C_INT.withName("e32_impmod"),
        C_INT.withName("e32_impmodcnt"),
        C_INT.withName("e32_impproc"),
        C_INT.withName("e32_pagesum"),
        C_INT.withName("e32_datapage"),
        C_INT.withName("e32_preload"),
        C_INT.withName("e32_nrestab"),
        C_INT.withName("e32_cbnrestab"),
        C_INT.withName("e32_nressum"),
        C_INT.withName("e32_autodata"),
        C_INT.withName("e32_debuginfo"),
        C_INT.withName("e32_debuglen"),
        C_INT.withName("e32_instpreload"),
        C_INT.withName("e32_instdemand"),
        C_INT.withName("e32_heapsize"),
        MemoryLayout.ofSequence(12, C_BOOL).withName("e32_res3"),
        C_INT.withName("e32_winresoff"),
        C_INT.withName("e32_winreslen"),
        C_SHORT.withName("e32_devid"),
        C_SHORT.withName("e32_ddkver")
    ).withName("_IMAGE_VXD_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$struct$LAYOUT() { return _IMAGE_VXD_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_magic$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_magic$LAYOUT() { return _IMAGE_VXD_HEADER$e32_magic$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_magic$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_magic"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_magic$VH() { return _IMAGE_VXD_HEADER$e32_magic$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_border$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_border$LAYOUT() { return _IMAGE_VXD_HEADER$e32_border$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_border$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("e32_border"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_border$VH() { return _IMAGE_VXD_HEADER$e32_border$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_worder$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_worder$LAYOUT() { return _IMAGE_VXD_HEADER$e32_worder$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_worder$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("e32_worder"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_worder$VH() { return _IMAGE_VXD_HEADER$e32_worder$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_level$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_level$LAYOUT() { return _IMAGE_VXD_HEADER$e32_level$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_level$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_level"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_level$VH() { return _IMAGE_VXD_HEADER$e32_level$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_cpu$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_cpu$LAYOUT() { return _IMAGE_VXD_HEADER$e32_cpu$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_cpu$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_cpu"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_cpu$VH() { return _IMAGE_VXD_HEADER$e32_cpu$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_os$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_os$LAYOUT() { return _IMAGE_VXD_HEADER$e32_os$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_os$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_os"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_os$VH() { return _IMAGE_VXD_HEADER$e32_os$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ver$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ver$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ver$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ver$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_ver"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ver$VH() { return _IMAGE_VXD_HEADER$e32_ver$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_mflags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_mflags$LAYOUT() { return _IMAGE_VXD_HEADER$e32_mflags$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_mflags$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_mflags"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_mflags$VH() { return _IMAGE_VXD_HEADER$e32_mflags$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_mpages$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_mpages$LAYOUT() { return _IMAGE_VXD_HEADER$e32_mpages$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_mpages$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_mpages"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_mpages$VH() { return _IMAGE_VXD_HEADER$e32_mpages$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_startobj$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_startobj$LAYOUT() { return _IMAGE_VXD_HEADER$e32_startobj$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_startobj$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_startobj"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_startobj$VH() { return _IMAGE_VXD_HEADER$e32_startobj$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_eip$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_eip$LAYOUT() { return _IMAGE_VXD_HEADER$e32_eip$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_eip$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_eip"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_eip$VH() { return _IMAGE_VXD_HEADER$e32_eip$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_stackobj$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_stackobj$LAYOUT() { return _IMAGE_VXD_HEADER$e32_stackobj$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_stackobj$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_stackobj"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_stackobj$VH() { return _IMAGE_VXD_HEADER$e32_stackobj$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_esp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_esp$LAYOUT() { return _IMAGE_VXD_HEADER$e32_esp$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_esp$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_esp"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_esp$VH() { return _IMAGE_VXD_HEADER$e32_esp$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_pagesize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_pagesize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_pagesize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_pagesize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_pagesize"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_pagesize$VH() { return _IMAGE_VXD_HEADER$e32_pagesize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_lastpagesize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_lastpagesize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_lastpagesize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_lastpagesize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_lastpagesize"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_lastpagesize$VH() { return _IMAGE_VXD_HEADER$e32_lastpagesize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_fixupsize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_fixupsize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_fixupsize"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_fixupsize$VH() { return _IMAGE_VXD_HEADER$e32_fixupsize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsum$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_fixupsum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_fixupsum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_fixupsum"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_fixupsum$VH() { return _IMAGE_VXD_HEADER$e32_fixupsum$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ldrsize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ldrsize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_ldrsize"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ldrsize$VH() { return _IMAGE_VXD_HEADER$e32_ldrsize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsum$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ldrsum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ldrsum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_ldrsum"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ldrsum$VH() { return _IMAGE_VXD_HEADER$e32_ldrsum$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_objtab$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_objtab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_objtab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_objtab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_objtab"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_objtab$VH() { return _IMAGE_VXD_HEADER$e32_objtab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_objcnt$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_objcnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_objcnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_objcnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_objcnt"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_objcnt$VH() { return _IMAGE_VXD_HEADER$e32_objcnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_objmap$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_objmap$LAYOUT() { return _IMAGE_VXD_HEADER$e32_objmap$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_objmap$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_objmap"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_objmap$VH() { return _IMAGE_VXD_HEADER$e32_objmap$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_itermap$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_itermap$LAYOUT() { return _IMAGE_VXD_HEADER$e32_itermap$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_itermap$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_itermap"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_itermap$VH() { return _IMAGE_VXD_HEADER$e32_itermap$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_rsrctab$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_rsrctab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_rsrctab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_rsrctab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_rsrctab"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_rsrctab$VH() { return _IMAGE_VXD_HEADER$e32_rsrctab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_rsrccnt$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_rsrccnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_rsrccnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_rsrccnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_rsrccnt"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_rsrccnt$VH() { return _IMAGE_VXD_HEADER$e32_rsrccnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_restab$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_restab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_restab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_restab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_restab"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_restab$VH() { return _IMAGE_VXD_HEADER$e32_restab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_enttab$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_enttab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_enttab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_enttab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_enttab"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_enttab$VH() { return _IMAGE_VXD_HEADER$e32_enttab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_dirtab$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_dirtab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_dirtab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_dirtab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_dirtab"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_dirtab$VH() { return _IMAGE_VXD_HEADER$e32_dirtab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_dircnt$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_dircnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_dircnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_dircnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_dircnt"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_dircnt$VH() { return _IMAGE_VXD_HEADER$e32_dircnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_fpagetab$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_fpagetab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_fpagetab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_fpagetab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_fpagetab"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_fpagetab$VH() { return _IMAGE_VXD_HEADER$e32_fpagetab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_frectab$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_frectab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_frectab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_frectab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_frectab"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_frectab$VH() { return _IMAGE_VXD_HEADER$e32_frectab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_impmod$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_impmod$LAYOUT() { return _IMAGE_VXD_HEADER$e32_impmod$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_impmod$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_impmod"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_impmod$VH() { return _IMAGE_VXD_HEADER$e32_impmod$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_impmodcnt$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_impmodcnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_impmodcnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_impmodcnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_impmodcnt"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_impmodcnt$VH() { return _IMAGE_VXD_HEADER$e32_impmodcnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_impproc$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_impproc$LAYOUT() { return _IMAGE_VXD_HEADER$e32_impproc$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_impproc$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_impproc"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_impproc$VH() { return _IMAGE_VXD_HEADER$e32_impproc$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_pagesum$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_pagesum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_pagesum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_pagesum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_pagesum"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_pagesum$VH() { return _IMAGE_VXD_HEADER$e32_pagesum$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_datapage$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_datapage$LAYOUT() { return _IMAGE_VXD_HEADER$e32_datapage$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_datapage$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_datapage"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_datapage$VH() { return _IMAGE_VXD_HEADER$e32_datapage$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_preload$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_preload$LAYOUT() { return _IMAGE_VXD_HEADER$e32_preload$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_preload$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_preload"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_preload$VH() { return _IMAGE_VXD_HEADER$e32_preload$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_nrestab$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_nrestab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_nrestab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_nrestab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_nrestab"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_nrestab$VH() { return _IMAGE_VXD_HEADER$e32_nrestab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_cbnrestab$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_cbnrestab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_cbnrestab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_cbnrestab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_cbnrestab"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_cbnrestab$VH() { return _IMAGE_VXD_HEADER$e32_cbnrestab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_nressum$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_nressum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_nressum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_nressum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_nressum"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_nressum$VH() { return _IMAGE_VXD_HEADER$e32_nressum$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_autodata$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_autodata$LAYOUT() { return _IMAGE_VXD_HEADER$e32_autodata$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_autodata$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_autodata"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_autodata$VH() { return _IMAGE_VXD_HEADER$e32_autodata$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_debuginfo$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_debuginfo$LAYOUT() { return _IMAGE_VXD_HEADER$e32_debuginfo$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_debuginfo$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_debuginfo"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_debuginfo$VH() { return _IMAGE_VXD_HEADER$e32_debuginfo$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_debuglen$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_debuglen$LAYOUT() { return _IMAGE_VXD_HEADER$e32_debuglen$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_debuglen$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_debuglen"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_debuglen$VH() { return _IMAGE_VXD_HEADER$e32_debuglen$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_instpreload$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_instpreload$LAYOUT() { return _IMAGE_VXD_HEADER$e32_instpreload$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_instpreload$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_instpreload"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_instpreload$VH() { return _IMAGE_VXD_HEADER$e32_instpreload$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_instdemand$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_instdemand$LAYOUT() { return _IMAGE_VXD_HEADER$e32_instdemand$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_instdemand$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_instdemand"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_instdemand$VH() { return _IMAGE_VXD_HEADER$e32_instdemand$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_heapsize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_heapsize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_heapsize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_heapsize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_heapsize"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_heapsize$VH() { return _IMAGE_VXD_HEADER$e32_heapsize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_winresoff$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_winresoff$LAYOUT() { return _IMAGE_VXD_HEADER$e32_winresoff$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_winresoff$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_winresoff"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_winresoff$VH() { return _IMAGE_VXD_HEADER$e32_winresoff$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_winreslen$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_winreslen$LAYOUT() { return _IMAGE_VXD_HEADER$e32_winreslen$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_winreslen$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_winreslen"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_winreslen$VH() { return _IMAGE_VXD_HEADER$e32_winreslen$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_devid$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_devid$LAYOUT() { return _IMAGE_VXD_HEADER$e32_devid$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_devid$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_devid"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_devid$VH() { return _IMAGE_VXD_HEADER$e32_devid$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ddkver$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ddkver$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ddkver$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ddkver$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_ddkver"));
    public static java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ddkver$VH() { return _IMAGE_VXD_HEADER$e32_ddkver$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Machine"),
        C_SHORT.withName("NumberOfSections"),
        C_INT.withName("TimeDateStamp"),
        C_INT.withName("PointerToSymbolTable"),
        C_INT.withName("NumberOfSymbols"),
        C_SHORT.withName("SizeOfOptionalHeader"),
        C_SHORT.withName("Characteristics")
    ).withName("_IMAGE_FILE_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$struct$LAYOUT() { return _IMAGE_FILE_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$Machine$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$Machine$LAYOUT() { return _IMAGE_FILE_HEADER$Machine$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$Machine$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    public static java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$Machine$VH() { return _IMAGE_FILE_HEADER$Machine$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$NumberOfSections$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$NumberOfSections$LAYOUT() { return _IMAGE_FILE_HEADER$NumberOfSections$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$NumberOfSections$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfSections"));
    public static java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$NumberOfSections$VH() { return _IMAGE_FILE_HEADER$NumberOfSections$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$TimeDateStamp$LAYOUT() { return _IMAGE_FILE_HEADER$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$TimeDateStamp$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$TimeDateStamp$VH() { return _IMAGE_FILE_HEADER$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$PointerToSymbolTable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$PointerToSymbolTable$LAYOUT() { return _IMAGE_FILE_HEADER$PointerToSymbolTable$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$PointerToSymbolTable$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToSymbolTable"));
    public static java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$PointerToSymbolTable$VH() { return _IMAGE_FILE_HEADER$PointerToSymbolTable$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$NumberOfSymbols$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$NumberOfSymbols$LAYOUT() { return _IMAGE_FILE_HEADER$NumberOfSymbols$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$NumberOfSymbols$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfSymbols"));
    public static java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$NumberOfSymbols$VH() { return _IMAGE_FILE_HEADER$NumberOfSymbols$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$SizeOfOptionalHeader$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$SizeOfOptionalHeader$LAYOUT() { return _IMAGE_FILE_HEADER$SizeOfOptionalHeader$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SizeOfOptionalHeader"));
    public static java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH() { return _IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$Characteristics$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$Characteristics$LAYOUT() { return _IMAGE_FILE_HEADER$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$Characteristics$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    public static java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$Characteristics$VH() { return _IMAGE_FILE_HEADER$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_DATA_DIRECTORY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("VirtualAddress"),
        C_INT.withName("Size")
    ).withName("_IMAGE_DATA_DIRECTORY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DATA_DIRECTORY$struct$LAYOUT() { return _IMAGE_DATA_DIRECTORY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DATA_DIRECTORY$VirtualAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DATA_DIRECTORY$VirtualAddress$LAYOUT() { return _IMAGE_DATA_DIRECTORY$VirtualAddress$LAYOUT_; }

    static final VarHandle _IMAGE_DATA_DIRECTORY$VirtualAddress$VH_ = _IMAGE_DATA_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_DATA_DIRECTORY$VirtualAddress$VH() { return _IMAGE_DATA_DIRECTORY$VirtualAddress$VH_; }

    static final MemoryLayout _IMAGE_DATA_DIRECTORY$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DATA_DIRECTORY$Size$LAYOUT() { return _IMAGE_DATA_DIRECTORY$Size$LAYOUT_; }

    static final VarHandle _IMAGE_DATA_DIRECTORY$Size$VH_ = _IMAGE_DATA_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _IMAGE_DATA_DIRECTORY$Size$VH() { return _IMAGE_DATA_DIRECTORY$Size$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Magic"),
        C_BOOL.withName("MajorLinkerVersion"),
        C_BOOL.withName("MinorLinkerVersion"),
        C_INT.withName("SizeOfCode"),
        C_INT.withName("SizeOfInitializedData"),
        C_INT.withName("SizeOfUninitializedData"),
        C_INT.withName("AddressOfEntryPoint"),
        C_INT.withName("BaseOfCode"),
        C_INT.withName("BaseOfData"),
        C_INT.withName("ImageBase"),
        C_INT.withName("SectionAlignment"),
        C_INT.withName("FileAlignment"),
        C_SHORT.withName("MajorOperatingSystemVersion"),
        C_SHORT.withName("MinorOperatingSystemVersion"),
        C_SHORT.withName("MajorImageVersion"),
        C_SHORT.withName("MinorImageVersion"),
        C_SHORT.withName("MajorSubsystemVersion"),
        C_SHORT.withName("MinorSubsystemVersion"),
        C_INT.withName("Win32VersionValue"),
        C_INT.withName("SizeOfImage"),
        C_INT.withName("SizeOfHeaders"),
        C_INT.withName("CheckSum"),
        C_SHORT.withName("Subsystem"),
        C_SHORT.withName("DllCharacteristics"),
        C_INT.withName("SizeOfStackReserve"),
        C_INT.withName("SizeOfStackCommit"),
        C_INT.withName("SizeOfHeapReserve"),
        C_INT.withName("SizeOfHeapCommit"),
        C_INT.withName("LoaderFlags"),
        C_INT.withName("NumberOfRvaAndSizes"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_INT.withName("VirtualAddress"),
            C_INT.withName("Size")
        ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
    ).withName("_IMAGE_OPTIONAL_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$struct$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$Magic$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$Magic$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$Magic$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$Magic$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Magic"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$Magic$VH() { return _IMAGE_OPTIONAL_HEADER$Magic$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MajorLinkerVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinorLinkerVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfCode$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfCode"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfCode$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfInitializedData"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfUninitializedData"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfEntryPoint"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH() { return _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$BaseOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfCode$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfCode"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfCode$VH() { return _IMAGE_OPTIONAL_HEADER$BaseOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$BaseOfData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfData$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfData"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfData$VH() { return _IMAGE_OPTIONAL_HEADER$BaseOfData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$ImageBase$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$ImageBase$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$ImageBase$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$ImageBase$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$ImageBase$VH() { return _IMAGE_OPTIONAL_HEADER$ImageBase$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SectionAlignment$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SectionAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SectionAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SectionAlignment$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectionAlignment"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SectionAlignment$VH() { return _IMAGE_OPTIONAL_HEADER$SectionAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$FileAlignment$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$FileAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$FileAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$FileAlignment$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAlignment"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$FileAlignment$VH() { return _IMAGE_OPTIONAL_HEADER$FileAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorOperatingSystemVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorOperatingSystemVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorImageVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorImageVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorImageVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorImageVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorSubsystemVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorSubsystemVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$Win32VersionValue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$Win32VersionValue$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$Win32VersionValue$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Win32VersionValue"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH() { return _IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfImage$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfImage$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfImage$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfImage$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfImage"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfImage$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfImage$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeaders"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$CheckSum$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$CheckSum$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$CheckSum$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$CheckSum$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$CheckSum$VH() { return _IMAGE_OPTIONAL_HEADER$CheckSum$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$Subsystem$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$Subsystem$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$Subsystem$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$Subsystem$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Subsystem"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$Subsystem$VH() { return _IMAGE_OPTIONAL_HEADER$Subsystem$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$DllCharacteristics$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$DllCharacteristics$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$DllCharacteristics$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DllCharacteristics"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH() { return _IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfStackReserve"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfStackCommit"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeapReserve"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeapCommit"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$LoaderFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$LoaderFlags$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$LoaderFlags$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$LoaderFlags$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LoaderFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$LoaderFlags$VH() { return _IMAGE_OPTIONAL_HEADER$LoaderFlags$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfRvaAndSizes"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH() { return _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Magic"),
        C_BOOL.withName("MajorLinkerVersion"),
        C_BOOL.withName("MinorLinkerVersion"),
        C_INT.withName("SizeOfCode"),
        C_INT.withName("SizeOfInitializedData"),
        C_INT.withName("SizeOfUninitializedData"),
        C_INT.withName("AddressOfEntryPoint"),
        C_INT.withName("BaseOfCode"),
        C_INT.withName("BaseOfData"),
        C_INT.withName("BaseOfBss"),
        C_INT.withName("GprMask"),
        MemoryLayout.ofSequence(4, C_INT).withName("CprMask"),
        C_INT.withName("GpValue")
    ).withName("_IMAGE_ROM_OPTIONAL_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$Magic$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$Magic$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$Magic$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$Magic$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Magic"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$Magic$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$Magic$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MajorLinkerVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinorLinkerVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfCode"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfInitializedData"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfUninitializedData"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfEntryPoint"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfCode"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfData"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfBss"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GprMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GprMask$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$GprMask$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GprMask"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GpValue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GpValue$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$GpValue$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GpValue"));
    public static java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Magic"),
        C_BOOL.withName("MajorLinkerVersion"),
        C_BOOL.withName("MinorLinkerVersion"),
        C_INT.withName("SizeOfCode"),
        C_INT.withName("SizeOfInitializedData"),
        C_INT.withName("SizeOfUninitializedData"),
        C_INT.withName("AddressOfEntryPoint"),
        C_INT.withName("BaseOfCode"),
        C_LONGLONG.withName("ImageBase"),
        C_INT.withName("SectionAlignment"),
        C_INT.withName("FileAlignment"),
        C_SHORT.withName("MajorOperatingSystemVersion"),
        C_SHORT.withName("MinorOperatingSystemVersion"),
        C_SHORT.withName("MajorImageVersion"),
        C_SHORT.withName("MinorImageVersion"),
        C_SHORT.withName("MajorSubsystemVersion"),
        C_SHORT.withName("MinorSubsystemVersion"),
        C_INT.withName("Win32VersionValue"),
        C_INT.withName("SizeOfImage"),
        C_INT.withName("SizeOfHeaders"),
        C_INT.withName("CheckSum"),
        C_SHORT.withName("Subsystem"),
        C_SHORT.withName("DllCharacteristics"),
        C_LONGLONG.withName("SizeOfStackReserve"),
        C_LONGLONG.withName("SizeOfStackCommit"),
        C_LONGLONG.withName("SizeOfHeapReserve"),
        C_LONGLONG.withName("SizeOfHeapCommit"),
        C_INT.withName("LoaderFlags"),
        C_INT.withName("NumberOfRvaAndSizes"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_INT.withName("VirtualAddress"),
            C_INT.withName("Size")
        ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
    ).withName("_IMAGE_OPTIONAL_HEADER64");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$Magic$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$Magic$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$Magic$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$Magic$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Magic"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$Magic$VH() { return _IMAGE_OPTIONAL_HEADER64$Magic$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MajorLinkerVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinorLinkerVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfCode"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfInitializedData"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfUninitializedData"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfEntryPoint"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH() { return _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$BaseOfCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$BaseOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$BaseOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfCode"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH() { return _IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$ImageBase$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$ImageBase$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$ImageBase$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$ImageBase$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$ImageBase$VH() { return _IMAGE_OPTIONAL_HEADER64$ImageBase$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SectionAlignment$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SectionAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SectionAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectionAlignment"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH() { return _IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$FileAlignment$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$FileAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$FileAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$FileAlignment$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAlignment"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$FileAlignment$VH() { return _IMAGE_OPTIONAL_HEADER64$FileAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorOperatingSystemVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorOperatingSystemVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorImageVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorImageVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorSubsystemVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorSubsystemVersion"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Win32VersionValue"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH() { return _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfImage$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfImage$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfImage$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfImage"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeaders"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$CheckSum$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$CheckSum$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$CheckSum$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$CheckSum$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$CheckSum$VH() { return _IMAGE_OPTIONAL_HEADER64$CheckSum$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$Subsystem$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$Subsystem$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$Subsystem$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$Subsystem$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Subsystem"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$Subsystem$VH() { return _IMAGE_OPTIONAL_HEADER64$Subsystem$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DllCharacteristics"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH() { return _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfStackReserve"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfStackCommit"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfHeapReserve"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfHeapCommit"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$LoaderFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$LoaderFlags$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$LoaderFlags$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LoaderFlags"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH() { return _IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfRvaAndSizes"));
    public static java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH() { return _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH_; }

    static final MemoryLayout _IMAGE_NT_HEADERS64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Signature"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Machine"),
            C_SHORT.withName("NumberOfSections"),
            C_INT.withName("TimeDateStamp"),
            C_INT.withName("PointerToSymbolTable"),
            C_INT.withName("NumberOfSymbols"),
            C_SHORT.withName("SizeOfOptionalHeader"),
            C_SHORT.withName("Characteristics")
        ).withName("FileHeader"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Magic"),
            C_BOOL.withName("MajorLinkerVersion"),
            C_BOOL.withName("MinorLinkerVersion"),
            C_INT.withName("SizeOfCode"),
            C_INT.withName("SizeOfInitializedData"),
            C_INT.withName("SizeOfUninitializedData"),
            C_INT.withName("AddressOfEntryPoint"),
            C_INT.withName("BaseOfCode"),
            C_LONGLONG.withName("ImageBase"),
            C_INT.withName("SectionAlignment"),
            C_INT.withName("FileAlignment"),
            C_SHORT.withName("MajorOperatingSystemVersion"),
            C_SHORT.withName("MinorOperatingSystemVersion"),
            C_SHORT.withName("MajorImageVersion"),
            C_SHORT.withName("MinorImageVersion"),
            C_SHORT.withName("MajorSubsystemVersion"),
            C_SHORT.withName("MinorSubsystemVersion"),
            C_INT.withName("Win32VersionValue"),
            C_INT.withName("SizeOfImage"),
            C_INT.withName("SizeOfHeaders"),
            C_INT.withName("CheckSum"),
            C_SHORT.withName("Subsystem"),
            C_SHORT.withName("DllCharacteristics"),
            C_LONGLONG.withName("SizeOfStackReserve"),
            C_LONGLONG.withName("SizeOfStackCommit"),
            C_LONGLONG.withName("SizeOfHeapReserve"),
            C_LONGLONG.withName("SizeOfHeapCommit"),
            C_INT.withName("LoaderFlags"),
            C_INT.withName("NumberOfRvaAndSizes"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_INT.withName("VirtualAddress"),
                C_INT.withName("Size")
            ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
        ).withName("OptionalHeader")
    ).withName("_IMAGE_NT_HEADERS64");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_NT_HEADERS64$struct$LAYOUT() { return _IMAGE_NT_HEADERS64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_NT_HEADERS64$Signature$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_NT_HEADERS64$Signature$LAYOUT() { return _IMAGE_NT_HEADERS64$Signature$LAYOUT_; }

    static final VarHandle _IMAGE_NT_HEADERS64$Signature$VH_ = _IMAGE_NT_HEADERS64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Signature"));
    public static java.lang.invoke.VarHandle _IMAGE_NT_HEADERS64$Signature$VH() { return _IMAGE_NT_HEADERS64$Signature$VH_; }

    static final MemoryLayout _IMAGE_NT_HEADERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Signature"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Machine"),
            C_SHORT.withName("NumberOfSections"),
            C_INT.withName("TimeDateStamp"),
            C_INT.withName("PointerToSymbolTable"),
            C_INT.withName("NumberOfSymbols"),
            C_SHORT.withName("SizeOfOptionalHeader"),
            C_SHORT.withName("Characteristics")
        ).withName("FileHeader"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Magic"),
            C_BOOL.withName("MajorLinkerVersion"),
            C_BOOL.withName("MinorLinkerVersion"),
            C_INT.withName("SizeOfCode"),
            C_INT.withName("SizeOfInitializedData"),
            C_INT.withName("SizeOfUninitializedData"),
            C_INT.withName("AddressOfEntryPoint"),
            C_INT.withName("BaseOfCode"),
            C_INT.withName("BaseOfData"),
            C_INT.withName("ImageBase"),
            C_INT.withName("SectionAlignment"),
            C_INT.withName("FileAlignment"),
            C_SHORT.withName("MajorOperatingSystemVersion"),
            C_SHORT.withName("MinorOperatingSystemVersion"),
            C_SHORT.withName("MajorImageVersion"),
            C_SHORT.withName("MinorImageVersion"),
            C_SHORT.withName("MajorSubsystemVersion"),
            C_SHORT.withName("MinorSubsystemVersion"),
            C_INT.withName("Win32VersionValue"),
            C_INT.withName("SizeOfImage"),
            C_INT.withName("SizeOfHeaders"),
            C_INT.withName("CheckSum"),
            C_SHORT.withName("Subsystem"),
            C_SHORT.withName("DllCharacteristics"),
            C_INT.withName("SizeOfStackReserve"),
            C_INT.withName("SizeOfStackCommit"),
            C_INT.withName("SizeOfHeapReserve"),
            C_INT.withName("SizeOfHeapCommit"),
            C_INT.withName("LoaderFlags"),
            C_INT.withName("NumberOfRvaAndSizes"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_INT.withName("VirtualAddress"),
                C_INT.withName("Size")
            ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
        ).withName("OptionalHeader")
    ).withName("_IMAGE_NT_HEADERS");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_NT_HEADERS$struct$LAYOUT() { return _IMAGE_NT_HEADERS$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_NT_HEADERS$Signature$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_NT_HEADERS$Signature$LAYOUT() { return _IMAGE_NT_HEADERS$Signature$LAYOUT_; }

    static final VarHandle _IMAGE_NT_HEADERS$Signature$VH_ = _IMAGE_NT_HEADERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Signature"));
    public static java.lang.invoke.VarHandle _IMAGE_NT_HEADERS$Signature$VH() { return _IMAGE_NT_HEADERS$Signature$VH_; }

    static final MemoryLayout _IMAGE_ROM_HEADERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("Machine"),
            C_SHORT.withName("NumberOfSections"),
            C_INT.withName("TimeDateStamp"),
            C_INT.withName("PointerToSymbolTable"),
            C_INT.withName("NumberOfSymbols"),
            C_SHORT.withName("SizeOfOptionalHeader"),
            C_SHORT.withName("Characteristics")
        ).withName("FileHeader"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Magic"),
            C_BOOL.withName("MajorLinkerVersion"),
            C_BOOL.withName("MinorLinkerVersion"),
            C_INT.withName("SizeOfCode"),
            C_INT.withName("SizeOfInitializedData"),
            C_INT.withName("SizeOfUninitializedData"),
            C_INT.withName("AddressOfEntryPoint"),
            C_INT.withName("BaseOfCode"),
            C_INT.withName("BaseOfData"),
            C_INT.withName("BaseOfBss"),
            C_INT.withName("GprMask"),
            MemoryLayout.ofSequence(4, C_INT).withName("CprMask"),
            C_INT.withName("GpValue")
        ).withName("OptionalHeader")
    ).withName("_IMAGE_ROM_HEADERS");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_HEADERS$struct$LAYOUT() { return _IMAGE_ROM_HEADERS$struct$LAYOUT_; }

    static final MemoryLayout ANON_OBJECT_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Sig1"),
        C_SHORT.withName("Sig2"),
        C_SHORT.withName("Version"),
        C_SHORT.withName("Machine"),
        C_INT.withName("TimeDateStamp"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ClassID"),
        C_INT.withName("SizeOfData")
    ).withName("ANON_OBJECT_HEADER");
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$struct$LAYOUT() { return ANON_OBJECT_HEADER$struct$LAYOUT_; }

    static final MemoryLayout ANON_OBJECT_HEADER$Sig1$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$Sig1$LAYOUT() { return ANON_OBJECT_HEADER$Sig1$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$Sig1$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig1"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER$Sig1$VH() { return ANON_OBJECT_HEADER$Sig1$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER$Sig2$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$Sig2$LAYOUT() { return ANON_OBJECT_HEADER$Sig2$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$Sig2$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig2"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER$Sig2$VH() { return ANON_OBJECT_HEADER$Sig2$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER$Version$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$Version$LAYOUT() { return ANON_OBJECT_HEADER$Version$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$Version$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER$Version$VH() { return ANON_OBJECT_HEADER$Version$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER$Machine$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$Machine$LAYOUT() { return ANON_OBJECT_HEADER$Machine$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$Machine$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER$Machine$VH() { return ANON_OBJECT_HEADER$Machine$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$TimeDateStamp$LAYOUT() { return ANON_OBJECT_HEADER$TimeDateStamp$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$TimeDateStamp$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER$TimeDateStamp$VH() { return ANON_OBJECT_HEADER$TimeDateStamp$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER$SizeOfData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$SizeOfData$LAYOUT() { return ANON_OBJECT_HEADER$SizeOfData$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$SizeOfData$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfData"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER$SizeOfData$VH() { return ANON_OBJECT_HEADER$SizeOfData$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Sig1"),
        C_SHORT.withName("Sig2"),
        C_SHORT.withName("Version"),
        C_SHORT.withName("Machine"),
        C_INT.withName("TimeDateStamp"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ClassID"),
        C_INT.withName("SizeOfData"),
        C_INT.withName("Flags"),
        C_INT.withName("MetaDataSize"),
        C_INT.withName("MetaDataOffset")
    ).withName("ANON_OBJECT_HEADER_V2");
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$struct$LAYOUT() { return ANON_OBJECT_HEADER_V2$struct$LAYOUT_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$Sig1$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$Sig1$LAYOUT() { return ANON_OBJECT_HEADER_V2$Sig1$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$Sig1$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig1"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$Sig1$VH() { return ANON_OBJECT_HEADER_V2$Sig1$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$Sig2$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$Sig2$LAYOUT() { return ANON_OBJECT_HEADER_V2$Sig2$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$Sig2$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig2"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$Sig2$VH() { return ANON_OBJECT_HEADER_V2$Sig2$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$Version$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$Version$LAYOUT() { return ANON_OBJECT_HEADER_V2$Version$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$Version$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$Version$VH() { return ANON_OBJECT_HEADER_V2$Version$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$Machine$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$Machine$LAYOUT() { return ANON_OBJECT_HEADER_V2$Machine$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$Machine$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$Machine$VH() { return ANON_OBJECT_HEADER_V2$Machine$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$TimeDateStamp$LAYOUT() { return ANON_OBJECT_HEADER_V2$TimeDateStamp$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$TimeDateStamp$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$TimeDateStamp$VH() { return ANON_OBJECT_HEADER_V2$TimeDateStamp$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$SizeOfData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$SizeOfData$LAYOUT() { return ANON_OBJECT_HEADER_V2$SizeOfData$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$SizeOfData$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfData"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$SizeOfData$VH() { return ANON_OBJECT_HEADER_V2$SizeOfData$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$Flags$LAYOUT() { return ANON_OBJECT_HEADER_V2$Flags$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$Flags$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$Flags$VH() { return ANON_OBJECT_HEADER_V2$Flags$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$MetaDataSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$MetaDataSize$LAYOUT() { return ANON_OBJECT_HEADER_V2$MetaDataSize$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$MetaDataSize$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataSize"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$MetaDataSize$VH() { return ANON_OBJECT_HEADER_V2$MetaDataSize$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$MetaDataOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$MetaDataOffset$LAYOUT() { return ANON_OBJECT_HEADER_V2$MetaDataOffset$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$MetaDataOffset$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataOffset"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$MetaDataOffset$VH() { return ANON_OBJECT_HEADER_V2$MetaDataOffset$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Sig1"),
        C_SHORT.withName("Sig2"),
        C_SHORT.withName("Version"),
        C_SHORT.withName("Machine"),
        C_INT.withName("TimeDateStamp"),
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("ClassID"),
        C_INT.withName("SizeOfData"),
        C_INT.withName("Flags"),
        C_INT.withName("MetaDataSize"),
        C_INT.withName("MetaDataOffset"),
        C_INT.withName("NumberOfSections"),
        C_INT.withName("PointerToSymbolTable"),
        C_INT.withName("NumberOfSymbols")
    ).withName("ANON_OBJECT_HEADER_BIGOBJ");
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Sig1$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Sig1$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$Sig1$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$Sig1$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig1"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$Sig1$VH() { return ANON_OBJECT_HEADER_BIGOBJ$Sig1$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Sig2$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Sig2$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$Sig2$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$Sig2$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig2"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$Sig2$VH() { return ANON_OBJECT_HEADER_BIGOBJ$Sig2$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Version$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Version$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$Version$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$Version$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$Version$VH() { return ANON_OBJECT_HEADER_BIGOBJ$Version$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Machine$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Machine$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$Machine$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$Machine$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$Machine$VH() { return ANON_OBJECT_HEADER_BIGOBJ$Machine$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$VH() { return ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfData"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$VH() { return ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Flags$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$Flags$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$Flags$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$Flags$VH() { return ANON_OBJECT_HEADER_BIGOBJ$Flags$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataSize"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$VH() { return ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataOffset"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$VH() { return ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfSections"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$VH() { return ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToSymbolTable"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$VH() { return ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfSymbols"));
    public static java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$VH() { return ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(8, C_BOOL).withName("Name"),
        MemoryLayout.ofUnion(
            C_INT.withName("PhysicalAddress"),
            C_INT.withName("VirtualSize")
        ).withName("Misc"),
        C_INT.withName("VirtualAddress"),
        C_INT.withName("SizeOfRawData"),
        C_INT.withName("PointerToRawData"),
        C_INT.withName("PointerToRelocations"),
        C_INT.withName("PointerToLinenumbers"),
        C_SHORT.withName("NumberOfRelocations"),
        C_SHORT.withName("NumberOfLinenumbers"),
        C_INT.withName("Characteristics")
    ).withName("_IMAGE_SECTION_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$struct$LAYOUT() { return _IMAGE_SECTION_HEADER$struct$LAYOUT_; }

    static final MemoryLayout Misc$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_INT.withName("PhysicalAddress"),
        C_INT.withName("VirtualSize")
    );
    public static jdk.incubator.foreign.MemoryLayout Misc$struct$LAYOUT() { return Misc$struct$LAYOUT_; }

    static final MemoryLayout Misc$PhysicalAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Misc$PhysicalAddress$LAYOUT() { return Misc$PhysicalAddress$LAYOUT_; }

    static final VarHandle Misc$PhysicalAddress$VH_ = Misc$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PhysicalAddress"));
    public static java.lang.invoke.VarHandle Misc$PhysicalAddress$VH() { return Misc$PhysicalAddress$VH_; }

    static final MemoryLayout Misc$VirtualSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout Misc$VirtualSize$LAYOUT() { return Misc$VirtualSize$LAYOUT_; }

    static final VarHandle Misc$VirtualSize$VH_ = Misc$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualSize"));
    public static java.lang.invoke.VarHandle Misc$VirtualSize$VH() { return Misc$VirtualSize$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$VirtualAddress$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$VirtualAddress$LAYOUT() { return _IMAGE_SECTION_HEADER$VirtualAddress$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$VirtualAddress$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualAddress"));
    public static java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$VirtualAddress$VH() { return _IMAGE_SECTION_HEADER$VirtualAddress$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$SizeOfRawData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$SizeOfRawData$LAYOUT() { return _IMAGE_SECTION_HEADER$SizeOfRawData$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$SizeOfRawData$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfRawData"));
    public static java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$SizeOfRawData$VH() { return _IMAGE_SECTION_HEADER$SizeOfRawData$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$PointerToRawData$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$PointerToRawData$LAYOUT() { return _IMAGE_SECTION_HEADER$PointerToRawData$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$PointerToRawData$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToRawData"));
    public static java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$PointerToRawData$VH() { return _IMAGE_SECTION_HEADER$PointerToRawData$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$PointerToRelocations$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$PointerToRelocations$LAYOUT() { return _IMAGE_SECTION_HEADER$PointerToRelocations$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$PointerToRelocations$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToRelocations"));
    public static java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$PointerToRelocations$VH() { return _IMAGE_SECTION_HEADER$PointerToRelocations$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$PointerToLinenumbers$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$PointerToLinenumbers$LAYOUT() { return _IMAGE_SECTION_HEADER$PointerToLinenumbers$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$PointerToLinenumbers$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToLinenumbers"));
    public static java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$PointerToLinenumbers$VH() { return _IMAGE_SECTION_HEADER$PointerToLinenumbers$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$NumberOfRelocations$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$NumberOfRelocations$LAYOUT() { return _IMAGE_SECTION_HEADER$NumberOfRelocations$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$NumberOfRelocations$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfRelocations"));
    public static java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$NumberOfRelocations$VH() { return _IMAGE_SECTION_HEADER$NumberOfRelocations$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$NumberOfLinenumbers$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$NumberOfLinenumbers$LAYOUT() { return _IMAGE_SECTION_HEADER$NumberOfLinenumbers$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$NumberOfLinenumbers$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfLinenumbers"));
    public static java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$NumberOfLinenumbers$VH() { return _IMAGE_SECTION_HEADER$NumberOfLinenumbers$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$Characteristics$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$Characteristics$LAYOUT() { return _IMAGE_SECTION_HEADER$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$Characteristics$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    public static java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$Characteristics$VH() { return _IMAGE_SECTION_HEADER$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            MemoryLayout.ofSequence(8, C_BOOL).withName("ShortName"),
            MemoryLayout.ofStruct(
                C_INT.withName("Short"),
                C_INT.withName("Long")
            ).withName("Name"),
            MemoryLayout.ofSequence(2, C_INT).withName("LongName")
        ).withName("N"),
        C_INT.withName("Value"),
        C_SHORT.withName("SectionNumber"),
        C_SHORT.withName("Type"),
        C_BOOL.withName("StorageClass"),
        C_BOOL.withName("NumberOfAuxSymbols")
    ).withName("_IMAGE_SYMBOL");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$struct$LAYOUT() { return _IMAGE_SYMBOL$struct$LAYOUT_; }

}

