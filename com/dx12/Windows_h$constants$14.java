// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$14 extends Windows_h$constants$13 {
    Windows_h$constants$14() {}
    static final MemoryLayout PPM_WMI_PERF_STATES$PolicyType$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$PolicyType$LAYOUT() { return PPM_WMI_PERF_STATES$PolicyType$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$PolicyType$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PolicyType"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$PolicyType$VH() { return PPM_WMI_PERF_STATES$PolicyType$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$Type$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$Type$LAYOUT() { return PPM_WMI_PERF_STATES$Type$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$Type$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$Type$VH() { return PPM_WMI_PERF_STATES$Type$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$Reserved$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$Reserved$LAYOUT() { return PPM_WMI_PERF_STATES$Reserved$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$Reserved$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$Reserved$VH() { return PPM_WMI_PERF_STATES$Reserved$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$TimerInterval$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$TimerInterval$LAYOUT() { return PPM_WMI_PERF_STATES$TimerInterval$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$TimerInterval$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimerInterval"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$TimerInterval$VH() { return PPM_WMI_PERF_STATES$TimerInterval$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$TargetProcessors$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$TargetProcessors$LAYOUT() { return PPM_WMI_PERF_STATES$TargetProcessors$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$TargetProcessors$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TargetProcessors"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$TargetProcessors$VH() { return PPM_WMI_PERF_STATES$TargetProcessors$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$PStateHandler$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$PStateHandler$LAYOUT() { return PPM_WMI_PERF_STATES$PStateHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$PStateHandler$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PStateHandler"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$PStateHandler$VH() { return PPM_WMI_PERF_STATES$PStateHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$PStateContext$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$PStateContext$LAYOUT() { return PPM_WMI_PERF_STATES$PStateContext$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$PStateContext$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PStateContext"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$PStateContext$VH() { return PPM_WMI_PERF_STATES$PStateContext$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$TStateHandler$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$TStateHandler$LAYOUT() { return PPM_WMI_PERF_STATES$TStateHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$TStateHandler$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TStateHandler"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$TStateHandler$VH() { return PPM_WMI_PERF_STATES$TStateHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$TStateContext$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$TStateContext$LAYOUT() { return PPM_WMI_PERF_STATES$TStateContext$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$TStateContext$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TStateContext"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$TStateContext$VH() { return PPM_WMI_PERF_STATES$TStateContext$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$FeedbackHandler$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$FeedbackHandler$LAYOUT() { return PPM_WMI_PERF_STATES$FeedbackHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$FeedbackHandler$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FeedbackHandler"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$FeedbackHandler$VH() { return PPM_WMI_PERF_STATES$FeedbackHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$Reserved1$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$Reserved1$LAYOUT() { return PPM_WMI_PERF_STATES$Reserved1$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$Reserved1$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$Reserved1$VH() { return PPM_WMI_PERF_STATES$Reserved1$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$Reserved2$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$Reserved2$LAYOUT() { return PPM_WMI_PERF_STATES$Reserved2$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$Reserved2$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$Reserved2$VH() { return PPM_WMI_PERF_STATES$Reserved2$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Count"),
        C_INT.withName("MaxFrequency"),
        C_INT.withName("CurrentState"),
        C_INT.withName("MaxPerfState"),
        C_INT.withName("MinPerfState"),
        C_INT.withName("LowestPerfState"),
        C_INT.withName("ThermalConstraint"),
        C_BOOL.withName("BusyAdjThreshold"),
        C_BOOL.withName("PolicyType"),
        C_BOOL.withName("Type"),
        C_BOOL.withName("Reserved"),
        C_INT.withName("TimerInterval"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("TargetProcessors"),
        C_INT.withName("PStateHandler"),
        C_INT.withName("PStateContext"),
        C_INT.withName("TStateHandler"),
        C_INT.withName("TStateContext"),
        C_INT.withName("FeedbackHandler"),
        C_INT.withName("Reserved1"),
        C_LONGLONG.withName("Reserved2"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_INT.withName("Frequency"),
            C_INT.withName("Power"),
            C_BOOL.withName("PercentFrequency"),
            C_BOOL.withName("IncreaseLevel"),
            C_BOOL.withName("DecreaseLevel"),
            C_BOOL.withName("Type"),
            C_INT.withName("IncreaseTime"),
            C_INT.withName("DecreaseTime"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("Control"),
            C_LONGLONG.withName("Status"),
            C_INT.withName("HitCount"),
            C_INT.withName("Reserved1"),
            C_LONGLONG.withName("Reserved2"),
            C_LONGLONG.withName("Reserved3")
        )).withName("State")
    );
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$struct$LAYOUT() { return PPM_WMI_PERF_STATES_EX$struct$LAYOUT_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$Count$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$Count$LAYOUT() { return PPM_WMI_PERF_STATES_EX$Count$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$Count$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$Count$VH() { return PPM_WMI_PERF_STATES_EX$Count$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$MaxFrequency$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$MaxFrequency$LAYOUT() { return PPM_WMI_PERF_STATES_EX$MaxFrequency$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$MaxFrequency$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxFrequency"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$MaxFrequency$VH() { return PPM_WMI_PERF_STATES_EX$MaxFrequency$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$CurrentState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$CurrentState$LAYOUT() { return PPM_WMI_PERF_STATES_EX$CurrentState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$CurrentState$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CurrentState"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$CurrentState$VH() { return PPM_WMI_PERF_STATES_EX$CurrentState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$MaxPerfState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$MaxPerfState$LAYOUT() { return PPM_WMI_PERF_STATES_EX$MaxPerfState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$MaxPerfState$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxPerfState"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$MaxPerfState$VH() { return PPM_WMI_PERF_STATES_EX$MaxPerfState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$MinPerfState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$MinPerfState$LAYOUT() { return PPM_WMI_PERF_STATES_EX$MinPerfState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$MinPerfState$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinPerfState"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$MinPerfState$VH() { return PPM_WMI_PERF_STATES_EX$MinPerfState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$LowestPerfState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$LowestPerfState$LAYOUT() { return PPM_WMI_PERF_STATES_EX$LowestPerfState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$LowestPerfState$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowestPerfState"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$LowestPerfState$VH() { return PPM_WMI_PERF_STATES_EX$LowestPerfState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$ThermalConstraint$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$ThermalConstraint$LAYOUT() { return PPM_WMI_PERF_STATES_EX$ThermalConstraint$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$ThermalConstraint$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ThermalConstraint"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$ThermalConstraint$VH() { return PPM_WMI_PERF_STATES_EX$ThermalConstraint$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$LAYOUT() { return PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BusyAdjThreshold"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$VH() { return PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$PolicyType$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$PolicyType$LAYOUT() { return PPM_WMI_PERF_STATES_EX$PolicyType$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$PolicyType$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PolicyType"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$PolicyType$VH() { return PPM_WMI_PERF_STATES_EX$PolicyType$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$Type$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$Type$LAYOUT() { return PPM_WMI_PERF_STATES_EX$Type$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$Type$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$Type$VH() { return PPM_WMI_PERF_STATES_EX$Type$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved$LAYOUT() { return PPM_WMI_PERF_STATES_EX$Reserved$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$Reserved$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$Reserved$VH() { return PPM_WMI_PERF_STATES_EX$Reserved$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$TimerInterval$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$TimerInterval$LAYOUT() { return PPM_WMI_PERF_STATES_EX$TimerInterval$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$TimerInterval$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimerInterval"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$TimerInterval$VH() { return PPM_WMI_PERF_STATES_EX$TimerInterval$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$TargetProcessors$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$TargetProcessors$LAYOUT() { return PPM_WMI_PERF_STATES_EX$TargetProcessors$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$TargetProcessors$VH_ = MemoryHandles.asAddressVarHandle(PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TargetProcessors")));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$TargetProcessors$VH() { return PPM_WMI_PERF_STATES_EX$TargetProcessors$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$PStateHandler$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$PStateHandler$LAYOUT() { return PPM_WMI_PERF_STATES_EX$PStateHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$PStateHandler$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PStateHandler"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$PStateHandler$VH() { return PPM_WMI_PERF_STATES_EX$PStateHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$PStateContext$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$PStateContext$LAYOUT() { return PPM_WMI_PERF_STATES_EX$PStateContext$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$PStateContext$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PStateContext"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$PStateContext$VH() { return PPM_WMI_PERF_STATES_EX$PStateContext$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$TStateHandler$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$TStateHandler$LAYOUT() { return PPM_WMI_PERF_STATES_EX$TStateHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$TStateHandler$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TStateHandler"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$TStateHandler$VH() { return PPM_WMI_PERF_STATES_EX$TStateHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$TStateContext$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$TStateContext$LAYOUT() { return PPM_WMI_PERF_STATES_EX$TStateContext$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$TStateContext$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TStateContext"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$TStateContext$VH() { return PPM_WMI_PERF_STATES_EX$TStateContext$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$FeedbackHandler$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$FeedbackHandler$LAYOUT() { return PPM_WMI_PERF_STATES_EX$FeedbackHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$FeedbackHandler$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FeedbackHandler"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$FeedbackHandler$VH() { return PPM_WMI_PERF_STATES_EX$FeedbackHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved1$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved1$LAYOUT() { return PPM_WMI_PERF_STATES_EX$Reserved1$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$Reserved1$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$Reserved1$VH() { return PPM_WMI_PERF_STATES_EX$Reserved1$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved2$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved2$LAYOUT() { return PPM_WMI_PERF_STATES_EX$Reserved2$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$Reserved2$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    public static java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$Reserved2$VH() { return PPM_WMI_PERF_STATES_EX$Reserved2$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("IdleTransitions"),
        C_INT.withName("FailedTransitions"),
        C_INT.withName("InvalidBucketIndex"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("TotalTime"),
        MemoryLayout.ofSequence(6, C_INT).withName("IdleTimeBuckets")
    );
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$VH_ = PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IdleTransitions"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$VH() { return PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$VH_ = PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FailedTransitions"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$VH() { return PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$VH_ = PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InvalidBucketIndex"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$VH() { return PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING$TotalTime$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING$TotalTime$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING$TotalTime$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING$TotalTime$VH_ = PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalTime"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING$TotalTime$VH() { return PPM_IDLE_STATE_ACCOUNTING$TotalTime$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("StateCount"),
        C_INT.withName("TotalTransitions"),
        C_INT.withName("ResetCount"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("StartTime"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_INT.withName("IdleTransitions"),
            C_INT.withName("FailedTransitions"),
            C_INT.withName("InvalidBucketIndex"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("TotalTime"),
            MemoryLayout.ofSequence(6, C_INT).withName("IdleTimeBuckets")
        )).withName("State")
    );
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING$struct$LAYOUT() { return PPM_IDLE_ACCOUNTING$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING$StateCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING$StateCount$LAYOUT() { return PPM_IDLE_ACCOUNTING$StateCount$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING$StateCount$VH_ = PPM_IDLE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StateCount"));
    public static java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING$StateCount$VH() { return PPM_IDLE_ACCOUNTING$StateCount$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING$TotalTransitions$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING$TotalTransitions$LAYOUT() { return PPM_IDLE_ACCOUNTING$TotalTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING$TotalTransitions$VH_ = PPM_IDLE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalTransitions"));
    public static java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING$TotalTransitions$VH() { return PPM_IDLE_ACCOUNTING$TotalTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING$ResetCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING$ResetCount$LAYOUT() { return PPM_IDLE_ACCOUNTING$ResetCount$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING$ResetCount$VH_ = PPM_IDLE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ResetCount"));
    public static java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING$ResetCount$VH() { return PPM_IDLE_ACCOUNTING$ResetCount$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING$StartTime$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING$StartTime$LAYOUT() { return PPM_IDLE_ACCOUNTING$StartTime$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING$StartTime$VH_ = PPM_IDLE_ACCOUNTING$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartTime"));
    public static java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING$StartTime$VH() { return PPM_IDLE_ACCOUNTING$StartTime$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("TotalTimeUs"),
        C_INT.withName("MinTimeUs"),
        C_INT.withName("MaxTimeUs"),
        C_INT.withName("Count"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT() { return PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$LAYOUT() { return PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$VH_ = PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalTimeUs"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$VH() { return PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$LAYOUT() { return PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$VH_ = PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinTimeUs"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$VH() { return PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$LAYOUT() { return PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$VH_ = PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxTimeUs"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$VH() { return PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_BUCKET_EX$Count$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_BUCKET_EX$Count$LAYOUT() { return PPM_IDLE_STATE_BUCKET_EX$Count$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_BUCKET_EX$Count$VH_ = PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_BUCKET_EX$Count$VH() { return PPM_IDLE_STATE_BUCKET_EX$Count$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("TotalTime"),
        C_INT.withName("IdleTransitions"),
        C_INT.withName("FailedTransitions"),
        C_INT.withName("InvalidBucketIndex"),
        C_INT.withName("MinTimeUs"),
        C_INT.withName("MaxTimeUs"),
        C_INT.withName("CancelledTransitions"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_LONGLONG.withName("TotalTimeUs"),
            C_INT.withName("MinTimeUs"),
            C_INT.withName("MaxTimeUs"),
            C_INT.withName("Count"),
            MemoryLayout.ofPaddingBits(32)
        )).withName("IdleTimeBuckets")
    );
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalTime"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IdleTransitions"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FailedTransitions"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InvalidBucketIndex"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinTimeUs"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxTimeUs"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CancelledTransitions"));
    public static java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("StateCount"),
        C_INT.withName("TotalTransitions"),
        C_INT.withName("ResetCount"),
        C_INT.withName("AbortCount"),
        C_LONGLONG.withName("StartTime"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("TotalTime"),
            C_INT.withName("IdleTransitions"),
            C_INT.withName("FailedTransitions"),
            C_INT.withName("InvalidBucketIndex"),
            C_INT.withName("MinTimeUs"),
            C_INT.withName("MaxTimeUs"),
            C_INT.withName("CancelledTransitions"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_LONGLONG.withName("TotalTimeUs"),
                C_INT.withName("MinTimeUs"),
                C_INT.withName("MaxTimeUs"),
                C_INT.withName("Count"),
                MemoryLayout.ofPaddingBits(32)
            )).withName("IdleTimeBuckets")
        )).withName("State")
    );
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$StateCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$StateCount$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$StateCount$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING_EX$StateCount$VH_ = PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StateCount"));
    public static java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING_EX$StateCount$VH() { return PPM_IDLE_ACCOUNTING_EX$StateCount$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$TotalTransitions$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$TotalTransitions$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$TotalTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING_EX$TotalTransitions$VH_ = PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalTransitions"));
    public static java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING_EX$TotalTransitions$VH() { return PPM_IDLE_ACCOUNTING_EX$TotalTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$ResetCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$ResetCount$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$ResetCount$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING_EX$ResetCount$VH_ = PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ResetCount"));
    public static java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING_EX$ResetCount$VH() { return PPM_IDLE_ACCOUNTING_EX$ResetCount$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$AbortCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$AbortCount$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$AbortCount$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING_EX$AbortCount$VH_ = PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AbortCount"));
    public static java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING_EX$AbortCount$VH() { return PPM_IDLE_ACCOUNTING_EX$AbortCount$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$StartTime$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$StartTime$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$StartTime$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING_EX$StartTime$VH_ = PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartTime"));
    public static java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING_EX$StartTime$VH() { return PPM_IDLE_ACCOUNTING_EX$StartTime$VH_; }

    static final MemoryLayout PPM_PERFSTATE_CHANGE_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_CHANGE_GUID$LAYOUT() { return PPM_PERFSTATE_CHANGE_GUID$LAYOUT_; }

    static final MemorySegment PPM_PERFSTATE_CHANGE_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_PERFSTATE_CHANGE_GUID", PPM_PERFSTATE_CHANGE_GUID$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment PPM_PERFSTATE_CHANGE_GUID$SEGMENT() { return PPM_PERFSTATE_CHANGE_GUID$SEGMENT_; }

    static final MemoryLayout PPM_PERFSTATE_DOMAIN_CHANGE_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_CHANGE_GUID$LAYOUT() { return PPM_PERFSTATE_DOMAIN_CHANGE_GUID$LAYOUT_; }

    static final MemorySegment PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_PERFSTATE_DOMAIN_CHANGE_GUID", PPM_PERFSTATE_DOMAIN_CHANGE_GUID$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT() { return PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT_; }

    static final MemoryLayout PPM_IDLESTATE_CHANGE_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLESTATE_CHANGE_GUID$LAYOUT() { return PPM_IDLESTATE_CHANGE_GUID$LAYOUT_; }

    static final MemorySegment PPM_IDLESTATE_CHANGE_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_IDLESTATE_CHANGE_GUID", PPM_IDLESTATE_CHANGE_GUID$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment PPM_IDLESTATE_CHANGE_GUID$SEGMENT() { return PPM_IDLESTATE_CHANGE_GUID$SEGMENT_; }

    static final MemoryLayout PPM_PERFSTATES_DATA_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATES_DATA_GUID$LAYOUT() { return PPM_PERFSTATES_DATA_GUID$LAYOUT_; }

    static final MemorySegment PPM_PERFSTATES_DATA_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_PERFSTATES_DATA_GUID", PPM_PERFSTATES_DATA_GUID$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment PPM_PERFSTATES_DATA_GUID$SEGMENT() { return PPM_PERFSTATES_DATA_GUID$SEGMENT_; }

    static final MemoryLayout PPM_IDLESTATES_DATA_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLESTATES_DATA_GUID$LAYOUT() { return PPM_IDLESTATES_DATA_GUID$LAYOUT_; }

    static final MemorySegment PPM_IDLESTATES_DATA_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_IDLESTATES_DATA_GUID", PPM_IDLESTATES_DATA_GUID$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment PPM_IDLESTATES_DATA_GUID$SEGMENT() { return PPM_IDLESTATES_DATA_GUID$SEGMENT_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_GUID$LAYOUT() { return PPM_IDLE_ACCOUNTING_GUID$LAYOUT_; }

    static final MemorySegment PPM_IDLE_ACCOUNTING_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_IDLE_ACCOUNTING_GUID", PPM_IDLE_ACCOUNTING_GUID$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment PPM_IDLE_ACCOUNTING_GUID$SEGMENT() { return PPM_IDLE_ACCOUNTING_GUID$SEGMENT_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX_GUID$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX_GUID$LAYOUT_; }

    static final MemorySegment PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_IDLE_ACCOUNTING_EX_GUID", PPM_IDLE_ACCOUNTING_EX_GUID$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT() { return PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT_; }

    static final MemoryLayout PPM_THERMALCONSTRAINT_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout PPM_THERMALCONSTRAINT_GUID$LAYOUT() { return PPM_THERMALCONSTRAINT_GUID$LAYOUT_; }

    static final MemorySegment PPM_THERMALCONSTRAINT_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_THERMALCONSTRAINT_GUID", PPM_THERMALCONSTRAINT_GUID$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment PPM_THERMALCONSTRAINT_GUID$SEGMENT() { return PPM_THERMALCONSTRAINT_GUID$SEGMENT_; }

    static final MemoryLayout PPM_PERFMON_PERFSTATE_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFMON_PERFSTATE_GUID$LAYOUT() { return PPM_PERFMON_PERFSTATE_GUID$LAYOUT_; }

    static final MemorySegment PPM_PERFMON_PERFSTATE_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_PERFMON_PERFSTATE_GUID", PPM_PERFMON_PERFSTATE_GUID$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment PPM_PERFMON_PERFSTATE_GUID$SEGMENT() { return PPM_PERFMON_PERFSTATE_GUID$SEGMENT_; }

    static final MemoryLayout PPM_THERMAL_POLICY_CHANGE_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
    ).withName("_GUID");
    public static jdk.incubator.foreign.MemoryLayout PPM_THERMAL_POLICY_CHANGE_GUID$LAYOUT() { return PPM_THERMAL_POLICY_CHANGE_GUID$LAYOUT_; }

    static final MemorySegment PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_THERMAL_POLICY_CHANGE_GUID", PPM_THERMAL_POLICY_CHANGE_GUID$LAYOUT_);
    public static jdk.incubator.foreign.MemorySegment PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT() { return PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("State"),
        C_INT.withName("Status"),
        C_INT.withName("Latency"),
        C_INT.withName("Speed"),
        C_INT.withName("Processor")
    );
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$struct$LAYOUT() { return PPM_PERFSTATE_EVENT$struct$LAYOUT_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$State$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$State$LAYOUT() { return PPM_PERFSTATE_EVENT$State$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_EVENT$State$VH_ = PPM_PERFSTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    public static java.lang.invoke.VarHandle PPM_PERFSTATE_EVENT$State$VH() { return PPM_PERFSTATE_EVENT$State$VH_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$Status$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$Status$LAYOUT() { return PPM_PERFSTATE_EVENT$Status$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_EVENT$Status$VH_ = PPM_PERFSTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Status"));
    public static java.lang.invoke.VarHandle PPM_PERFSTATE_EVENT$Status$VH() { return PPM_PERFSTATE_EVENT$Status$VH_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$Latency$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$Latency$LAYOUT() { return PPM_PERFSTATE_EVENT$Latency$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_EVENT$Latency$VH_ = PPM_PERFSTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Latency"));
    public static java.lang.invoke.VarHandle PPM_PERFSTATE_EVENT$Latency$VH() { return PPM_PERFSTATE_EVENT$Latency$VH_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$Speed$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$Speed$LAYOUT() { return PPM_PERFSTATE_EVENT$Speed$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_EVENT$Speed$VH_ = PPM_PERFSTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Speed"));
    public static java.lang.invoke.VarHandle PPM_PERFSTATE_EVENT$Speed$VH() { return PPM_PERFSTATE_EVENT$Speed$VH_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$Processor$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$Processor$LAYOUT() { return PPM_PERFSTATE_EVENT$Processor$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_EVENT$Processor$VH_ = PPM_PERFSTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Processor"));
    public static java.lang.invoke.VarHandle PPM_PERFSTATE_EVENT$Processor$VH() { return PPM_PERFSTATE_EVENT$Processor$VH_; }

    static final MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("State"),
        C_INT.withName("Latency"),
        C_INT.withName("Speed"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Processors")
    );
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT() { return PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_; }

    static final MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$State$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$State$LAYOUT() { return PPM_PERFSTATE_DOMAIN_EVENT$State$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_DOMAIN_EVENT$State$VH_ = PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    public static java.lang.invoke.VarHandle PPM_PERFSTATE_DOMAIN_EVENT$State$VH() { return PPM_PERFSTATE_DOMAIN_EVENT$State$VH_; }

    static final MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Latency$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Latency$LAYOUT() { return PPM_PERFSTATE_DOMAIN_EVENT$Latency$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Latency$VH_ = PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Latency"));
    public static java.lang.invoke.VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Latency$VH() { return PPM_PERFSTATE_DOMAIN_EVENT$Latency$VH_; }

    static final MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Speed$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Speed$LAYOUT() { return PPM_PERFSTATE_DOMAIN_EVENT$Speed$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Speed$VH_ = PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Speed"));
    public static java.lang.invoke.VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Speed$VH() { return PPM_PERFSTATE_DOMAIN_EVENT$Speed$VH_; }

    static final MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Processors$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Processors$LAYOUT() { return PPM_PERFSTATE_DOMAIN_EVENT$Processors$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Processors$VH_ = PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Processors"));
    public static java.lang.invoke.VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Processors$VH() { return PPM_PERFSTATE_DOMAIN_EVENT$Processors$VH_; }

    static final MemoryLayout PPM_IDLESTATE_EVENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NewState"),
        C_INT.withName("OldState"),
        C_LONGLONG.withName("Processors")
    );
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLESTATE_EVENT$struct$LAYOUT() { return PPM_IDLESTATE_EVENT$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLESTATE_EVENT$NewState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLESTATE_EVENT$NewState$LAYOUT() { return PPM_IDLESTATE_EVENT$NewState$LAYOUT_; }

    static final VarHandle PPM_IDLESTATE_EVENT$NewState$VH_ = PPM_IDLESTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NewState"));
    public static java.lang.invoke.VarHandle PPM_IDLESTATE_EVENT$NewState$VH() { return PPM_IDLESTATE_EVENT$NewState$VH_; }

    static final MemoryLayout PPM_IDLESTATE_EVENT$OldState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLESTATE_EVENT$OldState$LAYOUT() { return PPM_IDLESTATE_EVENT$OldState$LAYOUT_; }

    static final VarHandle PPM_IDLESTATE_EVENT$OldState$VH_ = PPM_IDLESTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OldState"));
    public static java.lang.invoke.VarHandle PPM_IDLESTATE_EVENT$OldState$VH() { return PPM_IDLESTATE_EVENT$OldState$VH_; }

    static final MemoryLayout PPM_IDLESTATE_EVENT$Processors$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_IDLESTATE_EVENT$Processors$LAYOUT() { return PPM_IDLESTATE_EVENT$Processors$LAYOUT_; }

    static final VarHandle PPM_IDLESTATE_EVENT$Processors$VH_ = PPM_IDLESTATE_EVENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Processors"));
    public static java.lang.invoke.VarHandle PPM_IDLESTATE_EVENT$Processors$VH() { return PPM_IDLESTATE_EVENT$Processors$VH_; }

    static final MemoryLayout PPM_THERMALCHANGE_EVENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ThermalConstraint"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Processors")
    );
    public static jdk.incubator.foreign.MemoryLayout PPM_THERMALCHANGE_EVENT$struct$LAYOUT() { return PPM_THERMALCHANGE_EVENT$struct$LAYOUT_; }

    static final MemoryLayout PPM_THERMALCHANGE_EVENT$ThermalConstraint$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PPM_THERMALCHANGE_EVENT$ThermalConstraint$LAYOUT() { return PPM_THERMALCHANGE_EVENT$ThermalConstraint$LAYOUT_; }

    static final VarHandle PPM_THERMALCHANGE_EVENT$ThermalConstraint$VH_ = PPM_THERMALCHANGE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ThermalConstraint"));
    public static java.lang.invoke.VarHandle PPM_THERMALCHANGE_EVENT$ThermalConstraint$VH() { return PPM_THERMALCHANGE_EVENT$ThermalConstraint$VH_; }

    static final MemoryLayout PPM_THERMALCHANGE_EVENT$Processors$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_THERMALCHANGE_EVENT$Processors$LAYOUT() { return PPM_THERMALCHANGE_EVENT$Processors$LAYOUT_; }

    static final VarHandle PPM_THERMALCHANGE_EVENT$Processors$VH_ = PPM_THERMALCHANGE_EVENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Processors"));
    public static java.lang.invoke.VarHandle PPM_THERMALCHANGE_EVENT$Processors$VH() { return PPM_THERMALCHANGE_EVENT$Processors$VH_; }

    static final MemoryLayout PPM_THERMAL_POLICY_EVENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("Mode"),
        MemoryLayout.ofPaddingBits(56),
        C_LONGLONG.withName("Processors")
    );
    public static jdk.incubator.foreign.MemoryLayout PPM_THERMAL_POLICY_EVENT$struct$LAYOUT() { return PPM_THERMAL_POLICY_EVENT$struct$LAYOUT_; }

    static final MemoryLayout PPM_THERMAL_POLICY_EVENT$Mode$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PPM_THERMAL_POLICY_EVENT$Mode$LAYOUT() { return PPM_THERMAL_POLICY_EVENT$Mode$LAYOUT_; }

    static final VarHandle PPM_THERMAL_POLICY_EVENT$Mode$VH_ = PPM_THERMAL_POLICY_EVENT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Mode"));
    public static java.lang.invoke.VarHandle PPM_THERMAL_POLICY_EVENT$Mode$VH() { return PPM_THERMAL_POLICY_EVENT$Mode$VH_; }

    static final MemoryLayout PPM_THERMAL_POLICY_EVENT$Processors$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout PPM_THERMAL_POLICY_EVENT$Processors$LAYOUT() { return PPM_THERMAL_POLICY_EVENT$Processors$LAYOUT_; }

    static final VarHandle PPM_THERMAL_POLICY_EVENT$Processors$VH_ = PPM_THERMAL_POLICY_EVENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Processors"));
    public static java.lang.invoke.VarHandle PPM_THERMAL_POLICY_EVENT$Processors$VH() { return PPM_THERMAL_POLICY_EVENT$Processors$VH_; }

    static final MemoryLayout POWER_ACTION_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Action"),
        C_INT.withName("Flags"),
        C_INT.withName("EventCode")
    );
    public static jdk.incubator.foreign.MemoryLayout POWER_ACTION_POLICY$struct$LAYOUT() { return POWER_ACTION_POLICY$struct$LAYOUT_; }

    static final MemoryLayout POWER_ACTION_POLICY$Action$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout POWER_ACTION_POLICY$Action$LAYOUT() { return POWER_ACTION_POLICY$Action$LAYOUT_; }

    static final VarHandle POWER_ACTION_POLICY$Action$VH_ = POWER_ACTION_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Action"));
    public static java.lang.invoke.VarHandle POWER_ACTION_POLICY$Action$VH() { return POWER_ACTION_POLICY$Action$VH_; }

    static final MemoryLayout POWER_ACTION_POLICY$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout POWER_ACTION_POLICY$Flags$LAYOUT() { return POWER_ACTION_POLICY$Flags$LAYOUT_; }

    static final VarHandle POWER_ACTION_POLICY$Flags$VH_ = POWER_ACTION_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle POWER_ACTION_POLICY$Flags$VH() { return POWER_ACTION_POLICY$Flags$VH_; }

    static final MemoryLayout POWER_ACTION_POLICY$EventCode$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout POWER_ACTION_POLICY$EventCode$LAYOUT() { return POWER_ACTION_POLICY$EventCode$LAYOUT_; }

    static final VarHandle POWER_ACTION_POLICY$EventCode$VH_ = POWER_ACTION_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EventCode"));
    public static java.lang.invoke.VarHandle POWER_ACTION_POLICY$EventCode$VH() { return POWER_ACTION_POLICY$EventCode$VH_; }

    static final MemoryLayout SYSTEM_POWER_LEVEL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("Enable"),
        MemoryLayout.ofSequence(3, C_BOOL).withName("Spare"),
        C_INT.withName("BatteryLevel"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_INT.withName("Flags"),
            C_INT.withName("EventCode")
        ).withName("PowerPolicy"),
        C_INT.withName("MinSystemState")
    );
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_LEVEL$struct$LAYOUT() { return SYSTEM_POWER_LEVEL$struct$LAYOUT_; }

    static final MemoryLayout SYSTEM_POWER_LEVEL$Enable$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_LEVEL$Enable$LAYOUT() { return SYSTEM_POWER_LEVEL$Enable$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_LEVEL$Enable$VH_ = SYSTEM_POWER_LEVEL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Enable"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_LEVEL$Enable$VH() { return SYSTEM_POWER_LEVEL$Enable$VH_; }

    static final MemoryLayout SYSTEM_POWER_LEVEL$BatteryLevel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_LEVEL$BatteryLevel$LAYOUT() { return SYSTEM_POWER_LEVEL$BatteryLevel$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_LEVEL$BatteryLevel$VH_ = SYSTEM_POWER_LEVEL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BatteryLevel"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_LEVEL$BatteryLevel$VH() { return SYSTEM_POWER_LEVEL$BatteryLevel$VH_; }

    static final MemoryLayout SYSTEM_POWER_LEVEL$MinSystemState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_LEVEL$MinSystemState$LAYOUT() { return SYSTEM_POWER_LEVEL$MinSystemState$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_LEVEL$MinSystemState$VH_ = SYSTEM_POWER_LEVEL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinSystemState"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_LEVEL$MinSystemState$VH() { return SYSTEM_POWER_LEVEL$MinSystemState$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Revision"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_INT.withName("Flags"),
            C_INT.withName("EventCode")
        ).withName("PowerButton"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_INT.withName("Flags"),
            C_INT.withName("EventCode")
        ).withName("SleepButton"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_INT.withName("Flags"),
            C_INT.withName("EventCode")
        ).withName("LidClose"),
        C_INT.withName("LidOpenWake"),
        C_INT.withName("Reserved"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_INT.withName("Flags"),
            C_INT.withName("EventCode")
        ).withName("Idle"),
        C_INT.withName("IdleTimeout"),
        C_BOOL.withName("IdleSensitivity"),
        C_BOOL.withName("DynamicThrottle"),
        MemoryLayout.ofSequence(2, C_BOOL).withName("Spare2"),
        C_INT.withName("MinSleep"),
        C_INT.withName("MaxSleep"),
        C_INT.withName("ReducedLatencySleep"),
        C_INT.withName("WinLogonFlags"),
        C_INT.withName("Spare3"),
        C_INT.withName("DozeS4Timeout"),
        C_INT.withName("BroadcastCapacityResolution"),
        MemoryLayout.ofSequence(4, MemoryLayout.ofStruct(
            C_BOOL.withName("Enable"),
            MemoryLayout.ofSequence(3, C_BOOL).withName("Spare"),
            C_INT.withName("BatteryLevel"),
            MemoryLayout.ofStruct(
                C_INT.withName("Action"),
                C_INT.withName("Flags"),
                C_INT.withName("EventCode")
            ).withName("PowerPolicy"),
            C_INT.withName("MinSystemState")
        )).withName("DischargePolicy"),
        C_INT.withName("VideoTimeout"),
        C_BOOL.withName("VideoDimDisplay"),
        MemoryLayout.ofPaddingBits(24),
        MemoryLayout.ofSequence(3, C_INT).withName("VideoReserved"),
        C_INT.withName("SpindownTimeout"),
        C_BOOL.withName("OptimizeForPower"),
        C_BOOL.withName("FanThrottleTolerance"),
        C_BOOL.withName("ForcedThrottle"),
        C_BOOL.withName("MinThrottle"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_INT.withName("Flags"),
            C_INT.withName("EventCode")
        ).withName("OverThrottled")
    ).withName("_SYSTEM_POWER_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$struct$LAYOUT() { return _SYSTEM_POWER_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$Revision$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$Revision$LAYOUT() { return _SYSTEM_POWER_POLICY$Revision$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$Revision$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Revision"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$Revision$VH() { return _SYSTEM_POWER_POLICY$Revision$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$LidOpenWake$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$LidOpenWake$LAYOUT() { return _SYSTEM_POWER_POLICY$LidOpenWake$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$LidOpenWake$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LidOpenWake"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$LidOpenWake$VH() { return _SYSTEM_POWER_POLICY$LidOpenWake$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$Reserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$Reserved$LAYOUT() { return _SYSTEM_POWER_POLICY$Reserved$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$Reserved$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$Reserved$VH() { return _SYSTEM_POWER_POLICY$Reserved$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$IdleTimeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$IdleTimeout$LAYOUT() { return _SYSTEM_POWER_POLICY$IdleTimeout$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$IdleTimeout$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IdleTimeout"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$IdleTimeout$VH() { return _SYSTEM_POWER_POLICY$IdleTimeout$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$IdleSensitivity$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$IdleSensitivity$LAYOUT() { return _SYSTEM_POWER_POLICY$IdleSensitivity$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$IdleSensitivity$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IdleSensitivity"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$IdleSensitivity$VH() { return _SYSTEM_POWER_POLICY$IdleSensitivity$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$DynamicThrottle$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$DynamicThrottle$LAYOUT() { return _SYSTEM_POWER_POLICY$DynamicThrottle$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$DynamicThrottle$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DynamicThrottle"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$DynamicThrottle$VH() { return _SYSTEM_POWER_POLICY$DynamicThrottle$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$MinSleep$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$MinSleep$LAYOUT() { return _SYSTEM_POWER_POLICY$MinSleep$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$MinSleep$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinSleep"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$MinSleep$VH() { return _SYSTEM_POWER_POLICY$MinSleep$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$MaxSleep$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$MaxSleep$LAYOUT() { return _SYSTEM_POWER_POLICY$MaxSleep$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$MaxSleep$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxSleep"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$MaxSleep$VH() { return _SYSTEM_POWER_POLICY$MaxSleep$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$ReducedLatencySleep$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$ReducedLatencySleep$LAYOUT() { return _SYSTEM_POWER_POLICY$ReducedLatencySleep$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$ReducedLatencySleep$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReducedLatencySleep"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$ReducedLatencySleep$VH() { return _SYSTEM_POWER_POLICY$ReducedLatencySleep$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$WinLogonFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$WinLogonFlags$LAYOUT() { return _SYSTEM_POWER_POLICY$WinLogonFlags$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$WinLogonFlags$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WinLogonFlags"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$WinLogonFlags$VH() { return _SYSTEM_POWER_POLICY$WinLogonFlags$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$Spare3$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$Spare3$LAYOUT() { return _SYSTEM_POWER_POLICY$Spare3$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$Spare3$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Spare3"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$Spare3$VH() { return _SYSTEM_POWER_POLICY$Spare3$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$DozeS4Timeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$DozeS4Timeout$LAYOUT() { return _SYSTEM_POWER_POLICY$DozeS4Timeout$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$DozeS4Timeout$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DozeS4Timeout"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$DozeS4Timeout$VH() { return _SYSTEM_POWER_POLICY$DozeS4Timeout$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$LAYOUT() { return _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BroadcastCapacityResolution"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$VH() { return _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$VideoTimeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$VideoTimeout$LAYOUT() { return _SYSTEM_POWER_POLICY$VideoTimeout$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$VideoTimeout$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VideoTimeout"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$VideoTimeout$VH() { return _SYSTEM_POWER_POLICY$VideoTimeout$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$VideoDimDisplay$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$VideoDimDisplay$LAYOUT() { return _SYSTEM_POWER_POLICY$VideoDimDisplay$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$VideoDimDisplay$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("VideoDimDisplay"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$VideoDimDisplay$VH() { return _SYSTEM_POWER_POLICY$VideoDimDisplay$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$SpindownTimeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$SpindownTimeout$LAYOUT() { return _SYSTEM_POWER_POLICY$SpindownTimeout$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$SpindownTimeout$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SpindownTimeout"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$SpindownTimeout$VH() { return _SYSTEM_POWER_POLICY$SpindownTimeout$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$OptimizeForPower$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$OptimizeForPower$LAYOUT() { return _SYSTEM_POWER_POLICY$OptimizeForPower$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$OptimizeForPower$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("OptimizeForPower"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$OptimizeForPower$VH() { return _SYSTEM_POWER_POLICY$OptimizeForPower$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$FanThrottleTolerance$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$FanThrottleTolerance$LAYOUT() { return _SYSTEM_POWER_POLICY$FanThrottleTolerance$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$FanThrottleTolerance$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("FanThrottleTolerance"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$FanThrottleTolerance$VH() { return _SYSTEM_POWER_POLICY$FanThrottleTolerance$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$ForcedThrottle$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$ForcedThrottle$LAYOUT() { return _SYSTEM_POWER_POLICY$ForcedThrottle$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$ForcedThrottle$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ForcedThrottle"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$ForcedThrottle$VH() { return _SYSTEM_POWER_POLICY$ForcedThrottle$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$MinThrottle$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$MinThrottle$LAYOUT() { return _SYSTEM_POWER_POLICY$MinThrottle$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$MinThrottle$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinThrottle"));
    public static java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$MinThrottle$VH() { return _SYSTEM_POWER_POLICY$MinThrottle$VH_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("TimeCheck"),
        C_BOOL.withName("DemotePercent"),
        C_BOOL.withName("PromotePercent"),
        MemoryLayout.ofSequence(2, C_BOOL).withName("Spare")
    );
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_INFO$struct$LAYOUT() { return PROCESSOR_IDLESTATE_INFO$struct$LAYOUT_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_INFO$TimeCheck$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_INFO$TimeCheck$LAYOUT() { return PROCESSOR_IDLESTATE_INFO$TimeCheck$LAYOUT_; }

    static final VarHandle PROCESSOR_IDLESTATE_INFO$TimeCheck$VH_ = PROCESSOR_IDLESTATE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeCheck"));
    public static java.lang.invoke.VarHandle PROCESSOR_IDLESTATE_INFO$TimeCheck$VH() { return PROCESSOR_IDLESTATE_INFO$TimeCheck$VH_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_INFO$DemotePercent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_INFO$DemotePercent$LAYOUT() { return PROCESSOR_IDLESTATE_INFO$DemotePercent$LAYOUT_; }

    static final VarHandle PROCESSOR_IDLESTATE_INFO$DemotePercent$VH_ = PROCESSOR_IDLESTATE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DemotePercent"));
    public static java.lang.invoke.VarHandle PROCESSOR_IDLESTATE_INFO$DemotePercent$VH() { return PROCESSOR_IDLESTATE_INFO$DemotePercent$VH_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_INFO$PromotePercent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_INFO$PromotePercent$LAYOUT() { return PROCESSOR_IDLESTATE_INFO$PromotePercent$LAYOUT_; }

    static final VarHandle PROCESSOR_IDLESTATE_INFO$PromotePercent$VH_ = PROCESSOR_IDLESTATE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PromotePercent"));
    public static java.lang.invoke.VarHandle PROCESSOR_IDLESTATE_INFO$PromotePercent$VH() { return PROCESSOR_IDLESTATE_INFO$PromotePercent$VH_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Revision"),
        MemoryLayout.ofUnion(
            C_SHORT.withName("AsWORD"),
            C_SHORT
        ).withName("Flags"),
        C_INT.withName("PolicyCount"),
        MemoryLayout.ofSequence(3, MemoryLayout.ofStruct(
            C_INT.withName("TimeCheck"),
            C_BOOL.withName("DemotePercent"),
            C_BOOL.withName("PromotePercent"),
            MemoryLayout.ofSequence(2, C_BOOL).withName("Spare")
        )).withName("Policy")
    );
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_POLICY$struct$LAYOUT() { return PROCESSOR_IDLESTATE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_POLICY$Revision$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_POLICY$Revision$LAYOUT() { return PROCESSOR_IDLESTATE_POLICY$Revision$LAYOUT_; }

    static final VarHandle PROCESSOR_IDLESTATE_POLICY$Revision$VH_ = PROCESSOR_IDLESTATE_POLICY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Revision"));
    public static java.lang.invoke.VarHandle PROCESSOR_IDLESTATE_POLICY$Revision$VH() { return PROCESSOR_IDLESTATE_POLICY$Revision$VH_; }

    static final MemoryLayout Flags$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_SHORT.withName("AsWORD"),
        C_SHORT
    );
    public static jdk.incubator.foreign.MemoryLayout Flags$struct$LAYOUT() { return Flags$struct$LAYOUT_; }

    static final MemoryLayout Flags$AsWORD$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout Flags$AsWORD$LAYOUT() { return Flags$AsWORD$LAYOUT_; }

    static final VarHandle Flags$AsWORD$VH_ = Flags$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("AsWORD"));
    public static java.lang.invoke.VarHandle Flags$AsWORD$VH() { return Flags$AsWORD$VH_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_POLICY$PolicyCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_POLICY$PolicyCount$LAYOUT() { return PROCESSOR_IDLESTATE_POLICY$PolicyCount$LAYOUT_; }

    static final VarHandle PROCESSOR_IDLESTATE_POLICY$PolicyCount$VH_ = PROCESSOR_IDLESTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PolicyCount"));
    public static java.lang.invoke.VarHandle PROCESSOR_IDLESTATE_POLICY$PolicyCount$VH() { return PROCESSOR_IDLESTATE_POLICY$PolicyCount$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("TimeCheck"),
        C_INT.withName("DemoteLimit"),
        C_INT.withName("PromoteLimit"),
        C_BOOL.withName("DemotePercent"),
        C_BOOL.withName("PromotePercent"),
        MemoryLayout.ofSequence(2, C_BOOL).withName("Spare"),
        C_INT
    ).withName("_PROCESSOR_POWER_POLICY_INFO");
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$TimeCheck$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$TimeCheck$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$TimeCheck$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY_INFO$TimeCheck$VH_ = _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeCheck"));
    public static java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY_INFO$TimeCheck$VH() { return _PROCESSOR_POWER_POLICY_INFO$TimeCheck$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$VH_ = _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DemoteLimit"));
    public static java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$VH() { return _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$VH_ = _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PromoteLimit"));
    public static java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$VH() { return _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$DemotePercent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$DemotePercent$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$DemotePercent$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY_INFO$DemotePercent$VH_ = _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DemotePercent"));
    public static java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY_INFO$DemotePercent$VH() { return _PROCESSOR_POWER_POLICY_INFO$DemotePercent$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$PromotePercent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$PromotePercent$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$PromotePercent$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY_INFO$PromotePercent$VH_ = _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PromotePercent"));
    public static java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY_INFO$PromotePercent$VH() { return _PROCESSOR_POWER_POLICY_INFO$PromotePercent$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Revision"),
        C_BOOL.withName("DynamicThrottle"),
        MemoryLayout.ofSequence(3, C_BOOL).withName("Spare"),
        C_INT,
        C_INT.withName("PolicyCount"),
        MemoryLayout.ofSequence(3, MemoryLayout.ofStruct(
            C_INT.withName("TimeCheck"),
            C_INT.withName("DemoteLimit"),
            C_INT.withName("PromoteLimit"),
            C_BOOL.withName("DemotePercent"),
            C_BOOL.withName("PromotePercent"),
            MemoryLayout.ofSequence(2, C_BOOL).withName("Spare"),
            C_INT
        ).withName("_PROCESSOR_POWER_POLICY_INFO")).withName("Policy")
    ).withName("_PROCESSOR_POWER_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY$struct$LAYOUT() { return _PROCESSOR_POWER_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY$Revision$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY$Revision$LAYOUT() { return _PROCESSOR_POWER_POLICY$Revision$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY$Revision$VH_ = _PROCESSOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Revision"));
    public static java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY$Revision$VH() { return _PROCESSOR_POWER_POLICY$Revision$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY$DynamicThrottle$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY$DynamicThrottle$LAYOUT() { return _PROCESSOR_POWER_POLICY$DynamicThrottle$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY$DynamicThrottle$VH_ = _PROCESSOR_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DynamicThrottle"));
    public static java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY$DynamicThrottle$VH() { return _PROCESSOR_POWER_POLICY$DynamicThrottle$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY$PolicyCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY$PolicyCount$LAYOUT() { return _PROCESSOR_POWER_POLICY$PolicyCount$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY$PolicyCount$VH_ = _PROCESSOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PolicyCount"));
    public static java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY$PolicyCount$VH() { return _PROCESSOR_POWER_POLICY$PolicyCount$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Revision"),
        C_BOOL.withName("MaxThrottle"),
        C_BOOL.withName("MinThrottle"),
        C_BOOL.withName("BusyAdjThreshold"),
        C_BOOL.withName("Spare"),
        MemoryLayout.ofUnion(
            C_BOOL.withName("AsBYTE"),
            C_BOOL
        ).withName("Flags"),
        C_INT.withName("TimeCheck"),
        C_INT.withName("IncreaseTime"),
        C_INT.withName("DecreaseTime"),
        C_INT.withName("IncreasePercent"),
        C_INT.withName("DecreasePercent")
    );
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$Revision$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$Revision$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$Revision$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$Revision$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Revision"));
    public static java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$Revision$VH() { return PROCESSOR_PERFSTATE_POLICY$Revision$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$MaxThrottle$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$MaxThrottle$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$MaxThrottle$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$MaxThrottle$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MaxThrottle"));
    public static java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$MaxThrottle$VH() { return PROCESSOR_PERFSTATE_POLICY$MaxThrottle$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$MinThrottle$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$MinThrottle$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$MinThrottle$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$MinThrottle$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinThrottle"));
    public static java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$MinThrottle$VH() { return PROCESSOR_PERFSTATE_POLICY$MinThrottle$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BusyAdjThreshold"));
    public static java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$VH() { return PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$Spare$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$Spare$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$Spare$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$Spare$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Spare"));
    public static java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$Spare$VH() { return PROCESSOR_PERFSTATE_POLICY$Spare$VH_; }

    static final MemoryLayout Flags$AsBYTE$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout Flags$AsBYTE$LAYOUT() { return Flags$AsBYTE$LAYOUT_; }

    static final VarHandle Flags$AsBYTE$VH_ = Flags$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AsBYTE"));
    public static java.lang.invoke.VarHandle Flags$AsBYTE$VH() { return Flags$AsBYTE$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$TimeCheck$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$TimeCheck$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$TimeCheck$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$TimeCheck$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeCheck"));
    public static java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$TimeCheck$VH() { return PROCESSOR_PERFSTATE_POLICY$TimeCheck$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$IncreaseTime$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$IncreaseTime$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$IncreaseTime$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$IncreaseTime$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IncreaseTime"));
    public static java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$IncreaseTime$VH() { return PROCESSOR_PERFSTATE_POLICY$IncreaseTime$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$DecreaseTime$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$DecreaseTime$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$DecreaseTime$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$DecreaseTime$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DecreaseTime"));
    public static java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$DecreaseTime$VH() { return PROCESSOR_PERFSTATE_POLICY$DecreaseTime$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$IncreasePercent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$IncreasePercent$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$IncreasePercent$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$IncreasePercent$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IncreasePercent"));
    public static java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$IncreasePercent$VH() { return PROCESSOR_PERFSTATE_POLICY$IncreasePercent$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$DecreasePercent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$DecreasePercent$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$DecreasePercent$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$DecreasePercent$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DecreasePercent"));
    public static java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$DecreasePercent$VH() { return PROCESSOR_PERFSTATE_POLICY$DecreasePercent$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MinSleep"),
        C_INT.withName("MaxSleep"),
        C_INT.withName("MinVideoTimeout"),
        C_INT.withName("MaxVideoTimeout"),
        C_INT.withName("MinSpindownTimeout"),
        C_INT.withName("MaxSpindownTimeout")
    ).withName("_ADMINISTRATOR_POWER_POLICY");
    public static jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinSleep$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinSleep$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MinSleep$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MinSleep$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinSleep"));
    public static java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MinSleep$VH() { return _ADMINISTRATOR_POWER_POLICY$MinSleep$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxSleep$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxSleep$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MaxSleep$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MaxSleep$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxSleep"));
    public static java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MaxSleep$VH() { return _ADMINISTRATOR_POWER_POLICY$MaxSleep$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinVideoTimeout"));
    public static java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$VH() { return _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxVideoTimeout"));
    public static java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$VH() { return _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinSpindownTimeout"));
    public static java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$VH() { return _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxSpindownTimeout"));
    public static java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$VH() { return _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$VH_; }

    public static int HiberFileBucket1GB() { return (int)0L; }

    public static int HiberFileBucket2GB() { return (int)1L; }

    public static int HiberFileBucket4GB() { return (int)2L; }

    public static int HiberFileBucket8GB() { return (int)3L; }

    public static int HiberFileBucket16GB() { return (int)4L; }

    public static int HiberFileBucket32GB() { return (int)5L; }

    public static int HiberFileBucketUnlimited() { return (int)6L; }

    public static int HiberFileBucketMax() { return (int)7L; }

    static final MemoryLayout _HIBERFILE_BUCKET$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxPhysicalMemory"),
        MemoryLayout.ofSequence(3, C_INT).withName("PhysicalMemoryPercent"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_HIBERFILE_BUCKET");
    public static jdk.incubator.foreign.MemoryLayout _HIBERFILE_BUCKET$struct$LAYOUT() { return _HIBERFILE_BUCKET$struct$LAYOUT_; }

    static final MemoryLayout _HIBERFILE_BUCKET$MaxPhysicalMemory$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _HIBERFILE_BUCKET$MaxPhysicalMemory$LAYOUT() { return _HIBERFILE_BUCKET$MaxPhysicalMemory$LAYOUT_; }

    static final VarHandle _HIBERFILE_BUCKET$MaxPhysicalMemory$VH_ = _HIBERFILE_BUCKET$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxPhysicalMemory"));
    public static java.lang.invoke.VarHandle _HIBERFILE_BUCKET$MaxPhysicalMemory$VH() { return _HIBERFILE_BUCKET$MaxPhysicalMemory$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("PowerButtonPresent"),
        C_BOOL.withName("SleepButtonPresent"),
        C_BOOL.withName("LidPresent"),
        C_BOOL.withName("SystemS1"),
        C_BOOL.withName("SystemS2"),
        C_BOOL.withName("SystemS3"),
        C_BOOL.withName("SystemS4"),
        C_BOOL.withName("SystemS5"),
        C_BOOL.withName("HiberFilePresent"),
        C_BOOL.withName("FullWake"),
        C_BOOL.withName("VideoDimPresent"),
        C_BOOL.withName("ApmPresent"),
        C_BOOL.withName("UpsPresent"),
        C_BOOL.withName("ThermalControl"),
        C_BOOL.withName("ProcessorThrottle"),
        C_BOOL.withName("ProcessorMinThrottle"),
        C_BOOL.withName("ProcessorMaxThrottle"),
        C_BOOL.withName("FastSystemS4"),
        C_BOOL.withName("Hiberboot"),
        C_BOOL.withName("WakeAlarmPresent"),
        C_BOOL.withName("AoAc"),
        C_BOOL.withName("DiskSpinDown"),
        C_BOOL.withName("HiberFileType"),
        C_BOOL.withName("AoAcConnectivitySupported"),
        MemoryLayout.ofSequence(6, C_BOOL).withName("spare3"),
        C_BOOL.withName("SystemBatteriesPresent"),
        C_BOOL.withName("BatteriesAreShortTerm"),
        MemoryLayout.ofSequence(3, MemoryLayout.ofStruct(
            C_INT.withName("Granularity"),
            C_INT.withName("Capacity")
        )).withName("BatteryScale"),
        C_INT.withName("AcOnLineWake"),
        C_INT.withName("SoftLidWake"),
        C_INT.withName("RtcWake"),
        C_INT.withName("MinDeviceWakeState"),
        C_INT.withName("DefaultLowLatencyWake")
    );
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$struct$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PowerButtonPresent"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$VH() { return SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SleepButtonPresent"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$VH() { return SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$LidPresent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$LidPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$LidPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$LidPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LidPresent"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$LidPresent$VH() { return SYSTEM_POWER_CAPABILITIES$LidPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS1$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS1$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemS1$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemS1$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemS1"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemS1$VH() { return SYSTEM_POWER_CAPABILITIES$SystemS1$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS2$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS2$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemS2$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemS2$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemS2"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemS2$VH() { return SYSTEM_POWER_CAPABILITIES$SystemS2$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS3$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS3$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemS3$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemS3$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemS3"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemS3$VH() { return SYSTEM_POWER_CAPABILITIES$SystemS3$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS4$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS4$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemS4$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemS4$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemS4"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemS4$VH() { return SYSTEM_POWER_CAPABILITIES$SystemS4$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS5$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS5$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemS5$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemS5$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemS5"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemS5$VH() { return SYSTEM_POWER_CAPABILITIES$SystemS5$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$HiberFilePresent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$HiberFilePresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$HiberFilePresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$HiberFilePresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("HiberFilePresent"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$HiberFilePresent$VH() { return SYSTEM_POWER_CAPABILITIES$HiberFilePresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$FullWake$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$FullWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$FullWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$FullWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("FullWake"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$FullWake$VH() { return SYSTEM_POWER_CAPABILITIES$FullWake$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$VideoDimPresent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$VideoDimPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$VideoDimPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$VideoDimPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("VideoDimPresent"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$VideoDimPresent$VH() { return SYSTEM_POWER_CAPABILITIES$VideoDimPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$ApmPresent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$ApmPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$ApmPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$ApmPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ApmPresent"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$ApmPresent$VH() { return SYSTEM_POWER_CAPABILITIES$ApmPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$UpsPresent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$UpsPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$UpsPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$UpsPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("UpsPresent"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$UpsPresent$VH() { return SYSTEM_POWER_CAPABILITIES$UpsPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$ThermalControl$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$ThermalControl$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$ThermalControl$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$ThermalControl$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ThermalControl"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$ThermalControl$VH() { return SYSTEM_POWER_CAPABILITIES$ThermalControl$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ProcessorThrottle"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$VH() { return SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ProcessorMinThrottle"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$VH() { return SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ProcessorMaxThrottle"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$VH() { return SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$FastSystemS4$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$FastSystemS4$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$FastSystemS4$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$FastSystemS4$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("FastSystemS4"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$FastSystemS4$VH() { return SYSTEM_POWER_CAPABILITIES$FastSystemS4$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$Hiberboot$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$Hiberboot$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$Hiberboot$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$Hiberboot$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Hiberboot"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$Hiberboot$VH() { return SYSTEM_POWER_CAPABILITIES$Hiberboot$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("WakeAlarmPresent"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$VH() { return SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$AoAc$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$AoAc$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$AoAc$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$AoAc$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AoAc"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$AoAc$VH() { return SYSTEM_POWER_CAPABILITIES$AoAc$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$DiskSpinDown$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$DiskSpinDown$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$DiskSpinDown$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DiskSpinDown"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH() { return SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$HiberFileType$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$HiberFileType$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$HiberFileType$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$HiberFileType$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("HiberFileType"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$HiberFileType$VH() { return SYSTEM_POWER_CAPABILITIES$HiberFileType$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AoAcConnectivitySupported"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH() { return SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemBatteriesPresent"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH() { return SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BatteriesAreShortTerm"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH() { return SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$AcOnLineWake$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$AcOnLineWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$AcOnLineWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AcOnLineWake"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH() { return SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SoftLidWake$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SoftLidWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SoftLidWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SoftLidWake"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH() { return SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$RtcWake$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$RtcWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$RtcWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$RtcWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RtcWake"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$RtcWake$VH() { return SYSTEM_POWER_CAPABILITIES$RtcWake$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinDeviceWakeState"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH() { return SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DefaultLowLatencyWake"));
    public static java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH() { return SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("AcOnLine"),
        C_BOOL.withName("BatteryPresent"),
        C_BOOL.withName("Charging"),
        C_BOOL.withName("Discharging"),
        MemoryLayout.ofSequence(3, C_BOOL).withName("Spare1"),
        C_BOOL.withName("Tag"),
        C_INT.withName("MaxCapacity"),
        C_INT.withName("RemainingCapacity"),
        C_INT.withName("Rate"),
        C_INT.withName("EstimatedTime"),
        C_INT.withName("DefaultAlert1"),
        C_INT.withName("DefaultAlert2")
    );
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$struct$LAYOUT() { return SYSTEM_BATTERY_STATE$struct$LAYOUT_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$AcOnLine$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$AcOnLine$LAYOUT() { return SYSTEM_BATTERY_STATE$AcOnLine$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$AcOnLine$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AcOnLine"));
    public static java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$AcOnLine$VH() { return SYSTEM_BATTERY_STATE$AcOnLine$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$BatteryPresent$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$BatteryPresent$LAYOUT() { return SYSTEM_BATTERY_STATE$BatteryPresent$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$BatteryPresent$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BatteryPresent"));
    public static java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$BatteryPresent$VH() { return SYSTEM_BATTERY_STATE$BatteryPresent$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Charging$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Charging$LAYOUT() { return SYSTEM_BATTERY_STATE$Charging$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Charging$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Charging"));
    public static java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Charging$VH() { return SYSTEM_BATTERY_STATE$Charging$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Discharging$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Discharging$LAYOUT() { return SYSTEM_BATTERY_STATE$Discharging$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Discharging$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Discharging"));
    public static java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Discharging$VH() { return SYSTEM_BATTERY_STATE$Discharging$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Tag$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Tag$LAYOUT() { return SYSTEM_BATTERY_STATE$Tag$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Tag$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Tag"));
    public static java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Tag$VH() { return SYSTEM_BATTERY_STATE$Tag$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$MaxCapacity$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$MaxCapacity$LAYOUT() { return SYSTEM_BATTERY_STATE$MaxCapacity$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$MaxCapacity$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxCapacity"));
    public static java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$MaxCapacity$VH() { return SYSTEM_BATTERY_STATE$MaxCapacity$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$RemainingCapacity$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$RemainingCapacity$LAYOUT() { return SYSTEM_BATTERY_STATE$RemainingCapacity$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$RemainingCapacity$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RemainingCapacity"));
    public static java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$RemainingCapacity$VH() { return SYSTEM_BATTERY_STATE$RemainingCapacity$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Rate$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Rate$LAYOUT() { return SYSTEM_BATTERY_STATE$Rate$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Rate$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Rate"));
    public static java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Rate$VH() { return SYSTEM_BATTERY_STATE$Rate$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$EstimatedTime$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$EstimatedTime$LAYOUT() { return SYSTEM_BATTERY_STATE$EstimatedTime$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$EstimatedTime$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EstimatedTime"));
    public static java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$EstimatedTime$VH() { return SYSTEM_BATTERY_STATE$EstimatedTime$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert1$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert1$LAYOUT() { return SYSTEM_BATTERY_STATE$DefaultAlert1$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$DefaultAlert1$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DefaultAlert1"));
    public static java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$DefaultAlert1$VH() { return SYSTEM_BATTERY_STATE$DefaultAlert1$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert2$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert2$LAYOUT() { return SYSTEM_BATTERY_STATE$DefaultAlert2$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$DefaultAlert2$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DefaultAlert2"));
    public static java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$DefaultAlert2$VH() { return SYSTEM_BATTERY_STATE$DefaultAlert2$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("e_magic"),
        C_SHORT.withName("e_cblp"),
        C_SHORT.withName("e_cp"),
        C_SHORT.withName("e_crlc"),
        C_SHORT.withName("e_cparhdr"),
        C_SHORT.withName("e_minalloc"),
        C_SHORT.withName("e_maxalloc"),
        C_SHORT.withName("e_ss"),
        C_SHORT.withName("e_sp"),
        C_SHORT.withName("e_csum"),
        C_SHORT.withName("e_ip"),
        C_SHORT.withName("e_cs"),
        C_SHORT.withName("e_lfarlc"),
        C_SHORT.withName("e_ovno"),
        MemoryLayout.ofSequence(4, C_SHORT).withName("e_res"),
        C_SHORT.withName("e_oemid"),
        C_SHORT.withName("e_oeminfo"),
        MemoryLayout.ofSequence(10, C_SHORT).withName("e_res2"),
        C_INT.withName("e_lfanew")
    ).withName("_IMAGE_DOS_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$struct$LAYOUT() { return _IMAGE_DOS_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_magic$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_magic$LAYOUT() { return _IMAGE_DOS_HEADER$e_magic$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_magic$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_magic"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_magic$VH() { return _IMAGE_DOS_HEADER$e_magic$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cblp$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cblp$LAYOUT() { return _IMAGE_DOS_HEADER$e_cblp$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cblp$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cblp"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cblp$VH() { return _IMAGE_DOS_HEADER$e_cblp$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cp$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cp$LAYOUT() { return _IMAGE_DOS_HEADER$e_cp$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cp$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cp"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cp$VH() { return _IMAGE_DOS_HEADER$e_cp$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_crlc$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_crlc$LAYOUT() { return _IMAGE_DOS_HEADER$e_crlc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_crlc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_crlc"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_crlc$VH() { return _IMAGE_DOS_HEADER$e_crlc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cparhdr$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cparhdr$LAYOUT() { return _IMAGE_DOS_HEADER$e_cparhdr$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cparhdr$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cparhdr"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cparhdr$VH() { return _IMAGE_DOS_HEADER$e_cparhdr$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_minalloc$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_minalloc$LAYOUT() { return _IMAGE_DOS_HEADER$e_minalloc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_minalloc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_minalloc"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_minalloc$VH() { return _IMAGE_DOS_HEADER$e_minalloc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_maxalloc$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_maxalloc$LAYOUT() { return _IMAGE_DOS_HEADER$e_maxalloc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_maxalloc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_maxalloc"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_maxalloc$VH() { return _IMAGE_DOS_HEADER$e_maxalloc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_ss$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_ss$LAYOUT() { return _IMAGE_DOS_HEADER$e_ss$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_ss$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_ss"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_ss$VH() { return _IMAGE_DOS_HEADER$e_ss$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_sp$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_sp$LAYOUT() { return _IMAGE_DOS_HEADER$e_sp$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_sp$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_sp"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_sp$VH() { return _IMAGE_DOS_HEADER$e_sp$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_csum$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_csum$LAYOUT() { return _IMAGE_DOS_HEADER$e_csum$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_csum$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_csum"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_csum$VH() { return _IMAGE_DOS_HEADER$e_csum$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_ip$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_ip$LAYOUT() { return _IMAGE_DOS_HEADER$e_ip$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_ip$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_ip"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_ip$VH() { return _IMAGE_DOS_HEADER$e_ip$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cs$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cs$LAYOUT() { return _IMAGE_DOS_HEADER$e_cs$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cs$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cs"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cs$VH() { return _IMAGE_DOS_HEADER$e_cs$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_lfarlc$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_lfarlc$LAYOUT() { return _IMAGE_DOS_HEADER$e_lfarlc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_lfarlc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_lfarlc"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_lfarlc$VH() { return _IMAGE_DOS_HEADER$e_lfarlc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_ovno$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_ovno$LAYOUT() { return _IMAGE_DOS_HEADER$e_ovno$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_ovno$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_ovno"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_ovno$VH() { return _IMAGE_DOS_HEADER$e_ovno$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_oemid$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_oemid$LAYOUT() { return _IMAGE_DOS_HEADER$e_oemid$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_oemid$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_oemid"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_oemid$VH() { return _IMAGE_DOS_HEADER$e_oemid$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_oeminfo$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_oeminfo$LAYOUT() { return _IMAGE_DOS_HEADER$e_oeminfo$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_oeminfo$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_oeminfo"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_oeminfo$VH() { return _IMAGE_DOS_HEADER$e_oeminfo$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_lfanew$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_lfanew$LAYOUT() { return _IMAGE_DOS_HEADER$e_lfanew$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_lfanew$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e_lfanew"));
    public static java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_lfanew$VH() { return _IMAGE_DOS_HEADER$e_lfanew$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("ne_magic"),
        C_BOOL.withName("ne_ver"),
        C_BOOL.withName("ne_rev"),
        C_SHORT.withName("ne_enttab"),
        C_SHORT.withName("ne_cbenttab"),
        C_INT.withName("ne_crc"),
        C_SHORT.withName("ne_flags"),
        C_SHORT.withName("ne_autodata"),
        C_SHORT.withName("ne_heap"),
        C_SHORT.withName("ne_stack"),
        C_INT.withName("ne_csip"),
        C_INT.withName("ne_sssp"),
        C_SHORT.withName("ne_cseg"),
        C_SHORT.withName("ne_cmod"),
        C_SHORT.withName("ne_cbnrestab"),
        C_SHORT.withName("ne_segtab"),
        C_SHORT.withName("ne_rsrctab"),
        C_SHORT.withName("ne_restab"),
        C_SHORT.withName("ne_modtab"),
        C_SHORT.withName("ne_imptab"),
        C_INT.withName("ne_nrestab"),
        C_SHORT.withName("ne_cmovent"),
        C_SHORT.withName("ne_align"),
        C_SHORT.withName("ne_cres"),
        C_BOOL.withName("ne_exetyp"),
        C_BOOL.withName("ne_flagsothers"),
        C_SHORT.withName("ne_pretthunks"),
        C_SHORT.withName("ne_psegrefbytes"),
        C_SHORT.withName("ne_swaparea"),
        C_SHORT.withName("ne_expver")
    ).withName("_IMAGE_OS2_HEADER");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$struct$LAYOUT() { return _IMAGE_OS2_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_magic$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_magic$LAYOUT() { return _IMAGE_OS2_HEADER$ne_magic$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_magic$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_magic"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_magic$VH() { return _IMAGE_OS2_HEADER$ne_magic$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_ver$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_ver$LAYOUT() { return _IMAGE_OS2_HEADER$ne_ver$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_ver$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_ver"));
    public static java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_ver$VH() { return _IMAGE_OS2_HEADER$ne_ver$VH_; }

}

