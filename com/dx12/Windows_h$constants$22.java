// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$22 extends Windows_h$constants$21 {
    Windows_h$constants$22() {}
    static final FunctionDescriptor GetSystemWow64Directory2A$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemWow64Directory2A$FUNC() { return GetSystemWow64Directory2A$FUNC_; }

    static final MethodHandle GetSystemWow64Directory2A$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemWow64Directory2A",
        "(Ljdk/incubator/foreign/MemoryAddress;IS)I",
        GetSystemWow64Directory2A$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemWow64Directory2A$MH() { return GetSystemWow64Directory2A$MH_; }

    static final FunctionDescriptor GetSystemWow64Directory2W$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemWow64Directory2W$FUNC() { return GetSystemWow64Directory2W$FUNC_; }

    static final MethodHandle GetSystemWow64Directory2W$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemWow64Directory2W",
        "(Ljdk/incubator/foreign/MemoryAddress;IS)I",
        GetSystemWow64Directory2W$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemWow64Directory2W$MH() { return GetSystemWow64Directory2W$MH_; }

    static final FunctionDescriptor IsWow64GuestMachineSupported$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsWow64GuestMachineSupported$FUNC() { return IsWow64GuestMachineSupported$FUNC_; }

    static final MethodHandle IsWow64GuestMachineSupported$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsWow64GuestMachineSupported",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        IsWow64GuestMachineSupported$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsWow64GuestMachineSupported$MH() { return IsWow64GuestMachineSupported$MH_; }

    static final FunctionDescriptor Wow64GetThreadContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor Wow64GetThreadContext$FUNC() { return Wow64GetThreadContext$FUNC_; }

    static final MethodHandle Wow64GetThreadContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Wow64GetThreadContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        Wow64GetThreadContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Wow64GetThreadContext$MH() { return Wow64GetThreadContext$MH_; }

    static final FunctionDescriptor Wow64SetThreadContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor Wow64SetThreadContext$FUNC() { return Wow64SetThreadContext$FUNC_; }

    static final MethodHandle Wow64SetThreadContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Wow64SetThreadContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        Wow64SetThreadContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Wow64SetThreadContext$MH() { return Wow64SetThreadContext$MH_; }

    static final FunctionDescriptor Wow64SuspendThread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor Wow64SuspendThread$FUNC() { return Wow64SuspendThread$FUNC_; }

    static final MethodHandle Wow64SuspendThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Wow64SuspendThread",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        Wow64SuspendThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Wow64SuspendThread$MH() { return Wow64SuspendThread$MH_; }

    static final MemoryLayout tagENUMUILANG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NumOfEnumUILang"),
        C_INT.withName("SizeOfEnumUIBuffer"),
        C_POINTER.withName("pEnumUIBuffer")
    ).withName("tagENUMUILANG");
    public static jdk.incubator.foreign.MemoryLayout tagENUMUILANG$struct$LAYOUT() { return tagENUMUILANG$struct$LAYOUT_; }

    static final MemoryLayout tagENUMUILANG$NumOfEnumUILang$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagENUMUILANG$NumOfEnumUILang$LAYOUT() { return tagENUMUILANG$NumOfEnumUILang$LAYOUT_; }

    static final VarHandle tagENUMUILANG$NumOfEnumUILang$VH_ = tagENUMUILANG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumOfEnumUILang"));
    public static java.lang.invoke.VarHandle tagENUMUILANG$NumOfEnumUILang$VH() { return tagENUMUILANG$NumOfEnumUILang$VH_; }

    static final MemoryLayout tagENUMUILANG$SizeOfEnumUIBuffer$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagENUMUILANG$SizeOfEnumUIBuffer$LAYOUT() { return tagENUMUILANG$SizeOfEnumUIBuffer$LAYOUT_; }

    static final VarHandle tagENUMUILANG$SizeOfEnumUIBuffer$VH_ = tagENUMUILANG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfEnumUIBuffer"));
    public static java.lang.invoke.VarHandle tagENUMUILANG$SizeOfEnumUIBuffer$VH() { return tagENUMUILANG$SizeOfEnumUIBuffer$VH_; }

    static final MemoryLayout tagENUMUILANG$pEnumUIBuffer$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagENUMUILANG$pEnumUIBuffer$LAYOUT() { return tagENUMUILANG$pEnumUIBuffer$LAYOUT_; }

    static final VarHandle tagENUMUILANG$pEnumUIBuffer$VH_ = MemoryHandles.asAddressVarHandle(tagENUMUILANG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pEnumUIBuffer")));
    public static java.lang.invoke.VarHandle tagENUMUILANG$pEnumUIBuffer$VH() { return tagENUMUILANG$pEnumUIBuffer$VH_; }

    static final FunctionDescriptor DisableThreadLibraryCalls$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DisableThreadLibraryCalls$FUNC() { return DisableThreadLibraryCalls$FUNC_; }

    static final MethodHandle DisableThreadLibraryCalls$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DisableThreadLibraryCalls",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DisableThreadLibraryCalls$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DisableThreadLibraryCalls$MH() { return DisableThreadLibraryCalls$MH_; }

    static final FunctionDescriptor FindResourceExW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindResourceExW$FUNC() { return FindResourceExW$FUNC_; }

    static final MethodHandle FindResourceExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindResourceExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;S)Ljdk/incubator/foreign/MemoryAddress;",
        FindResourceExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindResourceExW$MH() { return FindResourceExW$MH_; }

    static final FunctionDescriptor FindStringOrdinal$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindStringOrdinal$FUNC() { return FindStringOrdinal$FUNC_; }

    static final MethodHandle FindStringOrdinal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindStringOrdinal",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        FindStringOrdinal$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindStringOrdinal$MH() { return FindStringOrdinal$MH_; }

    static final FunctionDescriptor FreeLibrary$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FreeLibrary$FUNC() { return FreeLibrary$FUNC_; }

    static final MethodHandle FreeLibrary$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeLibrary",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FreeLibrary$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FreeLibrary$MH() { return FreeLibrary$MH_; }

    static final FunctionDescriptor FreeLibraryAndExitThread$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FreeLibraryAndExitThread$FUNC() { return FreeLibraryAndExitThread$FUNC_; }

    static final MethodHandle FreeLibraryAndExitThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeLibraryAndExitThread",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        FreeLibraryAndExitThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FreeLibraryAndExitThread$MH() { return FreeLibraryAndExitThread$MH_; }

    static final FunctionDescriptor FreeResource$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FreeResource$FUNC() { return FreeResource$FUNC_; }

    static final MethodHandle FreeResource$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeResource",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FreeResource$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FreeResource$MH() { return FreeResource$MH_; }

    static final FunctionDescriptor GetModuleFileNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetModuleFileNameA$FUNC() { return GetModuleFileNameA$FUNC_; }

    static final MethodHandle GetModuleFileNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetModuleFileNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetModuleFileNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetModuleFileNameA$MH() { return GetModuleFileNameA$MH_; }

    static final FunctionDescriptor GetModuleFileNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetModuleFileNameW$FUNC() { return GetModuleFileNameW$FUNC_; }

    static final MethodHandle GetModuleFileNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetModuleFileNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetModuleFileNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetModuleFileNameW$MH() { return GetModuleFileNameW$MH_; }

    static final FunctionDescriptor GetModuleHandleA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetModuleHandleA$FUNC() { return GetModuleHandleA$FUNC_; }

    static final MethodHandle GetModuleHandleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetModuleHandleA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetModuleHandleA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetModuleHandleA$MH() { return GetModuleHandleA$MH_; }

    static final FunctionDescriptor GetModuleHandleW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetModuleHandleW$FUNC() { return GetModuleHandleW$FUNC_; }

    static final MethodHandle GetModuleHandleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetModuleHandleW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetModuleHandleW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetModuleHandleW$MH() { return GetModuleHandleW$MH_; }

    static final FunctionDescriptor GetModuleHandleExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetModuleHandleExA$FUNC() { return GetModuleHandleExA$FUNC_; }

    static final MethodHandle GetModuleHandleExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetModuleHandleExA",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetModuleHandleExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetModuleHandleExA$MH() { return GetModuleHandleExA$MH_; }

    static final FunctionDescriptor GetModuleHandleExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetModuleHandleExW$FUNC() { return GetModuleHandleExW$FUNC_; }

    static final MethodHandle GetModuleHandleExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetModuleHandleExW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetModuleHandleExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetModuleHandleExW$MH() { return GetModuleHandleExW$MH_; }

    static final FunctionDescriptor GetProcAddress$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcAddress$FUNC() { return GetProcAddress$FUNC_; }

    static final MethodHandle GetProcAddress$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcAddress",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetProcAddress$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcAddress$MH() { return GetProcAddress$MH_; }

    static final MemoryLayout _REDIRECTION_FUNCTION_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("DllName"),
        C_POINTER.withName("FunctionName"),
        C_POINTER.withName("RedirectionTarget")
    ).withName("_REDIRECTION_FUNCTION_DESCRIPTOR");
    public static jdk.incubator.foreign.MemoryLayout _REDIRECTION_FUNCTION_DESCRIPTOR$struct$LAYOUT() { return _REDIRECTION_FUNCTION_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _REDIRECTION_FUNCTION_DESCRIPTOR$DllName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _REDIRECTION_FUNCTION_DESCRIPTOR$DllName$LAYOUT() { return _REDIRECTION_FUNCTION_DESCRIPTOR$DllName$LAYOUT_; }

    static final VarHandle _REDIRECTION_FUNCTION_DESCRIPTOR$DllName$VH_ = MemoryHandles.asAddressVarHandle(_REDIRECTION_FUNCTION_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DllName")));
    public static java.lang.invoke.VarHandle _REDIRECTION_FUNCTION_DESCRIPTOR$DllName$VH() { return _REDIRECTION_FUNCTION_DESCRIPTOR$DllName$VH_; }

    static final MemoryLayout _REDIRECTION_FUNCTION_DESCRIPTOR$FunctionName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _REDIRECTION_FUNCTION_DESCRIPTOR$FunctionName$LAYOUT() { return _REDIRECTION_FUNCTION_DESCRIPTOR$FunctionName$LAYOUT_; }

    static final VarHandle _REDIRECTION_FUNCTION_DESCRIPTOR$FunctionName$VH_ = MemoryHandles.asAddressVarHandle(_REDIRECTION_FUNCTION_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FunctionName")));
    public static java.lang.invoke.VarHandle _REDIRECTION_FUNCTION_DESCRIPTOR$FunctionName$VH() { return _REDIRECTION_FUNCTION_DESCRIPTOR$FunctionName$VH_; }

    static final MemoryLayout _REDIRECTION_FUNCTION_DESCRIPTOR$RedirectionTarget$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _REDIRECTION_FUNCTION_DESCRIPTOR$RedirectionTarget$LAYOUT() { return _REDIRECTION_FUNCTION_DESCRIPTOR$RedirectionTarget$LAYOUT_; }

    static final VarHandle _REDIRECTION_FUNCTION_DESCRIPTOR$RedirectionTarget$VH_ = MemoryHandles.asAddressVarHandle(_REDIRECTION_FUNCTION_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RedirectionTarget")));
    public static java.lang.invoke.VarHandle _REDIRECTION_FUNCTION_DESCRIPTOR$RedirectionTarget$VH() { return _REDIRECTION_FUNCTION_DESCRIPTOR$RedirectionTarget$VH_; }

    static final MemoryLayout _REDIRECTION_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Version"),
        C_INT.withName("FunctionCount"),
        C_POINTER.withName("Redirections")
    ).withName("_REDIRECTION_DESCRIPTOR");
    public static jdk.incubator.foreign.MemoryLayout _REDIRECTION_DESCRIPTOR$struct$LAYOUT() { return _REDIRECTION_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _REDIRECTION_DESCRIPTOR$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _REDIRECTION_DESCRIPTOR$Version$LAYOUT() { return _REDIRECTION_DESCRIPTOR$Version$LAYOUT_; }

    static final VarHandle _REDIRECTION_DESCRIPTOR$Version$VH_ = _REDIRECTION_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _REDIRECTION_DESCRIPTOR$Version$VH() { return _REDIRECTION_DESCRIPTOR$Version$VH_; }

    static final MemoryLayout _REDIRECTION_DESCRIPTOR$FunctionCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _REDIRECTION_DESCRIPTOR$FunctionCount$LAYOUT() { return _REDIRECTION_DESCRIPTOR$FunctionCount$LAYOUT_; }

    static final VarHandle _REDIRECTION_DESCRIPTOR$FunctionCount$VH_ = _REDIRECTION_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FunctionCount"));
    public static java.lang.invoke.VarHandle _REDIRECTION_DESCRIPTOR$FunctionCount$VH() { return _REDIRECTION_DESCRIPTOR$FunctionCount$VH_; }

    static final MemoryLayout _REDIRECTION_DESCRIPTOR$Redirections$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _REDIRECTION_DESCRIPTOR$Redirections$LAYOUT() { return _REDIRECTION_DESCRIPTOR$Redirections$LAYOUT_; }

    static final VarHandle _REDIRECTION_DESCRIPTOR$Redirections$VH_ = MemoryHandles.asAddressVarHandle(_REDIRECTION_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Redirections")));
    public static java.lang.invoke.VarHandle _REDIRECTION_DESCRIPTOR$Redirections$VH() { return _REDIRECTION_DESCRIPTOR$Redirections$VH_; }

    static final FunctionDescriptor LoadLibraryExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadLibraryExA$FUNC() { return LoadLibraryExA$FUNC_; }

    static final MethodHandle LoadLibraryExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadLibraryExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        LoadLibraryExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadLibraryExA$MH() { return LoadLibraryExA$MH_; }

    static final FunctionDescriptor LoadLibraryExW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadLibraryExW$FUNC() { return LoadLibraryExW$FUNC_; }

    static final MethodHandle LoadLibraryExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadLibraryExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        LoadLibraryExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadLibraryExW$MH() { return LoadLibraryExW$MH_; }

    static final FunctionDescriptor LoadResource$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadResource$FUNC() { return LoadResource$FUNC_; }

    static final MethodHandle LoadResource$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadResource",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadResource$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadResource$MH() { return LoadResource$MH_; }

    static final FunctionDescriptor LoadStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadStringA$FUNC() { return LoadStringA$FUNC_; }

    static final MethodHandle LoadStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        LoadStringA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadStringA$MH() { return LoadStringA$MH_; }

    static final FunctionDescriptor LoadStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadStringW$FUNC() { return LoadStringW$FUNC_; }

    static final MethodHandle LoadStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        LoadStringW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadStringW$MH() { return LoadStringW$MH_; }

    static final FunctionDescriptor LockResource$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LockResource$FUNC() { return LockResource$FUNC_; }

    static final MethodHandle LockResource$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LockResource",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LockResource$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LockResource$MH() { return LockResource$MH_; }

    static final FunctionDescriptor SizeofResource$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SizeofResource$FUNC() { return SizeofResource$FUNC_; }

    static final MethodHandle SizeofResource$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SizeofResource",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SizeofResource$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SizeofResource$MH() { return SizeofResource$MH_; }

    static final FunctionDescriptor AddDllDirectory$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddDllDirectory$FUNC() { return AddDllDirectory$FUNC_; }

    static final MethodHandle AddDllDirectory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddDllDirectory",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        AddDllDirectory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddDllDirectory$MH() { return AddDllDirectory$MH_; }

    static final FunctionDescriptor RemoveDllDirectory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveDllDirectory$FUNC() { return RemoveDllDirectory$FUNC_; }

    static final MethodHandle RemoveDllDirectory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveDllDirectory",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveDllDirectory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveDllDirectory$MH() { return RemoveDllDirectory$MH_; }

    static final FunctionDescriptor SetDefaultDllDirectories$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetDefaultDllDirectories$FUNC() { return SetDefaultDllDirectories$FUNC_; }

    static final MethodHandle SetDefaultDllDirectories$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDefaultDllDirectories",
        "(I)I",
        SetDefaultDllDirectories$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetDefaultDllDirectories$MH() { return SetDefaultDllDirectories$MH_; }

    static final FunctionDescriptor EnumResourceLanguagesExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceLanguagesExA$FUNC() { return EnumResourceLanguagesExA$FUNC_; }

    static final MethodHandle EnumResourceLanguagesExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceLanguagesExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JIS)I",
        EnumResourceLanguagesExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceLanguagesExA$MH() { return EnumResourceLanguagesExA$MH_; }

    static final FunctionDescriptor EnumResourceLanguagesExA$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_SHORT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceLanguagesExA$lpEnumFunc$FUNC() { return EnumResourceLanguagesExA$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumResourceLanguagesExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceLanguagesExW$FUNC() { return EnumResourceLanguagesExW$FUNC_; }

    static final MethodHandle EnumResourceLanguagesExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceLanguagesExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JIS)I",
        EnumResourceLanguagesExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceLanguagesExW$MH() { return EnumResourceLanguagesExW$MH_; }

    static final FunctionDescriptor EnumResourceLanguagesExW$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_SHORT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceLanguagesExW$lpEnumFunc$FUNC() { return EnumResourceLanguagesExW$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumResourceNamesExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceNamesExA$FUNC() { return EnumResourceNamesExA$FUNC_; }

    static final MethodHandle EnumResourceNamesExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceNamesExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JIS)I",
        EnumResourceNamesExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceNamesExA$MH() { return EnumResourceNamesExA$MH_; }

    static final FunctionDescriptor EnumResourceNamesExA$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceNamesExA$lpEnumFunc$FUNC() { return EnumResourceNamesExA$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumResourceNamesExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceNamesExW$FUNC() { return EnumResourceNamesExW$FUNC_; }

    static final MethodHandle EnumResourceNamesExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceNamesExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JIS)I",
        EnumResourceNamesExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceNamesExW$MH() { return EnumResourceNamesExW$MH_; }

    static final FunctionDescriptor EnumResourceNamesExW$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceNamesExW$lpEnumFunc$FUNC() { return EnumResourceNamesExW$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumResourceTypesExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceTypesExA$FUNC() { return EnumResourceTypesExA$FUNC_; }

    static final MethodHandle EnumResourceTypesExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceTypesExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JIS)I",
        EnumResourceTypesExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceTypesExA$MH() { return EnumResourceTypesExA$MH_; }

    static final FunctionDescriptor EnumResourceTypesExA$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceTypesExA$lpEnumFunc$FUNC() { return EnumResourceTypesExA$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumResourceTypesExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceTypesExW$FUNC() { return EnumResourceTypesExW$FUNC_; }

    static final MethodHandle EnumResourceTypesExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceTypesExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JIS)I",
        EnumResourceTypesExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceTypesExW$MH() { return EnumResourceTypesExW$MH_; }

    static final FunctionDescriptor EnumResourceTypesExW$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceTypesExW$lpEnumFunc$FUNC() { return EnumResourceTypesExW$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor FindResourceW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindResourceW$FUNC() { return FindResourceW$FUNC_; }

    static final MethodHandle FindResourceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindResourceW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FindResourceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindResourceW$MH() { return FindResourceW$MH_; }

    static final FunctionDescriptor LoadLibraryA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadLibraryA$FUNC() { return LoadLibraryA$FUNC_; }

    static final MethodHandle LoadLibraryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadLibraryA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadLibraryA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadLibraryA$MH() { return LoadLibraryA$MH_; }

    static final FunctionDescriptor LoadLibraryW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadLibraryW$FUNC() { return LoadLibraryW$FUNC_; }

    static final MethodHandle LoadLibraryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadLibraryW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadLibraryW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadLibraryW$MH() { return LoadLibraryW$MH_; }

    static final FunctionDescriptor EnumResourceNamesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceNamesW$FUNC() { return EnumResourceNamesW$FUNC_; }

    static final MethodHandle EnumResourceNamesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumResourceNamesW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumResourceNamesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumResourceNamesW$MH() { return EnumResourceNamesW$MH_; }

    static final FunctionDescriptor EnumResourceNamesW$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumResourceNamesW$lpEnumFunc$FUNC() { return EnumResourceNamesW$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor AccessCheck$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AccessCheck$FUNC() { return AccessCheck$FUNC_; }

    static final MethodHandle AccessCheck$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AccessCheck",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AccessCheck$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AccessCheck$MH() { return AccessCheck$MH_; }

    static final FunctionDescriptor AccessCheckAndAuditAlarmW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AccessCheckAndAuditAlarmW$FUNC() { return AccessCheckAndAuditAlarmW$FUNC_; }

    static final MethodHandle AccessCheckAndAuditAlarmW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AccessCheckAndAuditAlarmW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AccessCheckAndAuditAlarmW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AccessCheckAndAuditAlarmW$MH() { return AccessCheckAndAuditAlarmW$MH_; }

    static final FunctionDescriptor AccessCheckByType$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AccessCheckByType$FUNC() { return AccessCheckByType$FUNC_; }

    static final MethodHandle AccessCheckByType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AccessCheckByType",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AccessCheckByType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AccessCheckByType$MH() { return AccessCheckByType$MH_; }

    static final FunctionDescriptor AccessCheckByTypeResultList$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AccessCheckByTypeResultList$FUNC() { return AccessCheckByTypeResultList$FUNC_; }

    static final MethodHandle AccessCheckByTypeResultList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AccessCheckByTypeResultList",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AccessCheckByTypeResultList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AccessCheckByTypeResultList$MH() { return AccessCheckByTypeResultList$MH_; }

    static final FunctionDescriptor AccessCheckByTypeAndAuditAlarmW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AccessCheckByTypeAndAuditAlarmW$FUNC() { return AccessCheckByTypeAndAuditAlarmW$FUNC_; }

    static final MethodHandle AccessCheckByTypeAndAuditAlarmW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AccessCheckByTypeAndAuditAlarmW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AccessCheckByTypeAndAuditAlarmW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AccessCheckByTypeAndAuditAlarmW$MH() { return AccessCheckByTypeAndAuditAlarmW$MH_; }

    static final FunctionDescriptor AccessCheckByTypeResultListAndAuditAlarmW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AccessCheckByTypeResultListAndAuditAlarmW$FUNC() { return AccessCheckByTypeResultListAndAuditAlarmW$FUNC_; }

    static final MethodHandle AccessCheckByTypeResultListAndAuditAlarmW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AccessCheckByTypeResultListAndAuditAlarmW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AccessCheckByTypeResultListAndAuditAlarmW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AccessCheckByTypeResultListAndAuditAlarmW$MH() { return AccessCheckByTypeResultListAndAuditAlarmW$MH_; }

    static final FunctionDescriptor AccessCheckByTypeResultListAndAuditAlarmByHandleW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AccessCheckByTypeResultListAndAuditAlarmByHandleW$FUNC() { return AccessCheckByTypeResultListAndAuditAlarmByHandleW$FUNC_; }

    static final MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AccessCheckByTypeResultListAndAuditAlarmByHandleW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AccessCheckByTypeResultListAndAuditAlarmByHandleW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH() { return AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH_; }

    static final FunctionDescriptor AddAccessAllowedAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAccessAllowedAce$FUNC() { return AddAccessAllowedAce$FUNC_; }

    static final MethodHandle AddAccessAllowedAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAccessAllowedAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        AddAccessAllowedAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAccessAllowedAce$MH() { return AddAccessAllowedAce$MH_; }

    static final FunctionDescriptor AddAccessAllowedAceEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAccessAllowedAceEx$FUNC() { return AddAccessAllowedAceEx$FUNC_; }

    static final MethodHandle AddAccessAllowedAceEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAccessAllowedAceEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        AddAccessAllowedAceEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAccessAllowedAceEx$MH() { return AddAccessAllowedAceEx$MH_; }

    static final FunctionDescriptor AddAccessAllowedObjectAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAccessAllowedObjectAce$FUNC() { return AddAccessAllowedObjectAce$FUNC_; }

    static final MethodHandle AddAccessAllowedObjectAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAccessAllowedObjectAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AddAccessAllowedObjectAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAccessAllowedObjectAce$MH() { return AddAccessAllowedObjectAce$MH_; }

    static final FunctionDescriptor AddAccessDeniedAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAccessDeniedAce$FUNC() { return AddAccessDeniedAce$FUNC_; }

    static final MethodHandle AddAccessDeniedAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAccessDeniedAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        AddAccessDeniedAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAccessDeniedAce$MH() { return AddAccessDeniedAce$MH_; }

    static final FunctionDescriptor AddAccessDeniedAceEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAccessDeniedAceEx$FUNC() { return AddAccessDeniedAceEx$FUNC_; }

    static final MethodHandle AddAccessDeniedAceEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAccessDeniedAceEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        AddAccessDeniedAceEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAccessDeniedAceEx$MH() { return AddAccessDeniedAceEx$MH_; }

    static final FunctionDescriptor AddAccessDeniedObjectAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAccessDeniedObjectAce$FUNC() { return AddAccessDeniedObjectAce$FUNC_; }

    static final MethodHandle AddAccessDeniedObjectAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAccessDeniedObjectAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AddAccessDeniedObjectAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAccessDeniedObjectAce$MH() { return AddAccessDeniedObjectAce$MH_; }

    static final FunctionDescriptor AddAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAce$FUNC() { return AddAce$FUNC_; }

    static final MethodHandle AddAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        AddAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAce$MH() { return AddAce$MH_; }

    static final FunctionDescriptor AddAuditAccessAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAuditAccessAce$FUNC() { return AddAuditAccessAce$FUNC_; }

    static final MethodHandle AddAuditAccessAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAuditAccessAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)I",
        AddAuditAccessAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAuditAccessAce$MH() { return AddAuditAccessAce$MH_; }

    static final FunctionDescriptor AddAuditAccessAceEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAuditAccessAceEx$FUNC() { return AddAuditAccessAceEx$FUNC_; }

    static final MethodHandle AddAuditAccessAceEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAuditAccessAceEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;II)I",
        AddAuditAccessAceEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAuditAccessAceEx$MH() { return AddAuditAccessAceEx$MH_; }

    static final FunctionDescriptor AddAuditAccessObjectAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddAuditAccessObjectAce$FUNC() { return AddAuditAccessObjectAce$FUNC_; }

    static final MethodHandle AddAuditAccessObjectAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddAuditAccessObjectAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        AddAuditAccessObjectAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddAuditAccessObjectAce$MH() { return AddAuditAccessObjectAce$MH_; }

    static final FunctionDescriptor AddMandatoryAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddMandatoryAce$FUNC() { return AddMandatoryAce$FUNC_; }

    static final MethodHandle AddMandatoryAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddMandatoryAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        AddMandatoryAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddMandatoryAce$MH() { return AddMandatoryAce$MH_; }

    static final FunctionDescriptor AddResourceAttributeAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddResourceAttributeAce$FUNC() { return AddResourceAttributeAce$FUNC_; }

    static final MethodHandle AddResourceAttributeAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddResourceAttributeAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AddResourceAttributeAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddResourceAttributeAce$MH() { return AddResourceAttributeAce$MH_; }

    static final FunctionDescriptor AddScopedPolicyIDAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddScopedPolicyIDAce$FUNC() { return AddScopedPolicyIDAce$FUNC_; }

    static final MethodHandle AddScopedPolicyIDAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddScopedPolicyIDAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        AddScopedPolicyIDAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddScopedPolicyIDAce$MH() { return AddScopedPolicyIDAce$MH_; }

    static final FunctionDescriptor AdjustTokenGroups$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AdjustTokenGroups$FUNC() { return AdjustTokenGroups$FUNC_; }

    static final MethodHandle AdjustTokenGroups$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AdjustTokenGroups",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AdjustTokenGroups$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AdjustTokenGroups$MH() { return AdjustTokenGroups$MH_; }

    static final FunctionDescriptor AdjustTokenPrivileges$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AdjustTokenPrivileges$FUNC() { return AdjustTokenPrivileges$FUNC_; }

    static final MethodHandle AdjustTokenPrivileges$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AdjustTokenPrivileges",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AdjustTokenPrivileges$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AdjustTokenPrivileges$MH() { return AdjustTokenPrivileges$MH_; }

    static final FunctionDescriptor AllocateAndInitializeSid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_BOOL,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AllocateAndInitializeSid$FUNC() { return AllocateAndInitializeSid$FUNC_; }

    static final MethodHandle AllocateAndInitializeSid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AllocateAndInitializeSid",
        "(Ljdk/incubator/foreign/MemoryAddress;BIIIIIIIILjdk/incubator/foreign/MemoryAddress;)I",
        AllocateAndInitializeSid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AllocateAndInitializeSid$MH() { return AllocateAndInitializeSid$MH_; }

    static final FunctionDescriptor AllocateLocallyUniqueId$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AllocateLocallyUniqueId$FUNC() { return AllocateLocallyUniqueId$FUNC_; }

    static final MethodHandle AllocateLocallyUniqueId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AllocateLocallyUniqueId",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        AllocateLocallyUniqueId$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AllocateLocallyUniqueId$MH() { return AllocateLocallyUniqueId$MH_; }

    static final FunctionDescriptor AreAllAccessesGranted$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor AreAllAccessesGranted$FUNC() { return AreAllAccessesGranted$FUNC_; }

    static final MethodHandle AreAllAccessesGranted$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AreAllAccessesGranted",
        "(II)I",
        AreAllAccessesGranted$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AreAllAccessesGranted$MH() { return AreAllAccessesGranted$MH_; }

    static final FunctionDescriptor AreAnyAccessesGranted$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor AreAnyAccessesGranted$FUNC() { return AreAnyAccessesGranted$FUNC_; }

    static final MethodHandle AreAnyAccessesGranted$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AreAnyAccessesGranted",
        "(II)I",
        AreAnyAccessesGranted$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AreAnyAccessesGranted$MH() { return AreAnyAccessesGranted$MH_; }

    static final FunctionDescriptor CheckTokenMembership$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CheckTokenMembership$FUNC() { return CheckTokenMembership$FUNC_; }

    static final MethodHandle CheckTokenMembership$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckTokenMembership",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CheckTokenMembership$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CheckTokenMembership$MH() { return CheckTokenMembership$MH_; }

    static final FunctionDescriptor CheckTokenCapability$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CheckTokenCapability$FUNC() { return CheckTokenCapability$FUNC_; }

    static final MethodHandle CheckTokenCapability$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckTokenCapability",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CheckTokenCapability$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CheckTokenCapability$MH() { return CheckTokenCapability$MH_; }

    static final FunctionDescriptor GetAppContainerAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetAppContainerAce$FUNC() { return GetAppContainerAce$FUNC_; }

    static final MethodHandle GetAppContainerAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAppContainerAce",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetAppContainerAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetAppContainerAce$MH() { return GetAppContainerAce$MH_; }

    static final FunctionDescriptor CheckTokenMembershipEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CheckTokenMembershipEx$FUNC() { return CheckTokenMembershipEx$FUNC_; }

    static final MethodHandle CheckTokenMembershipEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckTokenMembershipEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CheckTokenMembershipEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CheckTokenMembershipEx$MH() { return CheckTokenMembershipEx$MH_; }

    static final FunctionDescriptor ConvertToAutoInheritPrivateObjectSecurity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_BOOL,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ConvertToAutoInheritPrivateObjectSecurity$FUNC() { return ConvertToAutoInheritPrivateObjectSecurity$FUNC_; }

    static final MethodHandle ConvertToAutoInheritPrivateObjectSecurity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ConvertToAutoInheritPrivateObjectSecurity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;BLjdk/incubator/foreign/MemoryAddress;)I",
        ConvertToAutoInheritPrivateObjectSecurity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ConvertToAutoInheritPrivateObjectSecurity$MH() { return ConvertToAutoInheritPrivateObjectSecurity$MH_; }

    static final FunctionDescriptor CopySid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopySid$FUNC() { return CopySid$FUNC_; }

    static final MethodHandle CopySid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopySid",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CopySid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopySid$MH() { return CopySid$MH_; }

    static final FunctionDescriptor CreatePrivateObjectSecurity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePrivateObjectSecurity$FUNC() { return CreatePrivateObjectSecurity$FUNC_; }

    static final MethodHandle CreatePrivateObjectSecurity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePrivateObjectSecurity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreatePrivateObjectSecurity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePrivateObjectSecurity$MH() { return CreatePrivateObjectSecurity$MH_; }

    static final FunctionDescriptor CreatePrivateObjectSecurityEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePrivateObjectSecurityEx$FUNC() { return CreatePrivateObjectSecurityEx$FUNC_; }

    static final MethodHandle CreatePrivateObjectSecurityEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePrivateObjectSecurityEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreatePrivateObjectSecurityEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePrivateObjectSecurityEx$MH() { return CreatePrivateObjectSecurityEx$MH_; }

    static final FunctionDescriptor CreatePrivateObjectSecurityWithMultipleInheritance$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePrivateObjectSecurityWithMultipleInheritance$FUNC() { return CreatePrivateObjectSecurityWithMultipleInheritance$FUNC_; }

    static final MethodHandle CreatePrivateObjectSecurityWithMultipleInheritance$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePrivateObjectSecurityWithMultipleInheritance",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreatePrivateObjectSecurityWithMultipleInheritance$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePrivateObjectSecurityWithMultipleInheritance$MH() { return CreatePrivateObjectSecurityWithMultipleInheritance$MH_; }

    static final FunctionDescriptor CreateRestrictedToken$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateRestrictedToken$FUNC() { return CreateRestrictedToken$FUNC_; }

    static final MethodHandle CreateRestrictedToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateRestrictedToken",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateRestrictedToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateRestrictedToken$MH() { return CreateRestrictedToken$MH_; }

    static final FunctionDescriptor CreateWellKnownSid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateWellKnownSid$FUNC() { return CreateWellKnownSid$FUNC_; }

    static final MethodHandle CreateWellKnownSid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateWellKnownSid",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateWellKnownSid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateWellKnownSid$MH() { return CreateWellKnownSid$MH_; }

    static final FunctionDescriptor EqualDomainSid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EqualDomainSid$FUNC() { return EqualDomainSid$FUNC_; }

    static final MethodHandle EqualDomainSid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EqualDomainSid",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EqualDomainSid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EqualDomainSid$MH() { return EqualDomainSid$MH_; }

    static final FunctionDescriptor DeleteAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteAce$FUNC() { return DeleteAce$FUNC_; }

    static final MethodHandle DeleteAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteAce",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        DeleteAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteAce$MH() { return DeleteAce$MH_; }

    static final FunctionDescriptor DestroyPrivateObjectSecurity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DestroyPrivateObjectSecurity$FUNC() { return DestroyPrivateObjectSecurity$FUNC_; }

    static final MethodHandle DestroyPrivateObjectSecurity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DestroyPrivateObjectSecurity",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DestroyPrivateObjectSecurity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DestroyPrivateObjectSecurity$MH() { return DestroyPrivateObjectSecurity$MH_; }

    static final FunctionDescriptor DuplicateToken$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DuplicateToken$FUNC() { return DuplicateToken$FUNC_; }

    static final MethodHandle DuplicateToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DuplicateToken",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        DuplicateToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DuplicateToken$MH() { return DuplicateToken$MH_; }

    static final FunctionDescriptor DuplicateTokenEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DuplicateTokenEx$FUNC() { return DuplicateTokenEx$FUNC_; }

    static final MethodHandle DuplicateTokenEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DuplicateTokenEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        DuplicateTokenEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DuplicateTokenEx$MH() { return DuplicateTokenEx$MH_; }

    static final FunctionDescriptor EqualPrefixSid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EqualPrefixSid$FUNC() { return EqualPrefixSid$FUNC_; }

    static final MethodHandle EqualPrefixSid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EqualPrefixSid",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EqualPrefixSid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EqualPrefixSid$MH() { return EqualPrefixSid$MH_; }

    static final FunctionDescriptor EqualSid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EqualSid$FUNC() { return EqualSid$FUNC_; }

    static final MethodHandle EqualSid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EqualSid",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EqualSid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EqualSid$MH() { return EqualSid$MH_; }

    static final FunctionDescriptor FindFirstFreeAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FindFirstFreeAce$FUNC() { return FindFirstFreeAce$FUNC_; }

    static final MethodHandle FindFirstFreeAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindFirstFreeAce",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FindFirstFreeAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FindFirstFreeAce$MH() { return FindFirstFreeAce$MH_; }

    static final FunctionDescriptor FreeSid$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FreeSid$FUNC() { return FreeSid$FUNC_; }

    static final MethodHandle FreeSid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeSid",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FreeSid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FreeSid$MH() { return FreeSid$MH_; }

    static final FunctionDescriptor GetAce$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetAce$FUNC() { return GetAce$FUNC_; }

    static final MethodHandle GetAce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAce",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetAce$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetAce$MH() { return GetAce$MH_; }

    static final FunctionDescriptor GetAclInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetAclInformation$FUNC() { return GetAclInformation$FUNC_; }

    static final MethodHandle GetAclInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAclInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        GetAclInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetAclInformation$MH() { return GetAclInformation$MH_; }

    static final FunctionDescriptor GetFileSecurityW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFileSecurityW$FUNC() { return GetFileSecurityW$FUNC_; }

    static final MethodHandle GetFileSecurityW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileSecurityW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetFileSecurityW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFileSecurityW$MH() { return GetFileSecurityW$MH_; }

    static final FunctionDescriptor GetKernelObjectSecurity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetKernelObjectSecurity$FUNC() { return GetKernelObjectSecurity$FUNC_; }

    static final MethodHandle GetKernelObjectSecurity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetKernelObjectSecurity",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetKernelObjectSecurity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetKernelObjectSecurity$MH() { return GetKernelObjectSecurity$MH_; }

    static final FunctionDescriptor GetLengthSid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLengthSid$FUNC() { return GetLengthSid$FUNC_; }

    static final MethodHandle GetLengthSid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLengthSid",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetLengthSid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLengthSid$MH() { return GetLengthSid$MH_; }

    static final FunctionDescriptor GetPrivateObjectSecurity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPrivateObjectSecurity$FUNC() { return GetPrivateObjectSecurity$FUNC_; }

    static final MethodHandle GetPrivateObjectSecurity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPrivateObjectSecurity",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPrivateObjectSecurity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPrivateObjectSecurity$MH() { return GetPrivateObjectSecurity$MH_; }

    static final FunctionDescriptor GetSecurityDescriptorControl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSecurityDescriptorControl$FUNC() { return GetSecurityDescriptorControl$FUNC_; }

    static final MethodHandle GetSecurityDescriptorControl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSecurityDescriptorControl",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSecurityDescriptorControl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSecurityDescriptorControl$MH() { return GetSecurityDescriptorControl$MH_; }

    static final FunctionDescriptor GetSecurityDescriptorDacl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSecurityDescriptorDacl$FUNC() { return GetSecurityDescriptorDacl$FUNC_; }

    static final MethodHandle GetSecurityDescriptorDacl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSecurityDescriptorDacl",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSecurityDescriptorDacl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSecurityDescriptorDacl$MH() { return GetSecurityDescriptorDacl$MH_; }

    static final FunctionDescriptor GetSecurityDescriptorGroup$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSecurityDescriptorGroup$FUNC() { return GetSecurityDescriptorGroup$FUNC_; }

    static final MethodHandle GetSecurityDescriptorGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSecurityDescriptorGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSecurityDescriptorGroup$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSecurityDescriptorGroup$MH() { return GetSecurityDescriptorGroup$MH_; }

    static final FunctionDescriptor GetSecurityDescriptorLength$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSecurityDescriptorLength$FUNC() { return GetSecurityDescriptorLength$FUNC_; }

    static final MethodHandle GetSecurityDescriptorLength$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSecurityDescriptorLength",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSecurityDescriptorLength$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSecurityDescriptorLength$MH() { return GetSecurityDescriptorLength$MH_; }

    static final FunctionDescriptor GetSecurityDescriptorOwner$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSecurityDescriptorOwner$FUNC() { return GetSecurityDescriptorOwner$FUNC_; }

    static final MethodHandle GetSecurityDescriptorOwner$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSecurityDescriptorOwner",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSecurityDescriptorOwner$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSecurityDescriptorOwner$MH() { return GetSecurityDescriptorOwner$MH_; }

    static final FunctionDescriptor GetSecurityDescriptorRMControl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSecurityDescriptorRMControl$FUNC() { return GetSecurityDescriptorRMControl$FUNC_; }

    static final MethodHandle GetSecurityDescriptorRMControl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSecurityDescriptorRMControl",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSecurityDescriptorRMControl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSecurityDescriptorRMControl$MH() { return GetSecurityDescriptorRMControl$MH_; }

    static final FunctionDescriptor GetSecurityDescriptorSacl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSecurityDescriptorSacl$FUNC() { return GetSecurityDescriptorSacl$FUNC_; }

    static final MethodHandle GetSecurityDescriptorSacl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSecurityDescriptorSacl",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSecurityDescriptorSacl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSecurityDescriptorSacl$MH() { return GetSecurityDescriptorSacl$MH_; }

    static final FunctionDescriptor GetSidIdentifierAuthority$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSidIdentifierAuthority$FUNC() { return GetSidIdentifierAuthority$FUNC_; }

    static final MethodHandle GetSidIdentifierAuthority$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSidIdentifierAuthority",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetSidIdentifierAuthority$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSidIdentifierAuthority$MH() { return GetSidIdentifierAuthority$MH_; }

    static final FunctionDescriptor GetSidLengthRequired$FUNC_ = FunctionDescriptor.of(C_INT,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSidLengthRequired$FUNC() { return GetSidLengthRequired$FUNC_; }

    static final MethodHandle GetSidLengthRequired$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSidLengthRequired",
        "(B)I",
        GetSidLengthRequired$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSidLengthRequired$MH() { return GetSidLengthRequired$MH_; }

    static final FunctionDescriptor GetSidSubAuthority$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSidSubAuthority$FUNC() { return GetSidSubAuthority$FUNC_; }

    static final MethodHandle GetSidSubAuthority$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSidSubAuthority",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        GetSidSubAuthority$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSidSubAuthority$MH() { return GetSidSubAuthority$MH_; }

    static final FunctionDescriptor GetSidSubAuthorityCount$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSidSubAuthorityCount$FUNC() { return GetSidSubAuthorityCount$FUNC_; }

    static final MethodHandle GetSidSubAuthorityCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSidSubAuthorityCount",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetSidSubAuthorityCount$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSidSubAuthorityCount$MH() { return GetSidSubAuthorityCount$MH_; }

    static final FunctionDescriptor GetTokenInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTokenInformation$FUNC() { return GetTokenInformation$FUNC_; }

    static final MethodHandle GetTokenInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTokenInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTokenInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTokenInformation$MH() { return GetTokenInformation$MH_; }

    static final FunctionDescriptor GetWindowsAccountDomainSid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetWindowsAccountDomainSid$FUNC() { return GetWindowsAccountDomainSid$FUNC_; }

    static final MethodHandle GetWindowsAccountDomainSid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowsAccountDomainSid",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWindowsAccountDomainSid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetWindowsAccountDomainSid$MH() { return GetWindowsAccountDomainSid$MH_; }

    static final FunctionDescriptor ImpersonateAnonymousToken$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImpersonateAnonymousToken$FUNC() { return ImpersonateAnonymousToken$FUNC_; }

    static final MethodHandle ImpersonateAnonymousToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImpersonateAnonymousToken",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ImpersonateAnonymousToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImpersonateAnonymousToken$MH() { return ImpersonateAnonymousToken$MH_; }

    static final FunctionDescriptor ImpersonateLoggedOnUser$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImpersonateLoggedOnUser$FUNC() { return ImpersonateLoggedOnUser$FUNC_; }

    static final MethodHandle ImpersonateLoggedOnUser$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImpersonateLoggedOnUser",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ImpersonateLoggedOnUser$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImpersonateLoggedOnUser$MH() { return ImpersonateLoggedOnUser$MH_; }

    static final FunctionDescriptor ImpersonateSelf$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ImpersonateSelf$FUNC() { return ImpersonateSelf$FUNC_; }

    static final MethodHandle ImpersonateSelf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ImpersonateSelf",
        "(I)I",
        ImpersonateSelf$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ImpersonateSelf$MH() { return ImpersonateSelf$MH_; }

    static final FunctionDescriptor InitializeAcl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeAcl$FUNC() { return InitializeAcl$FUNC_; }

    static final MethodHandle InitializeAcl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeAcl",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        InitializeAcl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeAcl$MH() { return InitializeAcl$MH_; }

    static final FunctionDescriptor InitializeSecurityDescriptor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeSecurityDescriptor$FUNC() { return InitializeSecurityDescriptor$FUNC_; }

    static final MethodHandle InitializeSecurityDescriptor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeSecurityDescriptor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        InitializeSecurityDescriptor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeSecurityDescriptor$MH() { return InitializeSecurityDescriptor$MH_; }

    static final FunctionDescriptor InitializeSid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitializeSid$FUNC() { return InitializeSid$FUNC_; }

    static final MethodHandle InitializeSid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeSid",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)I",
        InitializeSid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitializeSid$MH() { return InitializeSid$MH_; }

    static final FunctionDescriptor IsTokenRestricted$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsTokenRestricted$FUNC() { return IsTokenRestricted$FUNC_; }

    static final MethodHandle IsTokenRestricted$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsTokenRestricted",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsTokenRestricted$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsTokenRestricted$MH() { return IsTokenRestricted$MH_; }

    static final FunctionDescriptor IsValidAcl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsValidAcl$FUNC() { return IsValidAcl$FUNC_; }

    static final MethodHandle IsValidAcl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsValidAcl",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsValidAcl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsValidAcl$MH() { return IsValidAcl$MH_; }

    static final FunctionDescriptor IsValidSecurityDescriptor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsValidSecurityDescriptor$FUNC() { return IsValidSecurityDescriptor$FUNC_; }

    static final MethodHandle IsValidSecurityDescriptor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsValidSecurityDescriptor",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsValidSecurityDescriptor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsValidSecurityDescriptor$MH() { return IsValidSecurityDescriptor$MH_; }

    static final FunctionDescriptor IsValidSid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsValidSid$FUNC() { return IsValidSid$FUNC_; }

    static final MethodHandle IsValidSid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsValidSid",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsValidSid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsValidSid$MH() { return IsValidSid$MH_; }

    static final FunctionDescriptor IsWellKnownSid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor IsWellKnownSid$FUNC() { return IsWellKnownSid$FUNC_; }

    static final MethodHandle IsWellKnownSid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsWellKnownSid",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IsWellKnownSid$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsWellKnownSid$MH() { return IsWellKnownSid$MH_; }

    static final FunctionDescriptor MakeAbsoluteSD$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MakeAbsoluteSD$FUNC() { return MakeAbsoluteSD$FUNC_; }

    static final MethodHandle MakeAbsoluteSD$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MakeAbsoluteSD",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        MakeAbsoluteSD$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MakeAbsoluteSD$MH() { return MakeAbsoluteSD$MH_; }

    static final FunctionDescriptor MakeSelfRelativeSD$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MakeSelfRelativeSD$FUNC() { return MakeSelfRelativeSD$FUNC_; }

    static final MethodHandle MakeSelfRelativeSD$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MakeSelfRelativeSD",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        MakeSelfRelativeSD$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MakeSelfRelativeSD$MH() { return MakeSelfRelativeSD$MH_; }

    static final FunctionDescriptor MapGenericMask$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor MapGenericMask$FUNC() { return MapGenericMask$FUNC_; }

    static final MethodHandle MapGenericMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapGenericMask",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        MapGenericMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MapGenericMask$MH() { return MapGenericMask$MH_; }

    static final FunctionDescriptor ObjectCloseAuditAlarmW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ObjectCloseAuditAlarmW$FUNC() { return ObjectCloseAuditAlarmW$FUNC_; }

    static final MethodHandle ObjectCloseAuditAlarmW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ObjectCloseAuditAlarmW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ObjectCloseAuditAlarmW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ObjectCloseAuditAlarmW$MH() { return ObjectCloseAuditAlarmW$MH_; }

    static final FunctionDescriptor ObjectDeleteAuditAlarmW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ObjectDeleteAuditAlarmW$FUNC() { return ObjectDeleteAuditAlarmW$FUNC_; }

    static final MethodHandle ObjectDeleteAuditAlarmW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ObjectDeleteAuditAlarmW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ObjectDeleteAuditAlarmW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ObjectDeleteAuditAlarmW$MH() { return ObjectDeleteAuditAlarmW$MH_; }

    static final FunctionDescriptor ObjectOpenAuditAlarmW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ObjectOpenAuditAlarmW$FUNC() { return ObjectOpenAuditAlarmW$FUNC_; }

    static final MethodHandle ObjectOpenAuditAlarmW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ObjectOpenAuditAlarmW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        ObjectOpenAuditAlarmW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ObjectOpenAuditAlarmW$MH() { return ObjectOpenAuditAlarmW$MH_; }

    static final FunctionDescriptor ObjectPrivilegeAuditAlarmW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ObjectPrivilegeAuditAlarmW$FUNC() { return ObjectPrivilegeAuditAlarmW$FUNC_; }

    static final MethodHandle ObjectPrivilegeAuditAlarmW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ObjectPrivilegeAuditAlarmW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        ObjectPrivilegeAuditAlarmW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ObjectPrivilegeAuditAlarmW$MH() { return ObjectPrivilegeAuditAlarmW$MH_; }

    static final FunctionDescriptor PrivilegeCheck$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor PrivilegeCheck$FUNC() { return PrivilegeCheck$FUNC_; }

    static final MethodHandle PrivilegeCheck$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PrivilegeCheck",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        PrivilegeCheck$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PrivilegeCheck$MH() { return PrivilegeCheck$MH_; }

    static final FunctionDescriptor PrivilegedServiceAuditAlarmW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PrivilegedServiceAuditAlarmW$FUNC() { return PrivilegedServiceAuditAlarmW$FUNC_; }

    static final MethodHandle PrivilegedServiceAuditAlarmW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PrivilegedServiceAuditAlarmW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PrivilegedServiceAuditAlarmW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PrivilegedServiceAuditAlarmW$MH() { return PrivilegedServiceAuditAlarmW$MH_; }

    static final FunctionDescriptor QuerySecurityAccessMask$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QuerySecurityAccessMask$FUNC() { return QuerySecurityAccessMask$FUNC_; }

    static final MethodHandle QuerySecurityAccessMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QuerySecurityAccessMask",
        "(ILjdk/incubator/foreign/MemoryAddress;)V",
        QuerySecurityAccessMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QuerySecurityAccessMask$MH() { return QuerySecurityAccessMask$MH_; }

    static final FunctionDescriptor RevertToSelf$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor RevertToSelf$FUNC() { return RevertToSelf$FUNC_; }

    static final MethodHandle RevertToSelf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RevertToSelf",
        "()I",
        RevertToSelf$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RevertToSelf$MH() { return RevertToSelf$MH_; }

    static final FunctionDescriptor SetAclInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetAclInformation$FUNC() { return SetAclInformation$FUNC_; }

    static final MethodHandle SetAclInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetAclInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetAclInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetAclInformation$MH() { return SetAclInformation$MH_; }

    static final FunctionDescriptor SetFileSecurityW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileSecurityW$FUNC() { return SetFileSecurityW$FUNC_; }

    static final MethodHandle SetFileSecurityW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileSecurityW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetFileSecurityW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileSecurityW$MH() { return SetFileSecurityW$MH_; }

    static final FunctionDescriptor SetKernelObjectSecurity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetKernelObjectSecurity$FUNC() { return SetKernelObjectSecurity$FUNC_; }

    static final MethodHandle SetKernelObjectSecurity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetKernelObjectSecurity",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetKernelObjectSecurity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetKernelObjectSecurity$MH() { return SetKernelObjectSecurity$MH_; }

    static final FunctionDescriptor SetPrivateObjectSecurity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetPrivateObjectSecurity$FUNC() { return SetPrivateObjectSecurity$FUNC_; }

    static final MethodHandle SetPrivateObjectSecurity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetPrivateObjectSecurity",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetPrivateObjectSecurity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetPrivateObjectSecurity$MH() { return SetPrivateObjectSecurity$MH_; }

    static final FunctionDescriptor SetPrivateObjectSecurityEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetPrivateObjectSecurityEx$FUNC() { return SetPrivateObjectSecurityEx$FUNC_; }

    static final MethodHandle SetPrivateObjectSecurityEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetPrivateObjectSecurityEx",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetPrivateObjectSecurityEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetPrivateObjectSecurityEx$MH() { return SetPrivateObjectSecurityEx$MH_; }

    static final FunctionDescriptor SetSecurityAccessMask$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSecurityAccessMask$FUNC() { return SetSecurityAccessMask$FUNC_; }

    static final MethodHandle SetSecurityAccessMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSecurityAccessMask",
        "(ILjdk/incubator/foreign/MemoryAddress;)V",
        SetSecurityAccessMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSecurityAccessMask$MH() { return SetSecurityAccessMask$MH_; }

    static final FunctionDescriptor SetSecurityDescriptorControl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSecurityDescriptorControl$FUNC() { return SetSecurityDescriptorControl$FUNC_; }

    static final MethodHandle SetSecurityDescriptorControl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSecurityDescriptorControl",
        "(Ljdk/incubator/foreign/MemoryAddress;SS)I",
        SetSecurityDescriptorControl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSecurityDescriptorControl$MH() { return SetSecurityDescriptorControl$MH_; }

    static final FunctionDescriptor SetSecurityDescriptorDacl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSecurityDescriptorDacl$FUNC() { return SetSecurityDescriptorDacl$FUNC_; }

    static final MethodHandle SetSecurityDescriptorDacl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSecurityDescriptorDacl",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetSecurityDescriptorDacl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSecurityDescriptorDacl$MH() { return SetSecurityDescriptorDacl$MH_; }

    static final FunctionDescriptor SetSecurityDescriptorGroup$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSecurityDescriptorGroup$FUNC() { return SetSecurityDescriptorGroup$FUNC_; }

    static final MethodHandle SetSecurityDescriptorGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSecurityDescriptorGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetSecurityDescriptorGroup$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSecurityDescriptorGroup$MH() { return SetSecurityDescriptorGroup$MH_; }

    static final FunctionDescriptor SetSecurityDescriptorOwner$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSecurityDescriptorOwner$FUNC() { return SetSecurityDescriptorOwner$FUNC_; }

    static final MethodHandle SetSecurityDescriptorOwner$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSecurityDescriptorOwner",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetSecurityDescriptorOwner$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSecurityDescriptorOwner$MH() { return SetSecurityDescriptorOwner$MH_; }

    static final FunctionDescriptor SetSecurityDescriptorRMControl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSecurityDescriptorRMControl$FUNC() { return SetSecurityDescriptorRMControl$FUNC_; }

    static final MethodHandle SetSecurityDescriptorRMControl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSecurityDescriptorRMControl",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetSecurityDescriptorRMControl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSecurityDescriptorRMControl$MH() { return SetSecurityDescriptorRMControl$MH_; }

    static final FunctionDescriptor SetSecurityDescriptorSacl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetSecurityDescriptorSacl$FUNC() { return SetSecurityDescriptorSacl$FUNC_; }

    static final MethodHandle SetSecurityDescriptorSacl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSecurityDescriptorSacl",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetSecurityDescriptorSacl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetSecurityDescriptorSacl$MH() { return SetSecurityDescriptorSacl$MH_; }

    static final FunctionDescriptor SetTokenInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetTokenInformation$FUNC() { return SetTokenInformation$FUNC_; }

    static final MethodHandle SetTokenInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetTokenInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetTokenInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetTokenInformation$MH() { return SetTokenInformation$MH_; }

    static final FunctionDescriptor SetCachedSigningLevel$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetCachedSigningLevel$FUNC() { return SetCachedSigningLevel$FUNC_; }

    static final MethodHandle SetCachedSigningLevel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCachedSigningLevel",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetCachedSigningLevel$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetCachedSigningLevel$MH() { return SetCachedSigningLevel$MH_; }

    static final FunctionDescriptor GetCachedSigningLevel$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCachedSigningLevel$FUNC() { return GetCachedSigningLevel$FUNC_; }

    static final MethodHandle GetCachedSigningLevel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCachedSigningLevel",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCachedSigningLevel$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCachedSigningLevel$MH() { return GetCachedSigningLevel$MH_; }

    static final FunctionDescriptor CveEventWrite$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CveEventWrite$FUNC() { return CveEventWrite$FUNC_; }

    static final MethodHandle CveEventWrite$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CveEventWrite",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CveEventWrite$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CveEventWrite$MH() { return CveEventWrite$MH_; }

    static final FunctionDescriptor DeriveCapabilitySidsFromName$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeriveCapabilitySidsFromName$FUNC() { return DeriveCapabilitySidsFromName$FUNC_; }

    static final MethodHandle DeriveCapabilitySidsFromName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeriveCapabilitySidsFromName",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DeriveCapabilitySidsFromName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeriveCapabilitySidsFromName$MH() { return DeriveCapabilitySidsFromName$MH_; }

    static final FunctionDescriptor CreatePrivateNamespaceW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePrivateNamespaceW$FUNC() { return CreatePrivateNamespaceW$FUNC_; }

    static final MethodHandle CreatePrivateNamespaceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePrivateNamespaceW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreatePrivateNamespaceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePrivateNamespaceW$MH() { return CreatePrivateNamespaceW$MH_; }

    static final FunctionDescriptor OpenPrivateNamespaceW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenPrivateNamespaceW$FUNC() { return OpenPrivateNamespaceW$FUNC_; }

    static final MethodHandle OpenPrivateNamespaceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenPrivateNamespaceW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OpenPrivateNamespaceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenPrivateNamespaceW$MH() { return OpenPrivateNamespaceW$MH_; }

    static final FunctionDescriptor ClosePrivateNamespace$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ClosePrivateNamespace$FUNC() { return ClosePrivateNamespace$FUNC_; }

    static final MethodHandle ClosePrivateNamespace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClosePrivateNamespace",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        ClosePrivateNamespace$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ClosePrivateNamespace$MH() { return ClosePrivateNamespace$MH_; }

    static final FunctionDescriptor CreateBoundaryDescriptorW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateBoundaryDescriptorW$FUNC() { return CreateBoundaryDescriptorW$FUNC_; }

    static final MethodHandle CreateBoundaryDescriptorW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateBoundaryDescriptorW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateBoundaryDescriptorW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateBoundaryDescriptorW$MH() { return CreateBoundaryDescriptorW$MH_; }

    static final FunctionDescriptor AddSIDToBoundaryDescriptor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddSIDToBoundaryDescriptor$FUNC() { return AddSIDToBoundaryDescriptor$FUNC_; }

    static final MethodHandle AddSIDToBoundaryDescriptor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddSIDToBoundaryDescriptor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AddSIDToBoundaryDescriptor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddSIDToBoundaryDescriptor$MH() { return AddSIDToBoundaryDescriptor$MH_; }

    static final FunctionDescriptor DeleteBoundaryDescriptor$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteBoundaryDescriptor$FUNC() { return DeleteBoundaryDescriptor$FUNC_; }

    static final MethodHandle DeleteBoundaryDescriptor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteBoundaryDescriptor",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        DeleteBoundaryDescriptor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteBoundaryDescriptor$MH() { return DeleteBoundaryDescriptor$MH_; }

    static final FunctionDescriptor GetNumaHighestNodeNumber$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumaHighestNodeNumber$FUNC() { return GetNumaHighestNodeNumber$FUNC_; }

    static final MethodHandle GetNumaHighestNodeNumber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumaHighestNodeNumber",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNumaHighestNodeNumber$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumaHighestNodeNumber$MH() { return GetNumaHighestNodeNumber$MH_; }

    static final FunctionDescriptor GetNumaNodeProcessorMaskEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumaNodeProcessorMaskEx$FUNC() { return GetNumaNodeProcessorMaskEx$FUNC_; }

    static final MethodHandle GetNumaNodeProcessorMaskEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumaNodeProcessorMaskEx",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        GetNumaNodeProcessorMaskEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumaNodeProcessorMaskEx$MH() { return GetNumaNodeProcessorMaskEx$MH_; }

    static final FunctionDescriptor GetNumaProximityNodeEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNumaProximityNodeEx$FUNC() { return GetNumaProximityNodeEx$FUNC_; }

    static final MethodHandle GetNumaProximityNodeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumaProximityNodeEx",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetNumaProximityNodeEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNumaProximityNodeEx$MH() { return GetNumaProximityNodeEx$MH_; }

    static final FunctionDescriptor GetProcessGroupAffinity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessGroupAffinity$FUNC() { return GetProcessGroupAffinity$FUNC_; }

    static final MethodHandle GetProcessGroupAffinity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessGroupAffinity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessGroupAffinity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessGroupAffinity$MH() { return GetProcessGroupAffinity$MH_; }

    static final FunctionDescriptor GetThreadGroupAffinity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadGroupAffinity$FUNC() { return GetThreadGroupAffinity$FUNC_; }

    static final MethodHandle GetThreadGroupAffinity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadGroupAffinity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetThreadGroupAffinity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadGroupAffinity$MH() { return GetThreadGroupAffinity$MH_; }

    static final FunctionDescriptor SetThreadGroupAffinity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadGroupAffinity$FUNC() { return SetThreadGroupAffinity$FUNC_; }

    static final MethodHandle SetThreadGroupAffinity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadGroupAffinity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetThreadGroupAffinity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadGroupAffinity$MH() { return SetThreadGroupAffinity$MH_; }

    static final FunctionDescriptor GetAppContainerNamedObjectPath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetAppContainerNamedObjectPath$FUNC() { return GetAppContainerNamedObjectPath$FUNC_; }

    static final MethodHandle GetAppContainerNamedObjectPath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAppContainerNamedObjectPath",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetAppContainerNamedObjectPath$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetAppContainerNamedObjectPath$MH() { return GetAppContainerNamedObjectPath$MH_; }

    static final FunctionDescriptor QueryThreadCycleTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryThreadCycleTime$FUNC() { return QueryThreadCycleTime$FUNC_; }

    static final MethodHandle QueryThreadCycleTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryThreadCycleTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryThreadCycleTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryThreadCycleTime$MH() { return QueryThreadCycleTime$MH_; }

    static final FunctionDescriptor QueryProcessCycleTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryProcessCycleTime$FUNC() { return QueryProcessCycleTime$FUNC_; }

    static final MethodHandle QueryProcessCycleTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryProcessCycleTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryProcessCycleTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryProcessCycleTime$MH() { return QueryProcessCycleTime$MH_; }

    static final FunctionDescriptor QueryIdleProcessorCycleTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryIdleProcessorCycleTime$FUNC() { return QueryIdleProcessorCycleTime$FUNC_; }

    static final MethodHandle QueryIdleProcessorCycleTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryIdleProcessorCycleTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryIdleProcessorCycleTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryIdleProcessorCycleTime$MH() { return QueryIdleProcessorCycleTime$MH_; }

    static final FunctionDescriptor QueryIdleProcessorCycleTimeEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryIdleProcessorCycleTimeEx$FUNC() { return QueryIdleProcessorCycleTimeEx$FUNC_; }

    static final MethodHandle QueryIdleProcessorCycleTimeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryIdleProcessorCycleTimeEx",
        "(SLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryIdleProcessorCycleTimeEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryIdleProcessorCycleTimeEx$MH() { return QueryIdleProcessorCycleTimeEx$MH_; }

    static final FunctionDescriptor QueryInterruptTimePrecise$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryInterruptTimePrecise$FUNC() { return QueryInterruptTimePrecise$FUNC_; }

    static final MethodHandle QueryInterruptTimePrecise$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryInterruptTimePrecise",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        QueryInterruptTimePrecise$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryInterruptTimePrecise$MH() { return QueryInterruptTimePrecise$MH_; }

    static final FunctionDescriptor QueryUnbiasedInterruptTimePrecise$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryUnbiasedInterruptTimePrecise$FUNC() { return QueryUnbiasedInterruptTimePrecise$FUNC_; }

    static final MethodHandle QueryUnbiasedInterruptTimePrecise$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryUnbiasedInterruptTimePrecise",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        QueryUnbiasedInterruptTimePrecise$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryUnbiasedInterruptTimePrecise$MH() { return QueryUnbiasedInterruptTimePrecise$MH_; }

    static final FunctionDescriptor QueryInterruptTime$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryInterruptTime$FUNC() { return QueryInterruptTime$FUNC_; }

    static final MethodHandle QueryInterruptTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryInterruptTime",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        QueryInterruptTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryInterruptTime$MH() { return QueryInterruptTime$MH_; }

    static final FunctionDescriptor QueryUnbiasedInterruptTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryUnbiasedInterruptTime$FUNC() { return QueryUnbiasedInterruptTime$FUNC_; }

    static final MethodHandle QueryUnbiasedInterruptTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryUnbiasedInterruptTime",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryUnbiasedInterruptTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryUnbiasedInterruptTime$MH() { return QueryUnbiasedInterruptTime$MH_; }

    static final FunctionDescriptor QueryAuxiliaryCounterFrequency$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryAuxiliaryCounterFrequency$FUNC() { return QueryAuxiliaryCounterFrequency$FUNC_; }

    static final MethodHandle QueryAuxiliaryCounterFrequency$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryAuxiliaryCounterFrequency",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryAuxiliaryCounterFrequency$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryAuxiliaryCounterFrequency$MH() { return QueryAuxiliaryCounterFrequency$MH_; }

    static final FunctionDescriptor ConvertAuxiliaryCounterToPerformanceCounter$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ConvertAuxiliaryCounterToPerformanceCounter$FUNC() { return ConvertAuxiliaryCounterToPerformanceCounter$FUNC_; }

    static final MethodHandle ConvertAuxiliaryCounterToPerformanceCounter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ConvertAuxiliaryCounterToPerformanceCounter",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ConvertAuxiliaryCounterToPerformanceCounter$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ConvertAuxiliaryCounterToPerformanceCounter$MH() { return ConvertAuxiliaryCounterToPerformanceCounter$MH_; }

    static final FunctionDescriptor ConvertPerformanceCounterToAuxiliaryCounter$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ConvertPerformanceCounterToAuxiliaryCounter$FUNC() { return ConvertPerformanceCounterToAuxiliaryCounter$FUNC_; }

    static final MethodHandle ConvertPerformanceCounterToAuxiliaryCounter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ConvertPerformanceCounterToAuxiliaryCounter",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ConvertPerformanceCounterToAuxiliaryCounter$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ConvertPerformanceCounterToAuxiliaryCounter$MH() { return ConvertPerformanceCounterToAuxiliaryCounter$MH_; }

    static final MemoryLayout _COMMPROP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("wPacketLength"),
        C_SHORT.withName("wPacketVersion"),
        C_INT.withName("dwServiceMask"),
        C_INT.withName("dwReserved1"),
        C_INT.withName("dwMaxTxQueue"),
        C_INT.withName("dwMaxRxQueue"),
        C_INT.withName("dwMaxBaud"),
        C_INT.withName("dwProvSubType"),
        C_INT.withName("dwProvCapabilities"),
        C_INT.withName("dwSettableParams"),
        C_INT.withName("dwSettableBaud"),
        C_SHORT.withName("wSettableData"),
        C_SHORT.withName("wSettableStopParity"),
        C_INT.withName("dwCurrentTxQueue"),
        C_INT.withName("dwCurrentRxQueue"),
        C_INT.withName("dwProvSpec1"),
        C_INT.withName("dwProvSpec2"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("wcProvChar"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_COMMPROP");
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$struct$LAYOUT() { return _COMMPROP$struct$LAYOUT_; }

    static final MemoryLayout _COMMPROP$wPacketLength$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$wPacketLength$LAYOUT() { return _COMMPROP$wPacketLength$LAYOUT_; }

    static final VarHandle _COMMPROP$wPacketLength$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wPacketLength"));
    public static java.lang.invoke.VarHandle _COMMPROP$wPacketLength$VH() { return _COMMPROP$wPacketLength$VH_; }

    static final MemoryLayout _COMMPROP$wPacketVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$wPacketVersion$LAYOUT() { return _COMMPROP$wPacketVersion$LAYOUT_; }

    static final VarHandle _COMMPROP$wPacketVersion$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wPacketVersion"));
    public static java.lang.invoke.VarHandle _COMMPROP$wPacketVersion$VH() { return _COMMPROP$wPacketVersion$VH_; }

    static final MemoryLayout _COMMPROP$dwServiceMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwServiceMask$LAYOUT() { return _COMMPROP$dwServiceMask$LAYOUT_; }

    static final VarHandle _COMMPROP$dwServiceMask$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwServiceMask"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwServiceMask$VH() { return _COMMPROP$dwServiceMask$VH_; }

    static final MemoryLayout _COMMPROP$dwReserved1$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwReserved1$LAYOUT() { return _COMMPROP$dwReserved1$LAYOUT_; }

    static final VarHandle _COMMPROP$dwReserved1$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved1"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwReserved1$VH() { return _COMMPROP$dwReserved1$VH_; }

    static final MemoryLayout _COMMPROP$dwMaxTxQueue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwMaxTxQueue$LAYOUT() { return _COMMPROP$dwMaxTxQueue$LAYOUT_; }

    static final VarHandle _COMMPROP$dwMaxTxQueue$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMaxTxQueue"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwMaxTxQueue$VH() { return _COMMPROP$dwMaxTxQueue$VH_; }

    static final MemoryLayout _COMMPROP$dwMaxRxQueue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwMaxRxQueue$LAYOUT() { return _COMMPROP$dwMaxRxQueue$LAYOUT_; }

    static final VarHandle _COMMPROP$dwMaxRxQueue$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMaxRxQueue"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwMaxRxQueue$VH() { return _COMMPROP$dwMaxRxQueue$VH_; }

    static final MemoryLayout _COMMPROP$dwMaxBaud$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwMaxBaud$LAYOUT() { return _COMMPROP$dwMaxBaud$LAYOUT_; }

    static final VarHandle _COMMPROP$dwMaxBaud$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMaxBaud"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwMaxBaud$VH() { return _COMMPROP$dwMaxBaud$VH_; }

    static final MemoryLayout _COMMPROP$dwProvSubType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwProvSubType$LAYOUT() { return _COMMPROP$dwProvSubType$LAYOUT_; }

    static final VarHandle _COMMPROP$dwProvSubType$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProvSubType"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwProvSubType$VH() { return _COMMPROP$dwProvSubType$VH_; }

    static final MemoryLayout _COMMPROP$dwProvCapabilities$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwProvCapabilities$LAYOUT() { return _COMMPROP$dwProvCapabilities$LAYOUT_; }

    static final VarHandle _COMMPROP$dwProvCapabilities$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProvCapabilities"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwProvCapabilities$VH() { return _COMMPROP$dwProvCapabilities$VH_; }

    static final MemoryLayout _COMMPROP$dwSettableParams$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwSettableParams$LAYOUT() { return _COMMPROP$dwSettableParams$LAYOUT_; }

    static final VarHandle _COMMPROP$dwSettableParams$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSettableParams"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwSettableParams$VH() { return _COMMPROP$dwSettableParams$VH_; }

    static final MemoryLayout _COMMPROP$dwSettableBaud$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwSettableBaud$LAYOUT() { return _COMMPROP$dwSettableBaud$LAYOUT_; }

    static final VarHandle _COMMPROP$dwSettableBaud$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSettableBaud"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwSettableBaud$VH() { return _COMMPROP$dwSettableBaud$VH_; }

    static final MemoryLayout _COMMPROP$wSettableData$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$wSettableData$LAYOUT() { return _COMMPROP$wSettableData$LAYOUT_; }

    static final VarHandle _COMMPROP$wSettableData$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wSettableData"));
    public static java.lang.invoke.VarHandle _COMMPROP$wSettableData$VH() { return _COMMPROP$wSettableData$VH_; }

    static final MemoryLayout _COMMPROP$wSettableStopParity$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$wSettableStopParity$LAYOUT() { return _COMMPROP$wSettableStopParity$LAYOUT_; }

    static final VarHandle _COMMPROP$wSettableStopParity$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wSettableStopParity"));
    public static java.lang.invoke.VarHandle _COMMPROP$wSettableStopParity$VH() { return _COMMPROP$wSettableStopParity$VH_; }

    static final MemoryLayout _COMMPROP$dwCurrentTxQueue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwCurrentTxQueue$LAYOUT() { return _COMMPROP$dwCurrentTxQueue$LAYOUT_; }

    static final VarHandle _COMMPROP$dwCurrentTxQueue$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCurrentTxQueue"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwCurrentTxQueue$VH() { return _COMMPROP$dwCurrentTxQueue$VH_; }

    static final MemoryLayout _COMMPROP$dwCurrentRxQueue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwCurrentRxQueue$LAYOUT() { return _COMMPROP$dwCurrentRxQueue$LAYOUT_; }

    static final VarHandle _COMMPROP$dwCurrentRxQueue$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCurrentRxQueue"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwCurrentRxQueue$VH() { return _COMMPROP$dwCurrentRxQueue$VH_; }

    static final MemoryLayout _COMMPROP$dwProvSpec1$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwProvSpec1$LAYOUT() { return _COMMPROP$dwProvSpec1$LAYOUT_; }

    static final VarHandle _COMMPROP$dwProvSpec1$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProvSpec1"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwProvSpec1$VH() { return _COMMPROP$dwProvSpec1$VH_; }

    static final MemoryLayout _COMMPROP$dwProvSpec2$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMPROP$dwProvSpec2$LAYOUT() { return _COMMPROP$dwProvSpec2$LAYOUT_; }

    static final VarHandle _COMMPROP$dwProvSpec2$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProvSpec2"));
    public static java.lang.invoke.VarHandle _COMMPROP$dwProvSpec2$VH() { return _COMMPROP$dwProvSpec2$VH_; }

    static final MemoryLayout _COMSTAT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT,
        C_INT.withName("cbInQue"),
        C_INT.withName("cbOutQue")
    ).withName("_COMSTAT");
    public static jdk.incubator.foreign.MemoryLayout _COMSTAT$struct$LAYOUT() { return _COMSTAT$struct$LAYOUT_; }

    static final MemoryLayout _COMSTAT$cbInQue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMSTAT$cbInQue$LAYOUT() { return _COMSTAT$cbInQue$LAYOUT_; }

    static final VarHandle _COMSTAT$cbInQue$VH_ = _COMSTAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbInQue"));
    public static java.lang.invoke.VarHandle _COMSTAT$cbInQue$VH() { return _COMSTAT$cbInQue$VH_; }

    static final MemoryLayout _COMSTAT$cbOutQue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMSTAT$cbOutQue$LAYOUT() { return _COMSTAT$cbOutQue$LAYOUT_; }

    static final VarHandle _COMSTAT$cbOutQue$VH_ = _COMSTAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbOutQue"));
    public static java.lang.invoke.VarHandle _COMSTAT$cbOutQue$VH() { return _COMSTAT$cbOutQue$VH_; }

    static final MemoryLayout _DCB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("DCBlength"),
        C_INT.withName("BaudRate"),
        C_INT,
        C_SHORT.withName("wReserved"),
        C_SHORT.withName("XonLim"),
        C_SHORT.withName("XoffLim"),
        C_BOOL.withName("ByteSize"),
        C_BOOL.withName("Parity"),
        C_BOOL.withName("StopBits"),
        C_BOOL.withName("XonChar"),
        C_BOOL.withName("XoffChar"),
        C_BOOL.withName("ErrorChar"),
        C_BOOL.withName("EofChar"),
        C_BOOL.withName("EvtChar"),
        C_SHORT.withName("wReserved1")
    ).withName("_DCB");
    public static jdk.incubator.foreign.MemoryLayout _DCB$struct$LAYOUT() { return _DCB$struct$LAYOUT_; }

    static final MemoryLayout _DCB$DCBlength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DCB$DCBlength$LAYOUT() { return _DCB$DCBlength$LAYOUT_; }

    static final VarHandle _DCB$DCBlength$VH_ = _DCB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DCBlength"));
    public static java.lang.invoke.VarHandle _DCB$DCBlength$VH() { return _DCB$DCBlength$VH_; }

    static final MemoryLayout _DCB$BaudRate$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _DCB$BaudRate$LAYOUT() { return _DCB$BaudRate$LAYOUT_; }

    static final VarHandle _DCB$BaudRate$VH_ = _DCB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaudRate"));
    public static java.lang.invoke.VarHandle _DCB$BaudRate$VH() { return _DCB$BaudRate$VH_; }

    static final MemoryLayout _DCB$wReserved$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _DCB$wReserved$LAYOUT() { return _DCB$wReserved$LAYOUT_; }

    static final VarHandle _DCB$wReserved$VH_ = _DCB$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wReserved"));
    public static java.lang.invoke.VarHandle _DCB$wReserved$VH() { return _DCB$wReserved$VH_; }

    static final MemoryLayout _DCB$XonLim$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _DCB$XonLim$LAYOUT() { return _DCB$XonLim$LAYOUT_; }

    static final VarHandle _DCB$XonLim$VH_ = _DCB$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("XonLim"));
    public static java.lang.invoke.VarHandle _DCB$XonLim$VH() { return _DCB$XonLim$VH_; }

    static final MemoryLayout _DCB$XoffLim$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _DCB$XoffLim$LAYOUT() { return _DCB$XoffLim$LAYOUT_; }

    static final VarHandle _DCB$XoffLim$VH_ = _DCB$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("XoffLim"));
    public static java.lang.invoke.VarHandle _DCB$XoffLim$VH() { return _DCB$XoffLim$VH_; }

    static final MemoryLayout _DCB$ByteSize$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _DCB$ByteSize$LAYOUT() { return _DCB$ByteSize$LAYOUT_; }

    static final VarHandle _DCB$ByteSize$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ByteSize"));
    public static java.lang.invoke.VarHandle _DCB$ByteSize$VH() { return _DCB$ByteSize$VH_; }

    static final MemoryLayout _DCB$Parity$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _DCB$Parity$LAYOUT() { return _DCB$Parity$LAYOUT_; }

    static final VarHandle _DCB$Parity$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Parity"));
    public static java.lang.invoke.VarHandle _DCB$Parity$VH() { return _DCB$Parity$VH_; }

    static final MemoryLayout _DCB$StopBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _DCB$StopBits$LAYOUT() { return _DCB$StopBits$LAYOUT_; }

    static final VarHandle _DCB$StopBits$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StopBits"));
    public static java.lang.invoke.VarHandle _DCB$StopBits$VH() { return _DCB$StopBits$VH_; }

    static final MemoryLayout _DCB$XonChar$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _DCB$XonChar$LAYOUT() { return _DCB$XonChar$LAYOUT_; }

    static final VarHandle _DCB$XonChar$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("XonChar"));
    public static java.lang.invoke.VarHandle _DCB$XonChar$VH() { return _DCB$XonChar$VH_; }

    static final MemoryLayout _DCB$XoffChar$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _DCB$XoffChar$LAYOUT() { return _DCB$XoffChar$LAYOUT_; }

    static final VarHandle _DCB$XoffChar$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("XoffChar"));
    public static java.lang.invoke.VarHandle _DCB$XoffChar$VH() { return _DCB$XoffChar$VH_; }

    static final MemoryLayout _DCB$ErrorChar$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _DCB$ErrorChar$LAYOUT() { return _DCB$ErrorChar$LAYOUT_; }

    static final VarHandle _DCB$ErrorChar$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ErrorChar"));
    public static java.lang.invoke.VarHandle _DCB$ErrorChar$VH() { return _DCB$ErrorChar$VH_; }

    static final MemoryLayout _DCB$EofChar$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _DCB$EofChar$LAYOUT() { return _DCB$EofChar$LAYOUT_; }

    static final VarHandle _DCB$EofChar$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EofChar"));
    public static java.lang.invoke.VarHandle _DCB$EofChar$VH() { return _DCB$EofChar$VH_; }

    static final MemoryLayout _DCB$EvtChar$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _DCB$EvtChar$LAYOUT() { return _DCB$EvtChar$LAYOUT_; }

    static final VarHandle _DCB$EvtChar$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EvtChar"));
    public static java.lang.invoke.VarHandle _DCB$EvtChar$VH() { return _DCB$EvtChar$VH_; }

    static final MemoryLayout _DCB$wReserved1$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _DCB$wReserved1$LAYOUT() { return _DCB$wReserved1$LAYOUT_; }

    static final VarHandle _DCB$wReserved1$VH_ = _DCB$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wReserved1"));
    public static java.lang.invoke.VarHandle _DCB$wReserved1$VH() { return _DCB$wReserved1$VH_; }

    static final MemoryLayout _COMMTIMEOUTS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ReadIntervalTimeout"),
        C_INT.withName("ReadTotalTimeoutMultiplier"),
        C_INT.withName("ReadTotalTimeoutConstant"),
        C_INT.withName("WriteTotalTimeoutMultiplier"),
        C_INT.withName("WriteTotalTimeoutConstant")
    ).withName("_COMMTIMEOUTS");
    public static jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$struct$LAYOUT() { return _COMMTIMEOUTS$struct$LAYOUT_; }

    static final MemoryLayout _COMMTIMEOUTS$ReadIntervalTimeout$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$ReadIntervalTimeout$LAYOUT() { return _COMMTIMEOUTS$ReadIntervalTimeout$LAYOUT_; }

    static final VarHandle _COMMTIMEOUTS$ReadIntervalTimeout$VH_ = _COMMTIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReadIntervalTimeout"));
    public static java.lang.invoke.VarHandle _COMMTIMEOUTS$ReadIntervalTimeout$VH() { return _COMMTIMEOUTS$ReadIntervalTimeout$VH_; }

    static final MemoryLayout _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$LAYOUT() { return _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$LAYOUT_; }

    static final VarHandle _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$VH_ = _COMMTIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReadTotalTimeoutMultiplier"));
    public static java.lang.invoke.VarHandle _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$VH() { return _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$VH_; }

    static final MemoryLayout _COMMTIMEOUTS$ReadTotalTimeoutConstant$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$ReadTotalTimeoutConstant$LAYOUT() { return _COMMTIMEOUTS$ReadTotalTimeoutConstant$LAYOUT_; }

    static final VarHandle _COMMTIMEOUTS$ReadTotalTimeoutConstant$VH_ = _COMMTIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReadTotalTimeoutConstant"));
    public static java.lang.invoke.VarHandle _COMMTIMEOUTS$ReadTotalTimeoutConstant$VH() { return _COMMTIMEOUTS$ReadTotalTimeoutConstant$VH_; }

    static final MemoryLayout _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$LAYOUT() { return _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$LAYOUT_; }

    static final VarHandle _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$VH_ = _COMMTIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WriteTotalTimeoutMultiplier"));
    public static java.lang.invoke.VarHandle _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$VH() { return _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$VH_; }

    static final MemoryLayout _COMMTIMEOUTS$WriteTotalTimeoutConstant$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$WriteTotalTimeoutConstant$LAYOUT() { return _COMMTIMEOUTS$WriteTotalTimeoutConstant$LAYOUT_; }

    static final VarHandle _COMMTIMEOUTS$WriteTotalTimeoutConstant$VH_ = _COMMTIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WriteTotalTimeoutConstant"));
    public static java.lang.invoke.VarHandle _COMMTIMEOUTS$WriteTotalTimeoutConstant$VH() { return _COMMTIMEOUTS$WriteTotalTimeoutConstant$VH_; }

    static final MemoryLayout _COMMCONFIG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwSize"),
        C_SHORT.withName("wVersion"),
        C_SHORT.withName("wReserved"),
        MemoryLayout.ofStruct(
            C_INT.withName("DCBlength"),
            C_INT.withName("BaudRate"),
            C_INT,
            C_SHORT.withName("wReserved"),
            C_SHORT.withName("XonLim"),
            C_SHORT.withName("XoffLim"),
            C_BOOL.withName("ByteSize"),
            C_BOOL.withName("Parity"),
            C_BOOL.withName("StopBits"),
            C_BOOL.withName("XonChar"),
            C_BOOL.withName("XoffChar"),
            C_BOOL.withName("ErrorChar"),
            C_BOOL.withName("EofChar"),
            C_BOOL.withName("EvtChar"),
            C_SHORT.withName("wReserved1")
        ).withName("dcb"),
        C_INT.withName("dwProviderSubType"),
        C_INT.withName("dwProviderOffset"),
        C_INT.withName("dwProviderSize"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("wcProviderData"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_COMMCONFIG");
    public static jdk.incubator.foreign.MemoryLayout _COMMCONFIG$struct$LAYOUT() { return _COMMCONFIG$struct$LAYOUT_; }

    static final MemoryLayout _COMMCONFIG$dwSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMCONFIG$dwSize$LAYOUT() { return _COMMCONFIG$dwSize$LAYOUT_; }

    static final VarHandle _COMMCONFIG$dwSize$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    public static java.lang.invoke.VarHandle _COMMCONFIG$dwSize$VH() { return _COMMCONFIG$dwSize$VH_; }

    static final MemoryLayout _COMMCONFIG$wVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _COMMCONFIG$wVersion$LAYOUT() { return _COMMCONFIG$wVersion$LAYOUT_; }

    static final VarHandle _COMMCONFIG$wVersion$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wVersion"));
    public static java.lang.invoke.VarHandle _COMMCONFIG$wVersion$VH() { return _COMMCONFIG$wVersion$VH_; }

    static final MemoryLayout _COMMCONFIG$wReserved$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _COMMCONFIG$wReserved$LAYOUT() { return _COMMCONFIG$wReserved$LAYOUT_; }

    static final VarHandle _COMMCONFIG$wReserved$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wReserved"));
    public static java.lang.invoke.VarHandle _COMMCONFIG$wReserved$VH() { return _COMMCONFIG$wReserved$VH_; }

    static final MemoryLayout _COMMCONFIG$dwProviderSubType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMCONFIG$dwProviderSubType$LAYOUT() { return _COMMCONFIG$dwProviderSubType$LAYOUT_; }

    static final VarHandle _COMMCONFIG$dwProviderSubType$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProviderSubType"));
    public static java.lang.invoke.VarHandle _COMMCONFIG$dwProviderSubType$VH() { return _COMMCONFIG$dwProviderSubType$VH_; }

    static final MemoryLayout _COMMCONFIG$dwProviderOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMCONFIG$dwProviderOffset$LAYOUT() { return _COMMCONFIG$dwProviderOffset$LAYOUT_; }

    static final VarHandle _COMMCONFIG$dwProviderOffset$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProviderOffset"));
    public static java.lang.invoke.VarHandle _COMMCONFIG$dwProviderOffset$VH() { return _COMMCONFIG$dwProviderOffset$VH_; }

    static final MemoryLayout _COMMCONFIG$dwProviderSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMMCONFIG$dwProviderSize$LAYOUT() { return _COMMCONFIG$dwProviderSize$LAYOUT_; }

    static final VarHandle _COMMCONFIG$dwProviderSize$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProviderSize"));
    public static java.lang.invoke.VarHandle _COMMCONFIG$dwProviderSize$VH() { return _COMMCONFIG$dwProviderSize$VH_; }

    static final MemoryLayout _MEMORYSTATUS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwLength"),
        C_INT.withName("dwMemoryLoad"),
        C_LONGLONG.withName("dwTotalPhys"),
        C_LONGLONG.withName("dwAvailPhys"),
        C_LONGLONG.withName("dwTotalPageFile"),
        C_LONGLONG.withName("dwAvailPageFile"),
        C_LONGLONG.withName("dwTotalVirtual"),
        C_LONGLONG.withName("dwAvailVirtual")
    ).withName("_MEMORYSTATUS");
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$struct$LAYOUT() { return _MEMORYSTATUS$struct$LAYOUT_; }

    static final MemoryLayout _MEMORYSTATUS$dwLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwLength$LAYOUT() { return _MEMORYSTATUS$dwLength$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwLength$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwLength"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUS$dwLength$VH() { return _MEMORYSTATUS$dwLength$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwMemoryLoad$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwMemoryLoad$LAYOUT() { return _MEMORYSTATUS$dwMemoryLoad$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwMemoryLoad$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMemoryLoad"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUS$dwMemoryLoad$VH() { return _MEMORYSTATUS$dwMemoryLoad$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwTotalPhys$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwTotalPhys$LAYOUT() { return _MEMORYSTATUS$dwTotalPhys$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwTotalPhys$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwTotalPhys"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUS$dwTotalPhys$VH() { return _MEMORYSTATUS$dwTotalPhys$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwAvailPhys$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwAvailPhys$LAYOUT() { return _MEMORYSTATUS$dwAvailPhys$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwAvailPhys$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwAvailPhys"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUS$dwAvailPhys$VH() { return _MEMORYSTATUS$dwAvailPhys$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwTotalPageFile$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwTotalPageFile$LAYOUT() { return _MEMORYSTATUS$dwTotalPageFile$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwTotalPageFile$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwTotalPageFile"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUS$dwTotalPageFile$VH() { return _MEMORYSTATUS$dwTotalPageFile$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwAvailPageFile$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwAvailPageFile$LAYOUT() { return _MEMORYSTATUS$dwAvailPageFile$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwAvailPageFile$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwAvailPageFile"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUS$dwAvailPageFile$VH() { return _MEMORYSTATUS$dwAvailPageFile$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwTotalVirtual$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwTotalVirtual$LAYOUT() { return _MEMORYSTATUS$dwTotalVirtual$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwTotalVirtual$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwTotalVirtual"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUS$dwTotalVirtual$VH() { return _MEMORYSTATUS$dwTotalVirtual$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwAvailVirtual$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwAvailVirtual$LAYOUT() { return _MEMORYSTATUS$dwAvailVirtual$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwAvailVirtual$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwAvailVirtual"));
    public static java.lang.invoke.VarHandle _MEMORYSTATUS$dwAvailVirtual$VH() { return _MEMORYSTATUS$dwAvailVirtual$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwSize"),
        C_INT.withName("dwProcessorArchitecture"),
        C_INT.withName("dwThreadID"),
        C_INT.withName("dwReserved0"),
        C_LONGLONG.withName("lpExceptionAddress"),
        C_LONGLONG.withName("lpExceptionRecord"),
        C_LONGLONG.withName("lpContextRecord")
    ).withName("_JIT_DEBUG_INFO");
    public static jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$struct$LAYOUT() { return _JIT_DEBUG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _JIT_DEBUG_INFO$dwSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$dwSize$LAYOUT() { return _JIT_DEBUG_INFO$dwSize$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$dwSize$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    public static java.lang.invoke.VarHandle _JIT_DEBUG_INFO$dwSize$VH() { return _JIT_DEBUG_INFO$dwSize$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$dwProcessorArchitecture$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$dwProcessorArchitecture$LAYOUT() { return _JIT_DEBUG_INFO$dwProcessorArchitecture$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$dwProcessorArchitecture$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProcessorArchitecture"));
    public static java.lang.invoke.VarHandle _JIT_DEBUG_INFO$dwProcessorArchitecture$VH() { return _JIT_DEBUG_INFO$dwProcessorArchitecture$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$dwThreadID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$dwThreadID$LAYOUT() { return _JIT_DEBUG_INFO$dwThreadID$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$dwThreadID$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwThreadID"));
    public static java.lang.invoke.VarHandle _JIT_DEBUG_INFO$dwThreadID$VH() { return _JIT_DEBUG_INFO$dwThreadID$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$dwReserved0$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$dwReserved0$LAYOUT() { return _JIT_DEBUG_INFO$dwReserved0$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$dwReserved0$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved0"));
    public static java.lang.invoke.VarHandle _JIT_DEBUG_INFO$dwReserved0$VH() { return _JIT_DEBUG_INFO$dwReserved0$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$lpExceptionAddress$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$lpExceptionAddress$LAYOUT() { return _JIT_DEBUG_INFO$lpExceptionAddress$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$lpExceptionAddress$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpExceptionAddress"));
    public static java.lang.invoke.VarHandle _JIT_DEBUG_INFO$lpExceptionAddress$VH() { return _JIT_DEBUG_INFO$lpExceptionAddress$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$lpExceptionRecord$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$lpExceptionRecord$LAYOUT() { return _JIT_DEBUG_INFO$lpExceptionRecord$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$lpExceptionRecord$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpExceptionRecord"));
    public static java.lang.invoke.VarHandle _JIT_DEBUG_INFO$lpExceptionRecord$VH() { return _JIT_DEBUG_INFO$lpExceptionRecord$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$lpContextRecord$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$lpContextRecord$LAYOUT() { return _JIT_DEBUG_INFO$lpContextRecord$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$lpContextRecord$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpContextRecord"));
    public static java.lang.invoke.VarHandle _JIT_DEBUG_INFO$lpContextRecord$VH() { return _JIT_DEBUG_INFO$lpContextRecord$VH_; }

    static final MemoryLayout _OFSTRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("cBytes"),
        C_BOOL.withName("fFixedDisk"),
        C_SHORT.withName("nErrCode"),
        C_SHORT.withName("Reserved1"),
        C_SHORT.withName("Reserved2"),
        MemoryLayout.ofSequence(128, C_BOOL).withName("szPathName")
    ).withName("_OFSTRUCT");
    public static jdk.incubator.foreign.MemoryLayout _OFSTRUCT$struct$LAYOUT() { return _OFSTRUCT$struct$LAYOUT_; }

    static final MemoryLayout _OFSTRUCT$cBytes$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _OFSTRUCT$cBytes$LAYOUT() { return _OFSTRUCT$cBytes$LAYOUT_; }

    static final VarHandle _OFSTRUCT$cBytes$VH_ = _OFSTRUCT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cBytes"));
    public static java.lang.invoke.VarHandle _OFSTRUCT$cBytes$VH() { return _OFSTRUCT$cBytes$VH_; }

    static final MemoryLayout _OFSTRUCT$fFixedDisk$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _OFSTRUCT$fFixedDisk$LAYOUT() { return _OFSTRUCT$fFixedDisk$LAYOUT_; }

    static final VarHandle _OFSTRUCT$fFixedDisk$VH_ = _OFSTRUCT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("fFixedDisk"));
    public static java.lang.invoke.VarHandle _OFSTRUCT$fFixedDisk$VH() { return _OFSTRUCT$fFixedDisk$VH_; }

    static final MemoryLayout _OFSTRUCT$nErrCode$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OFSTRUCT$nErrCode$LAYOUT() { return _OFSTRUCT$nErrCode$LAYOUT_; }

    static final VarHandle _OFSTRUCT$nErrCode$VH_ = _OFSTRUCT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nErrCode"));
    public static java.lang.invoke.VarHandle _OFSTRUCT$nErrCode$VH() { return _OFSTRUCT$nErrCode$VH_; }

    static final MemoryLayout _OFSTRUCT$Reserved1$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OFSTRUCT$Reserved1$LAYOUT() { return _OFSTRUCT$Reserved1$LAYOUT_; }

    static final VarHandle _OFSTRUCT$Reserved1$VH_ = _OFSTRUCT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    public static java.lang.invoke.VarHandle _OFSTRUCT$Reserved1$VH() { return _OFSTRUCT$Reserved1$VH_; }

    static final MemoryLayout _OFSTRUCT$Reserved2$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OFSTRUCT$Reserved2$LAYOUT() { return _OFSTRUCT$Reserved2$LAYOUT_; }

    static final VarHandle _OFSTRUCT$Reserved2$VH_ = _OFSTRUCT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    public static java.lang.invoke.VarHandle _OFSTRUCT$Reserved2$VH() { return _OFSTRUCT$Reserved2$VH_; }

    static final FunctionDescriptor WinMain$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WinMain$FUNC() { return WinMain$FUNC_; }

    static final MethodHandle WinMain$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WinMain",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        WinMain$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WinMain$MH() { return WinMain$MH_; }

    static final FunctionDescriptor wWinMain$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor wWinMain$FUNC() { return wWinMain$FUNC_; }

    static final MethodHandle wWinMain$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wWinMain",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        wWinMain$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle wWinMain$MH() { return wWinMain$MH_; }

    static final FunctionDescriptor GlobalAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalAlloc$FUNC() { return GlobalAlloc$FUNC_; }

    static final MethodHandle GlobalAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalAlloc",
        "(IJ)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalAlloc$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalAlloc$MH() { return GlobalAlloc$MH_; }

    static final FunctionDescriptor GlobalReAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalReAlloc$FUNC() { return GlobalReAlloc$FUNC_; }

    static final MethodHandle GlobalReAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalReAlloc",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalReAlloc$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalReAlloc$MH() { return GlobalReAlloc$MH_; }

    static final FunctionDescriptor GlobalSize$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalSize$FUNC() { return GlobalSize$FUNC_; }

    static final MethodHandle GlobalSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalSize",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        GlobalSize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalSize$MH() { return GlobalSize$MH_; }

    static final FunctionDescriptor GlobalUnlock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalUnlock$FUNC() { return GlobalUnlock$FUNC_; }

    static final MethodHandle GlobalUnlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalUnlock",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GlobalUnlock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalUnlock$MH() { return GlobalUnlock$MH_; }

    static final FunctionDescriptor GlobalLock$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalLock$FUNC() { return GlobalLock$FUNC_; }

    static final MethodHandle GlobalLock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalLock",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalLock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalLock$MH() { return GlobalLock$MH_; }

    static final FunctionDescriptor GlobalFlags$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalFlags$FUNC() { return GlobalFlags$FUNC_; }

    static final MethodHandle GlobalFlags$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalFlags",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GlobalFlags$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalFlags$MH() { return GlobalFlags$MH_; }

    static final FunctionDescriptor GlobalHandle$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalHandle$FUNC() { return GlobalHandle$FUNC_; }

    static final MethodHandle GlobalHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalHandle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalHandle$MH() { return GlobalHandle$MH_; }

    static final FunctionDescriptor GlobalFree$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalFree$FUNC() { return GlobalFree$FUNC_; }

    static final MethodHandle GlobalFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalFree$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalFree$MH() { return GlobalFree$MH_; }

    static final FunctionDescriptor GlobalCompact$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalCompact$FUNC() { return GlobalCompact$FUNC_; }

    static final MethodHandle GlobalCompact$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalCompact",
        "(I)J",
        GlobalCompact$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalCompact$MH() { return GlobalCompact$MH_; }

    static final FunctionDescriptor GlobalFix$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalFix$FUNC() { return GlobalFix$FUNC_; }

    static final MethodHandle GlobalFix$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalFix",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GlobalFix$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalFix$MH() { return GlobalFix$MH_; }

    static final FunctionDescriptor GlobalUnfix$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalUnfix$FUNC() { return GlobalUnfix$FUNC_; }

    static final MethodHandle GlobalUnfix$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalUnfix",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GlobalUnfix$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalUnfix$MH() { return GlobalUnfix$MH_; }

    static final FunctionDescriptor GlobalWire$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalWire$FUNC() { return GlobalWire$FUNC_; }

    static final MethodHandle GlobalWire$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalWire",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalWire$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalWire$MH() { return GlobalWire$MH_; }

    static final FunctionDescriptor GlobalUnWire$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalUnWire$FUNC() { return GlobalUnWire$FUNC_; }

    static final MethodHandle GlobalUnWire$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalUnWire",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GlobalUnWire$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalUnWire$MH() { return GlobalUnWire$MH_; }

    static final FunctionDescriptor GlobalMemoryStatus$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalMemoryStatus$FUNC() { return GlobalMemoryStatus$FUNC_; }

    static final MethodHandle GlobalMemoryStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalMemoryStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GlobalMemoryStatus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalMemoryStatus$MH() { return GlobalMemoryStatus$MH_; }

    static final FunctionDescriptor LocalAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalAlloc$FUNC() { return LocalAlloc$FUNC_; }

    static final MethodHandle LocalAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalAlloc",
        "(IJ)Ljdk/incubator/foreign/MemoryAddress;",
        LocalAlloc$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalAlloc$MH() { return LocalAlloc$MH_; }

    static final FunctionDescriptor LocalReAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalReAlloc$FUNC() { return LocalReAlloc$FUNC_; }

    static final MethodHandle LocalReAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalReAlloc",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)Ljdk/incubator/foreign/MemoryAddress;",
        LocalReAlloc$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalReAlloc$MH() { return LocalReAlloc$MH_; }

    static final FunctionDescriptor LocalLock$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalLock$FUNC() { return LocalLock$FUNC_; }

    static final MethodHandle LocalLock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalLock",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LocalLock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalLock$MH() { return LocalLock$MH_; }

    static final FunctionDescriptor LocalHandle$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalHandle$FUNC() { return LocalHandle$FUNC_; }

    static final MethodHandle LocalHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LocalHandle$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalHandle$MH() { return LocalHandle$MH_; }

    static final FunctionDescriptor LocalUnlock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalUnlock$FUNC() { return LocalUnlock$FUNC_; }

    static final MethodHandle LocalUnlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalUnlock",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        LocalUnlock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalUnlock$MH() { return LocalUnlock$MH_; }

    static final FunctionDescriptor LocalSize$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalSize$FUNC() { return LocalSize$FUNC_; }

    static final MethodHandle LocalSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalSize",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        LocalSize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalSize$MH() { return LocalSize$MH_; }

    static final FunctionDescriptor LocalFlags$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalFlags$FUNC() { return LocalFlags$FUNC_; }

    static final MethodHandle LocalFlags$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalFlags",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        LocalFlags$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalFlags$MH() { return LocalFlags$MH_; }

    static final FunctionDescriptor LocalFree$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalFree$FUNC() { return LocalFree$FUNC_; }

    static final MethodHandle LocalFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LocalFree$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalFree$MH() { return LocalFree$MH_; }

    static final FunctionDescriptor LocalShrink$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalShrink$FUNC() { return LocalShrink$FUNC_; }

    static final MethodHandle LocalShrink$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalShrink",
        "(Ljdk/incubator/foreign/MemoryAddress;I)J",
        LocalShrink$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalShrink$MH() { return LocalShrink$MH_; }

    static final FunctionDescriptor LocalCompact$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor LocalCompact$FUNC() { return LocalCompact$FUNC_; }

    static final MethodHandle LocalCompact$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalCompact",
        "(I)J",
        LocalCompact$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LocalCompact$MH() { return LocalCompact$MH_; }

    static final FunctionDescriptor GetBinaryTypeA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetBinaryTypeA$FUNC() { return GetBinaryTypeA$FUNC_; }

    static final MethodHandle GetBinaryTypeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetBinaryTypeA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetBinaryTypeA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetBinaryTypeA$MH() { return GetBinaryTypeA$MH_; }

    static final FunctionDescriptor GetBinaryTypeW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetBinaryTypeW$FUNC() { return GetBinaryTypeW$FUNC_; }

    static final MethodHandle GetBinaryTypeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetBinaryTypeW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetBinaryTypeW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetBinaryTypeW$MH() { return GetBinaryTypeW$MH_; }

    static final FunctionDescriptor GetShortPathNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetShortPathNameA$FUNC() { return GetShortPathNameA$FUNC_; }

    static final MethodHandle GetShortPathNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetShortPathNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetShortPathNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetShortPathNameA$MH() { return GetShortPathNameA$MH_; }

    static final FunctionDescriptor GetLongPathNameTransactedA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLongPathNameTransactedA$FUNC() { return GetLongPathNameTransactedA$FUNC_; }

    static final MethodHandle GetLongPathNameTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLongPathNameTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetLongPathNameTransactedA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLongPathNameTransactedA$MH() { return GetLongPathNameTransactedA$MH_; }

    static final FunctionDescriptor GetLongPathNameTransactedW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetLongPathNameTransactedW$FUNC() { return GetLongPathNameTransactedW$FUNC_; }

    static final MethodHandle GetLongPathNameTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLongPathNameTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetLongPathNameTransactedW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetLongPathNameTransactedW$MH() { return GetLongPathNameTransactedW$MH_; }

    static final FunctionDescriptor GetProcessAffinityMask$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessAffinityMask$FUNC() { return GetProcessAffinityMask$FUNC_; }

    static final MethodHandle GetProcessAffinityMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessAffinityMask",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessAffinityMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessAffinityMask$MH() { return GetProcessAffinityMask$MH_; }

    static final FunctionDescriptor SetProcessAffinityMask$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessAffinityMask$FUNC() { return SetProcessAffinityMask$FUNC_; }

    static final MethodHandle SetProcessAffinityMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessAffinityMask",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        SetProcessAffinityMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessAffinityMask$MH() { return SetProcessAffinityMask$MH_; }

    static final FunctionDescriptor GetProcessIoCounters$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessIoCounters$FUNC() { return GetProcessIoCounters$FUNC_; }

    static final MethodHandle GetProcessIoCounters$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessIoCounters",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessIoCounters$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessIoCounters$MH() { return GetProcessIoCounters$MH_; }

    static final FunctionDescriptor GetProcessWorkingSetSize$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessWorkingSetSize$FUNC() { return GetProcessWorkingSetSize$FUNC_; }

    static final MethodHandle GetProcessWorkingSetSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessWorkingSetSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessWorkingSetSize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessWorkingSetSize$MH() { return GetProcessWorkingSetSize$MH_; }

    static final FunctionDescriptor SetProcessWorkingSetSize$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessWorkingSetSize$FUNC() { return SetProcessWorkingSetSize$FUNC_; }

    static final MethodHandle SetProcessWorkingSetSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessWorkingSetSize",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)I",
        SetProcessWorkingSetSize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessWorkingSetSize$MH() { return SetProcessWorkingSetSize$MH_; }

    static final FunctionDescriptor FatalExit$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FatalExit$FUNC() { return FatalExit$FUNC_; }

    static final MethodHandle FatalExit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FatalExit",
        "(I)V",
        FatalExit$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FatalExit$MH() { return FatalExit$MH_; }

    static final FunctionDescriptor SetEnvironmentStringsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetEnvironmentStringsA$FUNC() { return SetEnvironmentStringsA$FUNC_; }

    static final MethodHandle SetEnvironmentStringsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetEnvironmentStringsA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetEnvironmentStringsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetEnvironmentStringsA$MH() { return SetEnvironmentStringsA$MH_; }

    static final FunctionDescriptor SwitchToFiber$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SwitchToFiber$FUNC() { return SwitchToFiber$FUNC_; }

    static final MethodHandle SwitchToFiber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SwitchToFiber",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        SwitchToFiber$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SwitchToFiber$MH() { return SwitchToFiber$MH_; }

    static final FunctionDescriptor DeleteFiber$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteFiber$FUNC() { return DeleteFiber$FUNC_; }

    static final MethodHandle DeleteFiber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteFiber",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        DeleteFiber$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteFiber$MH() { return DeleteFiber$MH_; }

    static final FunctionDescriptor ConvertFiberToThread$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor ConvertFiberToThread$FUNC() { return ConvertFiberToThread$FUNC_; }

    static final MethodHandle ConvertFiberToThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ConvertFiberToThread",
        "()I",
        ConvertFiberToThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ConvertFiberToThread$MH() { return ConvertFiberToThread$MH_; }

    static final FunctionDescriptor CreateFiberEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFiberEx$FUNC() { return CreateFiberEx$FUNC_; }

    static final MethodHandle CreateFiberEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFiberEx",
        "(JJILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFiberEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFiberEx$MH() { return CreateFiberEx$MH_; }

    static final FunctionDescriptor CreateFiberEx$lpStartAddress$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFiberEx$lpStartAddress$FUNC() { return CreateFiberEx$lpStartAddress$FUNC_; }

    static final FunctionDescriptor ConvertThreadToFiberEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ConvertThreadToFiberEx$FUNC() { return ConvertThreadToFiberEx$FUNC_; }

    static final MethodHandle ConvertThreadToFiberEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ConvertThreadToFiberEx",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        ConvertThreadToFiberEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ConvertThreadToFiberEx$MH() { return ConvertThreadToFiberEx$MH_; }

    static final FunctionDescriptor CreateFiber$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFiber$FUNC() { return CreateFiber$FUNC_; }

    static final MethodHandle CreateFiber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFiber",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFiber$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFiber$MH() { return CreateFiber$MH_; }

    static final FunctionDescriptor CreateFiber$lpStartAddress$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFiber$lpStartAddress$FUNC() { return CreateFiber$lpStartAddress$FUNC_; }

    static final FunctionDescriptor ConvertThreadToFiber$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ConvertThreadToFiber$FUNC() { return ConvertThreadToFiber$FUNC_; }

    static final MethodHandle ConvertThreadToFiber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ConvertThreadToFiber",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ConvertThreadToFiber$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ConvertThreadToFiber$MH() { return ConvertThreadToFiber$MH_; }

    static final MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("UmsVersion"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("CompletionList"),
        C_POINTER.withName("SchedulerProc"),
        C_POINTER.withName("SchedulerParam")
    ).withName("_UMS_SCHEDULER_STARTUP_INFO");
    public static jdk.incubator.foreign.MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT() { return _UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_; }

    static final MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$LAYOUT() { return _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$LAYOUT_; }

    static final VarHandle _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$VH_ = _UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UmsVersion"));
    public static java.lang.invoke.VarHandle _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$VH() { return _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$VH_; }

    static final MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$CompletionList$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$CompletionList$LAYOUT() { return _UMS_SCHEDULER_STARTUP_INFO$CompletionList$LAYOUT_; }

    static final VarHandle _UMS_SCHEDULER_STARTUP_INFO$CompletionList$VH_ = MemoryHandles.asAddressVarHandle(_UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompletionList")));
    public static java.lang.invoke.VarHandle _UMS_SCHEDULER_STARTUP_INFO$CompletionList$VH() { return _UMS_SCHEDULER_STARTUP_INFO$CompletionList$VH_; }

    static final MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$LAYOUT() { return _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$LAYOUT_; }

    static final VarHandle _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$VH_ = MemoryHandles.asAddressVarHandle(_UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SchedulerProc")));
    public static java.lang.invoke.VarHandle _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$VH() { return _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$VH_; }

    static final MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$LAYOUT() { return _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$LAYOUT_; }

    static final VarHandle _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$VH_ = MemoryHandles.asAddressVarHandle(_UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SchedulerParam")));
    public static java.lang.invoke.VarHandle _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$VH() { return _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$VH_; }

    static final MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("UmsVersion"),
        C_INT,
        C_INT.withName("ThreadUmsFlags")
    ).withName("_UMS_SYSTEM_THREAD_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$struct$LAYOUT() { return _UMS_SYSTEM_THREAD_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$LAYOUT() { return _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$LAYOUT_; }

    static final VarHandle _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$VH_ = _UMS_SYSTEM_THREAD_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UmsVersion"));
    public static java.lang.invoke.VarHandle _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$VH() { return _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$VH_; }

    static final MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$LAYOUT() { return _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$LAYOUT_; }

    static final VarHandle _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$VH_ = _UMS_SYSTEM_THREAD_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ThreadUmsFlags"));
    public static java.lang.invoke.VarHandle _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$VH() { return _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$VH_; }

    static final FunctionDescriptor CreateUmsCompletionList$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateUmsCompletionList$FUNC() { return CreateUmsCompletionList$FUNC_; }

    static final MethodHandle CreateUmsCompletionList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateUmsCompletionList",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateUmsCompletionList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateUmsCompletionList$MH() { return CreateUmsCompletionList$MH_; }

    static final FunctionDescriptor DequeueUmsCompletionListItems$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DequeueUmsCompletionListItems$FUNC() { return DequeueUmsCompletionListItems$FUNC_; }

    static final MethodHandle DequeueUmsCompletionListItems$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DequeueUmsCompletionListItems",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        DequeueUmsCompletionListItems$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DequeueUmsCompletionListItems$MH() { return DequeueUmsCompletionListItems$MH_; }

    static final FunctionDescriptor GetUmsCompletionListEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetUmsCompletionListEvent$FUNC() { return GetUmsCompletionListEvent$FUNC_; }

    static final MethodHandle GetUmsCompletionListEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUmsCompletionListEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetUmsCompletionListEvent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUmsCompletionListEvent$MH() { return GetUmsCompletionListEvent$MH_; }

    static final FunctionDescriptor ExecuteUmsThread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ExecuteUmsThread$FUNC() { return ExecuteUmsThread$FUNC_; }

    static final MethodHandle ExecuteUmsThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExecuteUmsThread",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ExecuteUmsThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ExecuteUmsThread$MH() { return ExecuteUmsThread$MH_; }

    static final FunctionDescriptor UmsThreadYield$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor UmsThreadYield$FUNC() { return UmsThreadYield$FUNC_; }

    static final MethodHandle UmsThreadYield$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UmsThreadYield",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UmsThreadYield$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle UmsThreadYield$MH() { return UmsThreadYield$MH_; }

    static final FunctionDescriptor DeleteUmsCompletionList$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteUmsCompletionList$FUNC() { return DeleteUmsCompletionList$FUNC_; }

    static final MethodHandle DeleteUmsCompletionList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteUmsCompletionList",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteUmsCompletionList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteUmsCompletionList$MH() { return DeleteUmsCompletionList$MH_; }

    static final FunctionDescriptor GetCurrentUmsThread$FUNC_ = FunctionDescriptor.of(C_POINTER);
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentUmsThread$FUNC() { return GetCurrentUmsThread$FUNC_; }

    static final MethodHandle GetCurrentUmsThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentUmsThread",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetCurrentUmsThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentUmsThread$MH() { return GetCurrentUmsThread$MH_; }

    static final FunctionDescriptor GetNextUmsListItem$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNextUmsListItem$FUNC() { return GetNextUmsListItem$FUNC_; }

    static final MethodHandle GetNextUmsListItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNextUmsListItem",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetNextUmsListItem$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNextUmsListItem$MH() { return GetNextUmsListItem$MH_; }

    static final FunctionDescriptor QueryUmsThreadInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor QueryUmsThreadInformation$FUNC() { return QueryUmsThreadInformation$FUNC_; }

    static final MethodHandle QueryUmsThreadInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryUmsThreadInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        QueryUmsThreadInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle QueryUmsThreadInformation$MH() { return QueryUmsThreadInformation$MH_; }

    static final FunctionDescriptor SetUmsThreadInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetUmsThreadInformation$FUNC() { return SetUmsThreadInformation$FUNC_; }

    static final MethodHandle SetUmsThreadInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetUmsThreadInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetUmsThreadInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetUmsThreadInformation$MH() { return SetUmsThreadInformation$MH_; }

    static final FunctionDescriptor DeleteUmsThreadContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteUmsThreadContext$FUNC() { return DeleteUmsThreadContext$FUNC_; }

    static final MethodHandle DeleteUmsThreadContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteUmsThreadContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteUmsThreadContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteUmsThreadContext$MH() { return DeleteUmsThreadContext$MH_; }

    static final FunctionDescriptor CreateUmsThreadContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateUmsThreadContext$FUNC() { return CreateUmsThreadContext$FUNC_; }

    static final MethodHandle CreateUmsThreadContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateUmsThreadContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateUmsThreadContext$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateUmsThreadContext$MH() { return CreateUmsThreadContext$MH_; }

    static final FunctionDescriptor EnterUmsSchedulingMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnterUmsSchedulingMode$FUNC() { return EnterUmsSchedulingMode$FUNC_; }

    static final MethodHandle EnterUmsSchedulingMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnterUmsSchedulingMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        EnterUmsSchedulingMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnterUmsSchedulingMode$MH() { return EnterUmsSchedulingMode$MH_; }

    static final FunctionDescriptor GetUmsSystemThreadInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetUmsSystemThreadInformation$FUNC() { return GetUmsSystemThreadInformation$FUNC_; }

    static final MethodHandle GetUmsSystemThreadInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUmsSystemThreadInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetUmsSystemThreadInformation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetUmsSystemThreadInformation$MH() { return GetUmsSystemThreadInformation$MH_; }

    static final FunctionDescriptor SetThreadAffinityMask$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadAffinityMask$FUNC() { return SetThreadAffinityMask$FUNC_; }

    static final MethodHandle SetThreadAffinityMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadAffinityMask",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        SetThreadAffinityMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadAffinityMask$MH() { return SetThreadAffinityMask$MH_; }

    static final FunctionDescriptor SetProcessDEPPolicy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetProcessDEPPolicy$FUNC() { return SetProcessDEPPolicy$FUNC_; }

    static final MethodHandle SetProcessDEPPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessDEPPolicy",
        "(I)I",
        SetProcessDEPPolicy$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetProcessDEPPolicy$MH() { return SetProcessDEPPolicy$MH_; }

    static final FunctionDescriptor GetProcessDEPPolicy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetProcessDEPPolicy$FUNC() { return GetProcessDEPPolicy$FUNC_; }

    static final MethodHandle GetProcessDEPPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessDEPPolicy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessDEPPolicy$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetProcessDEPPolicy$MH() { return GetProcessDEPPolicy$MH_; }

    static final FunctionDescriptor RequestWakeupLatency$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RequestWakeupLatency$FUNC() { return RequestWakeupLatency$FUNC_; }

    static final MethodHandle RequestWakeupLatency$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RequestWakeupLatency",
        "(I)I",
        RequestWakeupLatency$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RequestWakeupLatency$MH() { return RequestWakeupLatency$MH_; }

    static final FunctionDescriptor IsSystemResumeAutomatic$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor IsSystemResumeAutomatic$FUNC() { return IsSystemResumeAutomatic$FUNC_; }

    static final MethodHandle IsSystemResumeAutomatic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsSystemResumeAutomatic",
        "()I",
        IsSystemResumeAutomatic$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle IsSystemResumeAutomatic$MH() { return IsSystemResumeAutomatic$MH_; }

    static final FunctionDescriptor GetThreadSelectorEntry$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetThreadSelectorEntry$FUNC() { return GetThreadSelectorEntry$FUNC_; }

    static final MethodHandle GetThreadSelectorEntry$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadSelectorEntry",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetThreadSelectorEntry$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetThreadSelectorEntry$MH() { return GetThreadSelectorEntry$MH_; }

    static final FunctionDescriptor SetThreadExecutionState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetThreadExecutionState$FUNC() { return SetThreadExecutionState$FUNC_; }

    static final MethodHandle SetThreadExecutionState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadExecutionState",
        "(I)I",
        SetThreadExecutionState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetThreadExecutionState$MH() { return SetThreadExecutionState$MH_; }

    static final FunctionDescriptor PowerCreateRequest$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor PowerCreateRequest$FUNC() { return PowerCreateRequest$FUNC_; }

    static final MethodHandle PowerCreateRequest$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PowerCreateRequest",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        PowerCreateRequest$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PowerCreateRequest$MH() { return PowerCreateRequest$MH_; }

    static final FunctionDescriptor PowerSetRequest$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PowerSetRequest$FUNC() { return PowerSetRequest$FUNC_; }

    static final MethodHandle PowerSetRequest$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PowerSetRequest",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        PowerSetRequest$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PowerSetRequest$MH() { return PowerSetRequest$MH_; }

    static final FunctionDescriptor PowerClearRequest$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PowerClearRequest$FUNC() { return PowerClearRequest$FUNC_; }

    static final MethodHandle PowerClearRequest$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PowerClearRequest",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        PowerClearRequest$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PowerClearRequest$MH() { return PowerClearRequest$MH_; }

    static final FunctionDescriptor SetFileCompletionNotificationModes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileCompletionNotificationModes$FUNC() { return SetFileCompletionNotificationModes$FUNC_; }

    static final MethodHandle SetFileCompletionNotificationModes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileCompletionNotificationModes",
        "(Ljdk/incubator/foreign/MemoryAddress;B)I",
        SetFileCompletionNotificationModes$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileCompletionNotificationModes$MH() { return SetFileCompletionNotificationModes$MH_; }

    static final FunctionDescriptor Wow64GetThreadSelectorEntry$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor Wow64GetThreadSelectorEntry$FUNC() { return Wow64GetThreadSelectorEntry$FUNC_; }

    static final MethodHandle Wow64GetThreadSelectorEntry$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Wow64GetThreadSelectorEntry",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        Wow64GetThreadSelectorEntry$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Wow64GetThreadSelectorEntry$MH() { return Wow64GetThreadSelectorEntry$MH_; }

    static final FunctionDescriptor DebugSetProcessKillOnExit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DebugSetProcessKillOnExit$FUNC() { return DebugSetProcessKillOnExit$FUNC_; }

    static final MethodHandle DebugSetProcessKillOnExit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DebugSetProcessKillOnExit",
        "(I)I",
        DebugSetProcessKillOnExit$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DebugSetProcessKillOnExit$MH() { return DebugSetProcessKillOnExit$MH_; }

    static final FunctionDescriptor DebugBreakProcess$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DebugBreakProcess$FUNC() { return DebugBreakProcess$FUNC_; }

    static final MethodHandle DebugBreakProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DebugBreakProcess",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DebugBreakProcess$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DebugBreakProcess$MH() { return DebugBreakProcess$MH_; }

    static final FunctionDescriptor PulseEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor PulseEvent$FUNC() { return PulseEvent$FUNC_; }

    static final MethodHandle PulseEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PulseEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        PulseEvent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PulseEvent$MH() { return PulseEvent$MH_; }

    static final FunctionDescriptor GlobalDeleteAtom$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GlobalDeleteAtom$FUNC() { return GlobalDeleteAtom$FUNC_; }

    static final MethodHandle GlobalDeleteAtom$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalDeleteAtom",
        "(S)S",
        GlobalDeleteAtom$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GlobalDeleteAtom$MH() { return GlobalDeleteAtom$MH_; }

    static final FunctionDescriptor InitAtomTable$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor InitAtomTable$FUNC() { return InitAtomTable$FUNC_; }

    static final MethodHandle InitAtomTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitAtomTable",
        "(I)I",
        InitAtomTable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle InitAtomTable$MH() { return InitAtomTable$MH_; }

    static final FunctionDescriptor DeleteAtom$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteAtom$FUNC() { return DeleteAtom$FUNC_; }

    static final MethodHandle DeleteAtom$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteAtom",
        "(S)S",
        DeleteAtom$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteAtom$MH() { return DeleteAtom$MH_; }

    static final FunctionDescriptor SetHandleCount$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetHandleCount$FUNC() { return SetHandleCount$FUNC_; }

    static final MethodHandle SetHandleCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetHandleCount",
        "(I)I",
        SetHandleCount$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetHandleCount$MH() { return SetHandleCount$MH_; }

    static final FunctionDescriptor RequestDeviceWakeup$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RequestDeviceWakeup$FUNC() { return RequestDeviceWakeup$FUNC_; }

    static final MethodHandle RequestDeviceWakeup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RequestDeviceWakeup",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RequestDeviceWakeup$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RequestDeviceWakeup$MH() { return RequestDeviceWakeup$MH_; }

    static final FunctionDescriptor CancelDeviceWakeupRequest$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CancelDeviceWakeupRequest$FUNC() { return CancelDeviceWakeupRequest$FUNC_; }

    static final MethodHandle CancelDeviceWakeupRequest$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CancelDeviceWakeupRequest",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CancelDeviceWakeupRequest$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CancelDeviceWakeupRequest$MH() { return CancelDeviceWakeupRequest$MH_; }

    static final FunctionDescriptor GetDevicePowerState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDevicePowerState$FUNC() { return GetDevicePowerState$FUNC_; }

    static final MethodHandle GetDevicePowerState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDevicePowerState",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDevicePowerState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDevicePowerState$MH() { return GetDevicePowerState$MH_; }

    static final FunctionDescriptor SetMessageWaitingIndicator$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetMessageWaitingIndicator$FUNC() { return SetMessageWaitingIndicator$FUNC_; }

    static final MethodHandle SetMessageWaitingIndicator$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMessageWaitingIndicator",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetMessageWaitingIndicator$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetMessageWaitingIndicator$MH() { return SetMessageWaitingIndicator$MH_; }

    static final FunctionDescriptor SetFileShortNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileShortNameA$FUNC() { return SetFileShortNameA$FUNC_; }

    static final MethodHandle SetFileShortNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileShortNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetFileShortNameA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileShortNameA$MH() { return SetFileShortNameA$MH_; }

    static final FunctionDescriptor SetFileShortNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetFileShortNameW$FUNC() { return SetFileShortNameW$FUNC_; }

    static final MethodHandle SetFileShortNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileShortNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetFileShortNameW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetFileShortNameW$MH() { return SetFileShortNameW$MH_; }

    static final FunctionDescriptor LoadModule$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor LoadModule$FUNC() { return LoadModule$FUNC_; }

    static final MethodHandle LoadModule$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadModule",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LoadModule$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle LoadModule$MH() { return LoadModule$MH_; }

    static final FunctionDescriptor WinExec$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WinExec$FUNC() { return WinExec$FUNC_; }

    static final MethodHandle WinExec$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WinExec",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WinExec$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WinExec$MH() { return WinExec$MH_; }

    static final FunctionDescriptor ClearCommBreak$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ClearCommBreak$FUNC() { return ClearCommBreak$FUNC_; }

    static final MethodHandle ClearCommBreak$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClearCommBreak",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ClearCommBreak$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ClearCommBreak$MH() { return ClearCommBreak$MH_; }

    static final FunctionDescriptor ClearCommError$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ClearCommError$FUNC() { return ClearCommError$FUNC_; }

    static final MethodHandle ClearCommError$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClearCommError",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ClearCommError$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ClearCommError$MH() { return ClearCommError$MH_; }

    static final FunctionDescriptor SetupComm$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetupComm$FUNC() { return SetupComm$FUNC_; }

    static final MethodHandle SetupComm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetupComm",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetupComm$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetupComm$MH() { return SetupComm$MH_; }

    static final FunctionDescriptor EscapeCommFunction$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EscapeCommFunction$FUNC() { return EscapeCommFunction$FUNC_; }

    static final MethodHandle EscapeCommFunction$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EscapeCommFunction",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        EscapeCommFunction$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EscapeCommFunction$MH() { return EscapeCommFunction$MH_; }

    static final FunctionDescriptor GetCommConfig$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCommConfig$FUNC() { return GetCommConfig$FUNC_; }

    static final MethodHandle GetCommConfig$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommConfig",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommConfig$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCommConfig$MH() { return GetCommConfig$MH_; }

    static final FunctionDescriptor GetCommMask$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCommMask$FUNC() { return GetCommMask$FUNC_; }

    static final MethodHandle GetCommMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommMask",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCommMask$MH() { return GetCommMask$MH_; }

    static final FunctionDescriptor GetCommProperties$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCommProperties$FUNC() { return GetCommProperties$FUNC_; }

    static final MethodHandle GetCommProperties$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommProperties",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommProperties$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCommProperties$MH() { return GetCommProperties$MH_; }

    static final FunctionDescriptor GetCommModemStatus$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCommModemStatus$FUNC() { return GetCommModemStatus$FUNC_; }

    static final MethodHandle GetCommModemStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommModemStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommModemStatus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCommModemStatus$MH() { return GetCommModemStatus$MH_; }

    static final FunctionDescriptor GetCommState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCommState$FUNC() { return GetCommState$FUNC_; }

    static final MethodHandle GetCommState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommState",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCommState$MH() { return GetCommState$MH_; }

    static final FunctionDescriptor GetCommTimeouts$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCommTimeouts$FUNC() { return GetCommTimeouts$FUNC_; }

    static final MethodHandle GetCommTimeouts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommTimeouts",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommTimeouts$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCommTimeouts$MH() { return GetCommTimeouts$MH_; }

    static final FunctionDescriptor PurgeComm$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PurgeComm$FUNC() { return PurgeComm$FUNC_; }

    static final MethodHandle PurgeComm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PurgeComm",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        PurgeComm$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PurgeComm$MH() { return PurgeComm$MH_; }

    static final FunctionDescriptor SetCommBreak$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetCommBreak$FUNC() { return SetCommBreak$FUNC_; }

    static final MethodHandle SetCommBreak$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCommBreak",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetCommBreak$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetCommBreak$MH() { return SetCommBreak$MH_; }

    static final FunctionDescriptor SetCommConfig$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetCommConfig$FUNC() { return SetCommConfig$FUNC_; }

    static final MethodHandle SetCommConfig$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCommConfig",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetCommConfig$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetCommConfig$MH() { return SetCommConfig$MH_; }

    static final FunctionDescriptor SetCommMask$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetCommMask$FUNC() { return SetCommMask$FUNC_; }

    static final MethodHandle SetCommMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCommMask",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetCommMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetCommMask$MH() { return SetCommMask$MH_; }

    static final FunctionDescriptor SetCommState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetCommState$FUNC() { return SetCommState$FUNC_; }

    static final MethodHandle SetCommState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCommState",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetCommState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetCommState$MH() { return SetCommState$MH_; }

    static final FunctionDescriptor SetCommTimeouts$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetCommTimeouts$FUNC() { return SetCommTimeouts$FUNC_; }

    static final MethodHandle SetCommTimeouts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCommTimeouts",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetCommTimeouts$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetCommTimeouts$MH() { return SetCommTimeouts$MH_; }

    static final FunctionDescriptor TransmitCommChar$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor TransmitCommChar$FUNC() { return TransmitCommChar$FUNC_; }

    static final MethodHandle TransmitCommChar$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TransmitCommChar",
        "(Ljdk/incubator/foreign/MemoryAddress;B)I",
        TransmitCommChar$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TransmitCommChar$MH() { return TransmitCommChar$MH_; }

    static final FunctionDescriptor WaitCommEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor WaitCommEvent$FUNC() { return WaitCommEvent$FUNC_; }

    static final MethodHandle WaitCommEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitCommEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WaitCommEvent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WaitCommEvent$MH() { return WaitCommEvent$MH_; }

    static final FunctionDescriptor OpenCommPort$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor OpenCommPort$FUNC() { return OpenCommPort$FUNC_; }

    static final MethodHandle OpenCommPort$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenCommPort",
        "(III)Ljdk/incubator/foreign/MemoryAddress;",
        OpenCommPort$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle OpenCommPort$MH() { return OpenCommPort$MH_; }

    static final FunctionDescriptor GetCommPorts$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCommPorts$FUNC() { return GetCommPorts$FUNC_; }

    static final MethodHandle GetCommPorts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommPorts",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetCommPorts$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCommPorts$MH() { return GetCommPorts$MH_; }

    static final FunctionDescriptor SetTapePosition$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetTapePosition$FUNC() { return SetTapePosition$FUNC_; }

    static final MethodHandle SetTapePosition$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetTapePosition",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIII)I",
        SetTapePosition$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetTapePosition$MH() { return SetTapePosition$MH_; }

    static final FunctionDescriptor GetTapePosition$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTapePosition$FUNC() { return GetTapePosition$FUNC_; }

    static final MethodHandle GetTapePosition$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTapePosition",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTapePosition$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTapePosition$MH() { return GetTapePosition$MH_; }

    static final FunctionDescriptor PrepareTape$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor PrepareTape$FUNC() { return PrepareTape$FUNC_; }

    static final MethodHandle PrepareTape$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PrepareTape",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        PrepareTape$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle PrepareTape$MH() { return PrepareTape$MH_; }

    static final FunctionDescriptor EraseTape$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EraseTape$FUNC() { return EraseTape$FUNC_; }

    static final MethodHandle EraseTape$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EraseTape",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        EraseTape$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EraseTape$MH() { return EraseTape$MH_; }

    static final FunctionDescriptor CreateTapePartition$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateTapePartition$FUNC() { return CreateTapePartition$FUNC_; }

    static final MethodHandle CreateTapePartition$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateTapePartition",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        CreateTapePartition$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateTapePartition$MH() { return CreateTapePartition$MH_; }

    static final FunctionDescriptor WriteTapemark$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor WriteTapemark$FUNC() { return WriteTapemark$FUNC_; }

    static final MethodHandle WriteTapemark$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteTapemark",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        WriteTapemark$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle WriteTapemark$MH() { return WriteTapemark$MH_; }

    static final FunctionDescriptor GetTapeStatus$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTapeStatus$FUNC() { return GetTapeStatus$FUNC_; }

    static final MethodHandle GetTapeStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTapeStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTapeStatus$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTapeStatus$MH() { return GetTapeStatus$MH_; }

    static final FunctionDescriptor GetTapeParameters$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTapeParameters$FUNC() { return GetTapeParameters$FUNC_; }

    static final MethodHandle GetTapeParameters$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTapeParameters",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTapeParameters$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTapeParameters$MH() { return GetTapeParameters$MH_; }

    static final FunctionDescriptor SetTapeParameters$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor SetTapeParameters$FUNC() { return SetTapeParameters$FUNC_; }

    static final MethodHandle SetTapeParameters$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetTapeParameters",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetTapeParameters$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle SetTapeParameters$MH() { return SetTapeParameters$MH_; }

    static final FunctionDescriptor MulDiv$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor MulDiv$FUNC() { return MulDiv$FUNC_; }

    static final MethodHandle MulDiv$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MulDiv",
        "(III)I",
        MulDiv$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle MulDiv$MH() { return MulDiv$MH_; }

    public static int DEPPolicyAlwaysOff() { return (int)0L; }

    public static int DEPPolicyAlwaysOn() { return (int)1L; }

    public static int DEPPolicyOptIn() { return (int)2L; }

    public static int DEPPolicyOptOut() { return (int)3L; }

    public static int DEPTotalPolicyCount() { return (int)4L; }

    static final FunctionDescriptor GetSystemDEPPolicy$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemDEPPolicy$FUNC() { return GetSystemDEPPolicy$FUNC_; }

    static final MethodHandle GetSystemDEPPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemDEPPolicy",
        "()I",
        GetSystemDEPPolicy$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemDEPPolicy$MH() { return GetSystemDEPPolicy$MH_; }

    static final FunctionDescriptor GetSystemRegistryQuota$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemRegistryQuota$FUNC() { return GetSystemRegistryQuota$FUNC_; }

    static final MethodHandle GetSystemRegistryQuota$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemRegistryQuota",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSystemRegistryQuota$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemRegistryQuota$MH() { return GetSystemRegistryQuota$MH_; }

    static final FunctionDescriptor FileTimeToDosDateTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FileTimeToDosDateTime$FUNC() { return FileTimeToDosDateTime$FUNC_; }

    static final MethodHandle FileTimeToDosDateTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FileTimeToDosDateTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FileTimeToDosDateTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FileTimeToDosDateTime$MH() { return FileTimeToDosDateTime$MH_; }

    static final FunctionDescriptor DosDateTimeToFileTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_SHORT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DosDateTimeToFileTime$FUNC() { return DosDateTimeToFileTime$FUNC_; }

    static final MethodHandle DosDateTimeToFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DosDateTimeToFileTime",
        "(SSLjdk/incubator/foreign/MemoryAddress;)I",
        DosDateTimeToFileTime$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DosDateTimeToFileTime$MH() { return DosDateTimeToFileTime$MH_; }

    static final FunctionDescriptor FormatMessageA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FormatMessageA$FUNC() { return FormatMessageA$FUNC_; }

    static final MethodHandle FormatMessageA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FormatMessageA",
        "(ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        FormatMessageA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FormatMessageA$MH() { return FormatMessageA$MH_; }

    static final FunctionDescriptor FormatMessageW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FormatMessageW$FUNC() { return FormatMessageW$FUNC_; }

    static final MethodHandle FormatMessageW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FormatMessageW",
        "(ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        FormatMessageW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FormatMessageW$MH() { return FormatMessageW$MH_; }

}

