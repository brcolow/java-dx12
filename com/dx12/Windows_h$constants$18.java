// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$18 extends Windows_h$constants$17 {
    Windows_h$constants$18() {}
    static final MemoryLayout _RTL_BARRIER$Reserved2$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved2$LAYOUT() { return _RTL_BARRIER$Reserved2$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved2$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    public static java.lang.invoke.VarHandle _RTL_BARRIER$Reserved2$VH() { return _RTL_BARRIER$Reserved2$VH_; }

    static final MemoryLayout _RTL_BARRIER$Reserved4$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved4$LAYOUT() { return _RTL_BARRIER$Reserved4$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved4$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved4"));
    public static java.lang.invoke.VarHandle _RTL_BARRIER$Reserved4$VH() { return _RTL_BARRIER$Reserved4$VH_; }

    static final MemoryLayout _RTL_BARRIER$Reserved5$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved5$LAYOUT() { return _RTL_BARRIER$Reserved5$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved5$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved5"));
    public static java.lang.invoke.VarHandle _RTL_BARRIER$Reserved5$VH() { return _RTL_BARRIER$Reserved5$VH_; }

    static final FunctionDescriptor __fastfail$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor __fastfail$FUNC() { return __fastfail$FUNC_; }

    static final MethodHandle __fastfail$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__fastfail",
        "(I)V",
        __fastfail$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle __fastfail$MH() { return __fastfail$MH_; }

    static final FunctionDescriptor HEAP_MAKE_TAG_FLAGS$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor HEAP_MAKE_TAG_FLAGS$FUNC() { return HEAP_MAKE_TAG_FLAGS$FUNC_; }

    static final MethodHandle HEAP_MAKE_TAG_FLAGS$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HEAP_MAKE_TAG_FLAGS",
        "(II)I",
        HEAP_MAKE_TAG_FLAGS$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle HEAP_MAKE_TAG_FLAGS$MH() { return HEAP_MAKE_TAG_FLAGS$MH_; }

    static final FunctionDescriptor RtlSecureZeroMemory$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlSecureZeroMemory$FUNC() { return RtlSecureZeroMemory$FUNC_; }

    static final MethodHandle RtlSecureZeroMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlSecureZeroMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        RtlSecureZeroMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlSecureZeroMemory$MH() { return RtlSecureZeroMemory$MH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Length"),
        C_SHORT.withName("Flags"),
        MemoryLayout.ofSequence(1, C_BOOL).withName("Text"),
        MemoryLayout.ofPaddingBits(8)
    ).withName("_MESSAGE_RESOURCE_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT() { return _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _MESSAGE_RESOURCE_ENTRY$Length$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_ENTRY$Length$LAYOUT() { return _MESSAGE_RESOURCE_ENTRY$Length$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_ENTRY$Length$VH_ = _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Length"));
    public static java.lang.invoke.VarHandle _MESSAGE_RESOURCE_ENTRY$Length$VH() { return _MESSAGE_RESOURCE_ENTRY$Length$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_ENTRY$Flags$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_ENTRY$Flags$LAYOUT() { return _MESSAGE_RESOURCE_ENTRY$Flags$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_ENTRY$Flags$VH_ = _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _MESSAGE_RESOURCE_ENTRY$Flags$VH() { return _MESSAGE_RESOURCE_ENTRY$Flags$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("LowId"),
        C_INT.withName("HighId"),
        C_INT.withName("OffsetToEntries")
    ).withName("_MESSAGE_RESOURCE_BLOCK");
    public static jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$LowId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$LowId$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$LowId$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_BLOCK$LowId$VH_ = _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowId"));
    public static java.lang.invoke.VarHandle _MESSAGE_RESOURCE_BLOCK$LowId$VH() { return _MESSAGE_RESOURCE_BLOCK$LowId$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$HighId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$HighId$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$HighId$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_BLOCK$HighId$VH_ = _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighId"));
    public static java.lang.invoke.VarHandle _MESSAGE_RESOURCE_BLOCK$HighId$VH() { return _MESSAGE_RESOURCE_BLOCK$HighId$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH_ = _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OffsetToEntries"));
    public static java.lang.invoke.VarHandle _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH() { return _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("NumberOfBlocks"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_INT.withName("LowId"),
            C_INT.withName("HighId"),
            C_INT.withName("OffsetToEntries")
        ).withName("_MESSAGE_RESOURCE_BLOCK")).withName("Blocks")
    ).withName("_MESSAGE_RESOURCE_DATA");
    public static jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_DATA$struct$LAYOUT() { return _MESSAGE_RESOURCE_DATA$struct$LAYOUT_; }

    static final MemoryLayout _MESSAGE_RESOURCE_DATA$NumberOfBlocks$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_DATA$NumberOfBlocks$LAYOUT() { return _MESSAGE_RESOURCE_DATA$NumberOfBlocks$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH_ = _MESSAGE_RESOURCE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfBlocks"));
    public static java.lang.invoke.VarHandle _MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH() { return _MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwOSVersionInfoSize"),
        C_INT.withName("dwMajorVersion"),
        C_INT.withName("dwMinorVersion"),
        C_INT.withName("dwBuildNumber"),
        C_INT.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_BOOL).withName("szCSDVersion")
    ).withName("_OSVERSIONINFOA");
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$struct$LAYOUT() { return _OSVERSIONINFOA$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOA$dwOSVersionInfoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOA$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOA$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOA$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwMajorVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOA$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwMajorVersion$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOA$dwMajorVersion$VH() { return _OSVERSIONINFOA$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwMinorVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOA$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwMinorVersion$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOA$dwMinorVersion$VH() { return _OSVERSIONINFOA$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwBuildNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOA$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwBuildNumber$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOA$dwBuildNumber$VH() { return _OSVERSIONINFOA$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwPlatformId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwPlatformId$LAYOUT() { return _OSVERSIONINFOA$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwPlatformId$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOA$dwPlatformId$VH() { return _OSVERSIONINFOA$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwOSVersionInfoSize"),
        C_INT.withName("dwMajorVersion"),
        C_INT.withName("dwMinorVersion"),
        C_INT.withName("dwBuildNumber"),
        C_INT.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("szCSDVersion")
    ).withName("_OSVERSIONINFOW");
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$struct$LAYOUT() { return _OSVERSIONINFOW$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOW$dwOSVersionInfoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOW$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOW$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOW$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwMajorVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOW$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwMajorVersion$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOW$dwMajorVersion$VH() { return _OSVERSIONINFOW$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwMinorVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOW$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwMinorVersion$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOW$dwMinorVersion$VH() { return _OSVERSIONINFOW$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwBuildNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOW$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwBuildNumber$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOW$dwBuildNumber$VH() { return _OSVERSIONINFOW$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwPlatformId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwPlatformId$LAYOUT() { return _OSVERSIONINFOW$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwPlatformId$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOW$dwPlatformId$VH() { return _OSVERSIONINFOW$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwOSVersionInfoSize"),
        C_INT.withName("dwMajorVersion"),
        C_INT.withName("dwMinorVersion"),
        C_INT.withName("dwBuildNumber"),
        C_INT.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_BOOL).withName("szCSDVersion"),
        C_SHORT.withName("wServicePackMajor"),
        C_SHORT.withName("wServicePackMinor"),
        C_SHORT.withName("wSuiteMask"),
        C_BOOL.withName("wProductType"),
        C_BOOL.withName("wReserved")
    ).withName("_OSVERSIONINFOEXA");
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$struct$LAYOUT() { return _OSVERSIONINFOEXA$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwOSVersionInfoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOEXA$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOEXA$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwMajorVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOEXA$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwMajorVersion$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwMajorVersion$VH() { return _OSVERSIONINFOEXA$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwMinorVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOEXA$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwMinorVersion$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwMinorVersion$VH() { return _OSVERSIONINFOEXA$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwBuildNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOEXA$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwBuildNumber$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwBuildNumber$VH() { return _OSVERSIONINFOEXA$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwPlatformId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwPlatformId$LAYOUT() { return _OSVERSIONINFOEXA$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwPlatformId$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwPlatformId$VH() { return _OSVERSIONINFOEXA$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wServicePackMajor$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wServicePackMajor$LAYOUT() { return _OSVERSIONINFOEXA$wServicePackMajor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wServicePackMajor$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMajor"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wServicePackMajor$VH() { return _OSVERSIONINFOEXA$wServicePackMajor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wServicePackMinor$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wServicePackMinor$LAYOUT() { return _OSVERSIONINFOEXA$wServicePackMinor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wServicePackMinor$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMinor"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wServicePackMinor$VH() { return _OSVERSIONINFOEXA$wServicePackMinor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wSuiteMask$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wSuiteMask$LAYOUT() { return _OSVERSIONINFOEXA$wSuiteMask$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wSuiteMask$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wSuiteMask"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wSuiteMask$VH() { return _OSVERSIONINFOEXA$wSuiteMask$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wProductType$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wProductType$LAYOUT() { return _OSVERSIONINFOEXA$wProductType$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wProductType$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wProductType"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wProductType$VH() { return _OSVERSIONINFOEXA$wProductType$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wReserved$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wReserved$LAYOUT() { return _OSVERSIONINFOEXA$wReserved$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wReserved$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wReserved"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wReserved$VH() { return _OSVERSIONINFOEXA$wReserved$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwOSVersionInfoSize"),
        C_INT.withName("dwMajorVersion"),
        C_INT.withName("dwMinorVersion"),
        C_INT.withName("dwBuildNumber"),
        C_INT.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("szCSDVersion"),
        C_SHORT.withName("wServicePackMajor"),
        C_SHORT.withName("wServicePackMinor"),
        C_SHORT.withName("wSuiteMask"),
        C_BOOL.withName("wProductType"),
        C_BOOL.withName("wReserved")
    ).withName("_OSVERSIONINFOEXW");
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$struct$LAYOUT() { return _OSVERSIONINFOEXW$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwOSVersionInfoSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOEXW$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOEXW$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwMajorVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOEXW$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwMajorVersion$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwMajorVersion$VH() { return _OSVERSIONINFOEXW$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwMinorVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOEXW$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwMinorVersion$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwMinorVersion$VH() { return _OSVERSIONINFOEXW$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwBuildNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOEXW$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwBuildNumber$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwBuildNumber$VH() { return _OSVERSIONINFOEXW$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwPlatformId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwPlatformId$LAYOUT() { return _OSVERSIONINFOEXW$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwPlatformId$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwPlatformId$VH() { return _OSVERSIONINFOEXW$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wServicePackMajor$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wServicePackMajor$LAYOUT() { return _OSVERSIONINFOEXW$wServicePackMajor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wServicePackMajor$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMajor"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wServicePackMajor$VH() { return _OSVERSIONINFOEXW$wServicePackMajor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wServicePackMinor$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wServicePackMinor$LAYOUT() { return _OSVERSIONINFOEXW$wServicePackMinor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wServicePackMinor$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMinor"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wServicePackMinor$VH() { return _OSVERSIONINFOEXW$wServicePackMinor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wSuiteMask$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wSuiteMask$LAYOUT() { return _OSVERSIONINFOEXW$wSuiteMask$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wSuiteMask$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wSuiteMask"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wSuiteMask$VH() { return _OSVERSIONINFOEXW$wSuiteMask$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wProductType$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wProductType$LAYOUT() { return _OSVERSIONINFOEXW$wProductType$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wProductType$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wProductType"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wProductType$VH() { return _OSVERSIONINFOEXW$wProductType$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wReserved$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wReserved$LAYOUT() { return _OSVERSIONINFOEXW$wReserved$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wReserved$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wReserved"));
    public static java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wReserved$VH() { return _OSVERSIONINFOEXW$wReserved$VH_; }

    static final FunctionDescriptor VerSetConditionMask$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor VerSetConditionMask$FUNC() { return VerSetConditionMask$FUNC_; }

    static final MethodHandle VerSetConditionMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerSetConditionMask",
        "(JIB)J",
        VerSetConditionMask$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle VerSetConditionMask$MH() { return VerSetConditionMask$MH_; }

    static final FunctionDescriptor RtlGetProductInfo$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlGetProductInfo$FUNC() { return RtlGetProductInfo$FUNC_; }

    static final MethodHandle RtlGetProductInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGetProductInfo",
        "(IIIILjdk/incubator/foreign/MemoryAddress;)B",
        RtlGetProductInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlGetProductInfo$MH() { return RtlGetProductInfo$MH_; }

    public static int UmsThreadInvalidInfoClass() { return (int)0L; }

    public static int UmsThreadUserContext() { return (int)1L; }

    public static int UmsThreadPriority() { return (int)2L; }

    public static int UmsThreadAffinity() { return (int)3L; }

    public static int UmsThreadTeb() { return (int)4L; }

    public static int UmsThreadIsSuspended() { return (int)5L; }

    public static int UmsThreadIsTerminated() { return (int)6L; }

    public static int UmsThreadMaxInfoClass() { return (int)7L; }

    public static int UmsSchedulerStartup() { return (int)0L; }

    public static int UmsSchedulerThreadBlocked() { return (int)1L; }

    public static int UmsSchedulerThreadYield() { return (int)2L; }

    static final FunctionDescriptor RtlCrc32$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlCrc32$FUNC() { return RtlCrc32$FUNC_; }

    static final MethodHandle RtlCrc32$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCrc32",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlCrc32$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlCrc32$MH() { return RtlCrc32$MH_; }

    static final FunctionDescriptor RtlCrc64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlCrc64$FUNC() { return RtlCrc64$FUNC_; }

    static final MethodHandle RtlCrc64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCrc64",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)J",
        RtlCrc64$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlCrc64$MH() { return RtlCrc64$MH_; }

    public static int OS_DEPLOYMENT_STANDARD() { return (int)1L; }

    public static int OS_DEPLOYMENT_COMPACT() { return (int)2L; }

    static final FunctionDescriptor RtlOsDeploymentState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlOsDeploymentState$FUNC() { return RtlOsDeploymentState$FUNC_; }

    static final MethodHandle RtlOsDeploymentState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlOsDeploymentState",
        "(I)I",
        RtlOsDeploymentState$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlOsDeploymentState$MH() { return RtlOsDeploymentState$MH_; }

    static final MemoryLayout _NV_MEMORY_RANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("BaseAddress"),
        C_LONGLONG.withName("Length")
    ).withName("_NV_MEMORY_RANGE");
    public static jdk.incubator.foreign.MemoryLayout _NV_MEMORY_RANGE$struct$LAYOUT() { return _NV_MEMORY_RANGE$struct$LAYOUT_; }

    static final MemoryLayout _NV_MEMORY_RANGE$BaseAddress$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _NV_MEMORY_RANGE$BaseAddress$LAYOUT() { return _NV_MEMORY_RANGE$BaseAddress$LAYOUT_; }

    static final VarHandle _NV_MEMORY_RANGE$BaseAddress$VH_ = MemoryHandles.asAddressVarHandle(_NV_MEMORY_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BaseAddress")));
    public static java.lang.invoke.VarHandle _NV_MEMORY_RANGE$BaseAddress$VH() { return _NV_MEMORY_RANGE$BaseAddress$VH_; }

    static final MemoryLayout _NV_MEMORY_RANGE$Length$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _NV_MEMORY_RANGE$Length$LAYOUT() { return _NV_MEMORY_RANGE$Length$LAYOUT_; }

    static final VarHandle _NV_MEMORY_RANGE$Length$VH_ = _NV_MEMORY_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    public static java.lang.invoke.VarHandle _NV_MEMORY_RANGE$Length$VH() { return _NV_MEMORY_RANGE$Length$VH_; }

    static final FunctionDescriptor RtlGetNonVolatileToken$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlGetNonVolatileToken$FUNC() { return RtlGetNonVolatileToken$FUNC_; }

    static final MethodHandle RtlGetNonVolatileToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGetNonVolatileToken",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        RtlGetNonVolatileToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlGetNonVolatileToken$MH() { return RtlGetNonVolatileToken$MH_; }

    static final FunctionDescriptor RtlFreeNonVolatileToken$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlFreeNonVolatileToken$FUNC() { return RtlFreeNonVolatileToken$FUNC_; }

    static final MethodHandle RtlFreeNonVolatileToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFreeNonVolatileToken",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlFreeNonVolatileToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlFreeNonVolatileToken$MH() { return RtlFreeNonVolatileToken$MH_; }

    static final FunctionDescriptor RtlFlushNonVolatileMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlFlushNonVolatileMemory$FUNC() { return RtlFlushNonVolatileMemory$FUNC_; }

    static final MethodHandle RtlFlushNonVolatileMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFlushNonVolatileMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlFlushNonVolatileMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlFlushNonVolatileMemory$MH() { return RtlFlushNonVolatileMemory$MH_; }

    static final FunctionDescriptor RtlDrainNonVolatileFlush$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlDrainNonVolatileFlush$FUNC() { return RtlDrainNonVolatileFlush$FUNC_; }

    static final MethodHandle RtlDrainNonVolatileFlush$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlDrainNonVolatileFlush",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlDrainNonVolatileFlush$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlDrainNonVolatileFlush$MH() { return RtlDrainNonVolatileFlush$MH_; }

    static final FunctionDescriptor RtlWriteNonVolatileMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlWriteNonVolatileMemory$FUNC() { return RtlWriteNonVolatileMemory$FUNC_; }

    static final MethodHandle RtlWriteNonVolatileMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlWriteNonVolatileMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlWriteNonVolatileMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlWriteNonVolatileMemory$MH() { return RtlWriteNonVolatileMemory$MH_; }

    static final FunctionDescriptor RtlFillNonVolatileMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_BOOL,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlFillNonVolatileMemory$FUNC() { return RtlFillNonVolatileMemory$FUNC_; }

    static final MethodHandle RtlFillNonVolatileMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFillNonVolatileMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JBI)I",
        RtlFillNonVolatileMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlFillNonVolatileMemory$MH() { return RtlFillNonVolatileMemory$MH_; }

    static final FunctionDescriptor RtlFlushNonVolatileMemoryRanges$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlFlushNonVolatileMemoryRanges$FUNC() { return RtlFlushNonVolatileMemoryRanges$FUNC_; }

    static final MethodHandle RtlFlushNonVolatileMemoryRanges$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFlushNonVolatileMemoryRanges",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlFlushNonVolatileMemoryRanges$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlFlushNonVolatileMemoryRanges$MH() { return RtlFlushNonVolatileMemoryRanges$MH_; }

    static final MemoryLayout CORRELATION_VECTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("Version"),
        MemoryLayout.ofSequence(129, C_BOOL).withName("Vector")
    ).withName("CORRELATION_VECTOR");
    public static jdk.incubator.foreign.MemoryLayout CORRELATION_VECTOR$struct$LAYOUT() { return CORRELATION_VECTOR$struct$LAYOUT_; }

    static final MemoryLayout CORRELATION_VECTOR$Version$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout CORRELATION_VECTOR$Version$LAYOUT() { return CORRELATION_VECTOR$Version$LAYOUT_; }

    static final VarHandle CORRELATION_VECTOR$Version$VH_ = CORRELATION_VECTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle CORRELATION_VECTOR$Version$VH() { return CORRELATION_VECTOR$Version$VH_; }

    static final FunctionDescriptor RtlInitializeCorrelationVector$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlInitializeCorrelationVector$FUNC() { return RtlInitializeCorrelationVector$FUNC_; }

    static final MethodHandle RtlInitializeCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInitializeCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RtlInitializeCorrelationVector$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlInitializeCorrelationVector$MH() { return RtlInitializeCorrelationVector$MH_; }

    static final FunctionDescriptor RtlIncrementCorrelationVector$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlIncrementCorrelationVector$FUNC() { return RtlIncrementCorrelationVector$FUNC_; }

    static final MethodHandle RtlIncrementCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlIncrementCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlIncrementCorrelationVector$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlIncrementCorrelationVector$MH() { return RtlIncrementCorrelationVector$MH_; }

    static final FunctionDescriptor RtlExtendCorrelationVector$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlExtendCorrelationVector$FUNC() { return RtlExtendCorrelationVector$FUNC_; }

    static final MethodHandle RtlExtendCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlExtendCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlExtendCorrelationVector$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlExtendCorrelationVector$MH() { return RtlExtendCorrelationVector$MH_; }

    static final FunctionDescriptor RtlValidateCorrelationVector$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlValidateCorrelationVector$FUNC() { return RtlValidateCorrelationVector$FUNC_; }

    static final MethodHandle RtlValidateCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlValidateCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlValidateCorrelationVector$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlValidateCorrelationVector$MH() { return RtlValidateCorrelationVector$MH_; }

    static final MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("TriggerId")
    ).withName("_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG");
    public static jdk.incubator.foreign.MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_; }

    static final MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$LAYOUT() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$LAYOUT_; }

    static final VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH_ = _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH_; }

    static final MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$LAYOUT() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$LAYOUT_; }

    static final VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH_ = MemoryHandles.asAddressVarHandle(_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TriggerId")));
    public static java.lang.invoke.VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH_; }

    static final FunctionDescriptor CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC() { return CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC_; }

    static final MethodHandle CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CUSTOM_SYSTEM_EVENT_TRIGGER_INIT",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH() { return CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH_; }

    static final FunctionDescriptor RtlRaiseCustomSystemEventTrigger$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlRaiseCustomSystemEventTrigger$FUNC() { return RtlRaiseCustomSystemEventTrigger$FUNC_; }

    static final MethodHandle RtlRaiseCustomSystemEventTrigger$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlRaiseCustomSystemEventTrigger",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlRaiseCustomSystemEventTrigger$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlRaiseCustomSystemEventTrigger$MH() { return RtlRaiseCustomSystemEventTrigger$MH_; }

    public static int ImagePolicyEntryTypeNone() { return (int)0L; }

    public static int ImagePolicyEntryTypeBool() { return (int)1L; }

    public static int ImagePolicyEntryTypeInt8() { return (int)2L; }

    public static int ImagePolicyEntryTypeUInt8() { return (int)3L; }

    public static int ImagePolicyEntryTypeInt16() { return (int)4L; }

    public static int ImagePolicyEntryTypeUInt16() { return (int)5L; }

    public static int ImagePolicyEntryTypeInt32() { return (int)6L; }

    public static int ImagePolicyEntryTypeUInt32() { return (int)7L; }

    public static int ImagePolicyEntryTypeInt64() { return (int)8L; }

    public static int ImagePolicyEntryTypeUInt64() { return (int)9L; }

    public static int ImagePolicyEntryTypeAnsiString() { return (int)10L; }

    public static int ImagePolicyEntryTypeUnicodeString() { return (int)11L; }

    public static int ImagePolicyEntryTypeOverride() { return (int)12L; }

    public static int ImagePolicyEntryTypeMaximum() { return (int)13L; }

    public static int ImagePolicyIdNone() { return (int)0L; }

    public static int ImagePolicyIdEtw() { return (int)1L; }

    public static int ImagePolicyIdDebug() { return (int)2L; }

    public static int ImagePolicyIdCrashDump() { return (int)3L; }

    public static int ImagePolicyIdCrashDumpKey() { return (int)4L; }

    public static int ImagePolicyIdCrashDumpKeyGuid() { return (int)5L; }

    public static int ImagePolicyIdParentSd() { return (int)6L; }

    public static int ImagePolicyIdParentSdRev() { return (int)7L; }

    public static int ImagePolicyIdSvn() { return (int)8L; }

    public static int ImagePolicyIdDeviceId() { return (int)9L; }

    public static int ImagePolicyIdCapability() { return (int)10L; }

    public static int ImagePolicyIdScenarioId() { return (int)11L; }

    public static int ImagePolicyIdMaximum() { return (int)12L; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Type"),
        C_INT.withName("PolicyId"),
        MemoryLayout.ofUnion(
            C_POINTER.withName("None"),
            C_BOOL.withName("BoolValue"),
            C_BOOL.withName("Int8Value"),
            C_BOOL.withName("UInt8Value"),
            C_SHORT.withName("Int16Value"),
            C_SHORT.withName("UInt16Value"),
            C_INT.withName("Int32Value"),
            C_INT.withName("UInt32Value"),
            C_LONGLONG.withName("Int64Value"),
            C_LONGLONG.withName("UInt64Value"),
            C_POINTER.withName("AnsiStringValue"),
            C_POINTER.withName("UnicodeStringValue")
        ).withName("u")
    ).withName("_IMAGE_POLICY_ENTRY");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$struct$LAYOUT() { return _IMAGE_POLICY_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$Type$LAYOUT() { return _IMAGE_POLICY_ENTRY$Type$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_ENTRY$Type$VH_ = _IMAGE_POLICY_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _IMAGE_POLICY_ENTRY$Type$VH() { return _IMAGE_POLICY_ENTRY$Type$VH_; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$PolicyId$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$PolicyId$LAYOUT() { return _IMAGE_POLICY_ENTRY$PolicyId$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_ENTRY$PolicyId$VH_ = _IMAGE_POLICY_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PolicyId"));
    public static java.lang.invoke.VarHandle _IMAGE_POLICY_ENTRY$PolicyId$VH() { return _IMAGE_POLICY_ENTRY$PolicyId$VH_; }

    static final MemoryLayout u$None$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout u$None$LAYOUT() { return u$None$LAYOUT_; }

    static final VarHandle u$None$VH_ = MemoryHandles.asAddressVarHandle(u$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("None")));
    public static java.lang.invoke.VarHandle u$None$VH() { return u$None$VH_; }

    static final MemoryLayout u$BoolValue$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout u$BoolValue$LAYOUT() { return u$BoolValue$LAYOUT_; }

    static final VarHandle u$BoolValue$VH_ = u$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BoolValue"));
    public static java.lang.invoke.VarHandle u$BoolValue$VH() { return u$BoolValue$VH_; }

    static final MemoryLayout u$Int8Value$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout u$Int8Value$LAYOUT() { return u$Int8Value$LAYOUT_; }

    static final VarHandle u$Int8Value$VH_ = u$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Int8Value"));
    public static java.lang.invoke.VarHandle u$Int8Value$VH() { return u$Int8Value$VH_; }

    static final MemoryLayout u$UInt8Value$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout u$UInt8Value$LAYOUT() { return u$UInt8Value$LAYOUT_; }

    static final VarHandle u$UInt8Value$VH_ = u$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("UInt8Value"));
    public static java.lang.invoke.VarHandle u$UInt8Value$VH() { return u$UInt8Value$VH_; }

    static final MemoryLayout u$Int16Value$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout u$Int16Value$LAYOUT() { return u$Int16Value$LAYOUT_; }

    static final VarHandle u$Int16Value$VH_ = u$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Int16Value"));
    public static java.lang.invoke.VarHandle u$Int16Value$VH() { return u$Int16Value$VH_; }

    static final MemoryLayout u$UInt16Value$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout u$UInt16Value$LAYOUT() { return u$UInt16Value$LAYOUT_; }

    static final VarHandle u$UInt16Value$VH_ = u$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("UInt16Value"));
    public static java.lang.invoke.VarHandle u$UInt16Value$VH() { return u$UInt16Value$VH_; }

    static final MemoryLayout u$Int32Value$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout u$Int32Value$LAYOUT() { return u$Int32Value$LAYOUT_; }

    static final VarHandle u$Int32Value$VH_ = u$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Int32Value"));
    public static java.lang.invoke.VarHandle u$Int32Value$VH() { return u$Int32Value$VH_; }

    static final MemoryLayout u$UInt32Value$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout u$UInt32Value$LAYOUT() { return u$UInt32Value$LAYOUT_; }

    static final VarHandle u$UInt32Value$VH_ = u$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UInt32Value"));
    public static java.lang.invoke.VarHandle u$UInt32Value$VH() { return u$UInt32Value$VH_; }

    static final MemoryLayout u$Int64Value$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout u$Int64Value$LAYOUT() { return u$Int64Value$LAYOUT_; }

    static final VarHandle u$Int64Value$VH_ = u$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Int64Value"));
    public static java.lang.invoke.VarHandle u$Int64Value$VH() { return u$Int64Value$VH_; }

    static final MemoryLayout u$UInt64Value$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout u$UInt64Value$LAYOUT() { return u$UInt64Value$LAYOUT_; }

    static final VarHandle u$UInt64Value$VH_ = u$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UInt64Value"));
    public static java.lang.invoke.VarHandle u$UInt64Value$VH() { return u$UInt64Value$VH_; }

    static final MemoryLayout u$AnsiStringValue$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout u$AnsiStringValue$LAYOUT() { return u$AnsiStringValue$LAYOUT_; }

    static final VarHandle u$AnsiStringValue$VH_ = MemoryHandles.asAddressVarHandle(u$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AnsiStringValue")));
    public static java.lang.invoke.VarHandle u$AnsiStringValue$VH() { return u$AnsiStringValue$VH_; }

    static final MemoryLayout u$UnicodeStringValue$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout u$UnicodeStringValue$LAYOUT() { return u$UnicodeStringValue$LAYOUT_; }

    static final VarHandle u$UnicodeStringValue$VH_ = MemoryHandles.asAddressVarHandle(u$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UnicodeStringValue")));
    public static java.lang.invoke.VarHandle u$UnicodeStringValue$VH() { return u$UnicodeStringValue$VH_; }

    static final MemoryLayout _IMAGE_POLICY_METADATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("Version"),
        MemoryLayout.ofSequence(7, C_BOOL).withName("Reserved0"),
        C_LONGLONG.withName("ApplicationId"),
        MemoryLayout.ofSequence(MemoryLayout.ofStruct(
            C_INT.withName("Type"),
            C_INT.withName("PolicyId"),
            MemoryLayout.ofUnion(
                C_POINTER.withName("None"),
                C_BOOL.withName("BoolValue"),
                C_BOOL.withName("Int8Value"),
                C_BOOL.withName("UInt8Value"),
                C_SHORT.withName("Int16Value"),
                C_SHORT.withName("UInt16Value"),
                C_INT.withName("Int32Value"),
                C_INT.withName("UInt32Value"),
                C_LONGLONG.withName("Int64Value"),
                C_LONGLONG.withName("UInt64Value"),
                C_POINTER.withName("AnsiStringValue"),
                C_POINTER.withName("UnicodeStringValue")
            ).withName("u")
        ).withName("_IMAGE_POLICY_ENTRY")).withName("Policies")
    ).withName("_IMAGE_POLICY_METADATA");
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_METADATA$struct$LAYOUT() { return _IMAGE_POLICY_METADATA$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_POLICY_METADATA$Version$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_METADATA$Version$LAYOUT() { return _IMAGE_POLICY_METADATA$Version$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_METADATA$Version$VH_ = _IMAGE_POLICY_METADATA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _IMAGE_POLICY_METADATA$Version$VH() { return _IMAGE_POLICY_METADATA$Version$VH_; }

    static final MemoryLayout _IMAGE_POLICY_METADATA$ApplicationId$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_METADATA$ApplicationId$LAYOUT() { return _IMAGE_POLICY_METADATA$ApplicationId$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_METADATA$ApplicationId$VH_ = _IMAGE_POLICY_METADATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ApplicationId"));
    public static java.lang.invoke.VarHandle _IMAGE_POLICY_METADATA$ApplicationId$VH() { return _IMAGE_POLICY_METADATA$ApplicationId$VH_; }

    static final FunctionDescriptor RtlIsZeroMemory$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlIsZeroMemory$FUNC() { return RtlIsZeroMemory$FUNC_; }

    static final MethodHandle RtlIsZeroMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlIsZeroMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        RtlIsZeroMemory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlIsZeroMemory$MH() { return RtlIsZeroMemory$MH_; }

    static final FunctionDescriptor RtlNormalizeSecurityDescriptor$FUNC_ = FunctionDescriptor.of(C_BOOL,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_BOOL
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlNormalizeSecurityDescriptor$FUNC() { return RtlNormalizeSecurityDescriptor$FUNC_; }

    static final MethodHandle RtlNormalizeSecurityDescriptor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlNormalizeSecurityDescriptor",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)B",
        RtlNormalizeSecurityDescriptor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlNormalizeSecurityDescriptor$MH() { return RtlNormalizeSecurityDescriptor$MH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Type"),
        C_SHORT.withName("CreatorBackTraceIndex"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("CriticalSection"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("Flink"),
            C_POINTER.withName("Blink")
        ).withName("ProcessLocksList"),
        C_INT.withName("EntryCount"),
        C_INT.withName("ContentionCount"),
        C_INT.withName("Flags"),
        C_SHORT.withName("CreatorBackTraceIndexHigh"),
        C_SHORT.withName("SpareWORD")
    ).withName("_RTL_CRITICAL_SECTION_DEBUG");
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$Type$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$Type$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$Type$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$Type$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$Type$VH() { return _RTL_CRITICAL_SECTION_DEBUG$Type$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CreatorBackTraceIndex"));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$VH() { return _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$VH_ = MemoryHandles.asAddressVarHandle(_RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalSection")));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$VH() { return _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$EntryCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$EntryCount$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$EntryCount$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$EntryCount$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EntryCount"));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$EntryCount$VH() { return _RTL_CRITICAL_SECTION_DEBUG$EntryCount$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ContentionCount"));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$VH() { return _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$Flags$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$Flags$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$Flags$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$Flags$VH() { return _RTL_CRITICAL_SECTION_DEBUG$Flags$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CreatorBackTraceIndexHigh"));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$VH() { return _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SpareWORD"));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$VH() { return _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("DebugInfo"),
        C_INT.withName("LockCount"),
        C_INT.withName("RecursionCount"),
        C_POINTER.withName("OwningThread"),
        C_POINTER.withName("LockSemaphore"),
        C_LONGLONG.withName("SpinCount")
    ).withName("_RTL_CRITICAL_SECTION");
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$struct$LAYOUT() { return _RTL_CRITICAL_SECTION$struct$LAYOUT_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$DebugInfo$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$DebugInfo$LAYOUT() { return _RTL_CRITICAL_SECTION$DebugInfo$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$DebugInfo$VH_ = MemoryHandles.asAddressVarHandle(_RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DebugInfo")));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$DebugInfo$VH() { return _RTL_CRITICAL_SECTION$DebugInfo$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$LockCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$LockCount$LAYOUT() { return _RTL_CRITICAL_SECTION$LockCount$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$LockCount$VH_ = _RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LockCount"));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$LockCount$VH() { return _RTL_CRITICAL_SECTION$LockCount$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$RecursionCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$RecursionCount$LAYOUT() { return _RTL_CRITICAL_SECTION$RecursionCount$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$RecursionCount$VH_ = _RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RecursionCount"));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$RecursionCount$VH() { return _RTL_CRITICAL_SECTION$RecursionCount$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$OwningThread$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$OwningThread$LAYOUT() { return _RTL_CRITICAL_SECTION$OwningThread$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$OwningThread$VH_ = MemoryHandles.asAddressVarHandle(_RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OwningThread")));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$OwningThread$VH() { return _RTL_CRITICAL_SECTION$OwningThread$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$LockSemaphore$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$LockSemaphore$LAYOUT() { return _RTL_CRITICAL_SECTION$LockSemaphore$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$LockSemaphore$VH_ = MemoryHandles.asAddressVarHandle(_RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LockSemaphore")));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$LockSemaphore$VH() { return _RTL_CRITICAL_SECTION$LockSemaphore$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$SpinCount$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$SpinCount$LAYOUT() { return _RTL_CRITICAL_SECTION$SpinCount$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$SpinCount$VH_ = _RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SpinCount"));
    public static java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$SpinCount$VH() { return _RTL_CRITICAL_SECTION$SpinCount$VH_; }

    static final MemoryLayout _RTL_SRWLOCK$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Ptr")
    ).withName("_RTL_SRWLOCK");
    public static jdk.incubator.foreign.MemoryLayout _RTL_SRWLOCK$struct$LAYOUT() { return _RTL_SRWLOCK$struct$LAYOUT_; }

    static final MemoryLayout _RTL_SRWLOCK$Ptr$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _RTL_SRWLOCK$Ptr$LAYOUT() { return _RTL_SRWLOCK$Ptr$LAYOUT_; }

    static final VarHandle _RTL_SRWLOCK$Ptr$VH_ = MemoryHandles.asAddressVarHandle(_RTL_SRWLOCK$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ptr")));
    public static java.lang.invoke.VarHandle _RTL_SRWLOCK$Ptr$VH() { return _RTL_SRWLOCK$Ptr$VH_; }

    static final MemoryLayout _RTL_CONDITION_VARIABLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Ptr")
    ).withName("_RTL_CONDITION_VARIABLE");
    public static jdk.incubator.foreign.MemoryLayout _RTL_CONDITION_VARIABLE$struct$LAYOUT() { return _RTL_CONDITION_VARIABLE$struct$LAYOUT_; }

    static final MemoryLayout _RTL_CONDITION_VARIABLE$Ptr$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _RTL_CONDITION_VARIABLE$Ptr$LAYOUT() { return _RTL_CONDITION_VARIABLE$Ptr$LAYOUT_; }

    static final VarHandle _RTL_CONDITION_VARIABLE$Ptr$VH_ = MemoryHandles.asAddressVarHandle(_RTL_CONDITION_VARIABLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ptr")));
    public static java.lang.invoke.VarHandle _RTL_CONDITION_VARIABLE$Ptr$VH() { return _RTL_CONDITION_VARIABLE$Ptr$VH_; }

    public static int HeapCompatibilityInformation() { return (int)0L; }

    public static int HeapEnableTerminationOnCorruption() { return (int)1L; }

    public static int HeapOptimizeResources() { return (int)3L; }

    static final MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Version"),
        C_INT.withName("Flags")
    ).withName("_HEAP_OPTIMIZE_RESOURCES_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$struct$LAYOUT() { return _HEAP_OPTIMIZE_RESOURCES_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$LAYOUT() { return _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$LAYOUT_; }

    static final VarHandle _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$VH_ = _HEAP_OPTIMIZE_RESOURCES_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$VH() { return _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$VH_; }

    static final MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$LAYOUT() { return _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$LAYOUT_; }

    static final VarHandle _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$VH_ = _HEAP_OPTIMIZE_RESOURCES_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static java.lang.invoke.VarHandle _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$VH() { return _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$VH_; }

    public static int ActivationContextBasicInformation() { return (int)1L; }

    public static int ActivationContextDetailedInformation() { return (int)2L; }

    public static int AssemblyDetailedInformationInActivationContext() { return (int)3L; }

    public static int FileInformationInAssemblyOfAssemblyInActivationContext() { return (int)4L; }

    public static int RunlevelInformationInActivationContext() { return (int)5L; }

    public static int CompatibilityInformationInActivationContext() { return (int)6L; }

    public static int ActivationContextManifestResourceName() { return (int)7L; }

    public static int MaxActivationContextInfoClass() { return (int)8L; }

    public static int AssemblyDetailedInformationInActivationContxt() { return (int)3L; }

    public static int FileInformationInAssemblyOfAssemblyInActivationContxt() { return (int)4L; }

    static final MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ulAssemblyIndex"),
        C_INT.withName("ulFileIndexInAssembly")
    ).withName("_ACTIVATION_CONTEXT_QUERY_INDEX");
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$struct$LAYOUT() { return _ACTIVATION_CONTEXT_QUERY_INDEX$struct$LAYOUT_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$LAYOUT() { return _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$VH_ = _ACTIVATION_CONTEXT_QUERY_INDEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAssemblyIndex"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$VH() { return _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$LAYOUT() { return _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$VH_ = _ACTIVATION_CONTEXT_QUERY_INDEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFileIndexInAssembly"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$VH() { return _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$VH_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ulFlags"),
        C_INT.withName("ulFilenameLength"),
        C_INT.withName("ulPathLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpFileName"),
        C_POINTER.withName("lpFilePath")
    ).withName("_ASSEMBLY_FILE_DETAILED_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$LAYOUT_; }

    static final VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$VH_ = _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFlags"));
    public static java.lang.invoke.VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$VH() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$VH_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$LAYOUT_; }

    static final VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$VH_ = _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFilenameLength"));
    public static java.lang.invoke.VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$VH() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$VH_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$LAYOUT_; }

    static final VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$VH_ = _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulPathLength"));
    public static java.lang.invoke.VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$VH() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$VH_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$LAYOUT_; }

    static final VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$VH_ = MemoryHandles.asAddressVarHandle(_ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpFileName")));
    public static java.lang.invoke.VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$VH() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$VH_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$LAYOUT_; }

    static final VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$VH_ = MemoryHandles.asAddressVarHandle(_ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpFilePath")));
    public static java.lang.invoke.VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$VH() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ulFlags"),
        C_INT.withName("ulEncodedAssemblyIdentityLength"),
        C_INT.withName("ulManifestPathType"),
        C_INT.withName("ulManifestPathLength"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("liManifestLastWriteTime"),
        C_INT.withName("ulPolicyPathType"),
        C_INT.withName("ulPolicyPathLength"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("liPolicyLastWriteTime"),
        C_INT.withName("ulMetadataSatelliteRosterIndex"),
        C_INT.withName("ulManifestVersionMajor"),
        C_INT.withName("ulManifestVersionMinor"),
        C_INT.withName("ulPolicyVersionMajor"),
        C_INT.withName("ulPolicyVersionMinor"),
        C_INT.withName("ulAssemblyDirectoryNameLength"),
        C_POINTER.withName("lpAssemblyEncodedAssemblyIdentity"),
        C_POINTER.withName("lpAssemblyManifestPath"),
        C_POINTER.withName("lpAssemblyPolicyPath"),
        C_POINTER.withName("lpAssemblyDirectoryName"),
        C_INT.withName("ulFileCount"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFlags"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulEncodedAssemblyIdentityLength"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulManifestPathType"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulManifestPathLength"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulPolicyPathType"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulPolicyPathLength"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulMetadataSatelliteRosterIndex"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulManifestVersionMajor"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulManifestVersionMinor"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulPolicyVersionMajor"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulPolicyVersionMinor"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAssemblyDirectoryNameLength"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAssemblyEncodedAssemblyIdentity")));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAssemblyManifestPath")));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAssemblyPolicyPath")));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAssemblyDirectoryName")));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFileCount"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$VH_; }

    public static int ACTCTX_RUN_LEVEL_UNSPECIFIED() { return (int)0L; }

    public static int ACTCTX_RUN_LEVEL_AS_INVOKER() { return (int)1L; }

    public static int ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE() { return (int)2L; }

    public static int ACTCTX_RUN_LEVEL_REQUIRE_ADMIN() { return (int)3L; }

    public static int ACTCTX_RUN_LEVEL_NUMBERS() { return (int)4L; }

    static final MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ulFlags"),
        C_INT.withName("RunLevel"),
        C_INT.withName("UiAccess")
    ).withName("_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$LAYOUT() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$VH_ = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFlags"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$VH() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$LAYOUT() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$VH_ = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RunLevel"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$VH() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$LAYOUT() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$VH_ = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UiAccess"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$VH() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$VH_; }

    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN() { return (int)0L; }

    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS() { return (int)1L; }

    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION() { return (int)2L; }

    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED() { return (int)3L; }

    static final MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
        ).withName("Id"),
        C_INT.withName("Type"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("MaxVersionTested")
    ).withName("_COMPATIBILITY_CONTEXT_ELEMENT");
    public static jdk.incubator.foreign.MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$struct$LAYOUT() { return _COMPATIBILITY_CONTEXT_ELEMENT$struct$LAYOUT_; }

    static final MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$Type$LAYOUT() { return _COMPATIBILITY_CONTEXT_ELEMENT$Type$LAYOUT_; }

    static final VarHandle _COMPATIBILITY_CONTEXT_ELEMENT$Type$VH_ = _COMPATIBILITY_CONTEXT_ELEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _COMPATIBILITY_CONTEXT_ELEMENT$Type$VH() { return _COMPATIBILITY_CONTEXT_ELEMENT$Type$VH_; }

    static final MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$LAYOUT() { return _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$LAYOUT_; }

    static final VarHandle _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$VH_ = _COMPATIBILITY_CONTEXT_ELEMENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxVersionTested"));
    public static java.lang.invoke.VarHandle _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$VH() { return _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ElementCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_BOOL).withName("Data4")
            ).withName("Id"),
            C_INT.withName("Type"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("MaxVersionTested")
        ).withName("_COMPATIBILITY_CONTEXT_ELEMENT")).withName("Elements")
    ).withName("_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$struct$LAYOUT() { return _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$LAYOUT() { return _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$VH_ = _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ElementCount"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$VH() { return _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$VH_; }

    static final MemoryLayout _SUPPORTED_OS_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion")
    ).withName("_SUPPORTED_OS_INFO");
    public static jdk.incubator.foreign.MemoryLayout _SUPPORTED_OS_INFO$struct$LAYOUT() { return _SUPPORTED_OS_INFO$struct$LAYOUT_; }

    static final MemoryLayout _SUPPORTED_OS_INFO$MajorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SUPPORTED_OS_INFO$MajorVersion$LAYOUT() { return _SUPPORTED_OS_INFO$MajorVersion$LAYOUT_; }

    static final VarHandle _SUPPORTED_OS_INFO$MajorVersion$VH_ = _SUPPORTED_OS_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static java.lang.invoke.VarHandle _SUPPORTED_OS_INFO$MajorVersion$VH() { return _SUPPORTED_OS_INFO$MajorVersion$VH_; }

    static final MemoryLayout _SUPPORTED_OS_INFO$MinorVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _SUPPORTED_OS_INFO$MinorVersion$LAYOUT() { return _SUPPORTED_OS_INFO$MinorVersion$LAYOUT_; }

    static final VarHandle _SUPPORTED_OS_INFO$MinorVersion$VH_ = _SUPPORTED_OS_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    public static java.lang.invoke.VarHandle _SUPPORTED_OS_INFO$MinorVersion$VH() { return _SUPPORTED_OS_INFO$MinorVersion$VH_; }

    static final MemoryLayout _MAXVERSIONTESTED_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxVersionTested")
    ).withName("_MAXVERSIONTESTED_INFO");
    public static jdk.incubator.foreign.MemoryLayout _MAXVERSIONTESTED_INFO$struct$LAYOUT() { return _MAXVERSIONTESTED_INFO$struct$LAYOUT_; }

    static final MemoryLayout _MAXVERSIONTESTED_INFO$MaxVersionTested$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _MAXVERSIONTESTED_INFO$MaxVersionTested$LAYOUT() { return _MAXVERSIONTESTED_INFO$MaxVersionTested$LAYOUT_; }

    static final VarHandle _MAXVERSIONTESTED_INFO$MaxVersionTested$VH_ = _MAXVERSIONTESTED_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxVersionTested"));
    public static java.lang.invoke.VarHandle _MAXVERSIONTESTED_INFO$MaxVersionTested$VH() { return _MAXVERSIONTESTED_INFO$MaxVersionTested$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwFlags"),
        C_INT.withName("ulFormatVersion"),
        C_INT.withName("ulAssemblyCount"),
        C_INT.withName("ulRootManifestPathType"),
        C_INT.withName("ulRootManifestPathChars"),
        C_INT.withName("ulRootConfigurationPathType"),
        C_INT.withName("ulRootConfigurationPathChars"),
        C_INT.withName("ulAppDirPathType"),
        C_INT.withName("ulAppDirPathChars"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpRootManifestPath"),
        C_POINTER.withName("lpRootConfigurationPath"),
        C_POINTER.withName("lpAppDirPath")
    ).withName("_ACTIVATION_CONTEXT_DETAILED_INFORMATION");
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFormatVersion"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAssemblyCount"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulRootManifestPathType"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulRootManifestPathChars"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulRootConfigurationPathType"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulRootConfigurationPathChars"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAppDirPathType"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAppDirPathChars"));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpRootManifestPath")));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpRootConfigurationPath")));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAppDirPath")));
    public static java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$VH_; }

    static final MemoryLayout _HARDWARE_COUNTER_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Type"),
        C_INT.withName("Reserved"),
        C_LONGLONG.withName("Value")
    ).withName("_HARDWARE_COUNTER_DATA");
    public static jdk.incubator.foreign.MemoryLayout _HARDWARE_COUNTER_DATA$struct$LAYOUT() { return _HARDWARE_COUNTER_DATA$struct$LAYOUT_; }

    static final MemoryLayout _HARDWARE_COUNTER_DATA$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _HARDWARE_COUNTER_DATA$Type$LAYOUT() { return _HARDWARE_COUNTER_DATA$Type$LAYOUT_; }

    static final VarHandle _HARDWARE_COUNTER_DATA$Type$VH_ = _HARDWARE_COUNTER_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _HARDWARE_COUNTER_DATA$Type$VH() { return _HARDWARE_COUNTER_DATA$Type$VH_; }

    static final MemoryLayout _HARDWARE_COUNTER_DATA$Reserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _HARDWARE_COUNTER_DATA$Reserved$LAYOUT() { return _HARDWARE_COUNTER_DATA$Reserved$LAYOUT_; }

    static final VarHandle _HARDWARE_COUNTER_DATA$Reserved$VH_ = _HARDWARE_COUNTER_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _HARDWARE_COUNTER_DATA$Reserved$VH() { return _HARDWARE_COUNTER_DATA$Reserved$VH_; }

    static final MemoryLayout _HARDWARE_COUNTER_DATA$Value$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _HARDWARE_COUNTER_DATA$Value$LAYOUT() { return _HARDWARE_COUNTER_DATA$Value$LAYOUT_; }

    static final VarHandle _HARDWARE_COUNTER_DATA$Value$VH_ = _HARDWARE_COUNTER_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Value"));
    public static java.lang.invoke.VarHandle _HARDWARE_COUNTER_DATA$Value$VH() { return _HARDWARE_COUNTER_DATA$Value$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Size"),
        C_BOOL.withName("Version"),
        C_BOOL.withName("HwCountersCount"),
        C_INT.withName("ContextSwitchCount"),
        C_LONGLONG.withName("WaitReasonBitMap"),
        C_LONGLONG.withName("CycleTime"),
        C_INT.withName("RetryCount"),
        C_INT.withName("Reserved"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_INT.withName("Type"),
            C_INT.withName("Reserved"),
            C_LONGLONG.withName("Value")
        ).withName("_HARDWARE_COUNTER_DATA")).withName("HwCounters")
    ).withName("_PERFORMANCE_DATA");
    public static jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$struct$LAYOUT() { return _PERFORMANCE_DATA$struct$LAYOUT_; }

    static final MemoryLayout _PERFORMANCE_DATA$Size$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$Size$LAYOUT() { return _PERFORMANCE_DATA$Size$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$Size$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Size"));
    public static java.lang.invoke.VarHandle _PERFORMANCE_DATA$Size$VH() { return _PERFORMANCE_DATA$Size$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$Version$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$Version$LAYOUT() { return _PERFORMANCE_DATA$Version$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$Version$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Version"));
    public static java.lang.invoke.VarHandle _PERFORMANCE_DATA$Version$VH() { return _PERFORMANCE_DATA$Version$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$HwCountersCount$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$HwCountersCount$LAYOUT() { return _PERFORMANCE_DATA$HwCountersCount$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$HwCountersCount$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("HwCountersCount"));
    public static java.lang.invoke.VarHandle _PERFORMANCE_DATA$HwCountersCount$VH() { return _PERFORMANCE_DATA$HwCountersCount$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$ContextSwitchCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$ContextSwitchCount$LAYOUT() { return _PERFORMANCE_DATA$ContextSwitchCount$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$ContextSwitchCount$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ContextSwitchCount"));
    public static java.lang.invoke.VarHandle _PERFORMANCE_DATA$ContextSwitchCount$VH() { return _PERFORMANCE_DATA$ContextSwitchCount$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$WaitReasonBitMap$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$WaitReasonBitMap$LAYOUT() { return _PERFORMANCE_DATA$WaitReasonBitMap$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$WaitReasonBitMap$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("WaitReasonBitMap"));
    public static java.lang.invoke.VarHandle _PERFORMANCE_DATA$WaitReasonBitMap$VH() { return _PERFORMANCE_DATA$WaitReasonBitMap$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$CycleTime$LAYOUT_ = C_LONGLONG;
    public static jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$CycleTime$LAYOUT() { return _PERFORMANCE_DATA$CycleTime$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$CycleTime$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CycleTime"));
    public static java.lang.invoke.VarHandle _PERFORMANCE_DATA$CycleTime$VH() { return _PERFORMANCE_DATA$CycleTime$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$RetryCount$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$RetryCount$LAYOUT() { return _PERFORMANCE_DATA$RetryCount$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$RetryCount$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RetryCount"));
    public static java.lang.invoke.VarHandle _PERFORMANCE_DATA$RetryCount$VH() { return _PERFORMANCE_DATA$RetryCount$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$Reserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$Reserved$LAYOUT() { return _PERFORMANCE_DATA$Reserved$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$Reserved$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _PERFORMANCE_DATA$Reserved$VH() { return _PERFORMANCE_DATA$Reserved$VH_; }

    static final FunctionDescriptor RtlGetDeviceFamilyInfoEnum$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlGetDeviceFamilyInfoEnum$FUNC() { return RtlGetDeviceFamilyInfoEnum$FUNC_; }

    static final MethodHandle RtlGetDeviceFamilyInfoEnum$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGetDeviceFamilyInfoEnum",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlGetDeviceFamilyInfoEnum$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlGetDeviceFamilyInfoEnum$MH() { return RtlGetDeviceFamilyInfoEnum$MH_; }

    static final FunctionDescriptor RtlConvertDeviceFamilyInfoToString$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlConvertDeviceFamilyInfoToString$FUNC() { return RtlConvertDeviceFamilyInfoToString$FUNC_; }

    static final MethodHandle RtlConvertDeviceFamilyInfoToString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlConvertDeviceFamilyInfoToString",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlConvertDeviceFamilyInfoToString$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlConvertDeviceFamilyInfoToString$MH() { return RtlConvertDeviceFamilyInfoToString$MH_; }

    static final FunctionDescriptor RtlSwitchedVVI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor RtlSwitchedVVI$FUNC() { return RtlSwitchedVVI$FUNC_; }

    static final MethodHandle RtlSwitchedVVI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlSwitchedVVI",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        RtlSwitchedVVI$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RtlSwitchedVVI$MH() { return RtlSwitchedVVI$MH_; }

    static final MemoryLayout _EVENTLOGRECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Length"),
        C_INT.withName("Reserved"),
        C_INT.withName("RecordNumber"),
        C_INT.withName("TimeGenerated"),
        C_INT.withName("TimeWritten"),
        C_INT.withName("EventID"),
        C_SHORT.withName("EventType"),
        C_SHORT.withName("NumStrings"),
        C_SHORT.withName("EventCategory"),
        C_SHORT.withName("ReservedFlags"),
        C_INT.withName("ClosingRecordNumber"),
        C_INT.withName("StringOffset"),
        C_INT.withName("UserSidLength"),
        C_INT.withName("UserSidOffset"),
        C_INT.withName("DataLength"),
        C_INT.withName("DataOffset")
    ).withName("_EVENTLOGRECORD");
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$struct$LAYOUT() { return _EVENTLOGRECORD$struct$LAYOUT_; }

    static final MemoryLayout _EVENTLOGRECORD$Length$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$Length$LAYOUT() { return _EVENTLOGRECORD$Length$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$Length$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$Length$VH() { return _EVENTLOGRECORD$Length$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$Reserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$Reserved$LAYOUT() { return _EVENTLOGRECORD$Reserved$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$Reserved$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$Reserved$VH() { return _EVENTLOGRECORD$Reserved$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$RecordNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$RecordNumber$LAYOUT() { return _EVENTLOGRECORD$RecordNumber$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$RecordNumber$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RecordNumber"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$RecordNumber$VH() { return _EVENTLOGRECORD$RecordNumber$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$TimeGenerated$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$TimeGenerated$LAYOUT() { return _EVENTLOGRECORD$TimeGenerated$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$TimeGenerated$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeGenerated"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$TimeGenerated$VH() { return _EVENTLOGRECORD$TimeGenerated$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$TimeWritten$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$TimeWritten$LAYOUT() { return _EVENTLOGRECORD$TimeWritten$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$TimeWritten$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeWritten"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$TimeWritten$VH() { return _EVENTLOGRECORD$TimeWritten$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$EventID$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$EventID$LAYOUT() { return _EVENTLOGRECORD$EventID$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$EventID$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EventID"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$EventID$VH() { return _EVENTLOGRECORD$EventID$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$EventType$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$EventType$LAYOUT() { return _EVENTLOGRECORD$EventType$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$EventType$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("EventType"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$EventType$VH() { return _EVENTLOGRECORD$EventType$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$NumStrings$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$NumStrings$LAYOUT() { return _EVENTLOGRECORD$NumStrings$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$NumStrings$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumStrings"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$NumStrings$VH() { return _EVENTLOGRECORD$NumStrings$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$EventCategory$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$EventCategory$LAYOUT() { return _EVENTLOGRECORD$EventCategory$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$EventCategory$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("EventCategory"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$EventCategory$VH() { return _EVENTLOGRECORD$EventCategory$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$ReservedFlags$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$ReservedFlags$LAYOUT() { return _EVENTLOGRECORD$ReservedFlags$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$ReservedFlags$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ReservedFlags"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$ReservedFlags$VH() { return _EVENTLOGRECORD$ReservedFlags$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$ClosingRecordNumber$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$ClosingRecordNumber$LAYOUT() { return _EVENTLOGRECORD$ClosingRecordNumber$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$ClosingRecordNumber$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ClosingRecordNumber"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$ClosingRecordNumber$VH() { return _EVENTLOGRECORD$ClosingRecordNumber$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$StringOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$StringOffset$LAYOUT() { return _EVENTLOGRECORD$StringOffset$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$StringOffset$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StringOffset"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$StringOffset$VH() { return _EVENTLOGRECORD$StringOffset$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$UserSidLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$UserSidLength$LAYOUT() { return _EVENTLOGRECORD$UserSidLength$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$UserSidLength$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserSidLength"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$UserSidLength$VH() { return _EVENTLOGRECORD$UserSidLength$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$UserSidOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$UserSidOffset$LAYOUT() { return _EVENTLOGRECORD$UserSidOffset$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$UserSidOffset$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserSidOffset"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$UserSidOffset$VH() { return _EVENTLOGRECORD$UserSidOffset$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$DataLength$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$DataLength$LAYOUT() { return _EVENTLOGRECORD$DataLength$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$DataLength$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataLength"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$DataLength$VH() { return _EVENTLOGRECORD$DataLength$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$DataOffset$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$DataOffset$LAYOUT() { return _EVENTLOGRECORD$DataOffset$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$DataOffset$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataOffset"));
    public static java.lang.invoke.VarHandle _EVENTLOGRECORD$DataOffset$VH() { return _EVENTLOGRECORD$DataOffset$VH_; }

    static final MemoryLayout _EVENTSFORLOGFILE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ulSize"),
        MemoryLayout.ofSequence(256, C_SHORT).withName("szLogicalLogFile"),
        C_INT.withName("ulNumRecords"),
        MemoryLayout.ofSequence(MemoryLayout.ofStruct(
            C_INT.withName("Length"),
            C_INT.withName("Reserved"),
            C_INT.withName("RecordNumber"),
            C_INT.withName("TimeGenerated"),
            C_INT.withName("TimeWritten"),
            C_INT.withName("EventID"),
            C_SHORT.withName("EventType"),
            C_SHORT.withName("NumStrings"),
            C_SHORT.withName("EventCategory"),
            C_SHORT.withName("ReservedFlags"),
            C_INT.withName("ClosingRecordNumber"),
            C_INT.withName("StringOffset"),
            C_INT.withName("UserSidLength"),
            C_INT.withName("UserSidOffset"),
            C_INT.withName("DataLength"),
            C_INT.withName("DataOffset")
        ).withName("_EVENTLOGRECORD")).withName("pEventLogRecords")
    ).withName("_EVENTSFORLOGFILE");
    public static jdk.incubator.foreign.MemoryLayout _EVENTSFORLOGFILE$struct$LAYOUT() { return _EVENTSFORLOGFILE$struct$LAYOUT_; }

    static final MemoryLayout _EVENTSFORLOGFILE$ulSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTSFORLOGFILE$ulSize$LAYOUT() { return _EVENTSFORLOGFILE$ulSize$LAYOUT_; }

    static final VarHandle _EVENTSFORLOGFILE$ulSize$VH_ = _EVENTSFORLOGFILE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSize"));
    public static java.lang.invoke.VarHandle _EVENTSFORLOGFILE$ulSize$VH() { return _EVENTSFORLOGFILE$ulSize$VH_; }

    static final MemoryLayout _EVENTSFORLOGFILE$ulNumRecords$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _EVENTSFORLOGFILE$ulNumRecords$LAYOUT() { return _EVENTSFORLOGFILE$ulNumRecords$LAYOUT_; }

    static final VarHandle _EVENTSFORLOGFILE$ulNumRecords$VH_ = _EVENTSFORLOGFILE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulNumRecords"));
    public static java.lang.invoke.VarHandle _EVENTSFORLOGFILE$ulNumRecords$VH() { return _EVENTSFORLOGFILE$ulNumRecords$VH_; }

    static final MemoryLayout _PACKEDEVENTINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ulSize"),
        C_INT.withName("ulNumEventsForLogFile"),
        MemoryLayout.ofSequence(C_INT).withName("ulOffsets")
    ).withName("_PACKEDEVENTINFO");
    public static jdk.incubator.foreign.MemoryLayout _PACKEDEVENTINFO$struct$LAYOUT() { return _PACKEDEVENTINFO$struct$LAYOUT_; }

    static final MemoryLayout _PACKEDEVENTINFO$ulSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PACKEDEVENTINFO$ulSize$LAYOUT() { return _PACKEDEVENTINFO$ulSize$LAYOUT_; }

    static final VarHandle _PACKEDEVENTINFO$ulSize$VH_ = _PACKEDEVENTINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSize"));
    public static java.lang.invoke.VarHandle _PACKEDEVENTINFO$ulSize$VH() { return _PACKEDEVENTINFO$ulSize$VH_; }

    static final MemoryLayout _PACKEDEVENTINFO$ulNumEventsForLogFile$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _PACKEDEVENTINFO$ulNumEventsForLogFile$LAYOUT() { return _PACKEDEVENTINFO$ulNumEventsForLogFile$LAYOUT_; }

    static final VarHandle _PACKEDEVENTINFO$ulNumEventsForLogFile$VH_ = _PACKEDEVENTINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulNumEventsForLogFile"));
    public static java.lang.invoke.VarHandle _PACKEDEVENTINFO$ulNumEventsForLogFile$VH() { return _PACKEDEVENTINFO$ulNumEventsForLogFile$VH_; }

    public static int DriverType() { return (int)1L; }

    public static int FileSystemType() { return (int)2L; }

    public static int Win32ServiceOwnProcess() { return (int)16L; }

    public static int Win32ServiceShareProcess() { return (int)32L; }

    public static int AdapterType() { return (int)4L; }

    public static int RecognizerType() { return (int)8L; }

    public static int BootLoad() { return (int)0L; }

    public static int SystemLoad() { return (int)1L; }

    public static int AutoLoad() { return (int)2L; }

    public static int DemandLoad() { return (int)3L; }

    public static int DisableLoad() { return (int)4L; }

    public static int IgnoreError() { return (int)0L; }

    public static int NormalError() { return (int)1L; }

    public static int SevereError() { return (int)2L; }

    public static int CriticalError() { return (int)3L; }

    static final MemoryLayout _TAPE_ERASE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Type"),
        C_BOOL.withName("Immediate"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_TAPE_ERASE");
    public static jdk.incubator.foreign.MemoryLayout _TAPE_ERASE$struct$LAYOUT() { return _TAPE_ERASE$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_ERASE$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_ERASE$Type$LAYOUT() { return _TAPE_ERASE$Type$LAYOUT_; }

    static final VarHandle _TAPE_ERASE$Type$VH_ = _TAPE_ERASE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _TAPE_ERASE$Type$VH() { return _TAPE_ERASE$Type$VH_; }

    static final MemoryLayout _TAPE_ERASE$Immediate$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_ERASE$Immediate$LAYOUT() { return _TAPE_ERASE$Immediate$LAYOUT_; }

    static final VarHandle _TAPE_ERASE$Immediate$VH_ = _TAPE_ERASE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Immediate"));
    public static java.lang.invoke.VarHandle _TAPE_ERASE$Immediate$VH() { return _TAPE_ERASE$Immediate$VH_; }

    static final MemoryLayout _TAPE_PREPARE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Operation"),
        C_BOOL.withName("Immediate"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_TAPE_PREPARE");
    public static jdk.incubator.foreign.MemoryLayout _TAPE_PREPARE$struct$LAYOUT() { return _TAPE_PREPARE$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_PREPARE$Operation$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_PREPARE$Operation$LAYOUT() { return _TAPE_PREPARE$Operation$LAYOUT_; }

    static final VarHandle _TAPE_PREPARE$Operation$VH_ = _TAPE_PREPARE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Operation"));
    public static java.lang.invoke.VarHandle _TAPE_PREPARE$Operation$VH() { return _TAPE_PREPARE$Operation$VH_; }

    static final MemoryLayout _TAPE_PREPARE$Immediate$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_PREPARE$Immediate$LAYOUT() { return _TAPE_PREPARE$Immediate$LAYOUT_; }

    static final VarHandle _TAPE_PREPARE$Immediate$VH_ = _TAPE_PREPARE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Immediate"));
    public static java.lang.invoke.VarHandle _TAPE_PREPARE$Immediate$VH() { return _TAPE_PREPARE$Immediate$VH_; }

    static final MemoryLayout _TAPE_WRITE_MARKS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Type"),
        C_INT.withName("Count"),
        C_BOOL.withName("Immediate"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_TAPE_WRITE_MARKS");
    public static jdk.incubator.foreign.MemoryLayout _TAPE_WRITE_MARKS$struct$LAYOUT() { return _TAPE_WRITE_MARKS$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_WRITE_MARKS$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_WRITE_MARKS$Type$LAYOUT() { return _TAPE_WRITE_MARKS$Type$LAYOUT_; }

    static final VarHandle _TAPE_WRITE_MARKS$Type$VH_ = _TAPE_WRITE_MARKS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _TAPE_WRITE_MARKS$Type$VH() { return _TAPE_WRITE_MARKS$Type$VH_; }

    static final MemoryLayout _TAPE_WRITE_MARKS$Count$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_WRITE_MARKS$Count$LAYOUT() { return _TAPE_WRITE_MARKS$Count$LAYOUT_; }

    static final VarHandle _TAPE_WRITE_MARKS$Count$VH_ = _TAPE_WRITE_MARKS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    public static java.lang.invoke.VarHandle _TAPE_WRITE_MARKS$Count$VH() { return _TAPE_WRITE_MARKS$Count$VH_; }

    static final MemoryLayout _TAPE_WRITE_MARKS$Immediate$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_WRITE_MARKS$Immediate$LAYOUT() { return _TAPE_WRITE_MARKS$Immediate$LAYOUT_; }

    static final VarHandle _TAPE_WRITE_MARKS$Immediate$VH_ = _TAPE_WRITE_MARKS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Immediate"));
    public static java.lang.invoke.VarHandle _TAPE_WRITE_MARKS$Immediate$VH() { return _TAPE_WRITE_MARKS$Immediate$VH_; }

    static final MemoryLayout _TAPE_GET_POSITION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Type"),
        C_INT.withName("Partition"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Offset")
    ).withName("_TAPE_GET_POSITION");
    public static jdk.incubator.foreign.MemoryLayout _TAPE_GET_POSITION$struct$LAYOUT() { return _TAPE_GET_POSITION$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_GET_POSITION$Type$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_GET_POSITION$Type$LAYOUT() { return _TAPE_GET_POSITION$Type$LAYOUT_; }

    static final VarHandle _TAPE_GET_POSITION$Type$VH_ = _TAPE_GET_POSITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    public static java.lang.invoke.VarHandle _TAPE_GET_POSITION$Type$VH() { return _TAPE_GET_POSITION$Type$VH_; }

    static final MemoryLayout _TAPE_GET_POSITION$Partition$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_GET_POSITION$Partition$LAYOUT() { return _TAPE_GET_POSITION$Partition$LAYOUT_; }

    static final VarHandle _TAPE_GET_POSITION$Partition$VH_ = _TAPE_GET_POSITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Partition"));
    public static java.lang.invoke.VarHandle _TAPE_GET_POSITION$Partition$VH() { return _TAPE_GET_POSITION$Partition$VH_; }

    static final MemoryLayout _TAPE_SET_POSITION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Method"),
        C_INT.withName("Partition"),
        MemoryLayout.ofUnion(
            C_INT.withName("LowPart"),
            C_INT.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_INT.withName("LowPart"),
                C_INT.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Offset"),
        C_BOOL.withName("Immediate"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("_TAPE_SET_POSITION");
    public static jdk.incubator.foreign.MemoryLayout _TAPE_SET_POSITION$struct$LAYOUT() { return _TAPE_SET_POSITION$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_SET_POSITION$Method$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_SET_POSITION$Method$LAYOUT() { return _TAPE_SET_POSITION$Method$LAYOUT_; }

    static final VarHandle _TAPE_SET_POSITION$Method$VH_ = _TAPE_SET_POSITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Method"));
    public static java.lang.invoke.VarHandle _TAPE_SET_POSITION$Method$VH() { return _TAPE_SET_POSITION$Method$VH_; }

    static final MemoryLayout _TAPE_SET_POSITION$Partition$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_SET_POSITION$Partition$LAYOUT() { return _TAPE_SET_POSITION$Partition$LAYOUT_; }

    static final VarHandle _TAPE_SET_POSITION$Partition$VH_ = _TAPE_SET_POSITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Partition"));
    public static java.lang.invoke.VarHandle _TAPE_SET_POSITION$Partition$VH() { return _TAPE_SET_POSITION$Partition$VH_; }

    static final MemoryLayout _TAPE_SET_POSITION$Immediate$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_SET_POSITION$Immediate$LAYOUT() { return _TAPE_SET_POSITION$Immediate$LAYOUT_; }

    static final VarHandle _TAPE_SET_POSITION$Immediate$VH_ = _TAPE_SET_POSITION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Immediate"));
    public static java.lang.invoke.VarHandle _TAPE_SET_POSITION$Immediate$VH() { return _TAPE_SET_POSITION$Immediate$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_BOOL.withName("ECC"),
        C_BOOL.withName("Compression"),
        C_BOOL.withName("DataPadding"),
        C_BOOL.withName("ReportSetmarks"),
        C_INT.withName("DefaultBlockSize"),
        C_INT.withName("MaximumBlockSize"),
        C_INT.withName("MinimumBlockSize"),
        C_INT.withName("MaximumPartitionCount"),
        C_INT.withName("FeaturesLow"),
        C_INT.withName("FeaturesHigh"),
        C_INT.withName("EOTWarningZoneSize")
    ).withName("_TAPE_GET_DRIVE_PARAMETERS");
    public static jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$ECC$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$ECC$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$ECC$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$ECC$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ECC"));
    public static java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$ECC$VH() { return _TAPE_GET_DRIVE_PARAMETERS$ECC$VH_; }

}

