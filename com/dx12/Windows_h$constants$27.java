// Generated by jextract

package com.dx12;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.Win64.*;

public class Windows_h$constants$27 extends Windows_h$constants$26 {
    Windows_h$constants$27() {}
    static final MemoryLayout _ABCFLOAT$abcfB$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout _ABCFLOAT$abcfB$LAYOUT() { return _ABCFLOAT$abcfB$LAYOUT_; }

    static final VarHandle _ABCFLOAT$abcfB$VH_ = _ABCFLOAT$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("abcfB"));
    public static java.lang.invoke.VarHandle _ABCFLOAT$abcfB$VH() { return _ABCFLOAT$abcfB$VH_; }

    static final MemoryLayout _ABCFLOAT$abcfC$LAYOUT_ = C_FLOAT;
    public static jdk.incubator.foreign.MemoryLayout _ABCFLOAT$abcfC$LAYOUT() { return _ABCFLOAT$abcfC$LAYOUT_; }

    static final VarHandle _ABCFLOAT$abcfC$VH_ = _ABCFLOAT$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("abcfC"));
    public static java.lang.invoke.VarHandle _ABCFLOAT$abcfC$VH() { return _ABCFLOAT$abcfC$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("otmSize"),
        MemoryLayout.ofStruct(
            C_INT.withName("tmHeight"),
            C_INT.withName("tmAscent"),
            C_INT.withName("tmDescent"),
            C_INT.withName("tmInternalLeading"),
            C_INT.withName("tmExternalLeading"),
            C_INT.withName("tmAveCharWidth"),
            C_INT.withName("tmMaxCharWidth"),
            C_INT.withName("tmWeight"),
            C_INT.withName("tmOverhang"),
            C_INT.withName("tmDigitizedAspectX"),
            C_INT.withName("tmDigitizedAspectY"),
            C_BOOL.withName("tmFirstChar"),
            C_BOOL.withName("tmLastChar"),
            C_BOOL.withName("tmDefaultChar"),
            C_BOOL.withName("tmBreakChar"),
            C_BOOL.withName("tmItalic"),
            C_BOOL.withName("tmUnderlined"),
            C_BOOL.withName("tmStruckOut"),
            C_BOOL.withName("tmPitchAndFamily"),
            C_BOOL.withName("tmCharSet"),
            MemoryLayout.ofPaddingBits(24)
        ).withName("otmTextMetrics"),
        C_BOOL.withName("otmFiller"),
        MemoryLayout.ofStruct(
            C_BOOL.withName("bFamilyType"),
            C_BOOL.withName("bSerifStyle"),
            C_BOOL.withName("bWeight"),
            C_BOOL.withName("bProportion"),
            C_BOOL.withName("bContrast"),
            C_BOOL.withName("bStrokeVariation"),
            C_BOOL.withName("bArmStyle"),
            C_BOOL.withName("bLetterform"),
            C_BOOL.withName("bMidline"),
            C_BOOL.withName("bXHeight")
        ).withName("otmPanoseNumber"),
        MemoryLayout.ofPaddingBits(8),
        C_INT.withName("otmfsSelection"),
        C_INT.withName("otmfsType"),
        C_INT.withName("otmsCharSlopeRise"),
        C_INT.withName("otmsCharSlopeRun"),
        C_INT.withName("otmItalicAngle"),
        C_INT.withName("otmEMSquare"),
        C_INT.withName("otmAscent"),
        C_INT.withName("otmDescent"),
        C_INT.withName("otmLineGap"),
        C_INT.withName("otmsCapEmHeight"),
        C_INT.withName("otmsXHeight"),
        MemoryLayout.ofStruct(
            C_INT.withName("left"),
            C_INT.withName("top"),
            C_INT.withName("right"),
            C_INT.withName("bottom")
        ).withName("otmrcFontBox"),
        C_INT.withName("otmMacAscent"),
        C_INT.withName("otmMacDescent"),
        C_INT.withName("otmMacLineGap"),
        C_INT.withName("otmusMinimumPPEM"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("otmptSubscriptSize"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("otmptSubscriptOffset"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("otmptSuperscriptSize"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("otmptSuperscriptOffset"),
        C_INT.withName("otmsStrikeoutSize"),
        C_INT.withName("otmsStrikeoutPosition"),
        C_INT.withName("otmsUnderscoreSize"),
        C_INT.withName("otmsUnderscorePosition"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("otmpFamilyName"),
        C_POINTER.withName("otmpFaceName"),
        C_POINTER.withName("otmpStyleName"),
        C_POINTER.withName("otmpFullName")
    ).withName("_OUTLINETEXTMETRICA");
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$struct$LAYOUT() { return _OUTLINETEXTMETRICA$struct$LAYOUT_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmSize$LAYOUT() { return _OUTLINETEXTMETRICA$otmSize$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmSize$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmSize"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmSize$VH() { return _OUTLINETEXTMETRICA$otmSize$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmFiller$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmFiller$LAYOUT() { return _OUTLINETEXTMETRICA$otmFiller$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmFiller$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("otmFiller"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmFiller$VH() { return _OUTLINETEXTMETRICA$otmFiller$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmfsSelection$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmfsSelection$LAYOUT() { return _OUTLINETEXTMETRICA$otmfsSelection$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmfsSelection$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmfsSelection"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmfsSelection$VH() { return _OUTLINETEXTMETRICA$otmfsSelection$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmfsType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmfsType$LAYOUT() { return _OUTLINETEXTMETRICA$otmfsType$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmfsType$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmfsType"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmfsType$VH() { return _OUTLINETEXTMETRICA$otmfsType$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmsCharSlopeRise$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmsCharSlopeRise$LAYOUT() { return _OUTLINETEXTMETRICA$otmsCharSlopeRise$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmsCharSlopeRise$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsCharSlopeRise"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmsCharSlopeRise$VH() { return _OUTLINETEXTMETRICA$otmsCharSlopeRise$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmsCharSlopeRun$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmsCharSlopeRun$LAYOUT() { return _OUTLINETEXTMETRICA$otmsCharSlopeRun$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmsCharSlopeRun$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsCharSlopeRun"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmsCharSlopeRun$VH() { return _OUTLINETEXTMETRICA$otmsCharSlopeRun$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmItalicAngle$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmItalicAngle$LAYOUT() { return _OUTLINETEXTMETRICA$otmItalicAngle$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmItalicAngle$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmItalicAngle"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmItalicAngle$VH() { return _OUTLINETEXTMETRICA$otmItalicAngle$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmEMSquare$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmEMSquare$LAYOUT() { return _OUTLINETEXTMETRICA$otmEMSquare$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmEMSquare$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmEMSquare"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmEMSquare$VH() { return _OUTLINETEXTMETRICA$otmEMSquare$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmAscent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmAscent$LAYOUT() { return _OUTLINETEXTMETRICA$otmAscent$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmAscent$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmAscent"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmAscent$VH() { return _OUTLINETEXTMETRICA$otmAscent$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmDescent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmDescent$LAYOUT() { return _OUTLINETEXTMETRICA$otmDescent$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmDescent$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmDescent"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmDescent$VH() { return _OUTLINETEXTMETRICA$otmDescent$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmLineGap$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmLineGap$LAYOUT() { return _OUTLINETEXTMETRICA$otmLineGap$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmLineGap$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmLineGap"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmLineGap$VH() { return _OUTLINETEXTMETRICA$otmLineGap$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmsCapEmHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmsCapEmHeight$LAYOUT() { return _OUTLINETEXTMETRICA$otmsCapEmHeight$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmsCapEmHeight$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsCapEmHeight"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmsCapEmHeight$VH() { return _OUTLINETEXTMETRICA$otmsCapEmHeight$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmsXHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmsXHeight$LAYOUT() { return _OUTLINETEXTMETRICA$otmsXHeight$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmsXHeight$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsXHeight"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmsXHeight$VH() { return _OUTLINETEXTMETRICA$otmsXHeight$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmMacAscent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmMacAscent$LAYOUT() { return _OUTLINETEXTMETRICA$otmMacAscent$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmMacAscent$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmMacAscent"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmMacAscent$VH() { return _OUTLINETEXTMETRICA$otmMacAscent$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmMacDescent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmMacDescent$LAYOUT() { return _OUTLINETEXTMETRICA$otmMacDescent$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmMacDescent$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmMacDescent"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmMacDescent$VH() { return _OUTLINETEXTMETRICA$otmMacDescent$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmMacLineGap$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmMacLineGap$LAYOUT() { return _OUTLINETEXTMETRICA$otmMacLineGap$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmMacLineGap$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmMacLineGap"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmMacLineGap$VH() { return _OUTLINETEXTMETRICA$otmMacLineGap$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmusMinimumPPEM$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmusMinimumPPEM$LAYOUT() { return _OUTLINETEXTMETRICA$otmusMinimumPPEM$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmusMinimumPPEM$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmusMinimumPPEM"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmusMinimumPPEM$VH() { return _OUTLINETEXTMETRICA$otmusMinimumPPEM$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmsStrikeoutSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmsStrikeoutSize$LAYOUT() { return _OUTLINETEXTMETRICA$otmsStrikeoutSize$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmsStrikeoutSize$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsStrikeoutSize"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmsStrikeoutSize$VH() { return _OUTLINETEXTMETRICA$otmsStrikeoutSize$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmsStrikeoutPosition$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmsStrikeoutPosition$LAYOUT() { return _OUTLINETEXTMETRICA$otmsStrikeoutPosition$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmsStrikeoutPosition$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsStrikeoutPosition"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmsStrikeoutPosition$VH() { return _OUTLINETEXTMETRICA$otmsStrikeoutPosition$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmsUnderscoreSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmsUnderscoreSize$LAYOUT() { return _OUTLINETEXTMETRICA$otmsUnderscoreSize$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmsUnderscoreSize$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsUnderscoreSize"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmsUnderscoreSize$VH() { return _OUTLINETEXTMETRICA$otmsUnderscoreSize$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmsUnderscorePosition$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmsUnderscorePosition$LAYOUT() { return _OUTLINETEXTMETRICA$otmsUnderscorePosition$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmsUnderscorePosition$VH_ = _OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsUnderscorePosition"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmsUnderscorePosition$VH() { return _OUTLINETEXTMETRICA$otmsUnderscorePosition$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmpFamilyName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmpFamilyName$LAYOUT() { return _OUTLINETEXTMETRICA$otmpFamilyName$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmpFamilyName$VH_ = MemoryHandles.asAddressVarHandle(_OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("otmpFamilyName")));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmpFamilyName$VH() { return _OUTLINETEXTMETRICA$otmpFamilyName$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmpFaceName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmpFaceName$LAYOUT() { return _OUTLINETEXTMETRICA$otmpFaceName$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmpFaceName$VH_ = MemoryHandles.asAddressVarHandle(_OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("otmpFaceName")));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmpFaceName$VH() { return _OUTLINETEXTMETRICA$otmpFaceName$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmpStyleName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmpStyleName$LAYOUT() { return _OUTLINETEXTMETRICA$otmpStyleName$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmpStyleName$VH_ = MemoryHandles.asAddressVarHandle(_OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("otmpStyleName")));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmpStyleName$VH() { return _OUTLINETEXTMETRICA$otmpStyleName$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICA$otmpFullName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICA$otmpFullName$LAYOUT() { return _OUTLINETEXTMETRICA$otmpFullName$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICA$otmpFullName$VH_ = MemoryHandles.asAddressVarHandle(_OUTLINETEXTMETRICA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("otmpFullName")));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICA$otmpFullName$VH() { return _OUTLINETEXTMETRICA$otmpFullName$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("otmSize"),
        MemoryLayout.ofStruct(
            C_INT.withName("tmHeight"),
            C_INT.withName("tmAscent"),
            C_INT.withName("tmDescent"),
            C_INT.withName("tmInternalLeading"),
            C_INT.withName("tmExternalLeading"),
            C_INT.withName("tmAveCharWidth"),
            C_INT.withName("tmMaxCharWidth"),
            C_INT.withName("tmWeight"),
            C_INT.withName("tmOverhang"),
            C_INT.withName("tmDigitizedAspectX"),
            C_INT.withName("tmDigitizedAspectY"),
            C_SHORT.withName("tmFirstChar"),
            C_SHORT.withName("tmLastChar"),
            C_SHORT.withName("tmDefaultChar"),
            C_SHORT.withName("tmBreakChar"),
            C_BOOL.withName("tmItalic"),
            C_BOOL.withName("tmUnderlined"),
            C_BOOL.withName("tmStruckOut"),
            C_BOOL.withName("tmPitchAndFamily"),
            C_BOOL.withName("tmCharSet"),
            MemoryLayout.ofPaddingBits(24)
        ).withName("otmTextMetrics"),
        C_BOOL.withName("otmFiller"),
        MemoryLayout.ofStruct(
            C_BOOL.withName("bFamilyType"),
            C_BOOL.withName("bSerifStyle"),
            C_BOOL.withName("bWeight"),
            C_BOOL.withName("bProportion"),
            C_BOOL.withName("bContrast"),
            C_BOOL.withName("bStrokeVariation"),
            C_BOOL.withName("bArmStyle"),
            C_BOOL.withName("bLetterform"),
            C_BOOL.withName("bMidline"),
            C_BOOL.withName("bXHeight")
        ).withName("otmPanoseNumber"),
        MemoryLayout.ofPaddingBits(8),
        C_INT.withName("otmfsSelection"),
        C_INT.withName("otmfsType"),
        C_INT.withName("otmsCharSlopeRise"),
        C_INT.withName("otmsCharSlopeRun"),
        C_INT.withName("otmItalicAngle"),
        C_INT.withName("otmEMSquare"),
        C_INT.withName("otmAscent"),
        C_INT.withName("otmDescent"),
        C_INT.withName("otmLineGap"),
        C_INT.withName("otmsCapEmHeight"),
        C_INT.withName("otmsXHeight"),
        MemoryLayout.ofStruct(
            C_INT.withName("left"),
            C_INT.withName("top"),
            C_INT.withName("right"),
            C_INT.withName("bottom")
        ).withName("otmrcFontBox"),
        C_INT.withName("otmMacAscent"),
        C_INT.withName("otmMacDescent"),
        C_INT.withName("otmMacLineGap"),
        C_INT.withName("otmusMinimumPPEM"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("otmptSubscriptSize"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("otmptSubscriptOffset"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("otmptSuperscriptSize"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("otmptSuperscriptOffset"),
        C_INT.withName("otmsStrikeoutSize"),
        C_INT.withName("otmsStrikeoutPosition"),
        C_INT.withName("otmsUnderscoreSize"),
        C_INT.withName("otmsUnderscorePosition"),
        C_POINTER.withName("otmpFamilyName"),
        C_POINTER.withName("otmpFaceName"),
        C_POINTER.withName("otmpStyleName"),
        C_POINTER.withName("otmpFullName")
    ).withName("_OUTLINETEXTMETRICW");
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$struct$LAYOUT() { return _OUTLINETEXTMETRICW$struct$LAYOUT_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmSize$LAYOUT() { return _OUTLINETEXTMETRICW$otmSize$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmSize$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmSize"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmSize$VH() { return _OUTLINETEXTMETRICW$otmSize$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmFiller$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmFiller$LAYOUT() { return _OUTLINETEXTMETRICW$otmFiller$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmFiller$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("otmFiller"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmFiller$VH() { return _OUTLINETEXTMETRICW$otmFiller$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmfsSelection$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmfsSelection$LAYOUT() { return _OUTLINETEXTMETRICW$otmfsSelection$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmfsSelection$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmfsSelection"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmfsSelection$VH() { return _OUTLINETEXTMETRICW$otmfsSelection$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmfsType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmfsType$LAYOUT() { return _OUTLINETEXTMETRICW$otmfsType$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmfsType$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmfsType"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmfsType$VH() { return _OUTLINETEXTMETRICW$otmfsType$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmsCharSlopeRise$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmsCharSlopeRise$LAYOUT() { return _OUTLINETEXTMETRICW$otmsCharSlopeRise$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmsCharSlopeRise$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsCharSlopeRise"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmsCharSlopeRise$VH() { return _OUTLINETEXTMETRICW$otmsCharSlopeRise$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmsCharSlopeRun$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmsCharSlopeRun$LAYOUT() { return _OUTLINETEXTMETRICW$otmsCharSlopeRun$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmsCharSlopeRun$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsCharSlopeRun"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmsCharSlopeRun$VH() { return _OUTLINETEXTMETRICW$otmsCharSlopeRun$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmItalicAngle$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmItalicAngle$LAYOUT() { return _OUTLINETEXTMETRICW$otmItalicAngle$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmItalicAngle$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmItalicAngle"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmItalicAngle$VH() { return _OUTLINETEXTMETRICW$otmItalicAngle$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmEMSquare$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmEMSquare$LAYOUT() { return _OUTLINETEXTMETRICW$otmEMSquare$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmEMSquare$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmEMSquare"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmEMSquare$VH() { return _OUTLINETEXTMETRICW$otmEMSquare$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmAscent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmAscent$LAYOUT() { return _OUTLINETEXTMETRICW$otmAscent$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmAscent$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmAscent"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmAscent$VH() { return _OUTLINETEXTMETRICW$otmAscent$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmDescent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmDescent$LAYOUT() { return _OUTLINETEXTMETRICW$otmDescent$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmDescent$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmDescent"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmDescent$VH() { return _OUTLINETEXTMETRICW$otmDescent$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmLineGap$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmLineGap$LAYOUT() { return _OUTLINETEXTMETRICW$otmLineGap$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmLineGap$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmLineGap"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmLineGap$VH() { return _OUTLINETEXTMETRICW$otmLineGap$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmsCapEmHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmsCapEmHeight$LAYOUT() { return _OUTLINETEXTMETRICW$otmsCapEmHeight$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmsCapEmHeight$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsCapEmHeight"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmsCapEmHeight$VH() { return _OUTLINETEXTMETRICW$otmsCapEmHeight$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmsXHeight$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmsXHeight$LAYOUT() { return _OUTLINETEXTMETRICW$otmsXHeight$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmsXHeight$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsXHeight"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmsXHeight$VH() { return _OUTLINETEXTMETRICW$otmsXHeight$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmMacAscent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmMacAscent$LAYOUT() { return _OUTLINETEXTMETRICW$otmMacAscent$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmMacAscent$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmMacAscent"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmMacAscent$VH() { return _OUTLINETEXTMETRICW$otmMacAscent$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmMacDescent$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmMacDescent$LAYOUT() { return _OUTLINETEXTMETRICW$otmMacDescent$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmMacDescent$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmMacDescent"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmMacDescent$VH() { return _OUTLINETEXTMETRICW$otmMacDescent$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmMacLineGap$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmMacLineGap$LAYOUT() { return _OUTLINETEXTMETRICW$otmMacLineGap$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmMacLineGap$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmMacLineGap"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmMacLineGap$VH() { return _OUTLINETEXTMETRICW$otmMacLineGap$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmusMinimumPPEM$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmusMinimumPPEM$LAYOUT() { return _OUTLINETEXTMETRICW$otmusMinimumPPEM$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmusMinimumPPEM$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmusMinimumPPEM"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmusMinimumPPEM$VH() { return _OUTLINETEXTMETRICW$otmusMinimumPPEM$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmsStrikeoutSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmsStrikeoutSize$LAYOUT() { return _OUTLINETEXTMETRICW$otmsStrikeoutSize$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmsStrikeoutSize$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsStrikeoutSize"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmsStrikeoutSize$VH() { return _OUTLINETEXTMETRICW$otmsStrikeoutSize$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmsStrikeoutPosition$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmsStrikeoutPosition$LAYOUT() { return _OUTLINETEXTMETRICW$otmsStrikeoutPosition$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmsStrikeoutPosition$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsStrikeoutPosition"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmsStrikeoutPosition$VH() { return _OUTLINETEXTMETRICW$otmsStrikeoutPosition$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmsUnderscoreSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmsUnderscoreSize$LAYOUT() { return _OUTLINETEXTMETRICW$otmsUnderscoreSize$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmsUnderscoreSize$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsUnderscoreSize"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmsUnderscoreSize$VH() { return _OUTLINETEXTMETRICW$otmsUnderscoreSize$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmsUnderscorePosition$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmsUnderscorePosition$LAYOUT() { return _OUTLINETEXTMETRICW$otmsUnderscorePosition$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmsUnderscorePosition$VH_ = _OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("otmsUnderscorePosition"));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmsUnderscorePosition$VH() { return _OUTLINETEXTMETRICW$otmsUnderscorePosition$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmpFamilyName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmpFamilyName$LAYOUT() { return _OUTLINETEXTMETRICW$otmpFamilyName$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmpFamilyName$VH_ = MemoryHandles.asAddressVarHandle(_OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("otmpFamilyName")));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmpFamilyName$VH() { return _OUTLINETEXTMETRICW$otmpFamilyName$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmpFaceName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmpFaceName$LAYOUT() { return _OUTLINETEXTMETRICW$otmpFaceName$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmpFaceName$VH_ = MemoryHandles.asAddressVarHandle(_OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("otmpFaceName")));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmpFaceName$VH() { return _OUTLINETEXTMETRICW$otmpFaceName$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmpStyleName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmpStyleName$LAYOUT() { return _OUTLINETEXTMETRICW$otmpStyleName$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmpStyleName$VH_ = MemoryHandles.asAddressVarHandle(_OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("otmpStyleName")));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmpStyleName$VH() { return _OUTLINETEXTMETRICW$otmpStyleName$VH_; }

    static final MemoryLayout _OUTLINETEXTMETRICW$otmpFullName$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout _OUTLINETEXTMETRICW$otmpFullName$LAYOUT() { return _OUTLINETEXTMETRICW$otmpFullName$LAYOUT_; }

    static final VarHandle _OUTLINETEXTMETRICW$otmpFullName$VH_ = MemoryHandles.asAddressVarHandle(_OUTLINETEXTMETRICW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("otmpFullName")));
    public static java.lang.invoke.VarHandle _OUTLINETEXTMETRICW$otmpFullName$VH() { return _OUTLINETEXTMETRICW$otmpFullName$VH_; }

    static final MemoryLayout tagPOLYTEXTA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("x"),
        C_INT.withName("y"),
        C_INT.withName("n"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpstr"),
        C_INT.withName("uiFlags"),
        MemoryLayout.ofStruct(
            C_INT.withName("left"),
            C_INT.withName("top"),
            C_INT.withName("right"),
            C_INT.withName("bottom")
        ).withName("rcl"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pdx")
    ).withName("tagPOLYTEXTA");
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTA$struct$LAYOUT() { return tagPOLYTEXTA$struct$LAYOUT_; }

    static final MemoryLayout tagPOLYTEXTA$x$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTA$x$LAYOUT() { return tagPOLYTEXTA$x$LAYOUT_; }

    static final VarHandle tagPOLYTEXTA$x$VH_ = tagPOLYTEXTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    public static java.lang.invoke.VarHandle tagPOLYTEXTA$x$VH() { return tagPOLYTEXTA$x$VH_; }

    static final MemoryLayout tagPOLYTEXTA$y$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTA$y$LAYOUT() { return tagPOLYTEXTA$y$LAYOUT_; }

    static final VarHandle tagPOLYTEXTA$y$VH_ = tagPOLYTEXTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    public static java.lang.invoke.VarHandle tagPOLYTEXTA$y$VH() { return tagPOLYTEXTA$y$VH_; }

    static final MemoryLayout tagPOLYTEXTA$n$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTA$n$LAYOUT() { return tagPOLYTEXTA$n$LAYOUT_; }

    static final VarHandle tagPOLYTEXTA$n$VH_ = tagPOLYTEXTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("n"));
    public static java.lang.invoke.VarHandle tagPOLYTEXTA$n$VH() { return tagPOLYTEXTA$n$VH_; }

    static final MemoryLayout tagPOLYTEXTA$lpstr$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTA$lpstr$LAYOUT() { return tagPOLYTEXTA$lpstr$LAYOUT_; }

    static final VarHandle tagPOLYTEXTA$lpstr$VH_ = MemoryHandles.asAddressVarHandle(tagPOLYTEXTA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstr")));
    public static java.lang.invoke.VarHandle tagPOLYTEXTA$lpstr$VH() { return tagPOLYTEXTA$lpstr$VH_; }

    static final MemoryLayout tagPOLYTEXTA$uiFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTA$uiFlags$LAYOUT() { return tagPOLYTEXTA$uiFlags$LAYOUT_; }

    static final VarHandle tagPOLYTEXTA$uiFlags$VH_ = tagPOLYTEXTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("uiFlags"));
    public static java.lang.invoke.VarHandle tagPOLYTEXTA$uiFlags$VH() { return tagPOLYTEXTA$uiFlags$VH_; }

    static final MemoryLayout tagPOLYTEXTA$pdx$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTA$pdx$LAYOUT() { return tagPOLYTEXTA$pdx$LAYOUT_; }

    static final VarHandle tagPOLYTEXTA$pdx$VH_ = MemoryHandles.asAddressVarHandle(tagPOLYTEXTA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pdx")));
    public static java.lang.invoke.VarHandle tagPOLYTEXTA$pdx$VH() { return tagPOLYTEXTA$pdx$VH_; }

    static final MemoryLayout tagPOLYTEXTW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("x"),
        C_INT.withName("y"),
        C_INT.withName("n"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpstr"),
        C_INT.withName("uiFlags"),
        MemoryLayout.ofStruct(
            C_INT.withName("left"),
            C_INT.withName("top"),
            C_INT.withName("right"),
            C_INT.withName("bottom")
        ).withName("rcl"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pdx")
    ).withName("tagPOLYTEXTW");
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTW$struct$LAYOUT() { return tagPOLYTEXTW$struct$LAYOUT_; }

    static final MemoryLayout tagPOLYTEXTW$x$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTW$x$LAYOUT() { return tagPOLYTEXTW$x$LAYOUT_; }

    static final VarHandle tagPOLYTEXTW$x$VH_ = tagPOLYTEXTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    public static java.lang.invoke.VarHandle tagPOLYTEXTW$x$VH() { return tagPOLYTEXTW$x$VH_; }

    static final MemoryLayout tagPOLYTEXTW$y$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTW$y$LAYOUT() { return tagPOLYTEXTW$y$LAYOUT_; }

    static final VarHandle tagPOLYTEXTW$y$VH_ = tagPOLYTEXTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    public static java.lang.invoke.VarHandle tagPOLYTEXTW$y$VH() { return tagPOLYTEXTW$y$VH_; }

    static final MemoryLayout tagPOLYTEXTW$n$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTW$n$LAYOUT() { return tagPOLYTEXTW$n$LAYOUT_; }

    static final VarHandle tagPOLYTEXTW$n$VH_ = tagPOLYTEXTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("n"));
    public static java.lang.invoke.VarHandle tagPOLYTEXTW$n$VH() { return tagPOLYTEXTW$n$VH_; }

    static final MemoryLayout tagPOLYTEXTW$lpstr$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTW$lpstr$LAYOUT() { return tagPOLYTEXTW$lpstr$LAYOUT_; }

    static final VarHandle tagPOLYTEXTW$lpstr$VH_ = MemoryHandles.asAddressVarHandle(tagPOLYTEXTW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstr")));
    public static java.lang.invoke.VarHandle tagPOLYTEXTW$lpstr$VH() { return tagPOLYTEXTW$lpstr$VH_; }

    static final MemoryLayout tagPOLYTEXTW$uiFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTW$uiFlags$LAYOUT() { return tagPOLYTEXTW$uiFlags$LAYOUT_; }

    static final VarHandle tagPOLYTEXTW$uiFlags$VH_ = tagPOLYTEXTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("uiFlags"));
    public static java.lang.invoke.VarHandle tagPOLYTEXTW$uiFlags$VH() { return tagPOLYTEXTW$uiFlags$VH_; }

    static final MemoryLayout tagPOLYTEXTW$pdx$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagPOLYTEXTW$pdx$LAYOUT() { return tagPOLYTEXTW$pdx$LAYOUT_; }

    static final VarHandle tagPOLYTEXTW$pdx$VH_ = MemoryHandles.asAddressVarHandle(tagPOLYTEXTW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pdx")));
    public static java.lang.invoke.VarHandle tagPOLYTEXTW$pdx$VH() { return tagPOLYTEXTW$pdx$VH_; }

    static final MemoryLayout _FIXED$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("fract"),
        C_SHORT.withName("value")
    ).withName("_FIXED");
    public static jdk.incubator.foreign.MemoryLayout _FIXED$struct$LAYOUT() { return _FIXED$struct$LAYOUT_; }

    static final MemoryLayout _FIXED$fract$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _FIXED$fract$LAYOUT() { return _FIXED$fract$LAYOUT_; }

    static final VarHandle _FIXED$fract$VH_ = _FIXED$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("fract"));
    public static java.lang.invoke.VarHandle _FIXED$fract$VH() { return _FIXED$fract$VH_; }

    static final MemoryLayout _FIXED$value$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _FIXED$value$LAYOUT() { return _FIXED$value$LAYOUT_; }

    static final VarHandle _FIXED$value$VH_ = _FIXED$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("value"));
    public static java.lang.invoke.VarHandle _FIXED$value$VH() { return _FIXED$value$VH_; }

    static final MemoryLayout _MAT2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("fract"),
            C_SHORT.withName("value")
        ).withName("eM11"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("fract"),
            C_SHORT.withName("value")
        ).withName("eM12"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("fract"),
            C_SHORT.withName("value")
        ).withName("eM21"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("fract"),
            C_SHORT.withName("value")
        ).withName("eM22")
    ).withName("_MAT2");
    public static jdk.incubator.foreign.MemoryLayout _MAT2$struct$LAYOUT() { return _MAT2$struct$LAYOUT_; }

    static final MemoryLayout _GLYPHMETRICS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("gmBlackBoxX"),
        C_INT.withName("gmBlackBoxY"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y")
        ).withName("gmptGlyphOrigin"),
        C_SHORT.withName("gmCellIncX"),
        C_SHORT.withName("gmCellIncY")
    ).withName("_GLYPHMETRICS");
    public static jdk.incubator.foreign.MemoryLayout _GLYPHMETRICS$struct$LAYOUT() { return _GLYPHMETRICS$struct$LAYOUT_; }

    static final MemoryLayout _GLYPHMETRICS$gmBlackBoxX$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _GLYPHMETRICS$gmBlackBoxX$LAYOUT() { return _GLYPHMETRICS$gmBlackBoxX$LAYOUT_; }

    static final VarHandle _GLYPHMETRICS$gmBlackBoxX$VH_ = _GLYPHMETRICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("gmBlackBoxX"));
    public static java.lang.invoke.VarHandle _GLYPHMETRICS$gmBlackBoxX$VH() { return _GLYPHMETRICS$gmBlackBoxX$VH_; }

    static final MemoryLayout _GLYPHMETRICS$gmBlackBoxY$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout _GLYPHMETRICS$gmBlackBoxY$LAYOUT() { return _GLYPHMETRICS$gmBlackBoxY$LAYOUT_; }

    static final VarHandle _GLYPHMETRICS$gmBlackBoxY$VH_ = _GLYPHMETRICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("gmBlackBoxY"));
    public static java.lang.invoke.VarHandle _GLYPHMETRICS$gmBlackBoxY$VH() { return _GLYPHMETRICS$gmBlackBoxY$VH_; }

    static final MemoryLayout _GLYPHMETRICS$gmCellIncX$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _GLYPHMETRICS$gmCellIncX$LAYOUT() { return _GLYPHMETRICS$gmCellIncX$LAYOUT_; }

    static final VarHandle _GLYPHMETRICS$gmCellIncX$VH_ = _GLYPHMETRICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("gmCellIncX"));
    public static java.lang.invoke.VarHandle _GLYPHMETRICS$gmCellIncX$VH() { return _GLYPHMETRICS$gmCellIncX$VH_; }

    static final MemoryLayout _GLYPHMETRICS$gmCellIncY$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _GLYPHMETRICS$gmCellIncY$LAYOUT() { return _GLYPHMETRICS$gmCellIncY$LAYOUT_; }

    static final VarHandle _GLYPHMETRICS$gmCellIncY$VH_ = _GLYPHMETRICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("gmCellIncY"));
    public static java.lang.invoke.VarHandle _GLYPHMETRICS$gmCellIncY$VH() { return _GLYPHMETRICS$gmCellIncY$VH_; }

    static final MemoryLayout tagPOINTFX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("fract"),
            C_SHORT.withName("value")
        ).withName("x"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("fract"),
            C_SHORT.withName("value")
        ).withName("y")
    ).withName("tagPOINTFX");
    public static jdk.incubator.foreign.MemoryLayout tagPOINTFX$struct$LAYOUT() { return tagPOINTFX$struct$LAYOUT_; }

    static final MemoryLayout tagTTPOLYCURVE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("wType"),
        C_SHORT.withName("cpfx"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_SHORT.withName("fract"),
                C_SHORT.withName("value")
            ).withName("x"),
            MemoryLayout.ofStruct(
                C_SHORT.withName("fract"),
                C_SHORT.withName("value")
            ).withName("y")
        ).withName("tagPOINTFX")).withName("apfx")
    ).withName("tagTTPOLYCURVE");
    public static jdk.incubator.foreign.MemoryLayout tagTTPOLYCURVE$struct$LAYOUT() { return tagTTPOLYCURVE$struct$LAYOUT_; }

    static final MemoryLayout tagTTPOLYCURVE$wType$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagTTPOLYCURVE$wType$LAYOUT() { return tagTTPOLYCURVE$wType$LAYOUT_; }

    static final VarHandle tagTTPOLYCURVE$wType$VH_ = tagTTPOLYCURVE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wType"));
    public static java.lang.invoke.VarHandle tagTTPOLYCURVE$wType$VH() { return tagTTPOLYCURVE$wType$VH_; }

    static final MemoryLayout tagTTPOLYCURVE$cpfx$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagTTPOLYCURVE$cpfx$LAYOUT() { return tagTTPOLYCURVE$cpfx$LAYOUT_; }

    static final VarHandle tagTTPOLYCURVE$cpfx$VH_ = tagTTPOLYCURVE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cpfx"));
    public static java.lang.invoke.VarHandle tagTTPOLYCURVE$cpfx$VH() { return tagTTPOLYCURVE$cpfx$VH_; }

    static final MemoryLayout tagTTPOLYGONHEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cb"),
        C_INT.withName("dwType"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_SHORT.withName("fract"),
                C_SHORT.withName("value")
            ).withName("x"),
            MemoryLayout.ofStruct(
                C_SHORT.withName("fract"),
                C_SHORT.withName("value")
            ).withName("y")
        ).withName("pfxStart")
    ).withName("tagTTPOLYGONHEADER");
    public static jdk.incubator.foreign.MemoryLayout tagTTPOLYGONHEADER$struct$LAYOUT() { return tagTTPOLYGONHEADER$struct$LAYOUT_; }

    static final MemoryLayout tagTTPOLYGONHEADER$cb$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTTPOLYGONHEADER$cb$LAYOUT() { return tagTTPOLYGONHEADER$cb$LAYOUT_; }

    static final VarHandle tagTTPOLYGONHEADER$cb$VH_ = tagTTPOLYGONHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cb"));
    public static java.lang.invoke.VarHandle tagTTPOLYGONHEADER$cb$VH() { return tagTTPOLYGONHEADER$cb$VH_; }

    static final MemoryLayout tagTTPOLYGONHEADER$dwType$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagTTPOLYGONHEADER$dwType$LAYOUT() { return tagTTPOLYGONHEADER$dwType$LAYOUT_; }

    static final VarHandle tagTTPOLYGONHEADER$dwType$VH_ = tagTTPOLYGONHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwType"));
    public static java.lang.invoke.VarHandle tagTTPOLYGONHEADER$dwType$VH() { return tagTTPOLYGONHEADER$dwType$VH_; }

    static final MemoryLayout tagGCP_RESULTSA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("lStructSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpOutString"),
        C_POINTER.withName("lpOrder"),
        C_POINTER.withName("lpDx"),
        C_POINTER.withName("lpCaretPos"),
        C_POINTER.withName("lpClass"),
        C_POINTER.withName("lpGlyphs"),
        C_INT.withName("nGlyphs"),
        C_INT.withName("nMaxFit")
    ).withName("tagGCP_RESULTSA");
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSA$struct$LAYOUT() { return tagGCP_RESULTSA$struct$LAYOUT_; }

    static final MemoryLayout tagGCP_RESULTSA$lStructSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSA$lStructSize$LAYOUT() { return tagGCP_RESULTSA$lStructSize$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSA$lStructSize$VH_ = tagGCP_RESULTSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lStructSize"));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSA$lStructSize$VH() { return tagGCP_RESULTSA$lStructSize$VH_; }

    static final MemoryLayout tagGCP_RESULTSA$lpOutString$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSA$lpOutString$LAYOUT() { return tagGCP_RESULTSA$lpOutString$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSA$lpOutString$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpOutString")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSA$lpOutString$VH() { return tagGCP_RESULTSA$lpOutString$VH_; }

    static final MemoryLayout tagGCP_RESULTSA$lpOrder$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSA$lpOrder$LAYOUT() { return tagGCP_RESULTSA$lpOrder$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSA$lpOrder$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpOrder")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSA$lpOrder$VH() { return tagGCP_RESULTSA$lpOrder$VH_; }

    static final MemoryLayout tagGCP_RESULTSA$lpDx$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSA$lpDx$LAYOUT() { return tagGCP_RESULTSA$lpDx$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSA$lpDx$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDx")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSA$lpDx$VH() { return tagGCP_RESULTSA$lpDx$VH_; }

    static final MemoryLayout tagGCP_RESULTSA$lpCaretPos$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSA$lpCaretPos$LAYOUT() { return tagGCP_RESULTSA$lpCaretPos$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSA$lpCaretPos$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpCaretPos")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSA$lpCaretPos$VH() { return tagGCP_RESULTSA$lpCaretPos$VH_; }

    static final MemoryLayout tagGCP_RESULTSA$lpClass$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSA$lpClass$LAYOUT() { return tagGCP_RESULTSA$lpClass$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSA$lpClass$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpClass")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSA$lpClass$VH() { return tagGCP_RESULTSA$lpClass$VH_; }

    static final MemoryLayout tagGCP_RESULTSA$lpGlyphs$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSA$lpGlyphs$LAYOUT() { return tagGCP_RESULTSA$lpGlyphs$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSA$lpGlyphs$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpGlyphs")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSA$lpGlyphs$VH() { return tagGCP_RESULTSA$lpGlyphs$VH_; }

    static final MemoryLayout tagGCP_RESULTSA$nGlyphs$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSA$nGlyphs$LAYOUT() { return tagGCP_RESULTSA$nGlyphs$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSA$nGlyphs$VH_ = tagGCP_RESULTSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nGlyphs"));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSA$nGlyphs$VH() { return tagGCP_RESULTSA$nGlyphs$VH_; }

    static final MemoryLayout tagGCP_RESULTSA$nMaxFit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSA$nMaxFit$LAYOUT() { return tagGCP_RESULTSA$nMaxFit$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSA$nMaxFit$VH_ = tagGCP_RESULTSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxFit"));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSA$nMaxFit$VH() { return tagGCP_RESULTSA$nMaxFit$VH_; }

    static final MemoryLayout tagGCP_RESULTSW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("lStructSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpOutString"),
        C_POINTER.withName("lpOrder"),
        C_POINTER.withName("lpDx"),
        C_POINTER.withName("lpCaretPos"),
        C_POINTER.withName("lpClass"),
        C_POINTER.withName("lpGlyphs"),
        C_INT.withName("nGlyphs"),
        C_INT.withName("nMaxFit")
    ).withName("tagGCP_RESULTSW");
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSW$struct$LAYOUT() { return tagGCP_RESULTSW$struct$LAYOUT_; }

    static final MemoryLayout tagGCP_RESULTSW$lStructSize$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSW$lStructSize$LAYOUT() { return tagGCP_RESULTSW$lStructSize$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSW$lStructSize$VH_ = tagGCP_RESULTSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lStructSize"));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSW$lStructSize$VH() { return tagGCP_RESULTSW$lStructSize$VH_; }

    static final MemoryLayout tagGCP_RESULTSW$lpOutString$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSW$lpOutString$LAYOUT() { return tagGCP_RESULTSW$lpOutString$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSW$lpOutString$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpOutString")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSW$lpOutString$VH() { return tagGCP_RESULTSW$lpOutString$VH_; }

    static final MemoryLayout tagGCP_RESULTSW$lpOrder$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSW$lpOrder$LAYOUT() { return tagGCP_RESULTSW$lpOrder$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSW$lpOrder$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpOrder")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSW$lpOrder$VH() { return tagGCP_RESULTSW$lpOrder$VH_; }

    static final MemoryLayout tagGCP_RESULTSW$lpDx$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSW$lpDx$LAYOUT() { return tagGCP_RESULTSW$lpDx$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSW$lpDx$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDx")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSW$lpDx$VH() { return tagGCP_RESULTSW$lpDx$VH_; }

    static final MemoryLayout tagGCP_RESULTSW$lpCaretPos$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSW$lpCaretPos$LAYOUT() { return tagGCP_RESULTSW$lpCaretPos$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSW$lpCaretPos$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpCaretPos")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSW$lpCaretPos$VH() { return tagGCP_RESULTSW$lpCaretPos$VH_; }

    static final MemoryLayout tagGCP_RESULTSW$lpClass$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSW$lpClass$LAYOUT() { return tagGCP_RESULTSW$lpClass$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSW$lpClass$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpClass")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSW$lpClass$VH() { return tagGCP_RESULTSW$lpClass$VH_; }

    static final MemoryLayout tagGCP_RESULTSW$lpGlyphs$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSW$lpGlyphs$LAYOUT() { return tagGCP_RESULTSW$lpGlyphs$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSW$lpGlyphs$VH_ = MemoryHandles.asAddressVarHandle(tagGCP_RESULTSW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpGlyphs")));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSW$lpGlyphs$VH() { return tagGCP_RESULTSW$lpGlyphs$VH_; }

    static final MemoryLayout tagGCP_RESULTSW$nGlyphs$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSW$nGlyphs$LAYOUT() { return tagGCP_RESULTSW$nGlyphs$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSW$nGlyphs$VH_ = tagGCP_RESULTSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nGlyphs"));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSW$nGlyphs$VH() { return tagGCP_RESULTSW$nGlyphs$VH_; }

    static final MemoryLayout tagGCP_RESULTSW$nMaxFit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGCP_RESULTSW$nMaxFit$LAYOUT() { return tagGCP_RESULTSW$nMaxFit$LAYOUT_; }

    static final VarHandle tagGCP_RESULTSW$nMaxFit$VH_ = tagGCP_RESULTSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxFit"));
    public static java.lang.invoke.VarHandle tagGCP_RESULTSW$nMaxFit$VH() { return tagGCP_RESULTSW$nMaxFit$VH_; }

    static final MemoryLayout _RASTERIZER_STATUS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("nSize"),
        C_SHORT.withName("wFlags"),
        C_SHORT.withName("nLanguageID")
    ).withName("_RASTERIZER_STATUS");
    public static jdk.incubator.foreign.MemoryLayout _RASTERIZER_STATUS$struct$LAYOUT() { return _RASTERIZER_STATUS$struct$LAYOUT_; }

    static final MemoryLayout _RASTERIZER_STATUS$nSize$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _RASTERIZER_STATUS$nSize$LAYOUT() { return _RASTERIZER_STATUS$nSize$LAYOUT_; }

    static final VarHandle _RASTERIZER_STATUS$nSize$VH_ = _RASTERIZER_STATUS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nSize"));
    public static java.lang.invoke.VarHandle _RASTERIZER_STATUS$nSize$VH() { return _RASTERIZER_STATUS$nSize$VH_; }

    static final MemoryLayout _RASTERIZER_STATUS$wFlags$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _RASTERIZER_STATUS$wFlags$LAYOUT() { return _RASTERIZER_STATUS$wFlags$LAYOUT_; }

    static final VarHandle _RASTERIZER_STATUS$wFlags$VH_ = _RASTERIZER_STATUS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wFlags"));
    public static java.lang.invoke.VarHandle _RASTERIZER_STATUS$wFlags$VH() { return _RASTERIZER_STATUS$wFlags$VH_; }

    static final MemoryLayout _RASTERIZER_STATUS$nLanguageID$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout _RASTERIZER_STATUS$nLanguageID$LAYOUT() { return _RASTERIZER_STATUS$nLanguageID$LAYOUT_; }

    static final VarHandle _RASTERIZER_STATUS$nLanguageID$VH_ = _RASTERIZER_STATUS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nLanguageID"));
    public static java.lang.invoke.VarHandle _RASTERIZER_STATUS$nLanguageID$VH() { return _RASTERIZER_STATUS$nLanguageID$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("nSize"),
        C_SHORT.withName("nVersion"),
        C_INT.withName("dwFlags"),
        C_BOOL.withName("iPixelType"),
        C_BOOL.withName("cColorBits"),
        C_BOOL.withName("cRedBits"),
        C_BOOL.withName("cRedShift"),
        C_BOOL.withName("cGreenBits"),
        C_BOOL.withName("cGreenShift"),
        C_BOOL.withName("cBlueBits"),
        C_BOOL.withName("cBlueShift"),
        C_BOOL.withName("cAlphaBits"),
        C_BOOL.withName("cAlphaShift"),
        C_BOOL.withName("cAccumBits"),
        C_BOOL.withName("cAccumRedBits"),
        C_BOOL.withName("cAccumGreenBits"),
        C_BOOL.withName("cAccumBlueBits"),
        C_BOOL.withName("cAccumAlphaBits"),
        C_BOOL.withName("cDepthBits"),
        C_BOOL.withName("cStencilBits"),
        C_BOOL.withName("cAuxBuffers"),
        C_BOOL.withName("iLayerType"),
        C_BOOL.withName("bReserved"),
        C_INT.withName("dwLayerMask"),
        C_INT.withName("dwVisibleMask"),
        C_INT.withName("dwDamageMask")
    ).withName("tagPIXELFORMATDESCRIPTOR");
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$struct$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$nSize$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$nSize$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$nSize$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$nSize$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nSize"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$nSize$VH() { return tagPIXELFORMATDESCRIPTOR$nSize$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$nVersion$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$nVersion$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$nVersion$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$nVersion$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nVersion"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$nVersion$VH() { return tagPIXELFORMATDESCRIPTOR$nVersion$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$dwFlags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$dwFlags$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$dwFlags$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$dwFlags$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$dwFlags$VH() { return tagPIXELFORMATDESCRIPTOR$dwFlags$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$iPixelType$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$iPixelType$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$iPixelType$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$iPixelType$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("iPixelType"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$iPixelType$VH() { return tagPIXELFORMATDESCRIPTOR$iPixelType$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cColorBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cColorBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cColorBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cColorBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cColorBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cColorBits$VH() { return tagPIXELFORMATDESCRIPTOR$cColorBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cRedBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cRedBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cRedBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cRedBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cRedBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cRedBits$VH() { return tagPIXELFORMATDESCRIPTOR$cRedBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cRedShift$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cRedShift$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cRedShift$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cRedShift$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cRedShift"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cRedShift$VH() { return tagPIXELFORMATDESCRIPTOR$cRedShift$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cGreenBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cGreenBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cGreenBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cGreenBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cGreenBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cGreenBits$VH() { return tagPIXELFORMATDESCRIPTOR$cGreenBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cGreenShift$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cGreenShift$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cGreenShift$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cGreenShift$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cGreenShift"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cGreenShift$VH() { return tagPIXELFORMATDESCRIPTOR$cGreenShift$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cBlueBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cBlueBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cBlueBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cBlueBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cBlueBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cBlueBits$VH() { return tagPIXELFORMATDESCRIPTOR$cBlueBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cBlueShift$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cBlueShift$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cBlueShift$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cBlueShift$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cBlueShift"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cBlueShift$VH() { return tagPIXELFORMATDESCRIPTOR$cBlueShift$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cAlphaBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cAlphaBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cAlphaBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cAlphaBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cAlphaBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cAlphaBits$VH() { return tagPIXELFORMATDESCRIPTOR$cAlphaBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cAlphaShift$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cAlphaShift$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cAlphaShift$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cAlphaShift$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cAlphaShift"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cAlphaShift$VH() { return tagPIXELFORMATDESCRIPTOR$cAlphaShift$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cAccumBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cAccumBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cAccumBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cAccumBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cAccumBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cAccumBits$VH() { return tagPIXELFORMATDESCRIPTOR$cAccumBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cAccumRedBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cAccumRedBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cAccumRedBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cAccumRedBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cAccumRedBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cAccumRedBits$VH() { return tagPIXELFORMATDESCRIPTOR$cAccumRedBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cAccumGreenBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cAccumGreenBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cAccumGreenBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cAccumGreenBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cAccumGreenBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cAccumGreenBits$VH() { return tagPIXELFORMATDESCRIPTOR$cAccumGreenBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cAccumBlueBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cAccumBlueBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cAccumBlueBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cAccumBlueBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cAccumBlueBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cAccumBlueBits$VH() { return tagPIXELFORMATDESCRIPTOR$cAccumBlueBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cAccumAlphaBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cAccumAlphaBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cAccumAlphaBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cAccumAlphaBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cAccumAlphaBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cAccumAlphaBits$VH() { return tagPIXELFORMATDESCRIPTOR$cAccumAlphaBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cDepthBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cDepthBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cDepthBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cDepthBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cDepthBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cDepthBits$VH() { return tagPIXELFORMATDESCRIPTOR$cDepthBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cStencilBits$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cStencilBits$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cStencilBits$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cStencilBits$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cStencilBits"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cStencilBits$VH() { return tagPIXELFORMATDESCRIPTOR$cStencilBits$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$cAuxBuffers$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$cAuxBuffers$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$cAuxBuffers$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$cAuxBuffers$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cAuxBuffers"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$cAuxBuffers$VH() { return tagPIXELFORMATDESCRIPTOR$cAuxBuffers$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$iLayerType$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$iLayerType$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$iLayerType$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$iLayerType$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("iLayerType"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$iLayerType$VH() { return tagPIXELFORMATDESCRIPTOR$iLayerType$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$bReserved$LAYOUT_ = C_BOOL;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$bReserved$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$bReserved$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$bReserved$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bReserved"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$bReserved$VH() { return tagPIXELFORMATDESCRIPTOR$bReserved$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$dwLayerMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$dwLayerMask$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$dwLayerMask$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$dwLayerMask$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwLayerMask"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$dwLayerMask$VH() { return tagPIXELFORMATDESCRIPTOR$dwLayerMask$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$dwVisibleMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$dwVisibleMask$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$dwVisibleMask$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$dwVisibleMask$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVisibleMask"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$dwVisibleMask$VH() { return tagPIXELFORMATDESCRIPTOR$dwVisibleMask$VH_; }

    static final MemoryLayout tagPIXELFORMATDESCRIPTOR$dwDamageMask$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagPIXELFORMATDESCRIPTOR$dwDamageMask$LAYOUT() { return tagPIXELFORMATDESCRIPTOR$dwDamageMask$LAYOUT_; }

    static final VarHandle tagPIXELFORMATDESCRIPTOR$dwDamageMask$VH_ = tagPIXELFORMATDESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDamageMask"));
    public static java.lang.invoke.VarHandle tagPIXELFORMATDESCRIPTOR$dwDamageMask$VH() { return tagPIXELFORMATDESCRIPTOR$dwDamageMask$VH_; }

    static final FunctionDescriptor AddFontResourceA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddFontResourceA$FUNC() { return AddFontResourceA$FUNC_; }

    static final MethodHandle AddFontResourceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddFontResourceA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        AddFontResourceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddFontResourceA$MH() { return AddFontResourceA$MH_; }

    static final FunctionDescriptor AddFontResourceW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddFontResourceW$FUNC() { return AddFontResourceW$FUNC_; }

    static final MethodHandle AddFontResourceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddFontResourceW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        AddFontResourceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddFontResourceW$MH() { return AddFontResourceW$MH_; }

    static final FunctionDescriptor AnimatePalette$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AnimatePalette$FUNC() { return AnimatePalette$FUNC_; }

    static final MethodHandle AnimatePalette$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AnimatePalette",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        AnimatePalette$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AnimatePalette$MH() { return AnimatePalette$MH_; }

    static final FunctionDescriptor Arc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor Arc$FUNC() { return Arc$FUNC_; }

    static final MethodHandle Arc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Arc",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIIIII)I",
        Arc$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Arc$MH() { return Arc$MH_; }

    static final FunctionDescriptor BitBlt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor BitBlt$FUNC() { return BitBlt$FUNC_; }

    static final MethodHandle BitBlt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BitBlt",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;III)I",
        BitBlt$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle BitBlt$MH() { return BitBlt$MH_; }

    static final FunctionDescriptor CancelDC$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CancelDC$FUNC() { return CancelDC$FUNC_; }

    static final MethodHandle CancelDC$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CancelDC",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CancelDC$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CancelDC$MH() { return CancelDC$MH_; }

    static final FunctionDescriptor Chord$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor Chord$FUNC() { return Chord$FUNC_; }

    static final MethodHandle Chord$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Chord",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIIIII)I",
        Chord$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Chord$MH() { return Chord$MH_; }

    static final FunctionDescriptor ChoosePixelFormat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ChoosePixelFormat$FUNC() { return ChoosePixelFormat$FUNC_; }

    static final MethodHandle ChoosePixelFormat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChoosePixelFormat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ChoosePixelFormat$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ChoosePixelFormat$MH() { return ChoosePixelFormat$MH_; }

    static final FunctionDescriptor CloseMetaFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CloseMetaFile$FUNC() { return CloseMetaFile$FUNC_; }

    static final MethodHandle CloseMetaFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseMetaFile",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CloseMetaFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CloseMetaFile$MH() { return CloseMetaFile$MH_; }

    static final FunctionDescriptor CombineRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CombineRgn$FUNC() { return CombineRgn$FUNC_; }

    static final MethodHandle CombineRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CombineRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CombineRgn$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CombineRgn$MH() { return CombineRgn$MH_; }

    static final FunctionDescriptor CopyMetaFileA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyMetaFileA$FUNC() { return CopyMetaFileA$FUNC_; }

    static final MethodHandle CopyMetaFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyMetaFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CopyMetaFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyMetaFileA$MH() { return CopyMetaFileA$MH_; }

    static final FunctionDescriptor CopyMetaFileW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CopyMetaFileW$FUNC() { return CopyMetaFileW$FUNC_; }

    static final MethodHandle CopyMetaFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyMetaFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CopyMetaFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CopyMetaFileW$MH() { return CopyMetaFileW$MH_; }

    static final FunctionDescriptor CreateBitmap$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateBitmap$FUNC() { return CreateBitmap$FUNC_; }

    static final MethodHandle CreateBitmap$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateBitmap",
        "(IIIILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateBitmap$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateBitmap$MH() { return CreateBitmap$MH_; }

    static final FunctionDescriptor CreateBitmapIndirect$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateBitmapIndirect$FUNC() { return CreateBitmapIndirect$FUNC_; }

    static final MethodHandle CreateBitmapIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateBitmapIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateBitmapIndirect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateBitmapIndirect$MH() { return CreateBitmapIndirect$MH_; }

    static final FunctionDescriptor CreateBrushIndirect$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateBrushIndirect$FUNC() { return CreateBrushIndirect$FUNC_; }

    static final MethodHandle CreateBrushIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateBrushIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateBrushIndirect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateBrushIndirect$MH() { return CreateBrushIndirect$MH_; }

    static final FunctionDescriptor CreateCompatibleBitmap$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateCompatibleBitmap$FUNC() { return CreateCompatibleBitmap$FUNC_; }

    static final MethodHandle CreateCompatibleBitmap$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateCompatibleBitmap",
        "(Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreateCompatibleBitmap$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateCompatibleBitmap$MH() { return CreateCompatibleBitmap$MH_; }

    static final FunctionDescriptor CreateDiscardableBitmap$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDiscardableBitmap$FUNC() { return CreateDiscardableBitmap$FUNC_; }

    static final MethodHandle CreateDiscardableBitmap$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDiscardableBitmap",
        "(Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreateDiscardableBitmap$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDiscardableBitmap$MH() { return CreateDiscardableBitmap$MH_; }

    static final FunctionDescriptor CreateCompatibleDC$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateCompatibleDC$FUNC() { return CreateCompatibleDC$FUNC_; }

    static final MethodHandle CreateCompatibleDC$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateCompatibleDC",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateCompatibleDC$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateCompatibleDC$MH() { return CreateCompatibleDC$MH_; }

    static final FunctionDescriptor CreateDCA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDCA$FUNC() { return CreateDCA$FUNC_; }

    static final MethodHandle CreateDCA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDCA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateDCA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDCA$MH() { return CreateDCA$MH_; }

    static final FunctionDescriptor CreateDCW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDCW$FUNC() { return CreateDCW$FUNC_; }

    static final MethodHandle CreateDCW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDCW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateDCW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDCW$MH() { return CreateDCW$MH_; }

    static final FunctionDescriptor CreateDIBitmap$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDIBitmap$FUNC() { return CreateDIBitmap$FUNC_; }

    static final MethodHandle CreateDIBitmap$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDIBitmap",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateDIBitmap$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDIBitmap$MH() { return CreateDIBitmap$MH_; }

    static final FunctionDescriptor CreateDIBPatternBrush$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDIBPatternBrush$FUNC() { return CreateDIBPatternBrush$FUNC_; }

    static final MethodHandle CreateDIBPatternBrush$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDIBPatternBrush",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateDIBPatternBrush$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDIBPatternBrush$MH() { return CreateDIBPatternBrush$MH_; }

    static final FunctionDescriptor CreateDIBPatternBrushPt$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateDIBPatternBrushPt$FUNC() { return CreateDIBPatternBrushPt$FUNC_; }

    static final MethodHandle CreateDIBPatternBrushPt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDIBPatternBrushPt",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateDIBPatternBrushPt$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateDIBPatternBrushPt$MH() { return CreateDIBPatternBrushPt$MH_; }

    static final FunctionDescriptor CreateEllipticRgn$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateEllipticRgn$FUNC() { return CreateEllipticRgn$FUNC_; }

    static final MethodHandle CreateEllipticRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateEllipticRgn",
        "(IIII)Ljdk/incubator/foreign/MemoryAddress;",
        CreateEllipticRgn$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateEllipticRgn$MH() { return CreateEllipticRgn$MH_; }

    static final FunctionDescriptor CreateEllipticRgnIndirect$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateEllipticRgnIndirect$FUNC() { return CreateEllipticRgnIndirect$FUNC_; }

    static final MethodHandle CreateEllipticRgnIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateEllipticRgnIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateEllipticRgnIndirect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateEllipticRgnIndirect$MH() { return CreateEllipticRgnIndirect$MH_; }

    static final FunctionDescriptor CreateFontIndirectA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFontIndirectA$FUNC() { return CreateFontIndirectA$FUNC_; }

    static final MethodHandle CreateFontIndirectA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFontIndirectA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFontIndirectA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFontIndirectA$MH() { return CreateFontIndirectA$MH_; }

    static final FunctionDescriptor CreateFontIndirectW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFontIndirectW$FUNC() { return CreateFontIndirectW$FUNC_; }

    static final MethodHandle CreateFontIndirectW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFontIndirectW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFontIndirectW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFontIndirectW$MH() { return CreateFontIndirectW$MH_; }

    static final FunctionDescriptor CreateFontA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFontA$FUNC() { return CreateFontA$FUNC_; }

    static final MethodHandle CreateFontA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFontA",
        "(IIIIIIIIIIIIILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFontA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFontA$MH() { return CreateFontA$MH_; }

    static final FunctionDescriptor CreateFontW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateFontW$FUNC() { return CreateFontW$FUNC_; }

    static final MethodHandle CreateFontW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFontW",
        "(IIIIIIIIIIIIILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFontW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateFontW$MH() { return CreateFontW$MH_; }

    static final FunctionDescriptor CreateHatchBrush$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateHatchBrush$FUNC() { return CreateHatchBrush$FUNC_; }

    static final MethodHandle CreateHatchBrush$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateHatchBrush",
        "(II)Ljdk/incubator/foreign/MemoryAddress;",
        CreateHatchBrush$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateHatchBrush$MH() { return CreateHatchBrush$MH_; }

    static final FunctionDescriptor CreateICA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateICA$FUNC() { return CreateICA$FUNC_; }

    static final MethodHandle CreateICA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateICA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateICA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateICA$MH() { return CreateICA$MH_; }

    static final FunctionDescriptor CreateICW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateICW$FUNC() { return CreateICW$FUNC_; }

    static final MethodHandle CreateICW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateICW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateICW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateICW$MH() { return CreateICW$MH_; }

    static final FunctionDescriptor CreateMetaFileA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateMetaFileA$FUNC() { return CreateMetaFileA$FUNC_; }

    static final MethodHandle CreateMetaFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMetaFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateMetaFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateMetaFileA$MH() { return CreateMetaFileA$MH_; }

    static final FunctionDescriptor CreateMetaFileW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateMetaFileW$FUNC() { return CreateMetaFileW$FUNC_; }

    static final MethodHandle CreateMetaFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMetaFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateMetaFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateMetaFileW$MH() { return CreateMetaFileW$MH_; }

    static final FunctionDescriptor CreatePalette$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePalette$FUNC() { return CreatePalette$FUNC_; }

    static final MethodHandle CreatePalette$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePalette",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreatePalette$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePalette$MH() { return CreatePalette$MH_; }

    static final FunctionDescriptor CreatePen$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePen$FUNC() { return CreatePen$FUNC_; }

    static final MethodHandle CreatePen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePen",
        "(III)Ljdk/incubator/foreign/MemoryAddress;",
        CreatePen$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePen$MH() { return CreatePen$MH_; }

    static final FunctionDescriptor CreatePenIndirect$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePenIndirect$FUNC() { return CreatePenIndirect$FUNC_; }

    static final MethodHandle CreatePenIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePenIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreatePenIndirect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePenIndirect$MH() { return CreatePenIndirect$MH_; }

    static final FunctionDescriptor CreatePolyPolygonRgn$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePolyPolygonRgn$FUNC() { return CreatePolyPolygonRgn$FUNC_; }

    static final MethodHandle CreatePolyPolygonRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePolyPolygonRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreatePolyPolygonRgn$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePolyPolygonRgn$MH() { return CreatePolyPolygonRgn$MH_; }

    static final FunctionDescriptor CreatePatternBrush$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreatePatternBrush$FUNC() { return CreatePatternBrush$FUNC_; }

    static final MethodHandle CreatePatternBrush$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePatternBrush",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreatePatternBrush$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreatePatternBrush$MH() { return CreatePatternBrush$MH_; }

    static final FunctionDescriptor CreateRectRgn$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateRectRgn$FUNC() { return CreateRectRgn$FUNC_; }

    static final MethodHandle CreateRectRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateRectRgn",
        "(IIII)Ljdk/incubator/foreign/MemoryAddress;",
        CreateRectRgn$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateRectRgn$MH() { return CreateRectRgn$MH_; }

    static final FunctionDescriptor CreateRectRgnIndirect$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateRectRgnIndirect$FUNC() { return CreateRectRgnIndirect$FUNC_; }

    static final MethodHandle CreateRectRgnIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateRectRgnIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateRectRgnIndirect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateRectRgnIndirect$MH() { return CreateRectRgnIndirect$MH_; }

    static final FunctionDescriptor CreateRoundRectRgn$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateRoundRectRgn$FUNC() { return CreateRoundRectRgn$FUNC_; }

    static final MethodHandle CreateRoundRectRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateRoundRectRgn",
        "(IIIIII)Ljdk/incubator/foreign/MemoryAddress;",
        CreateRoundRectRgn$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateRoundRectRgn$MH() { return CreateRoundRectRgn$MH_; }

    static final FunctionDescriptor CreateScalableFontResourceA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateScalableFontResourceA$FUNC() { return CreateScalableFontResourceA$FUNC_; }

    static final MethodHandle CreateScalableFontResourceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateScalableFontResourceA",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateScalableFontResourceA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateScalableFontResourceA$MH() { return CreateScalableFontResourceA$MH_; }

    static final FunctionDescriptor CreateScalableFontResourceW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateScalableFontResourceW$FUNC() { return CreateScalableFontResourceW$FUNC_; }

    static final MethodHandle CreateScalableFontResourceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateScalableFontResourceW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateScalableFontResourceW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateScalableFontResourceW$MH() { return CreateScalableFontResourceW$MH_; }

    static final FunctionDescriptor CreateSolidBrush$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor CreateSolidBrush$FUNC() { return CreateSolidBrush$FUNC_; }

    static final MethodHandle CreateSolidBrush$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateSolidBrush",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateSolidBrush$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle CreateSolidBrush$MH() { return CreateSolidBrush$MH_; }

    static final FunctionDescriptor DeleteDC$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteDC$FUNC() { return DeleteDC$FUNC_; }

    static final MethodHandle DeleteDC$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteDC",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteDC$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteDC$MH() { return DeleteDC$MH_; }

    static final FunctionDescriptor DeleteMetaFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteMetaFile$FUNC() { return DeleteMetaFile$FUNC_; }

    static final MethodHandle DeleteMetaFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteMetaFile",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteMetaFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteMetaFile$MH() { return DeleteMetaFile$MH_; }

    static final FunctionDescriptor DeleteObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeleteObject$FUNC() { return DeleteObject$FUNC_; }

    static final MethodHandle DeleteObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteObject",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeleteObject$MH() { return DeleteObject$MH_; }

    static final FunctionDescriptor DescribePixelFormat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DescribePixelFormat$FUNC() { return DescribePixelFormat$FUNC_; }

    static final MethodHandle DescribePixelFormat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DescribePixelFormat",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        DescribePixelFormat$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DescribePixelFormat$MH() { return DescribePixelFormat$MH_; }

    static final FunctionDescriptor DeviceCapabilitiesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_SHORT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeviceCapabilitiesA$FUNC() { return DeviceCapabilitiesA$FUNC_; }

    static final MethodHandle DeviceCapabilitiesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeviceCapabilitiesA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DeviceCapabilitiesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeviceCapabilitiesA$MH() { return DeviceCapabilitiesA$MH_; }

    static final FunctionDescriptor DeviceCapabilitiesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_SHORT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DeviceCapabilitiesW$FUNC() { return DeviceCapabilitiesW$FUNC_; }

    static final MethodHandle DeviceCapabilitiesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeviceCapabilitiesW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DeviceCapabilitiesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DeviceCapabilitiesW$MH() { return DeviceCapabilitiesW$MH_; }

    static final FunctionDescriptor DrawEscape$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor DrawEscape$FUNC() { return DrawEscape$FUNC_; }

    static final MethodHandle DrawEscape$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DrawEscape",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        DrawEscape$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle DrawEscape$MH() { return DrawEscape$MH_; }

    static final FunctionDescriptor Ellipse$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor Ellipse$FUNC() { return Ellipse$FUNC_; }

    static final MethodHandle Ellipse$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Ellipse",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        Ellipse$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Ellipse$MH() { return Ellipse$MH_; }

    static final FunctionDescriptor EnumFontFamiliesExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontFamiliesExA$FUNC() { return EnumFontFamiliesExA$FUNC_; }

    static final MethodHandle EnumFontFamiliesExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumFontFamiliesExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        EnumFontFamiliesExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumFontFamiliesExA$MH() { return EnumFontFamiliesExA$MH_; }

    static final FunctionDescriptor EnumFontFamiliesExA$lpProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontFamiliesExA$lpProc$FUNC() { return EnumFontFamiliesExA$lpProc$FUNC_; }

    static final FunctionDescriptor EnumFontFamiliesExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontFamiliesExW$FUNC() { return EnumFontFamiliesExW$FUNC_; }

    static final MethodHandle EnumFontFamiliesExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumFontFamiliesExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        EnumFontFamiliesExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumFontFamiliesExW$MH() { return EnumFontFamiliesExW$MH_; }

    static final FunctionDescriptor EnumFontFamiliesExW$lpProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontFamiliesExW$lpProc$FUNC() { return EnumFontFamiliesExW$lpProc$FUNC_; }

    static final FunctionDescriptor EnumFontFamiliesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontFamiliesA$FUNC() { return EnumFontFamiliesA$FUNC_; }

    static final MethodHandle EnumFontFamiliesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumFontFamiliesA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumFontFamiliesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumFontFamiliesA$MH() { return EnumFontFamiliesA$MH_; }

    static final FunctionDescriptor EnumFontFamiliesA$lpProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontFamiliesA$lpProc$FUNC() { return EnumFontFamiliesA$lpProc$FUNC_; }

    static final FunctionDescriptor EnumFontFamiliesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontFamiliesW$FUNC() { return EnumFontFamiliesW$FUNC_; }

    static final MethodHandle EnumFontFamiliesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumFontFamiliesW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumFontFamiliesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumFontFamiliesW$MH() { return EnumFontFamiliesW$MH_; }

    static final FunctionDescriptor EnumFontFamiliesW$lpProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontFamiliesW$lpProc$FUNC() { return EnumFontFamiliesW$lpProc$FUNC_; }

    static final FunctionDescriptor EnumFontsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontsA$FUNC() { return EnumFontsA$FUNC_; }

    static final MethodHandle EnumFontsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumFontsA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumFontsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumFontsA$MH() { return EnumFontsA$MH_; }

    static final FunctionDescriptor EnumFontsA$lpProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontsA$lpProc$FUNC() { return EnumFontsA$lpProc$FUNC_; }

    static final FunctionDescriptor EnumFontsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontsW$FUNC() { return EnumFontsW$FUNC_; }

    static final MethodHandle EnumFontsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumFontsW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumFontsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumFontsW$MH() { return EnumFontsW$MH_; }

    static final FunctionDescriptor EnumFontsW$lpProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumFontsW$lpProc$FUNC() { return EnumFontsW$lpProc$FUNC_; }

    static final FunctionDescriptor EnumObjects$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumObjects$FUNC() { return EnumObjects$FUNC_; }

    static final MethodHandle EnumObjects$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumObjects",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;J)I",
        EnumObjects$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EnumObjects$MH() { return EnumObjects$MH_; }

    static final FunctionDescriptor EnumObjects$lpFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    public static jdk.incubator.foreign.FunctionDescriptor EnumObjects$lpFunc$FUNC() { return EnumObjects$lpFunc$FUNC_; }

    static final FunctionDescriptor EqualRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor EqualRgn$FUNC() { return EqualRgn$FUNC_; }

    static final MethodHandle EqualRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EqualRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EqualRgn$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle EqualRgn$MH() { return EqualRgn$MH_; }

    static final FunctionDescriptor Escape$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor Escape$FUNC() { return Escape$FUNC_; }

    static final MethodHandle Escape$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Escape",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        Escape$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle Escape$MH() { return Escape$MH_; }

    static final FunctionDescriptor ExtEscape$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ExtEscape$FUNC() { return ExtEscape$FUNC_; }

    static final MethodHandle ExtEscape$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExtEscape",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ExtEscape$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ExtEscape$MH() { return ExtEscape$MH_; }

    static final FunctionDescriptor ExcludeClipRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ExcludeClipRect$FUNC() { return ExcludeClipRect$FUNC_; }

    static final MethodHandle ExcludeClipRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExcludeClipRect",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        ExcludeClipRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ExcludeClipRect$MH() { return ExcludeClipRect$MH_; }

    static final FunctionDescriptor ExtCreateRegion$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor ExtCreateRegion$FUNC() { return ExtCreateRegion$FUNC_; }

    static final MethodHandle ExtCreateRegion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExtCreateRegion",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ExtCreateRegion$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ExtCreateRegion$MH() { return ExtCreateRegion$MH_; }

    static final FunctionDescriptor ExtFloodFill$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor ExtFloodFill$FUNC() { return ExtFloodFill$FUNC_; }

    static final MethodHandle ExtFloodFill$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExtFloodFill",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        ExtFloodFill$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle ExtFloodFill$MH() { return ExtFloodFill$MH_; }

    static final FunctionDescriptor FillRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor FillRgn$FUNC() { return FillRgn$FUNC_; }

    static final MethodHandle FillRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FillRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FillRgn$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FillRgn$MH() { return FillRgn$MH_; }

    static final FunctionDescriptor FloodFill$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FloodFill$FUNC() { return FloodFill$FUNC_; }

    static final MethodHandle FloodFill$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FloodFill",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        FloodFill$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FloodFill$MH() { return FloodFill$MH_; }

    static final FunctionDescriptor FrameRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor FrameRgn$FUNC() { return FrameRgn$FUNC_; }

    static final MethodHandle FrameRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FrameRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        FrameRgn$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle FrameRgn$MH() { return FrameRgn$MH_; }

    static final FunctionDescriptor GetROP2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetROP2$FUNC() { return GetROP2$FUNC_; }

    static final MethodHandle GetROP2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetROP2",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetROP2$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetROP2$MH() { return GetROP2$MH_; }

    static final FunctionDescriptor GetAspectRatioFilterEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetAspectRatioFilterEx$FUNC() { return GetAspectRatioFilterEx$FUNC_; }

    static final MethodHandle GetAspectRatioFilterEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAspectRatioFilterEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetAspectRatioFilterEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetAspectRatioFilterEx$MH() { return GetAspectRatioFilterEx$MH_; }

    static final FunctionDescriptor GetBkColor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetBkColor$FUNC() { return GetBkColor$FUNC_; }

    static final MethodHandle GetBkColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetBkColor",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetBkColor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetBkColor$MH() { return GetBkColor$MH_; }

    static final FunctionDescriptor GetDCBrushColor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDCBrushColor$FUNC() { return GetDCBrushColor$FUNC_; }

    static final MethodHandle GetDCBrushColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDCBrushColor",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDCBrushColor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDCBrushColor$MH() { return GetDCBrushColor$MH_; }

    static final FunctionDescriptor GetDCPenColor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDCPenColor$FUNC() { return GetDCPenColor$FUNC_; }

    static final MethodHandle GetDCPenColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDCPenColor",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDCPenColor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDCPenColor$MH() { return GetDCPenColor$MH_; }

    static final FunctionDescriptor GetBkMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetBkMode$FUNC() { return GetBkMode$FUNC_; }

    static final MethodHandle GetBkMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetBkMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetBkMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetBkMode$MH() { return GetBkMode$MH_; }

    static final FunctionDescriptor GetBitmapBits$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetBitmapBits$FUNC() { return GetBitmapBits$FUNC_; }

    static final MethodHandle GetBitmapBits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetBitmapBits",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetBitmapBits$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetBitmapBits$MH() { return GetBitmapBits$MH_; }

    static final FunctionDescriptor GetBitmapDimensionEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetBitmapDimensionEx$FUNC() { return GetBitmapDimensionEx$FUNC_; }

    static final MethodHandle GetBitmapDimensionEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetBitmapDimensionEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetBitmapDimensionEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetBitmapDimensionEx$MH() { return GetBitmapDimensionEx$MH_; }

    static final FunctionDescriptor GetBoundsRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetBoundsRect$FUNC() { return GetBoundsRect$FUNC_; }

    static final MethodHandle GetBoundsRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetBoundsRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetBoundsRect$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetBoundsRect$MH() { return GetBoundsRect$MH_; }

    static final FunctionDescriptor GetBrushOrgEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetBrushOrgEx$FUNC() { return GetBrushOrgEx$FUNC_; }

    static final MethodHandle GetBrushOrgEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetBrushOrgEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetBrushOrgEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetBrushOrgEx$MH() { return GetBrushOrgEx$MH_; }

    static final FunctionDescriptor GetCharWidthA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharWidthA$FUNC() { return GetCharWidthA$FUNC_; }

    static final MethodHandle GetCharWidthA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharWidthA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharWidthA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharWidthA$MH() { return GetCharWidthA$MH_; }

    static final FunctionDescriptor GetCharWidthW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharWidthW$FUNC() { return GetCharWidthW$FUNC_; }

    static final MethodHandle GetCharWidthW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharWidthW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharWidthW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharWidthW$MH() { return GetCharWidthW$MH_; }

    static final FunctionDescriptor GetCharWidth32A$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharWidth32A$FUNC() { return GetCharWidth32A$FUNC_; }

    static final MethodHandle GetCharWidth32A$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharWidth32A",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharWidth32A$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharWidth32A$MH() { return GetCharWidth32A$MH_; }

    static final FunctionDescriptor GetCharWidth32W$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharWidth32W$FUNC() { return GetCharWidth32W$FUNC_; }

    static final MethodHandle GetCharWidth32W$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharWidth32W",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharWidth32W$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharWidth32W$MH() { return GetCharWidth32W$MH_; }

    static final FunctionDescriptor GetCharWidthFloatA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharWidthFloatA$FUNC() { return GetCharWidthFloatA$FUNC_; }

    static final MethodHandle GetCharWidthFloatA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharWidthFloatA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharWidthFloatA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharWidthFloatA$MH() { return GetCharWidthFloatA$MH_; }

    static final FunctionDescriptor GetCharWidthFloatW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharWidthFloatW$FUNC() { return GetCharWidthFloatW$FUNC_; }

    static final MethodHandle GetCharWidthFloatW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharWidthFloatW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharWidthFloatW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharWidthFloatW$MH() { return GetCharWidthFloatW$MH_; }

    static final FunctionDescriptor GetCharABCWidthsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharABCWidthsA$FUNC() { return GetCharABCWidthsA$FUNC_; }

    static final MethodHandle GetCharABCWidthsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharABCWidthsA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharABCWidthsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharABCWidthsA$MH() { return GetCharABCWidthsA$MH_; }

    static final FunctionDescriptor GetCharABCWidthsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharABCWidthsW$FUNC() { return GetCharABCWidthsW$FUNC_; }

    static final MethodHandle GetCharABCWidthsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharABCWidthsW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharABCWidthsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharABCWidthsW$MH() { return GetCharABCWidthsW$MH_; }

    static final FunctionDescriptor GetCharABCWidthsFloatA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharABCWidthsFloatA$FUNC() { return GetCharABCWidthsFloatA$FUNC_; }

    static final MethodHandle GetCharABCWidthsFloatA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharABCWidthsFloatA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharABCWidthsFloatA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharABCWidthsFloatA$MH() { return GetCharABCWidthsFloatA$MH_; }

    static final FunctionDescriptor GetCharABCWidthsFloatW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharABCWidthsFloatW$FUNC() { return GetCharABCWidthsFloatW$FUNC_; }

    static final MethodHandle GetCharABCWidthsFloatW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharABCWidthsFloatW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharABCWidthsFloatW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharABCWidthsFloatW$MH() { return GetCharABCWidthsFloatW$MH_; }

    static final FunctionDescriptor GetClipBox$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClipBox$FUNC() { return GetClipBox$FUNC_; }

    static final MethodHandle GetClipBox$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClipBox",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetClipBox$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClipBox$MH() { return GetClipBox$MH_; }

    static final FunctionDescriptor GetClipRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetClipRgn$FUNC() { return GetClipRgn$FUNC_; }

    static final MethodHandle GetClipRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClipRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetClipRgn$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetClipRgn$MH() { return GetClipRgn$MH_; }

    static final FunctionDescriptor GetMetaRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetMetaRgn$FUNC() { return GetMetaRgn$FUNC_; }

    static final MethodHandle GetMetaRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMetaRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetMetaRgn$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMetaRgn$MH() { return GetMetaRgn$MH_; }

    static final FunctionDescriptor GetCurrentObject$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentObject$FUNC() { return GetCurrentObject$FUNC_; }

    static final MethodHandle GetCurrentObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentObject",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        GetCurrentObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentObject$MH() { return GetCurrentObject$MH_; }

    static final FunctionDescriptor GetCurrentPositionEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCurrentPositionEx$FUNC() { return GetCurrentPositionEx$FUNC_; }

    static final MethodHandle GetCurrentPositionEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentPositionEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCurrentPositionEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCurrentPositionEx$MH() { return GetCurrentPositionEx$MH_; }

    static final FunctionDescriptor GetDeviceCaps$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDeviceCaps$FUNC() { return GetDeviceCaps$FUNC_; }

    static final MethodHandle GetDeviceCaps$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDeviceCaps",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetDeviceCaps$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDeviceCaps$MH() { return GetDeviceCaps$MH_; }

    static final FunctionDescriptor GetDIBits$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetDIBits$FUNC() { return GetDIBits$FUNC_; }

    static final MethodHandle GetDIBits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDIBits",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetDIBits$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetDIBits$MH() { return GetDIBits$MH_; }

    static final FunctionDescriptor GetFontData$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFontData$FUNC() { return GetFontData$FUNC_; }

    static final MethodHandle GetFontData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFontData",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        GetFontData$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFontData$MH() { return GetFontData$MH_; }

    static final FunctionDescriptor GetGlyphOutlineA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGlyphOutlineA$FUNC() { return GetGlyphOutlineA$FUNC_; }

    static final MethodHandle GetGlyphOutlineA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGlyphOutlineA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetGlyphOutlineA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGlyphOutlineA$MH() { return GetGlyphOutlineA$MH_; }

    static final FunctionDescriptor GetGlyphOutlineW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGlyphOutlineW$FUNC() { return GetGlyphOutlineW$FUNC_; }

    static final MethodHandle GetGlyphOutlineW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGlyphOutlineW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetGlyphOutlineW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGlyphOutlineW$MH() { return GetGlyphOutlineW$MH_; }

    static final FunctionDescriptor GetGraphicsMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGraphicsMode$FUNC() { return GetGraphicsMode$FUNC_; }

    static final MethodHandle GetGraphicsMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGraphicsMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetGraphicsMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGraphicsMode$MH() { return GetGraphicsMode$MH_; }

    static final FunctionDescriptor GetMapMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetMapMode$FUNC() { return GetMapMode$FUNC_; }

    static final MethodHandle GetMapMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMapMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetMapMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMapMode$MH() { return GetMapMode$MH_; }

    static final FunctionDescriptor GetMetaFileBitsEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetMetaFileBitsEx$FUNC() { return GetMetaFileBitsEx$FUNC_; }

    static final MethodHandle GetMetaFileBitsEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMetaFileBitsEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetMetaFileBitsEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMetaFileBitsEx$MH() { return GetMetaFileBitsEx$MH_; }

    static final FunctionDescriptor GetMetaFileA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetMetaFileA$FUNC() { return GetMetaFileA$FUNC_; }

    static final MethodHandle GetMetaFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMetaFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetMetaFileA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMetaFileA$MH() { return GetMetaFileA$MH_; }

    static final FunctionDescriptor GetMetaFileW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetMetaFileW$FUNC() { return GetMetaFileW$FUNC_; }

    static final MethodHandle GetMetaFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMetaFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetMetaFileW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetMetaFileW$MH() { return GetMetaFileW$MH_; }

    static final FunctionDescriptor GetNearestColor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNearestColor$FUNC() { return GetNearestColor$FUNC_; }

    static final MethodHandle GetNearestColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNearestColor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetNearestColor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNearestColor$MH() { return GetNearestColor$MH_; }

    static final FunctionDescriptor GetNearestPaletteIndex$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetNearestPaletteIndex$FUNC() { return GetNearestPaletteIndex$FUNC_; }

    static final MethodHandle GetNearestPaletteIndex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNearestPaletteIndex",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetNearestPaletteIndex$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetNearestPaletteIndex$MH() { return GetNearestPaletteIndex$MH_; }

    static final FunctionDescriptor GetObjectType$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetObjectType$FUNC() { return GetObjectType$FUNC_; }

    static final MethodHandle GetObjectType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetObjectType",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetObjectType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetObjectType$MH() { return GetObjectType$MH_; }

    static final FunctionDescriptor GetOutlineTextMetricsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetOutlineTextMetricsA$FUNC() { return GetOutlineTextMetricsA$FUNC_; }

    static final MethodHandle GetOutlineTextMetricsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOutlineTextMetricsA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetOutlineTextMetricsA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetOutlineTextMetricsA$MH() { return GetOutlineTextMetricsA$MH_; }

    static final FunctionDescriptor GetOutlineTextMetricsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetOutlineTextMetricsW$FUNC() { return GetOutlineTextMetricsW$FUNC_; }

    static final MethodHandle GetOutlineTextMetricsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOutlineTextMetricsW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetOutlineTextMetricsW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetOutlineTextMetricsW$MH() { return GetOutlineTextMetricsW$MH_; }

    static final FunctionDescriptor GetPaletteEntries$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPaletteEntries$FUNC() { return GetPaletteEntries$FUNC_; }

    static final MethodHandle GetPaletteEntries$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPaletteEntries",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetPaletteEntries$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPaletteEntries$MH() { return GetPaletteEntries$MH_; }

    static final FunctionDescriptor GetPixel$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPixel$FUNC() { return GetPixel$FUNC_; }

    static final MethodHandle GetPixel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPixel",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        GetPixel$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPixel$MH() { return GetPixel$MH_; }

    static final FunctionDescriptor GetPixelFormat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPixelFormat$FUNC() { return GetPixelFormat$FUNC_; }

    static final MethodHandle GetPixelFormat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPixelFormat",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPixelFormat$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPixelFormat$MH() { return GetPixelFormat$MH_; }

    static final FunctionDescriptor GetPolyFillMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetPolyFillMode$FUNC() { return GetPolyFillMode$FUNC_; }

    static final MethodHandle GetPolyFillMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPolyFillMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPolyFillMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetPolyFillMode$MH() { return GetPolyFillMode$MH_; }

    static final FunctionDescriptor GetRasterizerCaps$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetRasterizerCaps$FUNC() { return GetRasterizerCaps$FUNC_; }

    static final MethodHandle GetRasterizerCaps$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRasterizerCaps",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetRasterizerCaps$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetRasterizerCaps$MH() { return GetRasterizerCaps$MH_; }

    static final FunctionDescriptor GetRandomRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetRandomRgn$FUNC() { return GetRandomRgn$FUNC_; }

    static final MethodHandle GetRandomRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRandomRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetRandomRgn$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetRandomRgn$MH() { return GetRandomRgn$MH_; }

    static final FunctionDescriptor GetRegionData$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetRegionData$FUNC() { return GetRegionData$FUNC_; }

    static final MethodHandle GetRegionData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRegionData",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetRegionData$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetRegionData$MH() { return GetRegionData$MH_; }

    static final FunctionDescriptor GetRgnBox$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetRgnBox$FUNC() { return GetRgnBox$FUNC_; }

    static final MethodHandle GetRgnBox$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRgnBox",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetRgnBox$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetRgnBox$MH() { return GetRgnBox$MH_; }

    static final FunctionDescriptor GetStockObject$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetStockObject$FUNC() { return GetStockObject$FUNC_; }

    static final MethodHandle GetStockObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStockObject",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        GetStockObject$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetStockObject$MH() { return GetStockObject$MH_; }

    static final FunctionDescriptor GetStretchBltMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetStretchBltMode$FUNC() { return GetStretchBltMode$FUNC_; }

    static final MethodHandle GetStretchBltMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStretchBltMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetStretchBltMode$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetStretchBltMode$MH() { return GetStretchBltMode$MH_; }

    static final FunctionDescriptor GetSystemPaletteEntries$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemPaletteEntries$FUNC() { return GetSystemPaletteEntries$FUNC_; }

    static final MethodHandle GetSystemPaletteEntries$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemPaletteEntries",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetSystemPaletteEntries$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemPaletteEntries$MH() { return GetSystemPaletteEntries$MH_; }

    static final FunctionDescriptor GetSystemPaletteUse$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetSystemPaletteUse$FUNC() { return GetSystemPaletteUse$FUNC_; }

    static final MethodHandle GetSystemPaletteUse$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemPaletteUse",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSystemPaletteUse$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetSystemPaletteUse$MH() { return GetSystemPaletteUse$MH_; }

    static final FunctionDescriptor GetTextCharacterExtra$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextCharacterExtra$FUNC() { return GetTextCharacterExtra$FUNC_; }

    static final MethodHandle GetTextCharacterExtra$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextCharacterExtra",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextCharacterExtra$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextCharacterExtra$MH() { return GetTextCharacterExtra$MH_; }

    static final FunctionDescriptor GetTextAlign$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextAlign$FUNC() { return GetTextAlign$FUNC_; }

    static final MethodHandle GetTextAlign$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextAlign",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextAlign$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextAlign$MH() { return GetTextAlign$MH_; }

    static final FunctionDescriptor GetTextColor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextColor$FUNC() { return GetTextColor$FUNC_; }

    static final MethodHandle GetTextColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextColor",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextColor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextColor$MH() { return GetTextColor$MH_; }

    static final FunctionDescriptor GetTextExtentPointA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextExtentPointA$FUNC() { return GetTextExtentPointA$FUNC_; }

    static final MethodHandle GetTextExtentPointA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentPointA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentPointA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextExtentPointA$MH() { return GetTextExtentPointA$MH_; }

    static final FunctionDescriptor GetTextExtentPointW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextExtentPointW$FUNC() { return GetTextExtentPointW$FUNC_; }

    static final MethodHandle GetTextExtentPointW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentPointW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentPointW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextExtentPointW$MH() { return GetTextExtentPointW$MH_; }

    static final FunctionDescriptor GetTextExtentPoint32A$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextExtentPoint32A$FUNC() { return GetTextExtentPoint32A$FUNC_; }

    static final MethodHandle GetTextExtentPoint32A$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentPoint32A",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentPoint32A$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextExtentPoint32A$MH() { return GetTextExtentPoint32A$MH_; }

    static final FunctionDescriptor GetTextExtentPoint32W$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextExtentPoint32W$FUNC() { return GetTextExtentPoint32W$FUNC_; }

    static final MethodHandle GetTextExtentPoint32W$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentPoint32W",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentPoint32W$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextExtentPoint32W$MH() { return GetTextExtentPoint32W$MH_; }

    static final FunctionDescriptor GetTextExtentExPointA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextExtentExPointA$FUNC() { return GetTextExtentExPointA$FUNC_; }

    static final MethodHandle GetTextExtentExPointA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentExPointA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentExPointA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextExtentExPointA$MH() { return GetTextExtentExPointA$MH_; }

    static final FunctionDescriptor GetTextExtentExPointW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextExtentExPointW$FUNC() { return GetTextExtentExPointW$FUNC_; }

    static final MethodHandle GetTextExtentExPointW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentExPointW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentExPointW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextExtentExPointW$MH() { return GetTextExtentExPointW$MH_; }

    static final FunctionDescriptor GetTextCharset$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextCharset$FUNC() { return GetTextCharset$FUNC_; }

    static final MethodHandle GetTextCharset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextCharset",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextCharset$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextCharset$MH() { return GetTextCharset$MH_; }

    static final FunctionDescriptor GetTextCharsetInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextCharsetInfo$FUNC() { return GetTextCharsetInfo$FUNC_; }

    static final MethodHandle GetTextCharsetInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextCharsetInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetTextCharsetInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextCharsetInfo$MH() { return GetTextCharsetInfo$MH_; }

    static final FunctionDescriptor TranslateCharsetInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor TranslateCharsetInfo$FUNC() { return TranslateCharsetInfo$FUNC_; }

    static final MethodHandle TranslateCharsetInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TranslateCharsetInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        TranslateCharsetInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle TranslateCharsetInfo$MH() { return TranslateCharsetInfo$MH_; }

    static final FunctionDescriptor GetFontLanguageInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFontLanguageInfo$FUNC() { return GetFontLanguageInfo$FUNC_; }

    static final MethodHandle GetFontLanguageInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFontLanguageInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFontLanguageInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFontLanguageInfo$MH() { return GetFontLanguageInfo$MH_; }

    static final FunctionDescriptor GetCharacterPlacementA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharacterPlacementA$FUNC() { return GetCharacterPlacementA$FUNC_; }

    static final MethodHandle GetCharacterPlacementA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharacterPlacementA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        GetCharacterPlacementA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharacterPlacementA$MH() { return GetCharacterPlacementA$MH_; }

    static final FunctionDescriptor GetCharacterPlacementW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharacterPlacementW$FUNC() { return GetCharacterPlacementW$FUNC_; }

    static final MethodHandle GetCharacterPlacementW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharacterPlacementW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        GetCharacterPlacementW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharacterPlacementW$MH() { return GetCharacterPlacementW$MH_; }

    static final MemoryLayout tagWCRANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("wcLow"),
        C_SHORT.withName("cGlyphs")
    ).withName("tagWCRANGE");
    public static jdk.incubator.foreign.MemoryLayout tagWCRANGE$struct$LAYOUT() { return tagWCRANGE$struct$LAYOUT_; }

    static final MemoryLayout tagWCRANGE$wcLow$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagWCRANGE$wcLow$LAYOUT() { return tagWCRANGE$wcLow$LAYOUT_; }

    static final VarHandle tagWCRANGE$wcLow$VH_ = tagWCRANGE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wcLow"));
    public static java.lang.invoke.VarHandle tagWCRANGE$wcLow$VH() { return tagWCRANGE$wcLow$VH_; }

    static final MemoryLayout tagWCRANGE$cGlyphs$LAYOUT_ = C_SHORT;
    public static jdk.incubator.foreign.MemoryLayout tagWCRANGE$cGlyphs$LAYOUT() { return tagWCRANGE$cGlyphs$LAYOUT_; }

    static final VarHandle tagWCRANGE$cGlyphs$VH_ = tagWCRANGE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cGlyphs"));
    public static java.lang.invoke.VarHandle tagWCRANGE$cGlyphs$VH() { return tagWCRANGE$cGlyphs$VH_; }

    static final MemoryLayout tagGLYPHSET$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbThis"),
        C_INT.withName("flAccel"),
        C_INT.withName("cGlyphsSupported"),
        C_INT.withName("cRanges"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_SHORT.withName("wcLow"),
            C_SHORT.withName("cGlyphs")
        ).withName("tagWCRANGE")).withName("ranges")
    ).withName("tagGLYPHSET");
    public static jdk.incubator.foreign.MemoryLayout tagGLYPHSET$struct$LAYOUT() { return tagGLYPHSET$struct$LAYOUT_; }

    static final MemoryLayout tagGLYPHSET$cbThis$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGLYPHSET$cbThis$LAYOUT() { return tagGLYPHSET$cbThis$LAYOUT_; }

    static final VarHandle tagGLYPHSET$cbThis$VH_ = tagGLYPHSET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbThis"));
    public static java.lang.invoke.VarHandle tagGLYPHSET$cbThis$VH() { return tagGLYPHSET$cbThis$VH_; }

    static final MemoryLayout tagGLYPHSET$flAccel$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGLYPHSET$flAccel$LAYOUT() { return tagGLYPHSET$flAccel$LAYOUT_; }

    static final VarHandle tagGLYPHSET$flAccel$VH_ = tagGLYPHSET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("flAccel"));
    public static java.lang.invoke.VarHandle tagGLYPHSET$flAccel$VH() { return tagGLYPHSET$flAccel$VH_; }

    static final MemoryLayout tagGLYPHSET$cGlyphsSupported$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGLYPHSET$cGlyphsSupported$LAYOUT() { return tagGLYPHSET$cGlyphsSupported$LAYOUT_; }

    static final VarHandle tagGLYPHSET$cGlyphsSupported$VH_ = tagGLYPHSET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cGlyphsSupported"));
    public static java.lang.invoke.VarHandle tagGLYPHSET$cGlyphsSupported$VH() { return tagGLYPHSET$cGlyphsSupported$VH_; }

    static final MemoryLayout tagGLYPHSET$cRanges$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagGLYPHSET$cRanges$LAYOUT() { return tagGLYPHSET$cRanges$LAYOUT_; }

    static final VarHandle tagGLYPHSET$cRanges$VH_ = tagGLYPHSET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cRanges"));
    public static java.lang.invoke.VarHandle tagGLYPHSET$cRanges$VH() { return tagGLYPHSET$cRanges$VH_; }

    static final FunctionDescriptor GetFontUnicodeRanges$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetFontUnicodeRanges$FUNC() { return GetFontUnicodeRanges$FUNC_; }

    static final MethodHandle GetFontUnicodeRanges$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFontUnicodeRanges",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFontUnicodeRanges$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetFontUnicodeRanges$MH() { return GetFontUnicodeRanges$MH_; }

    static final FunctionDescriptor GetGlyphIndicesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGlyphIndicesA$FUNC() { return GetGlyphIndicesA$FUNC_; }

    static final MethodHandle GetGlyphIndicesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGlyphIndicesA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetGlyphIndicesA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGlyphIndicesA$MH() { return GetGlyphIndicesA$MH_; }

    static final FunctionDescriptor GetGlyphIndicesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetGlyphIndicesW$FUNC() { return GetGlyphIndicesW$FUNC_; }

    static final MethodHandle GetGlyphIndicesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGlyphIndicesW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetGlyphIndicesW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetGlyphIndicesW$MH() { return GetGlyphIndicesW$MH_; }

    static final FunctionDescriptor GetTextExtentPointI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextExtentPointI$FUNC() { return GetTextExtentPointI$FUNC_; }

    static final MethodHandle GetTextExtentPointI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentPointI",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentPointI$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextExtentPointI$MH() { return GetTextExtentPointI$MH_; }

    static final FunctionDescriptor GetTextExtentExPointI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetTextExtentExPointI$FUNC() { return GetTextExtentExPointI$FUNC_; }

    static final MethodHandle GetTextExtentExPointI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentExPointI",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentExPointI$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetTextExtentExPointI$MH() { return GetTextExtentExPointI$MH_; }

    static final FunctionDescriptor GetCharWidthI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharWidthI$FUNC() { return GetCharWidthI$FUNC_; }

    static final MethodHandle GetCharWidthI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharWidthI",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCharWidthI$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharWidthI$MH() { return GetCharWidthI$MH_; }

    static final FunctionDescriptor GetCharABCWidthsI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor GetCharABCWidthsI$FUNC() { return GetCharABCWidthsI$FUNC_; }

    static final MethodHandle GetCharABCWidthsI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharABCWidthsI",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCharABCWidthsI$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle GetCharABCWidthsI$MH() { return GetCharABCWidthsI$MH_; }

    static final MemoryLayout tagDESIGNVECTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dvReserved"),
        C_INT.withName("dvNumAxes"),
        MemoryLayout.ofSequence(16, C_INT).withName("dvValues")
    ).withName("tagDESIGNVECTOR");
    public static jdk.incubator.foreign.MemoryLayout tagDESIGNVECTOR$struct$LAYOUT() { return tagDESIGNVECTOR$struct$LAYOUT_; }

    static final MemoryLayout tagDESIGNVECTOR$dvReserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagDESIGNVECTOR$dvReserved$LAYOUT() { return tagDESIGNVECTOR$dvReserved$LAYOUT_; }

    static final VarHandle tagDESIGNVECTOR$dvReserved$VH_ = tagDESIGNVECTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dvReserved"));
    public static java.lang.invoke.VarHandle tagDESIGNVECTOR$dvReserved$VH() { return tagDESIGNVECTOR$dvReserved$VH_; }

    static final MemoryLayout tagDESIGNVECTOR$dvNumAxes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagDESIGNVECTOR$dvNumAxes$LAYOUT() { return tagDESIGNVECTOR$dvNumAxes$LAYOUT_; }

    static final VarHandle tagDESIGNVECTOR$dvNumAxes$VH_ = tagDESIGNVECTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dvNumAxes"));
    public static java.lang.invoke.VarHandle tagDESIGNVECTOR$dvNumAxes$VH() { return tagDESIGNVECTOR$dvNumAxes$VH_; }

    static final FunctionDescriptor AddFontResourceExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddFontResourceExA$FUNC() { return AddFontResourceExA$FUNC_; }

    static final MethodHandle AddFontResourceExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddFontResourceExA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        AddFontResourceExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddFontResourceExA$MH() { return AddFontResourceExA$MH_; }

    static final FunctionDescriptor AddFontResourceExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddFontResourceExW$FUNC() { return AddFontResourceExW$FUNC_; }

    static final MethodHandle AddFontResourceExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddFontResourceExW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        AddFontResourceExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddFontResourceExW$MH() { return AddFontResourceExW$MH_; }

    static final FunctionDescriptor RemoveFontResourceExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveFontResourceExA$FUNC() { return RemoveFontResourceExA$FUNC_; }

    static final MethodHandle RemoveFontResourceExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveFontResourceExA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RemoveFontResourceExA$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveFontResourceExA$MH() { return RemoveFontResourceExA$MH_; }

    static final FunctionDescriptor RemoveFontResourceExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveFontResourceExW$FUNC() { return RemoveFontResourceExW$FUNC_; }

    static final MethodHandle RemoveFontResourceExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveFontResourceExW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RemoveFontResourceExW$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveFontResourceExW$MH() { return RemoveFontResourceExW$MH_; }

    static final FunctionDescriptor AddFontMemResourceEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor AddFontMemResourceEx$FUNC() { return AddFontMemResourceEx$FUNC_; }

    static final MethodHandle AddFontMemResourceEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddFontMemResourceEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        AddFontMemResourceEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle AddFontMemResourceEx$MH() { return AddFontMemResourceEx$MH_; }

    static final FunctionDescriptor RemoveFontMemResourceEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor RemoveFontMemResourceEx$FUNC() { return RemoveFontMemResourceEx$FUNC_; }

    static final MethodHandle RemoveFontMemResourceEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveFontMemResourceEx",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveFontMemResourceEx$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle RemoveFontMemResourceEx$MH() { return RemoveFontMemResourceEx$MH_; }

    static final MemoryLayout tagAXISINFOA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("axMinValue"),
        C_INT.withName("axMaxValue"),
        MemoryLayout.ofSequence(16, C_BOOL).withName("axAxisName")
    ).withName("tagAXISINFOA");
    public static jdk.incubator.foreign.MemoryLayout tagAXISINFOA$struct$LAYOUT() { return tagAXISINFOA$struct$LAYOUT_; }

    static final MemoryLayout tagAXISINFOA$axMinValue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagAXISINFOA$axMinValue$LAYOUT() { return tagAXISINFOA$axMinValue$LAYOUT_; }

    static final VarHandle tagAXISINFOA$axMinValue$VH_ = tagAXISINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axMinValue"));
    public static java.lang.invoke.VarHandle tagAXISINFOA$axMinValue$VH() { return tagAXISINFOA$axMinValue$VH_; }

    static final MemoryLayout tagAXISINFOA$axMaxValue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagAXISINFOA$axMaxValue$LAYOUT() { return tagAXISINFOA$axMaxValue$LAYOUT_; }

    static final VarHandle tagAXISINFOA$axMaxValue$VH_ = tagAXISINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axMaxValue"));
    public static java.lang.invoke.VarHandle tagAXISINFOA$axMaxValue$VH() { return tagAXISINFOA$axMaxValue$VH_; }

    static final MemoryLayout tagAXISINFOW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("axMinValue"),
        C_INT.withName("axMaxValue"),
        MemoryLayout.ofSequence(16, C_SHORT).withName("axAxisName")
    ).withName("tagAXISINFOW");
    public static jdk.incubator.foreign.MemoryLayout tagAXISINFOW$struct$LAYOUT() { return tagAXISINFOW$struct$LAYOUT_; }

    static final MemoryLayout tagAXISINFOW$axMinValue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagAXISINFOW$axMinValue$LAYOUT() { return tagAXISINFOW$axMinValue$LAYOUT_; }

    static final VarHandle tagAXISINFOW$axMinValue$VH_ = tagAXISINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axMinValue"));
    public static java.lang.invoke.VarHandle tagAXISINFOW$axMinValue$VH() { return tagAXISINFOW$axMinValue$VH_; }

    static final MemoryLayout tagAXISINFOW$axMaxValue$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagAXISINFOW$axMaxValue$LAYOUT() { return tagAXISINFOW$axMaxValue$LAYOUT_; }

    static final VarHandle tagAXISINFOW$axMaxValue$VH_ = tagAXISINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axMaxValue"));
    public static java.lang.invoke.VarHandle tagAXISINFOW$axMaxValue$VH() { return tagAXISINFOW$axMaxValue$VH_; }

    static final MemoryLayout tagAXESLISTA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("axlReserved"),
        C_INT.withName("axlNumAxes"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_INT.withName("axMinValue"),
            C_INT.withName("axMaxValue"),
            MemoryLayout.ofSequence(16, C_BOOL).withName("axAxisName")
        ).withName("tagAXISINFOA")).withName("axlAxisInfo")
    ).withName("tagAXESLISTA");
    public static jdk.incubator.foreign.MemoryLayout tagAXESLISTA$struct$LAYOUT() { return tagAXESLISTA$struct$LAYOUT_; }

    static final MemoryLayout tagAXESLISTA$axlReserved$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagAXESLISTA$axlReserved$LAYOUT() { return tagAXESLISTA$axlReserved$LAYOUT_; }

    static final VarHandle tagAXESLISTA$axlReserved$VH_ = tagAXESLISTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axlReserved"));
    public static java.lang.invoke.VarHandle tagAXESLISTA$axlReserved$VH() { return tagAXESLISTA$axlReserved$VH_; }

    static final MemoryLayout tagAXESLISTA$axlNumAxes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout tagAXESLISTA$axlNumAxes$LAYOUT() { return tagAXESLISTA$axlNumAxes$LAYOUT_; }

    static final VarHandle tagAXESLISTA$axlNumAxes$VH_ = tagAXESLISTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axlNumAxes"));
    public static java.lang.invoke.VarHandle tagAXESLISTA$axlNumAxes$VH() { return tagAXESLISTA$axlNumAxes$VH_; }

}

